
STemWin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d40  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005714  08014f00  08014f00  00024f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a614  0801a614  0002a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a61c  0801a61c  0002a61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a620  0801a620  0002a620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000000  0801a624  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300d4  2**0
                  CONTENTS
  8 .bss          000357e0  200000d4  200000d4  000300d4  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  200358b4  200358b4  000300d4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 11 .debug_line   0002a2a5  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000531e9  00000000  00000000  0005a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e00  00000000  00000000  000ad592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ee0  00000000  00000000  000b5398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001457cf  00000000  00000000  000b7278  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002a80  00000000  00000000  001fca48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00018dbc  00000000  00000000  001ff4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003e0fb  00000000  00000000  00218284  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0025637f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c98  00000000  00000000  00256468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014ee8 	.word	0x08014ee8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000d8 	.word	0x200000d8
 80001fc:	08014ee8 	.word	0x08014ee8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000506:	e003      	b.n	8000510 <LoopCopyDataInit>

08000508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800050c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800050e:	3104      	adds	r1, #4

08000510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000518:	d3f6      	bcc.n	8000508 <CopyDataInit>
  ldr  r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800051c:	e002      	b.n	8000524 <LoopFillZerobss>

0800051e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800051e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000520:	f842 3b04 	str.w	r3, [r2], #4

08000524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000528:	d3f9      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052a:	f001 f9a3 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f014 fc7b 	bl	8014e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f000 f8a5 	bl	8000680 <main>
  bx  lr    
 8000536:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000538:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800053c:	0801a624 	.word	0x0801a624
  ldr  r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000544:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 8000548:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 800054c:	200358b4 	.word	0x200358b4

08000550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <k_BspInit>:
  * @brief  Initializes LEDs, SDRAM, touch screen, CRC and SRAM.
  * @param  None 
  * @retval None
  */
void k_BspInit(void)
{
 8000554:	b507      	push	{r0, r1, r2, lr}
  /* Initialize the NOR */
  BSP_QSPI_Init();
 8000556:	f000 fef9 	bl	800134c <BSP_QSPI_Init>
  BSP_QSPI_EnableMemoryMappedMode();  
 800055a:	f000 fe6f 	bl	800123c <BSP_QSPI_EnableMemoryMappedMode>
  
  
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800055e:	f001 f8b3 	bl	80016c8 <BSP_SDRAM_Init>
  
  HAL_Delay(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f001 f9d8 	bl	8001918 <HAL_Delay>
  
  /* Initialize the Touch screen */
  BSP_TS_Init(800, 480);
 8000568:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800056c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000570:	f001 f8e8 	bl	8001744 <BSP_TS_Init>
    
  /* Enable CRC to Unlock GUI */
 __HAL_RCC_CRC_CLK_ENABLE();
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <k_BspInit+0x54>)
 8000576:	2100      	movs	r1, #0
 8000578:	9100      	str	r1, [sp, #0]
 800057a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000580:	631a      	str	r2, [r3, #48]	; 0x30
 8000582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000584:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	9a00      	ldr	r2, [sp, #0]
  
 /* Enable Back up SRAM */
__HAL_RCC_BKPSRAM_CLK_ENABLE();
 800058c:	9101      	str	r1, [sp, #4]
 800058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000590:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	9b01      	ldr	r3, [sp, #4]
  
}
 80005a0:	b003      	add	sp, #12
 80005a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <k_TouchUpdate>:
  *         value to the variables u32_TSXCoordinate and u32_TSYCoordinate
  * @param  None
  * @retval None
  */
void k_TouchUpdate(void)
{
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	b085      	sub	sp, #20
  static GUI_PID_STATE TS_State = {0, 0, 0, 0};
  __IO TS_StateTypeDef  ts;
  uint16_t xDiff, yDiff;
  
  BSP_TS_GetState((TS_StateTypeDef *)&ts);
 80005b0:	a801      	add	r0, sp, #4
 80005b2:	f001 f8f9 	bl	80017a8 <BSP_TS_GetState>

  if((ts.touchX[0] >= LCD_GetXSize()) ||(ts.touchY[0] >= LCD_GetYSize()) ) 
 80005b6:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 80005ba:	f00a fcf9 	bl	800afb0 <LCD_GetXSize>
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	4284      	cmp	r4, r0
 80005c2:	db49      	blt.n	8000658 <k_TouchUpdate+0xac>
  {
    ts.touchX[0] = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    ts.touchY[0] = 0;
 80005ca:	f8ad 300a 	strh.w	r3, [sp, #10]
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 80005ce:	4c29      	ldr	r4, [pc, #164]	; (8000674 <k_TouchUpdate+0xc8>)
 80005d0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80005d4:	6822      	ldr	r2, [r4, #0]
 80005d6:	428a      	cmp	r2, r1
 80005d8:	b293      	uxth	r3, r2
 80005da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80005de:	f8bd 000a 	ldrh.w	r0, [sp, #10]
  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 80005e2:	bfcc      	ite	gt
 80005e4:	1a9a      	subgt	r2, r3, r2
 80005e6:	1ad2      	suble	r2, r2, r3
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80005e8:	6863      	ldr	r3, [r4, #4]
 80005ea:	4283      	cmp	r3, r0
 80005ec:	b299      	uxth	r1, r3
 80005ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  
  if((TS_State.Pressed != ts.touchDetected ) ||
 80005f2:	7a20      	ldrb	r0, [r4, #8]
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80005f4:	bfcc      	ite	gt
 80005f6:	1acb      	subgt	r3, r1, r3
 80005f8:	1a5b      	suble	r3, r3, r1
  if((TS_State.Pressed != ts.touchDetected ) ||
 80005fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80005fe:	4288      	cmp	r0, r1
  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 8000600:	b292      	uxth	r2, r2
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 8000602:	b29b      	uxth	r3, r3
  if((TS_State.Pressed != ts.touchDetected ) ||
 8000604:	d103      	bne.n	800060e <k_TouchUpdate+0x62>
 8000606:	2a14      	cmp	r2, #20
 8000608:	d801      	bhi.n	800060e <k_TouchUpdate+0x62>
     (xDiff > 20 )||
 800060a:	2b14      	cmp	r3, #20
 800060c:	d922      	bls.n	8000654 <k_TouchUpdate+0xa8>
       (yDiff > 20))
  {
    TS_State.Pressed = ts.touchDetected;
 800060e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000612:	7223      	strb	r3, [r4, #8]
    //TS_State.Layer = SelLayer;
    if(ts.touchDetected) 
 8000614:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000618:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800061c:	b323      	cbz	r3, 8000668 <k_TouchUpdate+0xbc>
    {
      TS_State.x = ts.touchX[0];
 800061e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000622:	6023      	str	r3, [r4, #0]
      if(I2C_Address == TS_I2C_ADDRESS)
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <k_TouchUpdate+0xcc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b54      	cmp	r3, #84	; 0x54
      {
        if(ts.touchY[0] < 240)
 800062a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      if(I2C_Address == TS_I2C_ADDRESS)
 800062e:	d10d      	bne.n	800064c <k_TouchUpdate+0xa0>
        if(ts.touchY[0] < 240)
 8000630:	2bef      	cmp	r3, #239	; 0xef
        {
          TS_State.y = ts.touchY[0];
        }
        else
        {
          TS_State.y = (ts.touchY[0] * 480) / 450;
 8000632:	bf89      	itett	hi
 8000634:	f8bd 200a 	ldrhhi.w	r2, [sp, #10]
          TS_State.y = ts.touchY[0];
 8000638:	f8bd 300a 	ldrhls.w	r3, [sp, #10]
          TS_State.y = (ts.touchY[0] * 480) / 450;
 800063c:	f44f 73f0 	movhi.w	r3, #480	; 0x1e0
 8000640:	4353      	mulhi	r3, r2
 8000642:	bf84      	itt	hi
 8000644:	f44f 72e1 	movhi.w	r2, #450	; 0x1c2
 8000648:	fb93 f3f2 	sdivhi	r3, r3, r2
      }
      else
      {
        TS_State.y = ts.touchY[0]; 
      }
      GUI_TOUCH_StoreStateEx(&TS_State);
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <k_TouchUpdate+0xc8>)
        TS_State.y = ts.touchY[0]; 
 800064e:	6063      	str	r3, [r4, #4]
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000650:	f009 fc02 	bl	8009e58 <GUI_TOUCH_StoreStateEx>
      GUI_TOUCH_StoreStateEx(&TS_State);
      TS_State.x = 0;
      TS_State.y = 0;      
    }
  }
}
 8000654:	b005      	add	sp, #20
 8000656:	bd30      	pop	{r4, r5, pc}
  if((ts.touchX[0] >= LCD_GetXSize()) ||(ts.touchY[0] >= LCD_GetYSize()) ) 
 8000658:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 800065c:	f00a fcbe 	bl	800afdc <LCD_GetYSize>
 8000660:	b2a4      	uxth	r4, r4
 8000662:	4284      	cmp	r4, r0
 8000664:	daae      	bge.n	80005c4 <k_TouchUpdate+0x18>
 8000666:	e7b2      	b.n	80005ce <k_TouchUpdate+0x22>
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <k_TouchUpdate+0xc8>)
 800066a:	f009 fbf5 	bl	8009e58 <GUI_TOUCH_StoreStateEx>
      TS_State.y = 0;      
 800066e:	e9c4 5500 	strd	r5, r5, [r4]
}
 8000672:	e7ef      	b.n	8000654 <k_TouchUpdate+0xa8>
 8000674:	200000f0 	.word	0x200000f0
 8000678:	200002f0 	.word	0x200002f0

0800067c <TimerCallback>:
  * @param  n: Timer index 
  * @retval None
  */
static void TimerCallback(void const *n)
{  
  k_TouchUpdate();
 800067c:	f7ff bf96 	b.w	80005ac <k_TouchUpdate>

08000680 <main>:
{     
 8000680:	b500      	push	{lr}
 8000682:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8000684:	f001 f91c 	bl	80018c0 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b30      	ldr	r3, [pc, #192]	; (800074c <main+0xcc>)
 800068a:	2100      	movs	r1, #0
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000690:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <main+0xd0>)
 80006a2:	9102      	str	r1, [sp, #8]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b2:	9302      	str	r3, [sp, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	e9cd 4308 	strd	r4, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c0:	2402      	movs	r4, #2
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 80006ca:	2608      	movs	r6, #8
 80006cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80006d0:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 6;
 80006d4:	2507      	movs	r5, #7
 80006d6:	2306      	movs	r3, #6
  
  
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80006dc:	e9cd 5313 	strd	r5, r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f003 fffe 	bl	80046e0 <HAL_RCC_OscConfig>
 80006e4:	b100      	cbz	r0, 80006e8 <main+0x68>
 80006e6:	e7fe      	b.n	80006e6 <main+0x66>
  {
    while(1);
  }
  /* Enable the OverDrive to reach the 180 Mhz Frequency */  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f003 f900 	bl	80038ec <HAL_PWREx_EnableOverDrive>
 80006ec:	4605      	mov	r5, r0
 80006ee:	b100      	cbz	r0, 80006f2 <main+0x72>
 80006f0:	e7fe      	b.n	80006f0 <main+0x70>
  {
    while(1);
  }
  
  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CK48;
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CK48CLKSOURCE_PLLSAIP; 
 80006f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006fa:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80006fc:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80006fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000702:	e9cd 3619 	strd	r3, r6, [sp, #100]	; 0x64
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000706:	f003 fe89 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>

  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800070a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000710:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	e9cd 0306 	strd	r0, r3, [sp, #24]

  
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071c:	2105      	movs	r1, #5
 800071e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	9505      	str	r5, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000722:	f003 fdb3 	bl	800428c <HAL_RCC_ClockConfig>
 8000726:	4606      	mov	r6, r0
 8000728:	b100      	cbz	r0, 800072c <main+0xac>
 800072a:	e7fe      	b.n	800072a <main+0xaa>
  osThreadDef(GUI_Thread, GUIThread, osPriorityLow, 0, 2048);
 800072c:	4d09      	ldr	r5, [pc, #36]	; (8000754 <main+0xd4>)
  k_BspInit(); 
 800072e:	f7ff ff11 	bl	8000554 <k_BspInit>
  osThreadDef(GUI_Thread, GUIThread, osPriorityLow, 0, 2048);
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	ac15      	add	r4, sp, #84	; 0x54
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(GUI_Thread), NULL); 
 800073c:	4631      	mov	r1, r6
 800073e:	a815      	add	r0, sp, #84	; 0x54
 8000740:	f004 fc5a 	bl	8004ff8 <osThreadCreate>
  osKernelStart ();
 8000744:	f004 fc53 	bl	8004fee <osKernelStart>
 8000748:	e7fe      	b.n	8000748 <main+0xc8>
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000
 8000754:	08014f00 	.word	0x08014f00

08000758 <drawDigit>:
{
 8000758:	b573      	push	{r0, r1, r4, r5, r6, lr}
	GUI_DrawRoundedRect(x - 10, y - 10, x + 70, y + 90, 5);
 800075a:	2305      	movs	r3, #5
{
 800075c:	4604      	mov	r4, r0
 800075e:	460d      	mov	r5, r1
 8000760:	4616      	mov	r6, r2
	GUI_DrawRoundedRect(x - 10, y - 10, x + 70, y + 90, 5);
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	f100 0246 	add.w	r2, r0, #70	; 0x46
 8000768:	f101 035a 	add.w	r3, r1, #90	; 0x5a
 800076c:	380a      	subs	r0, #10
 800076e:	390a      	subs	r1, #10
 8000770:	f009 f966 	bl	8009a40 <GUI_DrawRoundedRect>
	GUI_SetFont(GUI_FONT_D60X80);
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <drawDigit+0x34>)
 8000776:	f008 fcfd 	bl	8009174 <GUI_SetFont>
	GUI_DispCharAt(digit, x, y);
 800077a:	b22a      	sxth	r2, r5
 800077c:	b221      	sxth	r1, r4
 800077e:	4630      	mov	r0, r6
}
 8000780:	b002      	add	sp, #8
 8000782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GUI_DispCharAt(digit, x, y);
 8000786:	f009 b89f 	b.w	80098c8 <GUI_DispCharAt>
 800078a:	bf00      	nop
 800078c:	08017acc 	.word	0x08017acc

08000790 <GUIThread>:
{   
 8000790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	GUI_Init();
 8000794:	f008 fe04 	bl	80093a0 <GUI_Init>
	WM_MULTIBUF_Enable(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f00f fe07 	bl	80103ac <WM_MULTIBUF_Enable>
	GUI_SetLayerVisEx (1, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2001      	movs	r0, #1
 80007a2:	f009 fb4b 	bl	8009e3c <GUI_SetLayerVisEx>
	GUI_SelectLayer(0);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f009 fb18 	bl	8009ddc <GUI_SelectLayer>
	GUI_Clear();
 80007ac:	f008 fd78 	bl	80092a0 <GUI_Clear>
	GUI_SetPenSize(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f008 fc23 	bl	8008ffc <GUI_SetPenSize>
	GUI_DrawRoundedRect(5, 0, 530, 100, 5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	f240 2212 	movw	r2, #530	; 0x212
 80007be:	2100      	movs	r1, #0
 80007c0:	9000      	str	r0, [sp, #0]
 80007c2:	f009 f93d 	bl	8009a40 <GUI_DrawRoundedRect>
	GUI_SetFont(GUI_FONT_32B_ASCII);
 80007c6:	483f      	ldr	r0, [pc, #252]	; (80008c4 <GUIThread+0x134>)
 80007c8:	4d3f      	ldr	r5, [pc, #252]	; (80008c8 <GUIThread+0x138>)
 80007ca:	f008 fcd3 	bl	8009174 <GUI_SetFont>
	GUI_DispStringAt("X: ", 10, 10);
 80007ce:	220a      	movs	r2, #10
 80007d0:	4611      	mov	r1, r2
 80007d2:	483e      	ldr	r0, [pc, #248]	; (80008cc <GUIThread+0x13c>)
 80007d4:	f009 f920 	bl	8009a18 <GUI_DispStringAt>
	GUI_SetFont(GUI_FONT_D60X80);
 80007d8:	483d      	ldr	r0, [pc, #244]	; (80008d0 <GUIThread+0x140>)
 80007da:	f008 fccb 	bl	8009174 <GUI_SetFont>
	GUI_DispStringAt("+123.123", 45, 10);
 80007de:	220a      	movs	r2, #10
 80007e0:	212d      	movs	r1, #45	; 0x2d
 80007e2:	483c      	ldr	r0, [pc, #240]	; (80008d4 <GUIThread+0x144>)
 80007e4:	f009 f918 	bl	8009a18 <GUI_DispStringAt>
	GUI_SetFont(GUI_FONT_32B_ASCII);
 80007e8:	4836      	ldr	r0, [pc, #216]	; (80008c4 <GUIThread+0x134>)
 80007ea:	f008 fcc3 	bl	8009174 <GUI_SetFont>
	GUI_DispStringAt("Y: ", 10, 125);
 80007ee:	227d      	movs	r2, #125	; 0x7d
 80007f0:	210a      	movs	r1, #10
 80007f2:	4839      	ldr	r0, [pc, #228]	; (80008d8 <GUIThread+0x148>)
 80007f4:	f009 f910 	bl	8009a18 <GUI_DispStringAt>
	GUI_SetFont(GUI_FONT_D60X80);
 80007f8:	4835      	ldr	r0, [pc, #212]	; (80008d0 <GUIThread+0x140>)
 80007fa:	f008 fcbb 	bl	8009174 <GUI_SetFont>
	GUI_DispStringAt("+123.123", 45, 125);
 80007fe:	227d      	movs	r2, #125	; 0x7d
 8000800:	212d      	movs	r1, #45	; 0x2d
 8000802:	4834      	ldr	r0, [pc, #208]	; (80008d4 <GUIThread+0x144>)
 8000804:	f009 f908 	bl	8009a18 <GUI_DispStringAt>
	GUI_SetFont(GUI_FONT_32B_ASCII);
 8000808:	482e      	ldr	r0, [pc, #184]	; (80008c4 <GUIThread+0x134>)
 800080a:	f008 fcb3 	bl	8009174 <GUI_SetFont>
	GUI_DispStringAt("Z: ", 10, 240);
 800080e:	22f0      	movs	r2, #240	; 0xf0
 8000810:	210a      	movs	r1, #10
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <GUIThread+0x14c>)
 8000814:	f009 f900 	bl	8009a18 <GUI_DispStringAt>
	GUI_SetFont(GUI_FONT_D60X80);
 8000818:	482d      	ldr	r0, [pc, #180]	; (80008d0 <GUIThread+0x140>)
 800081a:	f008 fcab 	bl	8009174 <GUI_SetFont>
	GUI_DispStringAt("+000.000", 45, 240);
 800081e:	22f0      	movs	r2, #240	; 0xf0
 8000820:	212d      	movs	r1, #45	; 0x2d
 8000822:	482f      	ldr	r0, [pc, #188]	; (80008e0 <GUIThread+0x150>)
 8000824:	f009 f8f8 	bl	8009a18 <GUI_DispStringAt>
 8000828:	240a      	movs	r4, #10
			drawDigit(550 + (keyX * 85), 10 + (keyY * 115), keypadChars[keyCnt]);
 800082a:	782a      	ldrb	r2, [r5, #0]
 800082c:	4621      	mov	r1, r4
 800082e:	f240 2026 	movw	r0, #550	; 0x226
 8000832:	f7ff ff91 	bl	8000758 <drawDigit>
 8000836:	786a      	ldrb	r2, [r5, #1]
 8000838:	4621      	mov	r1, r4
 800083a:	f240 207b 	movw	r0, #635	; 0x27b
 800083e:	f7ff ff8b 	bl	8000758 <drawDigit>
 8000842:	4621      	mov	r1, r4
 8000844:	3473      	adds	r4, #115	; 0x73
 8000846:	78aa      	ldrb	r2, [r5, #2]
 8000848:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 800084c:	b2a4      	uxth	r4, r4
 800084e:	f7ff ff83 	bl	8000758 <drawDigit>
	for(keyY = 0; keyY < 4; keyY++)
 8000852:	f5b4 7feb 	cmp.w	r4, #470	; 0x1d6
 8000856:	f105 0503 	add.w	r5, r5, #3
 800085a:	d1e6      	bne.n	800082a <GUIThread+0x9a>
 800085c:	2405      	movs	r4, #5
 800085e:	4e21      	ldr	r6, [pc, #132]	; (80008e4 <GUIThread+0x154>)
		GUI_SetFont(GUI_FONT_32B_ASCII);
 8000860:	4f18      	ldr	r7, [pc, #96]	; (80008c4 <GUIThread+0x134>)
	for(keyY = 0; keyY < 4; keyY++)
 8000862:	250a      	movs	r5, #10
		GUI_DrawRoundedRect(5 + (keyX * 180), 345, 170 + (keyX * 180), 445, 5);
 8000864:	46a0      	mov	r8, r4
 8000866:	f240 13bd 	movw	r3, #445	; 0x1bd
 800086a:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
 800086e:	f240 1159 	movw	r1, #345	; 0x159
 8000872:	4620      	mov	r0, r4
 8000874:	f8cd 8000 	str.w	r8, [sp]
 8000878:	f009 f8e2 	bl	8009a40 <GUI_DrawRoundedRect>
		GUI_SetFont(GUI_FONT_32B_ASCII);
 800087c:	4638      	mov	r0, r7
 800087e:	f008 fc79 	bl	8009174 <GUI_SetFont>
		GUI_DispStringAt(commandKeys[keyX], 10 + (keyX * 200), 360);
 8000882:	4629      	mov	r1, r5
 8000884:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000888:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800088c:	f009 f8c4 	bl	8009a18 <GUI_DispStringAt>
 8000890:	34b4      	adds	r4, #180	; 0xb4
	for(keyX = 0; keyX < 3; keyX++)
 8000892:	f240 2321 	movw	r3, #545	; 0x221
 8000896:	429c      	cmp	r4, r3
 8000898:	f105 05c8 	add.w	r5, r5, #200	; 0xc8
 800089c:	d1e3      	bne.n	8000866 <GUIThread+0xd6>
  osTimerDef(TS_Timer, TimerCallback);
 800089e:	a804      	add	r0, sp, #16
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <GUIThread+0x158>)
 80008a2:	f840 3d04 	str.w	r3, [r0, #-4]!
  lcd_timer =  osTimerCreate(osTimer(TS_Timer), osTimerPeriodic, (void *)0);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2200      	movs	r2, #0
 80008aa:	f004 fbc7 	bl	800503c <osTimerCreate>
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <GUIThread+0x15c>)
  osTimerStart(lcd_timer, 30);
 80008b0:	211e      	movs	r1, #30
  lcd_timer =  osTimerCreate(osTimer(TS_Timer), osTimerPeriodic, (void *)0);
 80008b2:	6018      	str	r0, [r3, #0]
  osTimerStart(lcd_timer, 30);
 80008b4:	f004 fbd2 	bl	800505c <osTimerStart>
    GUI_Exec(); /* Do the background work ... Update windows etc.) */
 80008b8:	f008 fb0e 	bl	8008ed8 <GUI_Exec>
    osDelay(30); /* Nothing left to do for the moment ... Idle processing */
 80008bc:	201e      	movs	r0, #30
 80008be:	f004 fbb5 	bl	800502c <osDelay>
 80008c2:	e7f9      	b.n	80008b8 <GUIThread+0x128>
 80008c4:	080154e8 	.word	0x080154e8
 80008c8:	08014f14 	.word	0x08014f14
 80008cc:	0801a5cc 	.word	0x0801a5cc
 80008d0:	08017acc 	.word	0x08017acc
 80008d4:	0801a5d0 	.word	0x0801a5d0
 80008d8:	0801a5d9 	.word	0x0801a5d9
 80008dc:	0801a5dd 	.word	0x0801a5dd
 80008e0:	0801a5e1 	.word	0x0801a5e1
 80008e4:	1ffffffc 	.word	0x1ffffffc
 80008e8:	0800067d 	.word	0x0800067d
 80008ec:	200080f0 	.word	0x200080f0

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 80008f0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80008f2:	4601      	mov	r1, r0
{
 80008f4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2036      	movs	r0, #54	; 0x36
 80008fa:	f001 f833 	bl	8001964 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008fe:	2036      	movs	r0, #54	; 0x36
 8000900:	f001 f864 	bl	80019cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	9302      	str	r3, [sp, #8]
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_InitTick+0x78>)
 800090a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090c:	f042 0210 	orr.w	r2, r2, #16
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091a:	a901      	add	r1, sp, #4
 800091c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800091e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000920:	f003 fd5e 	bl	80043e0 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000924:	9b06      	ldr	r3, [sp, #24]
 8000926:	b9cb      	cbnz	r3, 800095c <HAL_InitTick+0x6c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000928:	f003 fd4a 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800092c:	4c0f      	ldr	r4, [pc, #60]	; (800096c <HAL_InitTick+0x7c>)
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_InitTick+0x80>)
 8000930:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000936:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_InitTick+0x84>)
 800093a:	fbb0 f0f3 	udiv	r0, r0, r3
 800093e:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0U;
 8000940:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000942:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000944:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0U;
 8000946:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800094c:	f004 f9b4 	bl	8004cb8 <HAL_TIM_Base_Init>
 8000950:	b940      	cbnz	r0, 8000964 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000952:	4620      	mov	r0, r4
 8000954:	f004 f893 	bl	8004a7e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000958:	b008      	add	sp, #32
 800095a:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800095c:	f003 fd30 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8000960:	0040      	lsls	r0, r0, #1
 8000962:	e7e3      	b.n	800092c <HAL_InitTick+0x3c>
  return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
 8000966:	e7f7      	b.n	8000958 <HAL_InitTick+0x68>
 8000968:	40023800 	.word	0x40023800
 800096c:	200080f4 	.word	0x200080f4
 8000970:	40001000 	.word	0x40001000
 8000974:	000f4240 	.word	0x000f4240

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8000978:	f000 bfbc 	b.w	80018f4 <HAL_IncTick>

0800097c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 800097c:	4801      	ldr	r0, [pc, #4]	; (8000984 <TIM6_DAC_IRQHandler+0x8>)
 800097e:	f004 b892 	b.w	8004aa6 <HAL_TIM_IRQHandler>
 8000982:	bf00      	nop
 8000984:	200080f4 	.word	0x200080f4

08000988 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000988:	4770      	bx	lr

0800098a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800098a:	e7fe      	b.n	800098a <HardFault_Handler>

0800098c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800098c:	e7fe      	b.n	800098c <MemManage_Handler>

0800098e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800098e:	e7fe      	b.n	800098e <BusFault_Handler>

08000990 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler>

08000992 <DebugMon_Handler>:
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000994:	f004 bc18 	b.w	80051c8 <osSystickHandler>

08000998 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_HCD_IRQHandler(&hhcd);
 8000998:	4801      	ldr	r0, [pc, #4]	; (80009a0 <OTG_FS_IRQHandler+0x8>)
 800099a:	f001 bdd5 	b.w	8002548 <HAL_HCD_IRQHandler>
 800099e:	bf00      	nop
 80009a0:	20035440 	.word	0x20035440

080009a4 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc_disco);
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <LTDC_IRQHandler+0x8>)
 80009a6:	f002 be25 	b.w	80035f4 <HAL_LTDC_IRQHandler>
 80009aa:	bf00      	nop
 80009ac:	20035398 	.word	0x20035398

080009b0 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_SAIx_DMAx_IRQHandler (void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <DMA2_Stream3_IRQHandler+0x8>)
 80009b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80009b4:	f001 b92c 	b.w	8001c10 <HAL_DMA_IRQHandler>
 80009b8:	200081cc 	.word	0x200081cc

080009bc <DMA1_Stream2_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_I2Sx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_i2s.hdmarx);
 80009bc:	4b01      	ldr	r3, [pc, #4]	; (80009c4 <DMA1_Stream2_IRQHandler+0x8>)
 80009be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80009c0:	f001 b926 	b.w	8001c10 <HAL_DMA_IRQHandler>
 80009c4:	20008138 	.word	0x20008138

080009c8 <QUADSPI_IRQHandler>:
  * @param  None
  * @retval None
  */
void QUADSPI_IRQHandler(void)
{
  HAL_QSPI_IRQHandler(&QSPIHandle);
 80009c8:	4801      	ldr	r0, [pc, #4]	; (80009d0 <QUADSPI_IRQHandler+0x8>)
 80009ca:	f003 bb3b 	b.w	8004044 <HAL_QSPI_IRQHandler>
 80009ce:	bf00      	nop
 80009d0:	200082ec 	.word	0x200082ec

080009d4 <vApplicationIdleHook>:
  * @brief  Application Idle Hook
  * @param  None 
  * @retval None
  */
void vApplicationIdleHook(void) 
{
 80009d4:	b510      	push	{r4, lr}
  if( xIdleHandle == NULL )
 80009d6:	4c03      	ldr	r4, [pc, #12]	; (80009e4 <vApplicationIdleHook+0x10>)
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	b913      	cbnz	r3, 80009e2 <vApplicationIdleHook+0xe>
  {
    /* Store the handle to the idle task. */
    xIdleHandle = xTaskGetCurrentTaskHandle();
 80009dc:	f005 feb6 	bl	800674c <xTaskGetCurrentTaskHandle>
 80009e0:	6020      	str	r0, [r4, #0]
  }
}
 80009e2:	bd10      	pop	{r4, pc}
 80009e4:	20000108 	.word	0x20000108

080009e8 <vApplicationTickHook>:
  */
void vApplicationTickHook (void)
{
  static int tick = 0;
  
  if(tick ++ > CALCULATION_PERIOD)
 80009e8:	490f      	ldr	r1, [pc, #60]	; (8000a28 <vApplicationTickHook+0x40>)
 80009ea:	684b      	ldr	r3, [r1, #4]
 80009ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f0:	460a      	mov	r2, r1
 80009f2:	dc02      	bgt.n	80009fa <vApplicationTickHook+0x12>
 80009f4:	3301      	adds	r3, #1
 80009f6:	604b      	str	r3, [r1, #4]
 80009f8:	4770      	bx	lr
  {
    tick = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	604b      	str	r3, [r1, #4]
    
    if(osCPU_TotalIdleTime > 1000)
 80009fe:	688b      	ldr	r3, [r1, #8]
 8000a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    {
      osCPU_TotalIdleTime = 1000;
 8000a04:	bf84      	itt	hi
 8000a06:	f44f 737a 	movhi.w	r3, #1000	; 0x3e8
 8000a0a:	608b      	strhi	r3, [r1, #8]
    }
    osCPU_Usage = (100 - (osCPU_TotalIdleTime * 100) / CALCULATION_PERIOD);
 8000a0c:	6889      	ldr	r1, [r1, #8]
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	434b      	muls	r3, r1
 8000a12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000a1e:	60d3      	str	r3, [r2, #12]
    osCPU_TotalIdleTime = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	6093      	str	r3, [r2, #8]
  }
}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000108 	.word	0x20000108

08000a2c <StartIdleMonitor>:
  * @brief  Start Idle monitor
  * @param  None 
  * @retval None
  */
void StartIdleMonitor (void)
{
 8000a2c:	b510      	push	{r4, lr}
  if( xTaskGetCurrentTaskHandle() == xIdleHandle ) 
 8000a2e:	4c05      	ldr	r4, [pc, #20]	; (8000a44 <StartIdleMonitor+0x18>)
 8000a30:	f005 fe8c 	bl	800674c <xTaskGetCurrentTaskHandle>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	4283      	cmp	r3, r0
 8000a38:	d102      	bne.n	8000a40 <StartIdleMonitor+0x14>
  {
    osCPU_IdleStartTime = xTaskGetTickCountFromISR();
 8000a3a:	f005 fc7f 	bl	800633c <xTaskGetTickCountFromISR>
 8000a3e:	6120      	str	r0, [r4, #16]
  }
}
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	bf00      	nop
 8000a44:	20000108 	.word	0x20000108

08000a48 <EndIdleMonitor>:
  * @brief  Stop Idle monitor
  * @param  None 
  * @retval None
  */
void EndIdleMonitor (void)
{
 8000a48:	b510      	push	{r4, lr}
  if( xTaskGetCurrentTaskHandle() == xIdleHandle )
 8000a4a:	4c07      	ldr	r4, [pc, #28]	; (8000a68 <EndIdleMonitor+0x20>)
 8000a4c:	f005 fe7e 	bl	800674c <xTaskGetCurrentTaskHandle>
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4283      	cmp	r3, r0
 8000a54:	d107      	bne.n	8000a66 <EndIdleMonitor+0x1e>
  {
    /* Store the handle to the idle task. */
    osCPU_IdleSpentTime = xTaskGetTickCountFromISR() - osCPU_IdleStartTime;
 8000a56:	f005 fc71 	bl	800633c <xTaskGetTickCountFromISR>
 8000a5a:	6923      	ldr	r3, [r4, #16]
 8000a5c:	1ac0      	subs	r0, r0, r3
    osCPU_TotalIdleTime += osCPU_IdleSpentTime; 
 8000a5e:	68a3      	ldr	r3, [r4, #8]
    osCPU_IdleSpentTime = xTaskGetTickCountFromISR() - osCPU_IdleStartTime;
 8000a60:	6160      	str	r0, [r4, #20]
    osCPU_TotalIdleTime += osCPU_IdleSpentTime; 
 8000a62:	4418      	add	r0, r3
 8000a64:	60a0      	str	r0, [r4, #8]
  }
}
 8000a66:	bd10      	pop	{r4, pc}
 8000a68:	20000108 	.word	0x20000108

08000a6c <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000a6c:	4770      	bx	lr

08000a6e <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8000a6e:	2000      	movs	r0, #0
 8000a70:	4770      	bx	lr

08000a72 <ft6x06_ReadID>:
{
 8000a72:	b510      	push	{r4, lr}
 8000a74:	4604      	mov	r4, r0
  TS_IO_Init();
 8000a76:	f000 fb35 	bl	80010e4 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8000a7a:	21a8      	movs	r1, #168	; 0xa8
 8000a7c:	b2e0      	uxtb	r0, r4
 8000a7e:	f000 fb49 	bl	8001114 <TS_IO_Read>
}
 8000a82:	bd10      	pop	{r4, pc}

08000a84 <ft6x06_TS_DetectTouch>:
{
 8000a84:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8000a86:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000a88:	2102      	movs	r1, #2
 8000a8a:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8000a8c:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000a90:	f000 fb40 	bl	8001114 <TS_IO_Read>
 8000a94:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8000a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8000aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000aa8:	2b02      	cmp	r3, #2
    nbTouch = 0;
 8000aaa:	bf88      	it	hi
 8000aac:	f88d 4007 	strbhi.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <ft6x06_TS_DetectTouch+0x40>)
 8000ab2:	f89d 2007 	ldrb.w	r2, [sp, #7]
  return(nbTouch);
 8000ab6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000aba:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8000abc:	2200      	movs	r2, #0
 8000abe:	709a      	strb	r2, [r3, #2]
}
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd10      	pop	{r4, pc}
 8000ac4:	20000120 	.word	0x20000120

08000ac8 <ft6x06_TS_GetXY>:
{
 8000ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000aca:	4c15      	ldr	r4, [pc, #84]	; (8000b20 <ft6x06_TS_GetXY+0x58>)
{
 8000acc:	4615      	mov	r5, r2
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000ace:	78a3      	ldrb	r3, [r4, #2]
 8000ad0:	7862      	ldrb	r2, [r4, #1]
 8000ad2:	429a      	cmp	r2, r3
{
 8000ad4:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000ad6:	d91f      	bls.n	8000b18 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8000ad8:	b303      	cbz	r3, 8000b1c <ft6x06_TS_GetXY+0x54>
  uint8_t regAddress = 0;
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	bf0c      	ite	eq
 8000ade:	2109      	moveq	r1, #9
 8000ae0:	2100      	movne	r1, #0
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	eb0d 0203 	add.w	r2, sp, r3
 8000ae8:	b2c0      	uxtb	r0, r0
 8000aea:	f000 fb2d 	bl	8001148 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000aee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000afc:	4313      	orrs	r3, r2
 8000afe:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000b00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000b04:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8000b12:	78a3      	ldrb	r3, [r4, #2]
 8000b14:	3301      	adds	r3, #1
 8000b16:	70a3      	strb	r3, [r4, #2]
}
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}
      regAddress = FT6206_P1_XH_REG; 
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	e7e0      	b.n	8000ae2 <ft6x06_TS_GetXY+0x1a>
 8000b20:	20000120 	.word	0x20000120

08000b24 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000b24:	2201      	movs	r2, #1
 8000b26:	21a4      	movs	r1, #164	; 0xa4
 8000b28:	b2c0      	uxtb	r0, r0
 8000b2a:	f000 badd 	b.w	80010e8 <TS_IO_Write>

08000b2e <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	21a4      	movs	r1, #164	; 0xa4
 8000b32:	b2c0      	uxtb	r0, r0
 8000b34:	f000 bad8 	b.w	80010e8 <TS_IO_Write>

08000b38 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8000b38:	f7ff bff9 	b.w	8000b2e <ft6x06_TS_DisableIT>

08000b3c <ft6x06_TS_ClearIT>:
 8000b3c:	4770      	bx	lr
	...

08000b40 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <ft6x06_Init+0x20>)
 8000b42:	78da      	ldrb	r2, [r3, #3]
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d009      	beq.n	8000b5c <ft6x06_Init+0x1c>
 8000b48:	7919      	ldrb	r1, [r3, #4]
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d006      	beq.n	8000b5c <ft6x06_Init+0x1c>
 8000b4e:	b10a      	cbz	r2, 8000b54 <ft6x06_Init+0x14>
 8000b50:	b921      	cbnz	r1, 8000b5c <ft6x06_Init+0x1c>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000b52:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 8000b54:	4413      	add	r3, r2
 8000b56:	70d8      	strb	r0, [r3, #3]
      TS_IO_Init(); 
 8000b58:	f000 bac4 	b.w	80010e4 <TS_IO_Init>
}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000120 	.word	0x20000120

08000b64 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000b64:	b538      	push	{r3, r4, r5, lr}
 8000b66:	4604      	mov	r4, r0
 8000b68:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	49cb      	ldr	r1, [pc, #812]	; (8000e9c <OTM8009A_Init+0x338>)
 8000b6e:	f006 fab5 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000b72:	49cb      	ldr	r1, [pc, #812]	; (8000ea0 <OTM8009A_Init+0x33c>)
 8000b74:	2003      	movs	r0, #3
 8000b76:	f006 fab1 	bl	80070dc <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000b7a:	49ca      	ldr	r1, [pc, #808]	; (8000ea4 <OTM8009A_Init+0x340>)
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f006 faad 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000b82:	49c9      	ldr	r1, [pc, #804]	; (8000ea8 <OTM8009A_Init+0x344>)
 8000b84:	2002      	movs	r0, #2
 8000b86:	f006 faa9 	bl	80070dc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000b8a:	49c6      	ldr	r1, [pc, #792]	; (8000ea4 <OTM8009A_Init+0x340>)
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f006 faa5 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000b92:	49c6      	ldr	r1, [pc, #792]	; (8000eac <OTM8009A_Init+0x348>)
 8000b94:	2000      	movs	r0, #0
 8000b96:	f006 faa1 	bl	80070dc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000b9a:	200a      	movs	r0, #10
 8000b9c:	f000 faea 	bl	8001174 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000ba0:	49c3      	ldr	r1, [pc, #780]	; (8000eb0 <OTM8009A_Init+0x34c>)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f006 fa9a 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000ba8:	49c2      	ldr	r1, [pc, #776]	; (8000eb4 <OTM8009A_Init+0x350>)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f006 fa96 	bl	80070dc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000bb0:	200a      	movs	r0, #10
 8000bb2:	f000 fadf 	bl	8001174 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000bb6:	49c0      	ldr	r1, [pc, #768]	; (8000eb8 <OTM8009A_Init+0x354>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f006 fa8f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000bbe:	49bf      	ldr	r1, [pc, #764]	; (8000ebc <OTM8009A_Init+0x358>)
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f006 fa8b 	bl	80070dc <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000bc6:	49be      	ldr	r1, [pc, #760]	; (8000ec0 <OTM8009A_Init+0x35c>)
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f006 fa87 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000bce:	49bd      	ldr	r1, [pc, #756]	; (8000ec4 <OTM8009A_Init+0x360>)
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f006 fa83 	bl	80070dc <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000bd6:	49bc      	ldr	r1, [pc, #752]	; (8000ec8 <OTM8009A_Init+0x364>)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f006 fa7f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000bde:	49bb      	ldr	r1, [pc, #748]	; (8000ecc <OTM8009A_Init+0x368>)
 8000be0:	2000      	movs	r0, #0
 8000be2:	f006 fa7b 	bl	80070dc <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000be6:	49ad      	ldr	r1, [pc, #692]	; (8000e9c <OTM8009A_Init+0x338>)
 8000be8:	2000      	movs	r0, #0
 8000bea:	f006 fa77 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000bee:	49b8      	ldr	r1, [pc, #736]	; (8000ed0 <OTM8009A_Init+0x36c>)
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f006 fa73 	bl	80070dc <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000bf6:	49b7      	ldr	r1, [pc, #732]	; (8000ed4 <OTM8009A_Init+0x370>)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f006 fa6f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000bfe:	49b6      	ldr	r1, [pc, #728]	; (8000ed8 <OTM8009A_Init+0x374>)
 8000c00:	2000      	movs	r0, #0
 8000c02:	f006 fa6b 	bl	80070dc <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000c06:	49b5      	ldr	r1, [pc, #724]	; (8000edc <OTM8009A_Init+0x378>)
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f006 fa67 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000c0e:	49b4      	ldr	r1, [pc, #720]	; (8000ee0 <OTM8009A_Init+0x37c>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f006 fa63 	bl	80070dc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000c16:	49b3      	ldr	r1, [pc, #716]	; (8000ee4 <OTM8009A_Init+0x380>)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f006 fa5f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000c1e:	49b2      	ldr	r1, [pc, #712]	; (8000ee8 <OTM8009A_Init+0x384>)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f006 fa5b 	bl	80070dc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000c26:	49b1      	ldr	r1, [pc, #708]	; (8000eec <OTM8009A_Init+0x388>)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f006 fa57 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000c2e:	49a5      	ldr	r1, [pc, #660]	; (8000ec4 <OTM8009A_Init+0x360>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f006 fa53 	bl	80070dc <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c36:	4999      	ldr	r1, [pc, #612]	; (8000e9c <OTM8009A_Init+0x338>)
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f006 fa4f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000c3e:	49ac      	ldr	r1, [pc, #688]	; (8000ef0 <OTM8009A_Init+0x38c>)
 8000c40:	2002      	movs	r0, #2
 8000c42:	f006 fa4b 	bl	80070dc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000c46:	49ab      	ldr	r1, [pc, #684]	; (8000ef4 <OTM8009A_Init+0x390>)
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f006 fa47 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000c4e:	49aa      	ldr	r1, [pc, #680]	; (8000ef8 <OTM8009A_Init+0x394>)
 8000c50:	2000      	movs	r0, #0
 8000c52:	f006 fa43 	bl	80070dc <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000c56:	49a9      	ldr	r1, [pc, #676]	; (8000efc <OTM8009A_Init+0x398>)
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f006 fa3f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8000c5e:	49a8      	ldr	r1, [pc, #672]	; (8000f00 <OTM8009A_Init+0x39c>)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f006 fa3b 	bl	80070dc <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000c66:	49a7      	ldr	r1, [pc, #668]	; (8000f04 <OTM8009A_Init+0x3a0>)
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f006 fa37 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000c6e:	49a6      	ldr	r1, [pc, #664]	; (8000f08 <OTM8009A_Init+0x3a4>)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f006 fa33 	bl	80070dc <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000c76:	4997      	ldr	r1, [pc, #604]	; (8000ed4 <OTM8009A_Init+0x370>)
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f006 fa2f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000c7e:	49a3      	ldr	r1, [pc, #652]	; (8000f0c <OTM8009A_Init+0x3a8>)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f006 fa2b 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000c86:	4995      	ldr	r1, [pc, #596]	; (8000edc <OTM8009A_Init+0x378>)
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f006 fa27 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000c8e:	49a0      	ldr	r1, [pc, #640]	; (8000f10 <OTM8009A_Init+0x3ac>)
 8000c90:	2000      	movs	r0, #0
 8000c92:	f006 fa23 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000c96:	499f      	ldr	r1, [pc, #636]	; (8000f14 <OTM8009A_Init+0x3b0>)
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f006 fa1f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8000c9e:	499e      	ldr	r1, [pc, #632]	; (8000f18 <OTM8009A_Init+0x3b4>)
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f006 fa1b 	bl	80070dc <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000ca6:	497f      	ldr	r1, [pc, #508]	; (8000ea4 <OTM8009A_Init+0x340>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f006 fa17 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8000cae:	499b      	ldr	r1, [pc, #620]	; (8000f1c <OTM8009A_Init+0x3b8>)
 8000cb0:	2006      	movs	r0, #6
 8000cb2:	f006 fa13 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000cb6:	499a      	ldr	r1, [pc, #616]	; (8000f20 <OTM8009A_Init+0x3bc>)
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f006 fa0f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000cbe:	4999      	ldr	r1, [pc, #612]	; (8000f24 <OTM8009A_Init+0x3c0>)
 8000cc0:	200e      	movs	r0, #14
 8000cc2:	f006 fa0b 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000cc6:	4998      	ldr	r1, [pc, #608]	; (8000f28 <OTM8009A_Init+0x3c4>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f006 fa07 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000cce:	4997      	ldr	r1, [pc, #604]	; (8000f2c <OTM8009A_Init+0x3c8>)
 8000cd0:	200e      	movs	r0, #14
 8000cd2:	f006 fa03 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000cd6:	4996      	ldr	r1, [pc, #600]	; (8000f30 <OTM8009A_Init+0x3cc>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f006 f9ff 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000cde:	4995      	ldr	r1, [pc, #596]	; (8000f34 <OTM8009A_Init+0x3d0>)
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f006 f9fb 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ce6:	4994      	ldr	r1, [pc, #592]	; (8000f38 <OTM8009A_Init+0x3d4>)
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f006 f9f7 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000cee:	4993      	ldr	r1, [pc, #588]	; (8000f3c <OTM8009A_Init+0x3d8>)
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f006 f9f3 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000cf6:	496b      	ldr	r1, [pc, #428]	; (8000ea4 <OTM8009A_Init+0x340>)
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f006 f9ef 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000cfe:	4990      	ldr	r1, [pc, #576]	; (8000f40 <OTM8009A_Init+0x3dc>)
 8000d00:	200a      	movs	r0, #10
 8000d02:	f006 f9eb 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000d06:	498f      	ldr	r1, [pc, #572]	; (8000f44 <OTM8009A_Init+0x3e0>)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f006 f9e7 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000d0e:	498e      	ldr	r1, [pc, #568]	; (8000f48 <OTM8009A_Init+0x3e4>)
 8000d10:	200f      	movs	r0, #15
 8000d12:	f006 f9e3 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000d16:	4982      	ldr	r1, [pc, #520]	; (8000f20 <OTM8009A_Init+0x3bc>)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f006 f9df 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000d1e:	498b      	ldr	r1, [pc, #556]	; (8000f4c <OTM8009A_Init+0x3e8>)
 8000d20:	200f      	movs	r0, #15
 8000d22:	f006 f9db 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000d26:	4980      	ldr	r1, [pc, #512]	; (8000f28 <OTM8009A_Init+0x3c4>)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f006 f9d7 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000d2e:	4988      	ldr	r1, [pc, #544]	; (8000f50 <OTM8009A_Init+0x3ec>)
 8000d30:	200a      	movs	r0, #10
 8000d32:	f006 f9d3 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000d36:	497e      	ldr	r1, [pc, #504]	; (8000f30 <OTM8009A_Init+0x3cc>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f006 f9cf 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000d3e:	4985      	ldr	r1, [pc, #532]	; (8000f54 <OTM8009A_Init+0x3f0>)
 8000d40:	200f      	movs	r0, #15
 8000d42:	f006 f9cb 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000d46:	497c      	ldr	r1, [pc, #496]	; (8000f38 <OTM8009A_Init+0x3d4>)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f006 f9c7 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000d4e:	4982      	ldr	r1, [pc, #520]	; (8000f58 <OTM8009A_Init+0x3f4>)
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 f9c3 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000d56:	4981      	ldr	r1, [pc, #516]	; (8000f5c <OTM8009A_Init+0x3f8>)
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f006 f9bf 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000d5e:	4980      	ldr	r1, [pc, #512]	; (8000f60 <OTM8009A_Init+0x3fc>)
 8000d60:	200a      	movs	r0, #10
 8000d62:	f006 f9bb 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000d66:	497f      	ldr	r1, [pc, #508]	; (8000f64 <OTM8009A_Init+0x400>)
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f006 f9b7 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000d6e:	497e      	ldr	r1, [pc, #504]	; (8000f68 <OTM8009A_Init+0x404>)
 8000d70:	200a      	movs	r0, #10
 8000d72:	f006 f9b3 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000d76:	494b      	ldr	r1, [pc, #300]	; (8000ea4 <OTM8009A_Init+0x340>)
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f006 f9af 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000d7e:	497b      	ldr	r1, [pc, #492]	; (8000f6c <OTM8009A_Init+0x408>)
 8000d80:	200a      	movs	r0, #10
 8000d82:	f006 f9ab 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000d86:	496f      	ldr	r1, [pc, #444]	; (8000f44 <OTM8009A_Init+0x3e0>)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f006 f9a7 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000d8e:	4978      	ldr	r1, [pc, #480]	; (8000f70 <OTM8009A_Init+0x40c>)
 8000d90:	200f      	movs	r0, #15
 8000d92:	f006 f9a3 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000d96:	4962      	ldr	r1, [pc, #392]	; (8000f20 <OTM8009A_Init+0x3bc>)
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f006 f99f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000d9e:	4975      	ldr	r1, [pc, #468]	; (8000f74 <OTM8009A_Init+0x410>)
 8000da0:	200f      	movs	r0, #15
 8000da2:	f006 f99b 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000da6:	4960      	ldr	r1, [pc, #384]	; (8000f28 <OTM8009A_Init+0x3c4>)
 8000da8:	2000      	movs	r0, #0
 8000daa:	f006 f997 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000dae:	4972      	ldr	r1, [pc, #456]	; (8000f78 <OTM8009A_Init+0x414>)
 8000db0:	200a      	movs	r0, #10
 8000db2:	f006 f993 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000db6:	495e      	ldr	r1, [pc, #376]	; (8000f30 <OTM8009A_Init+0x3cc>)
 8000db8:	2000      	movs	r0, #0
 8000dba:	f006 f98f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000dbe:	496f      	ldr	r1, [pc, #444]	; (8000f7c <OTM8009A_Init+0x418>)
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f006 f98b 	bl	80070dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000dc6:	495c      	ldr	r1, [pc, #368]	; (8000f38 <OTM8009A_Init+0x3d4>)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f006 f987 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000dce:	496c      	ldr	r1, [pc, #432]	; (8000f80 <OTM8009A_Init+0x41c>)
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f006 f983 	bl	80070dc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000dd6:	493f      	ldr	r1, [pc, #252]	; (8000ed4 <OTM8009A_Init+0x370>)
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f006 f97f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000dde:	4969      	ldr	r1, [pc, #420]	; (8000f84 <OTM8009A_Init+0x420>)
 8000de0:	2000      	movs	r0, #0
 8000de2:	f006 f97b 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000de6:	4968      	ldr	r1, [pc, #416]	; (8000f88 <OTM8009A_Init+0x424>)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f006 f977 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000dee:	4967      	ldr	r1, [pc, #412]	; (8000f8c <OTM8009A_Init+0x428>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f006 f973 	bl	80070dc <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000df6:	4966      	ldr	r1, [pc, #408]	; (8000f90 <OTM8009A_Init+0x42c>)
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f006 f96f 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000dfe:	4965      	ldr	r1, [pc, #404]	; (8000f94 <OTM8009A_Init+0x430>)
 8000e00:	2000      	movs	r0, #0
 8000e02:	f006 f96b 	bl	80070dc <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000e06:	4925      	ldr	r1, [pc, #148]	; (8000e9c <OTM8009A_Init+0x338>)
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f006 f967 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000e0e:	4962      	ldr	r1, [pc, #392]	; (8000f98 <OTM8009A_Init+0x434>)
 8000e10:	2003      	movs	r0, #3
 8000e12:	f006 f963 	bl	80070dc <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000e16:	4921      	ldr	r1, [pc, #132]	; (8000e9c <OTM8009A_Init+0x338>)
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f006 f95f 	bl	80070dc <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000e1e:	491f      	ldr	r1, [pc, #124]	; (8000e9c <OTM8009A_Init+0x338>)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f006 f95b 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000e26:	495d      	ldr	r1, [pc, #372]	; (8000f9c <OTM8009A_Init+0x438>)
 8000e28:	2010      	movs	r0, #16
 8000e2a:	f006 f957 	bl	80070dc <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000e2e:	491b      	ldr	r1, [pc, #108]	; (8000e9c <OTM8009A_Init+0x338>)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f006 f953 	bl	80070dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000e36:	495a      	ldr	r1, [pc, #360]	; (8000fa0 <OTM8009A_Init+0x43c>)
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f006 f94f 	bl	80070dc <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	4958      	ldr	r1, [pc, #352]	; (8000fa4 <OTM8009A_Init+0x440>)
 8000e42:	f006 f94b 	bl	80070dc <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000e46:	2078      	movs	r0, #120	; 0x78
 8000e48:	f000 f994 	bl	8001174 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	f000 80c9 	beq.w	8000fe4 <OTM8009A_Init+0x480>
 8000e52:	2c02      	cmp	r4, #2
 8000e54:	d103      	bne.n	8000e5e <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000e56:	4954      	ldr	r1, [pc, #336]	; (8000fa8 <OTM8009A_Init+0x444>)
 8000e58:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000e5a:	f006 f93f 	bl	80070dc <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000e5e:	2d01      	cmp	r5, #1
 8000e60:	d10b      	bne.n	8000e7a <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000e62:	4952      	ldr	r1, [pc, #328]	; (8000fac <OTM8009A_Init+0x448>)
 8000e64:	2000      	movs	r0, #0
 8000e66:	f006 f939 	bl	80070dc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000e6a:	4951      	ldr	r1, [pc, #324]	; (8000fb0 <OTM8009A_Init+0x44c>)
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f006 f935 	bl	80070dc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000e72:	4950      	ldr	r1, [pc, #320]	; (8000fb4 <OTM8009A_Init+0x450>)
 8000e74:	2004      	movs	r0, #4
 8000e76:	f006 f931 	bl	80070dc <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000e7a:	494f      	ldr	r1, [pc, #316]	; (8000fb8 <OTM8009A_Init+0x454>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f006 f92d 	bl	80070dc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000e82:	494e      	ldr	r1, [pc, #312]	; (8000fbc <OTM8009A_Init+0x458>)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f006 f929 	bl	80070dc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000e8a:	494d      	ldr	r1, [pc, #308]	; (8000fc0 <OTM8009A_Init+0x45c>)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f006 f925 	bl	80070dc <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000e92:	494c      	ldr	r1, [pc, #304]	; (8000fc4 <OTM8009A_Init+0x460>)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f006 f921 	bl	80070dc <DSI_IO_WriteCmd>
 8000e9a:	e095      	b.n	8000fc8 <OTM8009A_Init+0x464>
 8000e9c:	08014f20 	.word	0x08014f20
 8000ea0:	08014f22 	.word	0x08014f22
 8000ea4:	08014f26 	.word	0x08014f26
 8000ea8:	08014f28 	.word	0x08014f28
 8000eac:	08014f2b 	.word	0x08014f2b
 8000eb0:	08014f2d 	.word	0x08014f2d
 8000eb4:	08014f2f 	.word	0x08014f2f
 8000eb8:	08014f31 	.word	0x08014f31
 8000ebc:	08014f33 	.word	0x08014f33
 8000ec0:	08014f35 	.word	0x08014f35
 8000ec4:	08014f37 	.word	0x08014f37
 8000ec8:	08014f39 	.word	0x08014f39
 8000ecc:	08014f3b 	.word	0x08014f3b
 8000ed0:	08014f3d 	.word	0x08014f3d
 8000ed4:	08014f3f 	.word	0x08014f3f
 8000ed8:	08014f41 	.word	0x08014f41
 8000edc:	08014f43 	.word	0x08014f43
 8000ee0:	08014f45 	.word	0x08014f45
 8000ee4:	08014f47 	.word	0x08014f47
 8000ee8:	08014f49 	.word	0x08014f49
 8000eec:	08014f4b 	.word	0x08014f4b
 8000ef0:	08014f4d 	.word	0x08014f4d
 8000ef4:	08014f50 	.word	0x08014f50
 8000ef8:	08014f52 	.word	0x08014f52
 8000efc:	08014f54 	.word	0x08014f54
 8000f00:	08014f56 	.word	0x08014f56
 8000f04:	08014f58 	.word	0x08014f58
 8000f08:	08014f5a 	.word	0x08014f5a
 8000f0c:	08014f5c 	.word	0x08014f5c
 8000f10:	08014f5e 	.word	0x08014f5e
 8000f14:	08014f60 	.word	0x08014f60
 8000f18:	08014f62 	.word	0x08014f62
 8000f1c:	08014f65 	.word	0x08014f65
 8000f20:	08014f6c 	.word	0x08014f6c
 8000f24:	08014f6e 	.word	0x08014f6e
 8000f28:	08014f7d 	.word	0x08014f7d
 8000f2c:	08014f7f 	.word	0x08014f7f
 8000f30:	08014f8e 	.word	0x08014f8e
 8000f34:	08014f90 	.word	0x08014f90
 8000f38:	08014f9b 	.word	0x08014f9b
 8000f3c:	08014f9d 	.word	0x08014f9d
 8000f40:	08014f9f 	.word	0x08014f9f
 8000f44:	08014faa 	.word	0x08014faa
 8000f48:	08014fac 	.word	0x08014fac
 8000f4c:	08014fbc 	.word	0x08014fbc
 8000f50:	08014fcc 	.word	0x08014fcc
 8000f54:	08014fd7 	.word	0x08014fd7
 8000f58:	08014fe7 	.word	0x08014fe7
 8000f5c:	08014ff7 	.word	0x08014ff7
 8000f60:	08014ff9 	.word	0x08014ff9
 8000f64:	08015004 	.word	0x08015004
 8000f68:	08015006 	.word	0x08015006
 8000f6c:	08015011 	.word	0x08015011
 8000f70:	0801501c 	.word	0x0801501c
 8000f74:	0801502c 	.word	0x0801502c
 8000f78:	0801503c 	.word	0x0801503c
 8000f7c:	08015047 	.word	0x08015047
 8000f80:	08015057 	.word	0x08015057
 8000f84:	08015067 	.word	0x08015067
 8000f88:	08015069 	.word	0x08015069
 8000f8c:	0801506b 	.word	0x0801506b
 8000f90:	0801506d 	.word	0x0801506d
 8000f94:	0801506f 	.word	0x0801506f
 8000f98:	08015071 	.word	0x08015071
 8000f9c:	08015075 	.word	0x08015075
 8000fa0:	08015086 	.word	0x08015086
 8000fa4:	08015097 	.word	0x08015097
 8000fa8:	08015099 	.word	0x08015099
 8000fac:	0801509d 	.word	0x0801509d
 8000fb0:	0801509f 	.word	0x0801509f
 8000fb4:	080150a4 	.word	0x080150a4
 8000fb8:	080150a9 	.word	0x080150a9
 8000fbc:	080150ab 	.word	0x080150ab
 8000fc0:	080150ad 	.word	0x080150ad
 8000fc4:	080150af 	.word	0x080150af

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000fc8:	4908      	ldr	r1, [pc, #32]	; (8000fec <OTM8009A_Init+0x488>)
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f006 f886 	bl	80070dc <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <OTM8009A_Init+0x48c>)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f006 f882 	bl	80070dc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000fd8:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <OTM8009A_Init+0x490>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f006 f87e 	bl	80070dc <DSI_IO_WriteCmd>

  return 0;
}
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000fe4:	4904      	ldr	r1, [pc, #16]	; (8000ff8 <OTM8009A_Init+0x494>)
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	e737      	b.n	8000e5a <OTM8009A_Init+0x2f6>
 8000fea:	bf00      	nop
 8000fec:	080150b1 	.word	0x080150b1
 8000ff0:	08014f20 	.word	0x08014f20
 8000ff4:	080150b3 	.word	0x080150b3
 8000ff8:	0801509b 	.word	0x0801509b

08000ffc <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8000ffc:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8000ffe:	4d2f      	ldr	r5, [pc, #188]	; (80010bc <I2C1_Init+0xc0>)
{
 8001000:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8001002:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8001006:	f002 f9ef 	bl	80033e8 <HAL_I2C_GetState>
 800100a:	4604      	mov	r4, r0
 800100c:	2800      	cmp	r0, #0
 800100e:	d152      	bne.n	80010b6 <I2C1_Init+0xba>
  {
    heval_I2c1.Instance = I2C1;
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <I2C1_Init+0xc4>)
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <I2C1_Init+0xc8>)
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 8001014:	4e2c      	ldr	r6, [pc, #176]	; (80010c8 <I2C1_Init+0xcc>)
 8001016:	9001      	str	r0, [sp, #4]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8001018:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
    heval_I2c1.Init.OwnAddress1     = 0;
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 800101c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    heval_I2c1.Init.OwnAddress1     = 0;
 8001020:	e9c5 0017 	strd	r0, r0, [r5, #92]	; 0x5c
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	e9c5 3019 	strd	r3, r0, [r5, #100]	; 0x64
    heval_I2c1.Init.OwnAddress2     = 0;
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	e9c5 001b 	strd	r0, r0, [r5, #108]	; 0x6c
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800102c:	6768      	str	r0, [r5, #116]	; 0x74
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 800102e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6333      	str	r3, [r6, #48]	; 0x30
 8001036:	6b33      	ldr	r3, [r6, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001038:	9005      	str	r0, [sp, #20]
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	2312      	movs	r3, #18
 8001048:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 800104c:	2002      	movs	r0, #2
 800104e:	2304      	movs	r3, #4
 8001050:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001054:	a903      	add	r1, sp, #12
 8001056:	481d      	ldr	r0, [pc, #116]	; (80010cc <I2C1_Init+0xd0>)
 8001058:	f001 f984 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001060:	a903      	add	r1, sp, #12
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <I2C1_Init+0xd0>)
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8001064:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001066:	f001 f97d 	bl	8002364 <HAL_GPIO_Init>
  DISCO_I2C1_CLK_ENABLE();
 800106a:	9402      	str	r4, [sp, #8]
 800106c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800106e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001072:	6433      	str	r3, [r6, #64]	; 0x40
 8001074:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	9b02      	ldr	r3, [sp, #8]
  DISCO_I2C1_FORCE_RESET();
 800107e:	6a33      	ldr	r3, [r6, #32]
 8001080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001084:	6233      	str	r3, [r6, #32]
  DISCO_I2C1_RELEASE_RESET();
 8001086:	6a33      	ldr	r3, [r6, #32]
 8001088:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800108c:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 800108e:	4622      	mov	r2, r4
 8001090:	2105      	movs	r1, #5
 8001092:	201f      	movs	r0, #31
 8001094:	f000 fc66 	bl	8001964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 8001098:	201f      	movs	r0, #31
 800109a:	f000 fc97 	bl	80019cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 800109e:	4622      	mov	r2, r4
 80010a0:	2105      	movs	r1, #5
 80010a2:	2020      	movs	r0, #32
 80010a4:	f000 fc5e 	bl	8001964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 80010a8:	2020      	movs	r0, #32
 80010aa:	f000 fc8f 	bl	80019cc <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2C1_MspInit();
    HAL_I2C_Init(&heval_I2c1);
 80010ae:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80010b2:	f001 ff37 	bl	8002f24 <HAL_I2C_Init>
  }
}
 80010b6:	b008      	add	sp, #32
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
 80010ba:	bf00      	nop
 80010bc:	20000128 	.word	0x20000128
 80010c0:	40005400 	.word	0x40005400
 80010c4:	00061a80 	.word	0x00061a80
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400

080010d0 <I2C1_Error.isra.3>:

/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
 80010d0:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <I2C1_Error.isra.3+0x10>)
 80010d4:	f001 ffd3 	bl	800307e <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
}
 80010d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2C1_Init();
 80010dc:	f7ff bf8e 	b.w	8000ffc <I2C1_Init>
 80010e0:	2000017c 	.word	0x2000017c

080010e4 <TS_IO_Init>:
 80010e4:	f7ff bf8a 	b.w	8000ffc <I2C1_Init>

080010e8 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80010e8:	b510      	push	{r4, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 80010ee:	2301      	movs	r3, #1
 80010f0:	f804 2d01 	strb.w	r2, [r4, #-1]!
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80010fa:	9400      	str	r4, [sp, #0]
 80010fc:	460a      	mov	r2, r1
 80010fe:	4601      	mov	r1, r0
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <TS_IO_Write+0x28>)
 8001102:	f001 ffd5 	bl	80030b0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001106:	b108      	cbz	r0, 800110c <TS_IO_Write+0x24>
    I2C1_Error(Addr);
 8001108:	f7ff ffe2 	bl	80010d0 <I2C1_Error.isra.3>
  I2C1_Write(Addr, Reg, Value);
}
 800110c:	b006      	add	sp, #24
 800110e:	bd10      	pop	{r4, pc}
 8001110:	2000017c 	.word	0x2000017c

08001114 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Value = 0;
 8001116:	aa06      	add	r2, sp, #24
 8001118:	2300      	movs	r3, #0
 800111a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 800111e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8001122:	2301      	movs	r3, #1
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 800112a:	460a      	mov	r2, r1
 800112c:	4601      	mov	r1, r0
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <TS_IO_Read+0x30>)
 8001130:	f002 f84e 	bl	80031d0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001134:	b108      	cbz	r0, 800113a <TS_IO_Read+0x26>
    I2C1_Error(Addr);
 8001136:	f7ff ffcb 	bl	80010d0 <I2C1_Error.isra.3>
  return I2C1_Read(Addr, Reg);
}
 800113a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800113e:	b007      	add	sp, #28
 8001140:	f85d fb04 	ldr.w	pc, [sp], #4
 8001144:	2000017c 	.word	0x2000017c

08001148 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 800114a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800114e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001152:	9200      	str	r2, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	460a      	mov	r2, r1
 8001158:	4601      	mov	r1, r0
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <TS_IO_ReadMultiple+0x28>)
 800115c:	f002 f838 	bl	80031d0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001160:	4604      	mov	r4, r0
 8001162:	b108      	cbz	r0, 8001168 <TS_IO_ReadMultiple+0x20>
    I2C1_Error(Addr);
 8001164:	f7ff ffb4 	bl	80010d0 <I2C1_Error.isra.3>
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8001168:	4620      	mov	r0, r4
 800116a:	b004      	add	sp, #16
 800116c:	bd10      	pop	{r4, pc}
 800116e:	bf00      	nop
 8001170:	2000017c 	.word	0x2000017c

08001174 <OTM8009A_IO_Delay>:
 8001174:	f000 bbd0 	b.w	8001918 <HAL_Delay>

08001178 <QSPI_AutoPollingMemReady.constprop.1>:
/**
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout: timeout value before returning an error
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8001178:	b500      	push	{lr}
 800117a:	b095      	sub	sp, #84	; 0x54
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800117c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001180:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001182:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001186:	2305      	movs	r3, #5
 8001188:	9306      	str	r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800118a:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800118c:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 800118e:	2201      	movs	r2, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
 8001190:	e9cd 2303 	strd	r2, r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001194:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8001198:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800119a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800119e:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80011a0:	9300      	str	r3, [sp, #0]
  s_config.Interval        = 0x10;
 80011a2:	2310      	movs	r3, #16
 80011a4:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80011a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_config.Mask            = N25Q128A_SR_WIP;
 80011aa:	9201      	str	r2, [sp, #4]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80011ac:	9305      	str	r3, [sp, #20]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80011ae:	466a      	mov	r2, sp
 80011b0:	4603      	mov	r3, r0
 80011b2:	a906      	add	r1, sp, #24
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <QSPI_AutoPollingMemReady.constprop.1+0x50>)
 80011b6:	f002 fd59 	bl	8003c6c <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 80011ba:	3000      	adds	r0, #0
 80011bc:	bf18      	it	ne
 80011be:	2001      	movne	r0, #1
 80011c0:	b015      	add	sp, #84	; 0x54
 80011c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011c6:	bf00      	nop
 80011c8:	200082ec 	.word	0x200082ec

080011cc <QSPI_WriteEnable.constprop.3>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80011cc:	b500      	push	{lr}
 80011ce:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80011d6:	2306      	movs	r3, #6
 80011d8:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80011de:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011e0:	a906      	add	r1, sp, #24
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <QSPI_WriteEnable.constprop.3+0x6c>)
  s_command.DataMode          = QSPI_DATA_NONE;
 80011e4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011e6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80011ea:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011ec:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011f0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011f2:	f002 fcf7 	bl	8003be4 <HAL_QSPI_Command>
 80011f6:	b9e0      	cbnz	r0, 8001232 <QSPI_WriteEnable.constprop.3+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 80011f8:	2302      	movs	r3, #2
  s_config.Mask            = N25Q128A_SR_WREN;
 80011fa:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80011fe:	2201      	movs	r2, #1
 8001200:	2310      	movs	r3, #16
 8001202:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800120a:	2305      	movs	r3, #5
 800120c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001214:	9004      	str	r0, [sp, #16]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001216:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001218:	466a      	mov	r2, sp
 800121a:	f241 3388 	movw	r3, #5000	; 0x1388
 800121e:	a906      	add	r1, sp, #24
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <QSPI_WriteEnable.constprop.3+0x6c>)
 8001222:	f002 fd23 	bl	8003c6c <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8001226:	3000      	adds	r0, #0
 8001228:	bf18      	it	ne
 800122a:	2001      	movne	r0, #1
}
 800122c:	b015      	add	sp, #84	; 0x54
 800122e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8001232:	2001      	movs	r0, #1
 8001234:	e7fa      	b.n	800122c <QSPI_WriteEnable.constprop.3+0x60>
 8001236:	bf00      	nop
 8001238:	200082ec 	.word	0x200082ec

0800123c <BSP_QSPI_EnableMemoryMappedMode>:
{
 800123c:	b500      	push	{lr}
 800123e:	b091      	sub	sp, #68	; 0x44
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001244:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001246:	23eb      	movs	r3, #235	; 0xeb
 8001248:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800124a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800124e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001256:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800125a:	2300      	movs	r3, #0
 800125c:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001260:	220a      	movs	r2, #10
 8001262:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001264:	a902      	add	r1, sp, #8
 8001266:	466a      	mov	r2, sp
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800126a:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800126c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001270:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001272:	f002 fd4d 	bl	8003d10 <HAL_QSPI_MemoryMapped>
}
 8001276:	3000      	adds	r0, #0
 8001278:	bf18      	it	ne
 800127a:	2001      	movne	r0, #1
 800127c:	b011      	add	sp, #68	; 0x44
 800127e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001282:	bf00      	nop
 8001284:	200082ec 	.word	0x200082ec

08001288 <BSP_QSPI_MspInit>:
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
  QSPI_CLK_ENABLE();
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <BSP_QSPI_MspInit+0xb8>)
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800128e:	4d2d      	ldr	r5, [pc, #180]	; (8001344 <BSP_QSPI_MspInit+0xbc>)
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001290:	482d      	ldr	r0, [pc, #180]	; (8001348 <BSP_QSPI_MspInit+0xc0>)
  QSPI_CLK_ENABLE();
 8001292:	2400      	movs	r4, #0
 8001294:	9400      	str	r4, [sp, #0]
 8001296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001298:	f042 0202 	orr.w	r2, r2, #2
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
 800129e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a0:	f002 0202 	and.w	r2, r2, #2
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	f042 0202 	orr.w	r2, r2, #2
 80012ae:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	f022 0202 	bic.w	r2, r2, #2
 80012b6:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 80012b8:	9401      	str	r4, [sp, #4]
 80012ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012bc:	f042 0202 	orr.w	r2, r2, #2
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
 80012c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c4:	f002 0202 	and.w	r2, r2, #2
 80012c8:	9201      	str	r2, [sp, #4]
 80012ca:	9a01      	ldr	r2, [sp, #4]
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 80012cc:	9402      	str	r4, [sp, #8]
 80012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d0:	f042 0220 	orr.w	r2, r2, #32
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012de:	2240      	movs	r2, #64	; 0x40
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 80012e0:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80012e8:	2101      	movs	r1, #1
 80012ea:	2303      	movs	r3, #3
 80012ec:	e9cd 1305 	strd	r1, r3, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 80012f0:	270a      	movs	r7, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80012f2:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 80012f4:	2609      	movs	r6, #9
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 80012f6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80012f8:	f001 f834 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001300:	a903      	add	r1, sp, #12
 8001302:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001304:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001306:	9405      	str	r4, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8001308:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800130a:	f001 f82b 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8001312:	a903      	add	r1, sp, #12
 8001314:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 8001316:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8001318:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 800131a:	f001 f823 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 800131e:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8001320:	a903      	add	r1, sp, #12
 8001322:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 8001324:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8001326:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8001328:	f001 f81c 	bl	8002364 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800132c:	4622      	mov	r2, r4
 800132e:	210f      	movs	r1, #15
 8001330:	205b      	movs	r0, #91	; 0x5b
 8001332:	f000 fb17 	bl	8001964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001336:	205b      	movs	r0, #91	; 0x5b
 8001338:	f000 fb48 	bl	80019cc <HAL_NVIC_EnableIRQ>
}
 800133c:	b009      	add	sp, #36	; 0x24
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40021400 	.word	0x40021400
 8001348:	40020400 	.word	0x40020400

0800134c <BSP_QSPI_Init>:
{
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 800134e:	4c49      	ldr	r4, [pc, #292]	; (8001474 <BSP_QSPI_Init+0x128>)
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <BSP_QSPI_Init+0x12c>)
 8001352:	6023      	str	r3, [r4, #0]
{
 8001354:	b091      	sub	sp, #68	; 0x44
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001356:	4620      	mov	r0, r4
 8001358:	f002 fc31 	bl	8003bbe <HAL_QSPI_DeInit>
 800135c:	4605      	mov	r5, r0
 800135e:	b118      	cbz	r0, 8001368 <BSP_QSPI_Init+0x1c>
    return QSPI_ERROR;
 8001360:	2501      	movs	r5, #1
}
 8001362:	4628      	mov	r0, r5
 8001364:	b011      	add	sp, #68	; 0x44
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8001368:	4601      	mov	r1, r0
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff ff8c 	bl	8001288 <BSP_QSPI_MspInit>
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI Freq= 180 MHz / (1+1) = 90 MHz */
 8001370:	2601      	movs	r6, #1
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001372:	2310      	movs	r3, #16
  QSPIHandle.Init.FifoThreshold      = 1;
 8001374:	e9c4 6601 	strd	r6, r6, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001378:	60e3      	str	r3, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 800137e:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	6123      	str	r3, [r4, #16]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800138a:	4620      	mov	r0, r4
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001390:	e9c4 3505 	strd	r3, r5, [r4, #20]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8001394:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001398:	f002 fbbe 	bl	8003b18 <HAL_QSPI_Init>
 800139c:	2800      	cmp	r0, #0
 800139e:	d1df      	bne.n	8001360 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013a0:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 80013a4:	2366      	movs	r3, #102	; 0x66
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DataMode          = QSPI_DATA_NONE;
 80013aa:	900b      	str	r0, [sp, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80013ac:	9007      	str	r0, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013ae:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013b2:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	a902      	add	r1, sp, #8
 80013ba:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013bc:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80013be:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013c0:	f002 fc10 	bl	8003be4 <HAL_QSPI_Command>
 80013c4:	b108      	cbz	r0, 80013ca <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 80013c6:	2504      	movs	r5, #4
 80013c8:	e7cb      	b.n	8001362 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 80013ca:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	a902      	add	r1, sp, #8
 80013d2:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 80013d4:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013d6:	f002 fc05 	bl	8003be4 <HAL_QSPI_Command>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d1f3      	bne.n	80013c6 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80013de:	f241 3088 	movw	r0, #5000	; 0x1388
 80013e2:	f7ff fec9 	bl	8001178 <QSPI_AutoPollingMemReady.constprop.1>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d1ed      	bne.n	80013c6 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80013ea:	2385      	movs	r3, #133	; 0x85
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013ec:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80013f0:	9007      	str	r0, [sp, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013f2:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013f6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	a902      	add	r1, sp, #8
 8001400:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001402:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8001404:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001406:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001408:	f002 fbec 	bl	8003be4 <HAL_QSPI_Command>
 800140c:	2800      	cmp	r0, #0
 800140e:	d1da      	bne.n	80013c6 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	f10d 0107 	add.w	r1, sp, #7
 8001418:	4620      	mov	r0, r4
 800141a:	f002 fd7c 	bl	8003f16 <HAL_QSPI_Receive>
 800141e:	2800      	cmp	r0, #0
 8001420:	d1d1      	bne.n	80013c6 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001422:	f7ff fed3 	bl	80011cc <QSPI_WriteEnable.constprop.3>
 8001426:	4605      	mov	r5, r0
 8001428:	2800      	cmp	r0, #0
 800142a:	d1cc      	bne.n	80013c6 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800142c:	2381      	movs	r3, #129	; 0x81
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	22f0      	movs	r2, #240	; 0xf0
 8001432:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001436:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800143a:	210a      	movs	r1, #10
 800143c:	fab2 f282 	clz	r2, r2
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800144a:	a902      	add	r1, sp, #8
 800144c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001450:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001452:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001456:	f002 fbc5 	bl	8003be4 <HAL_QSPI_Command>
 800145a:	2800      	cmp	r0, #0
 800145c:	d1b3      	bne.n	80013c6 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	f10d 0107 	add.w	r1, sp, #7
 8001466:	4620      	mov	r0, r4
 8001468:	f002 fcf6 	bl	8003e58 <HAL_QSPI_Transmit>
 800146c:	2800      	cmp	r0, #0
 800146e:	f43f af78 	beq.w	8001362 <BSP_QSPI_Init+0x16>
 8001472:	e7a8      	b.n	80013c6 <BSP_QSPI_Init+0x7a>
 8001474:	200082ec 	.word	0x200082ec
 8001478:	a0001000 	.word	0xa0001000

0800147c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800147c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001480:	4c21      	ldr	r4, [pc, #132]	; (8001508 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001482:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001484:	19e5      	adds	r5, r4, r7
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001486:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8001488:	f04f 0800 	mov.w	r8, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800148c:	4621      	mov	r1, r4
{
 800148e:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001496:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800149a:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800149e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014a2:	f003 fac2 	bl	8004a2a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80014a6:	4630      	mov	r0, r6
 80014a8:	f000 fa36 	bl	8001918 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80014ac:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014ae:	4621      	mov	r1, r4
 80014b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b4:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80014b6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80014ba:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014be:	f003 fab4 	bl	8004a2a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80014c2:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80014c4:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014c8:	4621      	mov	r1, r4
  Command.AutoRefreshNumber      = 8;
 80014ca:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d0:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 80014d2:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014d6:	f003 faa8 	bl	8004a2a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80014da:	f44f 730c 	mov.w	r3, #560	; 0x230
 80014de:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80014e0:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80014e2:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014e6:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = tmpmrd;
 80014e8:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 80014ea:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f0:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = tmpmrd;
 80014f2:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014f4:	f003 fa99 	bl	8004a2a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 80014f8:	4649      	mov	r1, r9
 80014fa:	4628      	mov	r0, r5
}
 80014fc:	b003      	add	sp, #12
 80014fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8001502:	f003 baa9 	b.w	8004a58 <HAL_SDRAM_ProgramRefreshRate>
 8001506:	bf00      	nop
 8001508:	200001d0 	.word	0x200001d0

0800150c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800150c:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800150e:	4606      	mov	r6, r0
{
 8001510:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001512:	2800      	cmp	r0, #0
 8001514:	f000 80c1 	beq.w	800169a <BSP_SDRAM_MspInit+0x18e>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <BSP_SDRAM_MspInit+0x194>)
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = GPIO_AF12_FMC;

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800151a:	4862      	ldr	r0, [pc, #392]	; (80016a4 <BSP_SDRAM_MspInit+0x198>)
    __HAL_RCC_FMC_CLK_ENABLE();
 800151c:	2400      	movs	r4, #0
 800151e:	9400      	str	r4, [sp, #0]
 8001520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
 8001528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152a:	f002 0201 	and.w	r2, r2, #1
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	9a00      	ldr	r2, [sp, #0]
    __DMAx_CLK_ENABLE();
 8001532:	9401      	str	r4, [sp, #4]
 8001534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001536:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
 800153c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	9402      	str	r4, [sp, #8]
 8001548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154a:	f042 0204 	orr.w	r2, r2, #4
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
 8001550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001552:	f002 0204 	and.w	r2, r2, #4
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	9403      	str	r4, [sp, #12]
 800155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155e:	f042 0208 	orr.w	r2, r2, #8
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	f002 0208 	and.w	r2, r2, #8
 800156a:	9203      	str	r2, [sp, #12]
 800156c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	9404      	str	r4, [sp, #16]
 8001570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001572:	f042 0210 	orr.w	r2, r2, #16
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
 8001578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157a:	f002 0210 	and.w	r2, r2, #16
 800157e:	9204      	str	r2, [sp, #16]
 8001580:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001582:	9405      	str	r4, [sp, #20]
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f042 0220 	orr.w	r2, r2, #32
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f002 0220 	and.w	r2, r2, #32
 8001592:	9205      	str	r2, [sp, #20]
 8001594:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	9406      	str	r4, [sp, #24]
 8001598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
 80015a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80015a6:	9206      	str	r2, [sp, #24]
 80015a8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	9407      	str	r4, [sp, #28]
 80015ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
 80015b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015ba:	9207      	str	r2, [sp, #28]
 80015bc:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015be:	9408      	str	r4, [sp, #32]
 80015c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
    gpio_init_structure.Pin   = GPIO_PIN_0;
 80015ce:	ad0e      	add	r5, sp, #56	; 0x38
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015d0:	9308      	str	r3, [sp, #32]
 80015d2:	9b08      	ldr	r3, [sp, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 80015d4:	2301      	movs	r3, #1
    gpio_init_structure.Pin   = GPIO_PIN_0;
 80015d6:	f845 3d14 	str.w	r3, [r5, #-20]!
    gpio_init_structure.Pull      = GPIO_PULLUP;
 80015da:	2202      	movs	r2, #2
 80015dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80015e0:	4629      	mov	r1, r5
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80015e2:	920c      	str	r2, [sp, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80015e4:	220c      	movs	r2, #12
 80015e6:	920d      	str	r2, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80015e8:	f000 febc 	bl	8002364 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80015ec:	f24c 7303 	movw	r3, #50947	; 0xc703
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80015f0:	4629      	mov	r1, r5
 80015f2:	482d      	ldr	r0, [pc, #180]	; (80016a8 <BSP_SDRAM_MspInit+0x19c>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80015f4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80015f6:	f000 feb5 	bl	8002364 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80015fa:	f64f 7383 	movw	r3, #65411	; 0xff83
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80015fe:	4629      	mov	r1, r5
 8001600:	482a      	ldr	r0, [pc, #168]	; (80016ac <BSP_SDRAM_MspInit+0x1a0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001602:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001604:	f000 feae 	bl	8002364 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001608:	f64f 033f 	movw	r3, #63551	; 0xf83f
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800160c:	4629      	mov	r1, r5
 800160e:	4828      	ldr	r0, [pc, #160]	; (80016b0 <BSP_SDRAM_MspInit+0x1a4>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001610:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001612:	f000 fea7 	bl	8002364 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001616:	f248 1333 	movw	r3, #33075	; 0x8133
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800161a:	4629      	mov	r1, r5
 800161c:	4825      	ldr	r0, [pc, #148]	; (80016b4 <BSP_SDRAM_MspInit+0x1a8>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800161e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001620:	f000 fea0 	bl	8002364 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001624:	f64f 730c 	movw	r3, #65292	; 0xff0c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001628:	4629      	mov	r1, r5
 800162a:	4823      	ldr	r0, [pc, #140]	; (80016b8 <BSP_SDRAM_MspInit+0x1ac>)
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800162c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800162e:	f000 fe99 	bl	8002364 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001632:	f240 63ff 	movw	r3, #1791	; 0x6ff
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001636:	4629      	mov	r1, r5
 8001638:	4820      	ldr	r0, [pc, #128]	; (80016bc <BSP_SDRAM_MspInit+0x1b0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800163a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800163c:	f000 fe92 	bl	8002364 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <BSP_SDRAM_MspInit+0x1b4>)
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800164c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001654:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001658:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dma_handle.Init.Mode                = DMA_NORMAL;
 800165c:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001660:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001664:	461d      	mov	r5, r3
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001666:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800166a:	2203      	movs	r2, #3
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800166c:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <BSP_SDRAM_MspInit+0x1b8>)
 8001672:	f845 2f44 	str.w	r2, [r5, #68]!
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001676:	675c      	str	r4, [r3, #116]	; 0x74

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8001678:	4628      	mov	r0, r5
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800167a:	6335      	str	r5, [r6, #48]	; 0x30
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800167c:	649c      	str	r4, [r3, #72]	; 0x48
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800167e:	67de      	str	r6, [r3, #124]	; 0x7c
    HAL_DMA_DeInit(&dma_handle);
 8001680:	f000 fa46 	bl	8001b10 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8001684:	4628      	mov	r0, r5
 8001686:	f000 f9c5 	bl	8001a14 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800168a:	2038      	movs	r0, #56	; 0x38
 800168c:	4622      	mov	r2, r4
 800168e:	2105      	movs	r1, #5
 8001690:	f000 f968 	bl	8001964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001694:	2038      	movs	r0, #56	; 0x38
 8001696:	f000 f999 	bl	80019cc <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800169a:	b00e      	add	sp, #56	; 0x38
 800169c:	bd70      	pop	{r4, r5, r6, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40021c00 	.word	0x40021c00
 80016bc:	40022000 	.word	0x40022000
 80016c0:	200001d0 	.word	0x200001d0
 80016c4:	40026410 	.word	0x40026410

080016c8 <BSP_SDRAM_Init>:
{
 80016c8:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80016ca:	4c1b      	ldr	r4, [pc, #108]	; (8001738 <BSP_SDRAM_Init+0x70>)
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <BSP_SDRAM_Init+0x74>)
 80016ce:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 80016d0:	2107      	movs	r1, #7
 80016d2:	2302      	movs	r3, #2
 80016d4:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.SelfRefreshTime      = 4;
 80016d8:	2204      	movs	r2, #4
  Timing.RPDelay              = 2;
 80016da:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  Timing.RCDDelay             = 2;
 80016de:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016e2:	2020      	movs	r0, #32
 80016e4:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 80016e6:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ea:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80016ee:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80016f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016f4:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80016f8:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8001700:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001704:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001708:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800170a:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800170e:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8001710:	f7ff fefc 	bl	800150c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001714:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8001718:	f104 0010 	add.w	r0, r4, #16
 800171c:	f003 f965 	bl	80049ea <HAL_SDRAM_Init>
 8001720:	4c07      	ldr	r4, [pc, #28]	; (8001740 <BSP_SDRAM_Init+0x78>)
 8001722:	b138      	cbz	r0, 8001734 <BSP_SDRAM_Init+0x6c>
    sdramstatus = SDRAM_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001728:	f240 5069 	movw	r0, #1385	; 0x569
 800172c:	f7ff fea6 	bl	800147c <BSP_SDRAM_Initialization_sequence>
}
 8001730:	7820      	ldrb	r0, [r4, #0]
 8001732:	bd10      	pop	{r4, pc}
    sdramstatus = SDRAM_OK;
 8001734:	7020      	strb	r0, [r4, #0]
 8001736:	e7f7      	b.n	8001728 <BSP_SDRAM_Init+0x60>
 8001738:	200001d0 	.word	0x200001d0
 800173c:	a0000140 	.word	0xa0000140
 8001740:	20000034 	.word	0x20000034

08001744 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8001748:	4d15      	ldr	r5, [pc, #84]	; (80017a0 <BSP_TS_Init+0x5c>)
 800174a:	4e16      	ldr	r6, [pc, #88]	; (80017a4 <BSP_TS_Init+0x60>)
 800174c:	682b      	ldr	r3, [r5, #0]
{
 800174e:	4681      	mov	r9, r0
  ft6x06_ts_drv.Init(I2C_Address);
 8001750:	7830      	ldrb	r0, [r6, #0]
{
 8001752:	4688      	mov	r8, r1
  ft6x06_ts_drv.Init(I2C_Address);
 8001754:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8001756:	686b      	ldr	r3, [r5, #4]
 8001758:	2054      	movs	r0, #84	; 0x54
 800175a:	4798      	blx	r3
  if(ts_id1 != FT6206_ID_VALUE)
 800175c:	b2c0      	uxtb	r0, r0
 800175e:	2811      	cmp	r0, #17
 8001760:	4634      	mov	r4, r6
 8001762:	462f      	mov	r7, r5
 8001764:	d00a      	beq.n	800177c <BSP_TS_Init+0x38>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8001766:	686b      	ldr	r3, [r5, #4]
 8001768:	2070      	movs	r0, #112	; 0x70
 800176a:	4798      	blx	r3
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800176c:	b2c0      	uxtb	r0, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 800176e:	2370      	movs	r3, #112	; 0x70
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001770:	2811      	cmp	r0, #17
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001772:	7033      	strb	r3, [r6, #0]
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001774:	d004      	beq.n	8001780 <BSP_TS_Init+0x3c>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8001776:	2003      	movs	r0, #3
  }

  return (ts_status);
}
 8001778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 800177c:	2354      	movs	r3, #84	; 0x54
 800177e:	7033      	strb	r3, [r6, #0]
    if(ts_SizeX < ts_SizeY)
 8001780:	45c1      	cmp	r9, r8
      ts_orientation = TS_SWAP_NONE;                
 8001782:	bf34      	ite	cc
 8001784:	2301      	movcc	r3, #1
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8001786:	230c      	movcs	r3, #12
 8001788:	7223      	strb	r3, [r4, #8]
      ts_driver->Reset(I2C_Address);
 800178a:	7820      	ldrb	r0, [r4, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
    ts_driver = &ft6x06_ts_drv;
 800178e:	6067      	str	r7, [r4, #4]
      ts_driver->Reset(I2C_Address);
 8001790:	4798      	blx	r3
      ts_driver->Start(I2C_Address);
 8001792:	6863      	ldr	r3, [r4, #4]
 8001794:	7820      	ldrb	r0, [r4, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 800179a:	2000      	movs	r0, #0
 800179c:	e7ec      	b.n	8001778 <BSP_TS_Init+0x34>
 800179e:	bf00      	nop
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	200002f0 	.word	0x200002f0

080017a8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80017a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80017ac:	4c30      	ldr	r4, [pc, #192]	; (8001870 <BSP_TS_GetState+0xc8>)
 80017ae:	6863      	ldr	r3, [r4, #4]
{
 80017b0:	4680      	mov	r8, r0
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	7820      	ldrb	r0, [r4, #0]
 80017b6:	4798      	blx	r3
 80017b8:	f888 0000 	strb.w	r0, [r8]
  if(TS_State->touchDetected)
 80017bc:	b160      	cbz	r0, 80017d8 <BSP_TS_GetState+0x30>
 80017be:	f108 0902 	add.w	r9, r8, #2
 80017c2:	ae01      	add	r6, sp, #4
 80017c4:	466d      	mov	r5, sp
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80017c6:	2700      	movs	r7, #0
      if(ts_orientation & TS_SWAP_Y)
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80017c8:	f104 0a0c 	add.w	sl, r4, #12
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80017cc:	f104 0b14 	add.w	fp, r4, #20
    for(index=0; index < TS_State->touchDetected; index++)
 80017d0:	f898 3000 	ldrb.w	r3, [r8]
 80017d4:	42bb      	cmp	r3, r7
 80017d6:	d803      	bhi.n	80017e0 <BSP_TS_GetState+0x38>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 80017d8:	2000      	movs	r0, #0
 80017da:	b003      	add	sp, #12
 80017dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	7820      	ldrb	r0, [r4, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4629      	mov	r1, r5
 80017e8:	4632      	mov	r2, r6
 80017ea:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 80017ec:	7a22      	ldrb	r2, [r4, #8]
 80017ee:	0710      	lsls	r0, r2, #28
        tmp = Raw_x[index];
 80017f0:	bf41      	itttt	mi
 80017f2:	882b      	ldrhmi	r3, [r5, #0]
        Raw_x[index] = Raw_y[index]; 
 80017f4:	8831      	ldrhmi	r1, [r6, #0]
 80017f6:	8029      	strhmi	r1, [r5, #0]
        Raw_y[index] = tmp;
 80017f8:	8033      	strhmi	r3, [r6, #0]
      if(ts_orientation & TS_SWAP_X)
 80017fa:	0791      	lsls	r1, r2, #30
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80017fc:	bf41      	itttt	mi
 80017fe:	882b      	ldrhmi	r3, [r5, #0]
 8001800:	f5c3 7347 	rsbmi	r3, r3, #796	; 0x31c
 8001804:	3303      	addmi	r3, #3
 8001806:	802b      	strhmi	r3, [r5, #0]
      if(ts_orientation & TS_SWAP_Y)
 8001808:	0753      	lsls	r3, r2, #29
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800180a:	bf48      	it	mi
 800180c:	8833      	ldrhmi	r3, [r6, #0]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800180e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 8001812:	f835 cb02 	ldrh.w	ip, [r5], #2
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8001816:	bf48      	it	mi
 8001818:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 800181c:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8001820:	bf44      	itt	mi
 8001822:	3301      	addmi	r3, #1
 8001824:	8033      	strhmi	r3, [r6, #0]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8001826:	f851 e00b 	ldr.w	lr, [r1, fp]
 800182a:	f836 0b02 	ldrh.w	r0, [r6], #2
 800182e:	b293      	uxth	r3, r2
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8001830:	4594      	cmp	ip, r2
 8001832:	bf88      	it	hi
 8001834:	ebac 0303 	subhi.w	r3, ip, r3
 8001838:	fa1f f28e 	uxth.w	r2, lr
 800183c:	bf98      	it	ls
 800183e:	eba3 030c 	subls.w	r3, r3, ip
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8001842:	4570      	cmp	r0, lr
 8001844:	bf8c      	ite	hi
 8001846:	1a82      	subhi	r2, r0, r2
 8001848:	1a12      	subls	r2, r2, r0
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800184a:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800184c:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 800184e:	4413      	add	r3, r2
 8001850:	2b05      	cmp	r3, #5
        _x[index] = Raw_x[index];
 8001852:	bfc4      	itt	gt
 8001854:	f84a c001 	strgt.w	ip, [sl, r1]
        _y[index] = Raw_y[index];
 8001858:	f84b 0001 	strgt.w	r0, [fp, r1]
      TS_State->touchX[index] = _x[index];
 800185c:	f85a 3001 	ldr.w	r3, [sl, r1]
 8001860:	f829 3b02 	strh.w	r3, [r9], #2
      TS_State->touchY[index] = _y[index];
 8001864:	f85b 3001 	ldr.w	r3, [fp, r1]
 8001868:	f8a9 3002 	strh.w	r3, [r9, #2]
    for(index=0; index < TS_State->touchDetected; index++)
 800186c:	3701      	adds	r7, #1
 800186e:	e7af      	b.n	80017d0 <BSP_TS_GetState+0x28>
 8001870:	200002f0 	.word	0x200002f0

08001874 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	490f      	ldr	r1, [pc, #60]	; (80018b4 <SystemInit+0x40>)
 8001876:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800187a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <SystemInit+0x44>)
 8001884:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001886:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800188e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001896:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800189a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <SystemInit+0x48>)
 800189e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018ae:	608b      	str	r3, [r1, #8]
#endif
}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	24003010 	.word	0x24003010

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_Init+0x30>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f82f 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f7ff f804 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f001 fffe 	bl	80038e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80018ec:	2000      	movs	r0, #0
 80018ee:	bd08      	pop	{r3, pc}
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <HAL_IncTick+0x10>)
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_IncTick+0x14>)
 80018f8:	6811      	ldr	r1, [r2, #0]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	440b      	add	r3, r1
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20008338 	.word	0x20008338
 8001908:	2000003c 	.word	0x2000003c

0800190c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800190c:	4b01      	ldr	r3, [pc, #4]	; (8001914 <HAL_GetTick+0x8>)
 800190e:	6818      	ldr	r0, [r3, #0]
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20008338 	.word	0x20008338

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff fff6 	bl	800190c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001920:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	bf1c      	itt	ne
 8001924:	4b05      	ldrne	r3, [pc, #20]	; (800193c <HAL_Delay+0x24>)
 8001926:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001928:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800192a:	bf18      	it	ne
 800192c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192e:	f7ff ffed 	bl	800190c <HAL_GetTick>
 8001932:	1b40      	subs	r0, r0, r5
 8001934:	42a0      	cmp	r0, r4
 8001936:	d3fa      	bcc.n	800192e <HAL_Delay+0x16>
  {
  }
}
 8001938:	bd38      	pop	{r3, r4, r5, pc}
 800193a:	bf00      	nop
 800193c:	2000003c 	.word	0x2000003c

08001940 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001942:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001944:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	0200      	lsls	r0, r0, #8
 8001952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001956:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800195a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800195c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b570      	push	{r4, r5, r6, lr}
 8001968:	68dc      	ldr	r4, [r3, #12]
 800196a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196e:	f1c4 0507 	rsb	r5, r4, #7
 8001972:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001974:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	bf28      	it	cs
 800197a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001980:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001982:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	bf8c      	ite	hi
 8001988:	3c03      	subhi	r4, #3
 800198a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	ea21 0303 	bic.w	r3, r1, r3
 8001990:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001992:	fa06 f404 	lsl.w	r4, r6, r4
 8001996:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800199a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	bfa8      	it	ge
 80019a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80019a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	bfbc      	itt	lt
 80019ac:	f000 000f 	andlt.w	r0, r0, #15
 80019b0:	4a05      	ldrlt	r2, [pc, #20]	; (80019c8 <HAL_NVIC_SetPriority+0x64>)
 80019b2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	bfaa      	itet	ge
 80019b6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	e000ed14 	.word	0xe000ed14

080019cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019cc:	2800      	cmp	r0, #0
 80019ce:	db08      	blt.n	80019e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d0:	0942      	lsrs	r2, r0, #5
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 001f 	and.w	r0, r0, #31
 80019d8:	fa03 f000 	lsl.w	r0, r3, r0
 80019dc:	4b01      	ldr	r3, [pc, #4]	; (80019e4 <HAL_NVIC_EnableIRQ+0x18>)
 80019de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019f0:	f023 0303 	bic.w	r3, r3, #3
 80019f4:	2118      	movs	r1, #24
 80019f6:	3a10      	subs	r2, #16
 80019f8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019fc:	4904      	ldr	r1, [pc, #16]	; (8001a10 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80019fe:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a00:	bf88      	it	hi
 8001a02:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a04:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a06:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a08:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001a0a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	080150cd 	.word	0x080150cd

08001a14 <HAL_DMA_Init>:
{
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ff78 	bl	800190c <HAL_GetTick>
 8001a1c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d071      	beq.n	8001b06 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001a22:	2300      	movs	r3, #0
 8001a24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001a28:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a38:	6821      	ldr	r1, [r4, #0]
 8001a3a:	680b      	ldr	r3, [r1, #0]
 8001a3c:	07d8      	lsls	r0, r3, #31
 8001a3e:	d43c      	bmi.n	8001aba <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001a40:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a42:	4d32      	ldr	r5, [pc, #200]	; (8001b0c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a44:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a46:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a48:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	68e2      	ldr	r2, [r4, #12]
 8001a50:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a52:	6922      	ldr	r2, [r4, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	6962      	ldr	r2, [r4, #20]
 8001a58:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	69e2      	ldr	r2, [r4, #28]
 8001a5c:	4303      	orrs	r3, r0
 8001a5e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a60:	6a22      	ldr	r2, [r4, #32]
 8001a62:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a66:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a68:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a6c:	bf02      	ittt	eq
 8001a6e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001a72:	4335      	orreq	r5, r6
 8001a74:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001a76:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001a78:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a7c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001a80:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a84:	d10b      	bne.n	8001a9e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001a86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a88:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001a8a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a8c:	b13d      	cbz	r5, 8001a9e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a8e:	b9f8      	cbnz	r0, 8001ad0 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001a90:	2a01      	cmp	r2, #1
 8001a92:	d02d      	beq.n	8001af0 <HAL_DMA_Init+0xdc>
 8001a94:	d301      	bcc.n	8001a9a <HAL_DMA_Init+0x86>
 8001a96:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a98:	d101      	bne.n	8001a9e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9a:	01ea      	lsls	r2, r5, #7
 8001a9c:	d42b      	bmi.n	8001af6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001a9e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ffa1 	bl	80019e8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001aa8:	233f      	movs	r3, #63	; 0x3f
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aae:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ab8:	e009      	b.n	8001ace <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff ff27 	bl	800190c <HAL_GetTick>
 8001abe:	1b40      	subs	r0, r0, r5
 8001ac0:	2805      	cmp	r0, #5
 8001ac2:	d9b9      	bls.n	8001a38 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001aca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001ace:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ad0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001ad4:	d113      	bne.n	8001afe <HAL_DMA_Init+0xea>
    switch (tmp)
 8001ad6:	2a03      	cmp	r2, #3
 8001ad8:	d8e1      	bhi.n	8001a9e <HAL_DMA_Init+0x8a>
 8001ada:	a001      	add	r0, pc, #4	; (adr r0, 8001ae0 <HAL_DMA_Init+0xcc>)
 8001adc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001ae0:	08001af7 	.word	0x08001af7
 8001ae4:	08001a9b 	.word	0x08001a9b
 8001ae8:	08001af7 	.word	0x08001af7
 8001aec:	08001af1 	.word	0x08001af1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001af4:	d1d3      	bne.n	8001a9e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7e5      	b.n	8001aca <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001afe:	2a02      	cmp	r2, #2
 8001b00:	d9f9      	bls.n	8001af6 <HAL_DMA_Init+0xe2>
 8001b02:	2a03      	cmp	r2, #3
 8001b04:	e7c8      	b.n	8001a98 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
 8001b08:	e7e1      	b.n	8001ace <HAL_DMA_Init+0xba>
 8001b0a:	bf00      	nop
 8001b0c:	f010803f 	.word	0xf010803f

08001b10 <HAL_DMA_DeInit>:
{
 8001b10:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001b12:	4605      	mov	r5, r0
 8001b14:	b320      	cbz	r0, 8001b60 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b16:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001b1a:	b2e4      	uxtb	r4, r4
 8001b1c:	2c02      	cmp	r4, #2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001b20:	6803      	ldr	r3, [r0, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8001b28:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001b2a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001b2c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001b2e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001b30:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001b32:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001b34:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001b36:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001b38:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	f7ff ff55 	bl	80019e8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001b40:	233f      	movs	r3, #63	; 0x3f
 8001b42:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8001b44:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001b48:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8001b4c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b50:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b52:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001b54:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001b58:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8001b60:	2001      	movs	r0, #1
}
 8001b62:	bd38      	pop	{r3, r4, r5, pc}

08001b64 <HAL_DMA_Abort>:
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b68:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001b6a:	f7ff fecf 	bl	800190c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001b72:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8001b74:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b76:	d006      	beq.n	8001b86 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001b82:	2001      	movs	r0, #1
}
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f022 0216 	bic.w	r2, r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b96:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b9a:	b90a      	cbnz	r2, 8001ba0 <HAL_DMA_Abort+0x3c>
 8001b9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b9e:	b11a      	cbz	r2, 8001ba8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f022 0208 	bic.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f010 0001 	ands.w	r0, r0, #1
 8001bb8:	d109      	bne.n	8001bce <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bbc:	233f      	movs	r3, #63	; 0x3f
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001bc4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001bcc:	e7da      	b.n	8001b84 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bce:	f7ff fe9d 	bl	800190c <HAL_GetTick>
 8001bd2:	1b80      	subs	r0, r0, r6
 8001bd4:	2805      	cmp	r0, #5
 8001bd6:	d9eb      	bls.n	8001bb0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bdc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8001bde:	2300      	movs	r3, #0
 8001be0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001be8:	e7cc      	b.n	8001b84 <HAL_DMA_Abort+0x20>

08001bea <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c0a:	2000      	movs	r0, #0
}
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_DMA_IRQHandler>:
{
 8001c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c18:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c1a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001c1e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c20:	2208      	movs	r2, #8
 8001c22:	409a      	lsls	r2, r3
 8001c24:	4232      	tst	r2, r6
{
 8001c26:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	d00c      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c2a:	6801      	ldr	r1, [r0, #0]
 8001c2c:	6808      	ldr	r0, [r1, #0]
 8001c2e:	0740      	lsls	r0, r0, #29
 8001c30:	d508      	bpl.n	8001c44 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c32:	6808      	ldr	r0, [r1, #0]
 8001c34:	f020 0004 	bic.w	r0, r0, #4
 8001c38:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c3a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	2201      	movs	r2, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	4232      	tst	r2, r6
 8001c4a:	d008      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c4c:	6821      	ldr	r1, [r4, #0]
 8001c4e:	6949      	ldr	r1, [r1, #20]
 8001c50:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c52:	bf41      	itttt	mi
 8001c54:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c56:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001c58:	f042 0202 	orrmi.w	r2, r2, #2
 8001c5c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	409a      	lsls	r2, r3
 8001c62:	4232      	tst	r2, r6
 8001c64:	d008      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	6809      	ldr	r1, [r1, #0]
 8001c6a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c6c:	bf41      	itttt	mi
 8001c6e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001c72:	f042 0204 	orrmi.w	r2, r2, #4
 8001c76:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c78:	2210      	movs	r2, #16
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	4232      	tst	r2, r6
 8001c7e:	d010      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	0709      	lsls	r1, r1, #28
 8001c86:	d50c      	bpl.n	8001ca2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c88:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	0350      	lsls	r0, r2, #13
 8001c8e:	d537      	bpl.n	8001d00 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0319      	lsls	r1, r3, #12
 8001c94:	d401      	bmi.n	8001c9a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c98:	e000      	b.n	8001c9c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001c9c:	b10b      	cbz	r3, 8001ca2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	408a      	lsls	r2, r1
 8001ca8:	4232      	tst	r2, r6
 8001caa:	d03a      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	06c6      	lsls	r6, r0, #27
 8001cb2:	d536      	bpl.n	8001d22 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cb4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cb6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001cba:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cbc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cbe:	d127      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc0:	f022 0216 	bic.w	r2, r2, #22
 8001cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ccc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cd0:	b90a      	cbnz	r2, 8001cd6 <HAL_DMA_IRQHandler+0xc6>
 8001cd2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cd4:	b11a      	cbz	r2, 8001cde <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f022 0208 	bic.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cde:	233f      	movs	r3, #63	; 0x3f
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001cf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d045      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001cf6:	4620      	mov	r0, r4
}
 8001cf8:	b003      	add	sp, #12
 8001cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001cfe:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d04:	bf5e      	ittt	pl
 8001d06:	681a      	ldrpl	r2, [r3, #0]
 8001d08:	f022 0208 	bicpl.w	r2, r2, #8
 8001d0c:	601a      	strpl	r2, [r3, #0]
 8001d0e:	e7c2      	b.n	8001c96 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d10:	0350      	lsls	r0, r2, #13
 8001d12:	d527      	bpl.n	8001d64 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0319      	lsls	r1, r3, #12
 8001d18:	d431      	bmi.n	8001d7e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001d1c:	b10b      	cbz	r3, 8001d22 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d24:	b36b      	cbz	r3, 8001d82 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d28:	07da      	lsls	r2, r3, #31
 8001d2a:	d519      	bpl.n	8001d60 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d2c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001d2e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d34:	6813      	ldr	r3, [r2, #0]
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001d40:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001d44:	9b01      	ldr	r3, [sp, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	42bb      	cmp	r3, r7
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	d802      	bhi.n	8001d54 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	07db      	lsls	r3, r3, #31
 8001d52:	d4f7      	bmi.n	8001d44 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8001d54:	2300      	movs	r3, #0
 8001d56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001d60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001d62:	e7c6      	b.n	8001cf2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001d6a:	d108      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d6c:	6819      	ldr	r1, [r3, #0]
 8001d6e:	f021 0110 	bic.w	r1, r1, #16
 8001d72:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001d74:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001d76:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001d7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d80:	e7cc      	b.n	8001d1c <HAL_DMA_IRQHandler+0x10c>
}
 8001d82:	b003      	add	sp, #12
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000038 	.word	0x20000038

08001d8c <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8001d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d90:	4607      	mov	r7, r0
 8001d92:	460d      	mov	r5, r1
 8001d94:	4614      	mov	r4, r2
 8001d96:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff fdb8 	bl	800190c <HAL_GetTick>
 8001d9c:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001da2:	07d2      	lsls	r2, r2, #31
 8001da4:	d50a      	bpl.n	8001dbc <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8001da6:	ea44 2106 	orr.w	r1, r4, r6, lsl #8
 8001daa:	9c06      	ldr	r4, [sp, #24]
 8001dac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8001db0:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 8001db4:	66d9      	str	r1, [r3, #108]	; 0x6c

  return HAL_OK;
 8001db6:	2000      	movs	r0, #0
}
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fda6 	bl	800190c <HAL_GetTick>
 8001dc0:	eba0 0008 	sub.w	r0, r0, r8
 8001dc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001dc8:	d9e9      	bls.n	8001d9e <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8001dca:	2003      	movs	r0, #3
 8001dcc:	e7f4      	b.n	8001db8 <DSI_ShortWrite+0x2c>

08001dce <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_DSI_Init>:
{
 8001dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dd2:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	f000 80a6 	beq.w	8001f28 <HAL_DSI_Init+0x158>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8001ddc:	7c43      	ldrb	r3, [r0, #17]
 8001dde:	b90b      	cbnz	r3, 8001de4 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8001de0:	f7ff fff5 	bl	8001dce <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001de4:	2303      	movs	r3, #3
 8001de6:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001df2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001df6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001dfa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8001e06:	f7ff fd81 	bl	800190c <HAL_GetTick>
 8001e0a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8001e12:	04d9      	lsls	r1, r3, #19
 8001e14:	d577      	bpl.n	8001f06 <HAL_DSI_Init+0x136>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8001e16:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001e1a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8001e1e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8001e22:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8001e26:	e9d5 0300 	ldrd	r0, r3, [r5]
 8001e2a:	02db      	lsls	r3, r3, #11
 8001e2c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8001e30:	68a8      	ldr	r0, [r5, #8]
 8001e32:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
 8001e36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8001e50:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8001e5c:	f7ff fd56 	bl	800190c <HAL_GetTick>
 8001e60:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001e68:	05d2      	lsls	r2, r2, #23
 8001e6a:	d556      	bpl.n	8001f1a <HAL_DSI_Init+0x14a>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001e6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001e70:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001e72:	f042 0206 	orr.w	r2, r2, #6
 8001e76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8001e7a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e7e:	f022 0203 	bic.w	r2, r2, #3
 8001e82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001e86:	6862      	ldr	r2, [r4, #4]
 8001e88:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	430a      	orrs	r2, r1
 8001e92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001e96:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001e9a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001e9c:	f022 0203 	bic.w	r2, r2, #3
 8001ea0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001ea4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8001eae:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001eb0:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8001eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eb6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	430a      	orrs	r2, r1
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8001ebc:	6869      	ldr	r1, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001ebe:	609a      	str	r2, [r3, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8001ec0:	2900      	cmp	r1, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_DSI_Init+0x15c>)
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8001ec4:	bf08      	it	eq
 8001ec6:	2101      	moveq	r1, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001ec8:	434a      	muls	r2, r1
 8001eca:	68a9      	ldr	r1, [r5, #8]
 8001ecc:	f001 0103 	and.w	r1, r1, #3
 8001ed0:	408a      	lsls	r2, r1
 8001ed2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001ed6:	4341      	muls	r1, r0
 8001ed8:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8001edc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8001ee0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001ee4:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8001ee8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8001eec:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8001ef4:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001ef8:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8001efc:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8001efe:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8001f00:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8001f02:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8001f04:	e007      	b.n	8001f16 <HAL_DSI_Init+0x146>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001f06:	f7ff fd01 	bl	800190c <HAL_GetTick>
 8001f0a:	1b80      	subs	r0, r0, r6
 8001f0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f10:	f67f af7c 	bls.w	8001e0c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8001f14:	2003      	movs	r0, #3
}
 8001f16:	b002      	add	sp, #8
 8001f18:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fcf7 	bl	800190c <HAL_GetTick>
 8001f1e:	1b80      	subs	r0, r0, r6
 8001f20:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f24:	d99d      	bls.n	8001e62 <HAL_DSI_Init+0x92>
 8001f26:	e7f5      	b.n	8001f14 <HAL_DSI_Init+0x144>
    return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	e7f4      	b.n	8001f16 <HAL_DSI_Init+0x146>
 8001f2c:	003d0900 	.word	0x003d0900

08001f30 <HAL_DSI_MspDeInit>:
 8001f30:	4770      	bx	lr

08001f32 <HAL_DSI_DeInit>:
{
 8001f32:	b530      	push	{r4, r5, lr}
  if (hdsi == NULL)
 8001f34:	4605      	mov	r5, r0
{
 8001f36:	b085      	sub	sp, #20
  if (hdsi == NULL)
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d042      	beq.n	8001fc2 <HAL_DSI_DeInit+0x90>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f40:	2400      	movs	r4, #0
 8001f42:	6803      	ldr	r3, [r0, #0]
 8001f44:	9400      	str	r4, [sp, #0]
 8001f46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f4a:	f022 0208 	bic.w	r2, r2, #8
 8001f4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f56:	f002 0208 	and.w	r2, r2, #8
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8001f5e:	9401      	str	r4, [sp, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	f002 0201 	and.w	r2, r2, #1
 8001f6e:	9201      	str	r2, [sp, #4]
 8001f70:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001f72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001f76:	f022 0206 	bic.w	r2, r2, #6
 8001f7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8001f7e:	9402      	str	r4, [sp, #8]
 8001f80:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001f8c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001f90:	f002 0201 	and.w	r2, r2, #1
 8001f94:	9202      	str	r2, [sp, #8]
 8001f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8001f98:	9403      	str	r4, [sp, #12]
 8001f9a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001f9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001fa2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001fa6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fae:	9303      	str	r3, [sp, #12]
 8001fb0:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8001fb2:	f7ff ffbd 	bl	8001f30 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8001fb6:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 8001fb8:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 8001fba:	746c      	strb	r4, [r5, #17]
  return HAL_OK;
 8001fbc:	4620      	mov	r0, r4
}
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e7fb      	b.n	8001fbe <HAL_DSI_DeInit+0x8c>

08001fc6 <HAL_DSI_ErrorCallback>:
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8001fc8:	6803      	ldr	r3, [r0, #0]
 8001fca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001fce:	07d1      	lsls	r1, r2, #31
{
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8001fd4:	d508      	bpl.n	8001fe8 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8001fd6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001fda:	07d2      	lsls	r2, r2, #31
 8001fdc:	d504      	bpl.n	8001fe8 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8001fe4:	f005 f8ee 	bl	80071c4 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001fee:	0791      	lsls	r1, r2, #30
 8001ff0:	d509      	bpl.n	8002006 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8001ff2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ff6:	0792      	lsls	r2, r2, #30
 8001ff8:	d505      	bpl.n	8002006 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002000:	4620      	mov	r0, r4
 8002002:	f005 f903 	bl	800720c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002006:	69a3      	ldr	r3, [r4, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d04e      	beq.n	80020aa <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800200c:	6821      	ldr	r1, [r4, #0]
 800200e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002012:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002016:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800201a:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800201c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002020:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002022:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002024:	b119      	cbz	r1, 800202e <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002026:	6961      	ldr	r1, [r4, #20]
 8002028:	f041 0101 	orr.w	r1, r1, #1
 800202c:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800202e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002032:	bf1e      	ittt	ne
 8002034:	6962      	ldrne	r2, [r4, #20]
 8002036:	f042 0202 	orrne.w	r2, r2, #2
 800203a:	6162      	strne	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800203c:	07d8      	lsls	r0, r3, #31
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800203e:	bf42      	ittt	mi
 8002040:	6962      	ldrmi	r2, [r4, #20]
 8002042:	f042 0204 	orrmi.w	r2, r2, #4
 8002046:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002048:	0799      	lsls	r1, r3, #30
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800204a:	bf42      	ittt	mi
 800204c:	6962      	ldrmi	r2, [r4, #20]
 800204e:	f042 0208 	orrmi.w	r2, r2, #8
 8002052:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002054:	f013 0f0c 	tst.w	r3, #12
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002058:	bf1e      	ittt	ne
 800205a:	6962      	ldrne	r2, [r4, #20]
 800205c:	f042 0210 	orrne.w	r2, r2, #16
 8002060:	6162      	strne	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002062:	06da      	lsls	r2, r3, #27
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002064:	bf42      	ittt	mi
 8002066:	6962      	ldrmi	r2, [r4, #20]
 8002068:	f042 0220 	orrmi.w	r2, r2, #32
 800206c:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800206e:	0698      	lsls	r0, r3, #26
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002070:	bf42      	ittt	mi
 8002072:	6962      	ldrmi	r2, [r4, #20]
 8002074:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8002078:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800207a:	0659      	lsls	r1, r3, #25
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800207c:	bf42      	ittt	mi
 800207e:	6962      	ldrmi	r2, [r4, #20]
 8002080:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8002084:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002086:	061a      	lsls	r2, r3, #24
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002088:	bf42      	ittt	mi
 800208a:	6962      	ldrmi	r2, [r4, #20]
 800208c:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8002090:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002092:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002096:	bf1e      	ittt	ne
 8002098:	6963      	ldrne	r3, [r4, #20]
 800209a:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800209e:	6163      	strne	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80020a0:	6963      	ldr	r3, [r4, #20]
 80020a2:	b113      	cbz	r3, 80020aa <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7ff ff8e 	bl	8001fc6 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80020aa:	bd10      	pop	{r4, pc}

080020ac <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80020ac:	7c03      	ldrb	r3, [r0, #16]
 80020ae:	2b01      	cmp	r3, #1
{
 80020b0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 80020b2:	d06a      	beq.n	800218a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80020b4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80020b6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80020b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80020c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80020cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	f022 0203 	bic.w	r2, r2, #3
 80020de:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4322      	orrs	r2, r4
 80020e4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	f022 0207 	bic.w	r2, r2, #7
 80020ec:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80020ee:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80020f2:	432a      	orrs	r2, r5
 80020f4:	694d      	ldr	r5, [r1, #20]
 80020f6:	695c      	ldr	r4, [r3, #20]
 80020f8:	432a      	orrs	r2, r5
 80020fa:	4322      	orrs	r2, r4
 80020fc:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80020fe:	691a      	ldr	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002100:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002102:	f022 020f 	bic.w	r2, r2, #15
 8002106:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002108:	691c      	ldr	r4, [r3, #16]
 800210a:	432c      	orrs	r4, r5
 800210c:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800210e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8002112:	f024 040e 	bic.w	r4, r4, #14
 8002116:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800211a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800211e:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002120:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8002124:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002128:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800212a:	0c12      	lsrs	r2, r2, #16
 800212c:	0412      	lsls	r2, r2, #16
 800212e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002130:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002132:	4322      	orrs	r2, r4
 8002134:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002136:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800213a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800213e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002142:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8002146:	432a      	orrs	r2, r5
 8002148:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800214a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800214e:	432a      	orrs	r2, r5
 8002150:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002152:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002154:	432a      	orrs	r2, r5
 8002156:	4322      	orrs	r2, r4
 8002158:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800215c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002164:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002166:	430a      	orrs	r2, r1
 8002168:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800216a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002176:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800217a:	f042 0202 	orr.w	r2, r2, #2
 800217e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002182:	2300      	movs	r3, #0
 8002184:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8002186:	4618      	mov	r0, r3
}
 8002188:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800218a:	2002      	movs	r0, #2
 800218c:	e7fc      	b.n	8002188 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08002190 <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002190:	7c03      	ldrb	r3, [r0, #16]
 8002192:	2b01      	cmp	r3, #1
{
 8002194:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 8002196:	d02a      	beq.n	80021ee <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_DSI_ConfigCommand+0x64>)
 800219c:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800219e:	4023      	ands	r3, r4
 80021a0:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80021a2:	e9d1 3500 	ldrd	r3, r5, [r1]
 80021a6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80021a8:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80021aa:	6e94      	ldr	r4, [r2, #104]	; 0x68
                           LPCmd->LPGenShortWriteOneP | \
 80021ac:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80021ae:	68cd      	ldr	r5, [r1, #12]
 80021b0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80021b2:	690d      	ldr	r5, [r1, #16]
 80021b4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80021b6:	694d      	ldr	r5, [r1, #20]
 80021b8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80021ba:	698d      	ldr	r5, [r1, #24]
 80021bc:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80021be:	69cd      	ldr	r5, [r1, #28]
 80021c0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80021c2:	6a0d      	ldr	r5, [r1, #32]
 80021c4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80021c6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80021c8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80021ca:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80021cc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80021ce:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80021d0:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 80021d2:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80021d4:	4323      	orrs	r3, r4
 80021d6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80021d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80021da:	f023 0302 	bic.w	r3, r3, #2
 80021de:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80021e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80021e6:	2300      	movs	r3, #0
 80021e8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80021ea:	4618      	mov	r0, r3
}
 80021ec:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80021ee:	2002      	movs	r0, #2
 80021f0:	e7fc      	b.n	80021ec <HAL_DSI_ConfigCommand+0x5c>
 80021f2:	bf00      	nop
 80021f4:	fef080ff 	.word	0xfef080ff

080021f8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80021f8:	7c03      	ldrb	r3, [r0, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d00b      	beq.n	8002216 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80021fe:	6803      	ldr	r3, [r0, #0]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	f022 021f 	bic.w	r2, r2, #31
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	4311      	orrs	r1, r2
 800220c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800220e:	2300      	movs	r3, #0
 8002210:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8002212:	4618      	mov	r0, r3
 8002214:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8002216:	2002      	movs	r0, #2
}
 8002218:	4770      	bx	lr

0800221a <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800221a:	7c03      	ldrb	r3, [r0, #16]
 800221c:	2b01      	cmp	r3, #1
{
 800221e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8002220:	d01c      	beq.n	800225c <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002222:	6802      	ldr	r2, [r0, #0]
 8002224:	2300      	movs	r3, #0
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	6851      	ldr	r1, [r2, #4]
 800222a:	f041 0101 	orr.w	r1, r1, #1
 800222e:	6051      	str	r1, [r2, #4]
 8002230:	6851      	ldr	r1, [r2, #4]
 8002232:	f001 0101 	and.w	r1, r1, #1
 8002236:	9100      	str	r1, [sp, #0]
 8002238:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8002240:	f041 0108 	orr.w	r1, r1, #8
 8002244:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002248:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800224c:	7403      	strb	r3, [r0, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800224e:	f002 0208 	and.w	r2, r2, #8
 8002252:	9201      	str	r2, [sp, #4]
 8002254:	9a01      	ldr	r2, [sp, #4]

  return HAL_OK;
 8002256:	4618      	mov	r0, r3
}
 8002258:	b002      	add	sp, #8
 800225a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800225c:	2002      	movs	r0, #2
 800225e:	e7fb      	b.n	8002258 <HAL_DSI_Start+0x3e>

08002260 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002260:	7c03      	ldrb	r3, [r0, #16]
 8002262:	2b01      	cmp	r3, #1

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8002264:	bf1f      	itttt	ne
 8002266:	6802      	ldrne	r2, [r0, #0]
 8002268:	f8d2 3404 	ldrne.w	r3, [r2, #1028]	; 0x404
 800226c:	f043 0304 	orrne.w	r3, r3, #4
 8002270:	f8c2 3404 	strne.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002274:	bf1d      	ittte	ne
 8002276:	2300      	movne	r3, #0
 8002278:	7403      	strbne	r3, [r0, #16]

  return HAL_OK;
 800227a:	4618      	movne	r0, r3
  __HAL_LOCK(hdsi);
 800227c:	2002      	moveq	r0, #2
}
 800227e:	4770      	bx	lr

08002280 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002280:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002282:	7c05      	ldrb	r5, [r0, #16]
 8002284:	2d01      	cmp	r5, #1
{
 8002286:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8002288:	d009      	beq.n	800229e <HAL_DSI_ShortWrite+0x1e>
 800228a:	2501      	movs	r5, #1
 800228c:	7405      	strb	r5, [r0, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800228e:	9d06      	ldr	r5, [sp, #24]
 8002290:	9500      	str	r5, [sp, #0]
 8002292:	f7ff fd7b 	bl	8001d8c <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002296:	2300      	movs	r3, #0
 8002298:	7423      	strb	r3, [r4, #16]

  return status;
}
 800229a:	b003      	add	sp, #12
 800229c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800229e:	2002      	movs	r0, #2
 80022a0:	e7fb      	b.n	800229a <HAL_DSI_ShortWrite+0x1a>

080022a2 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80022a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a6:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80022a8:	7c03      	ldrb	r3, [r0, #16]
 80022aa:	2b01      	cmp	r3, #1
{
 80022ac:	4606      	mov	r6, r0
 80022ae:	460f      	mov	r7, r1
 80022b0:	4615      	mov	r5, r2
 80022b2:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 80022b6:	d052      	beq.n	800235e <HAL_DSI_LongWrite+0xbc>
 80022b8:	2301      	movs	r3, #1
 80022ba:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff fb26 	bl	800190c <HAL_GetTick>
 80022c0:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80022c2:	6832      	ldr	r2, [r6, #0]
 80022c4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80022c6:	f013 0a01 	ands.w	sl, r3, #1
 80022ca:	d019      	beq.n	8002300 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80022cc:	2c03      	cmp	r4, #3
 80022ce:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80022d0:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80022d4:	bf28      	it	cs
 80022d6:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80022d8:	4283      	cmp	r3, r0
 80022da:	d11d      	bne.n	8002318 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80022dc:	1ae0      	subs	r0, r4, r3
  hdsi->Instance->GPDR = fifoword;
 80022de:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
  pparams += nbBytes;
 80022e2:	4443      	add	r3, r8
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80022e4:	bb10      	cbnz	r0, 800232c <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80022e6:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80022e8:	0223      	lsls	r3, r4, #8
 80022ea:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	0224      	lsls	r4, r4, #8
 80022f2:	431d      	orrs	r5, r3
 80022f4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80022f8:	432c      	orrs	r4, r5
 80022fa:	66d4      	str	r4, [r2, #108]	; 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80022fc:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80022fe:	e009      	b.n	8002314 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002300:	f7ff fb04 	bl	800190c <HAL_GetTick>
 8002304:	eba0 000b 	sub.w	r0, r0, fp
 8002308:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800230c:	d9d9      	bls.n	80022c2 <HAL_DSI_LongWrite+0x20>
      __HAL_UNLOCK(hdsi);
 800230e:	f886 a010 	strb.w	sl, [r6, #16]
      return HAL_TIMEOUT;
 8002312:	2003      	movs	r0, #3
}
 8002314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002318:	f818 1003 	ldrb.w	r1, [r8, r3]
 800231c:	3301      	adds	r3, #1
 800231e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002322:	fa01 f10c 	lsl.w	r1, r1, ip
 8002326:	ea49 0901 	orr.w	r9, r9, r1
 800232a:	e7d5      	b.n	80022d8 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800232c:	2804      	cmp	r0, #4
    fifoword = 0U;
 800232e:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002332:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8002334:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002336:	bf28      	it	cs
 8002338:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800233c:	f813 8001 	ldrb.w	r8, [r3, r1]
 8002340:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8002344:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002346:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800234a:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800234c:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8002350:	d1f4      	bne.n	800233c <HAL_DSI_LongWrite+0x9a>
    hdsi->Instance->GPDR = fifoword;
 8002352:	f8c2 c070 	str.w	ip, [r2, #112]	; 0x70
    uicounter -= nbBytes;
 8002356:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800235a:	4473      	add	r3, lr
 800235c:	e7c2      	b.n	80022e4 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800235e:	2002      	movs	r0, #2
 8002360:	e7d8      	b.n	8002314 <HAL_DSI_LongWrite+0x72>
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002368:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8002534 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002372:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8002538 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002378:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800237a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800237e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002380:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8002382:	42ac      	cmp	r4, r5
 8002384:	f040 80b8 	bne.w	80024f8 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002388:	684c      	ldr	r4, [r1, #4]
 800238a:	f024 0c10 	bic.w	ip, r4, #16
 800238e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002392:	2603      	movs	r6, #3
 8002394:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8002398:	fa06 f60e 	lsl.w	r6, r6, lr
 800239c:	2f01      	cmp	r7, #1
 800239e:	ea6f 0606 	mvn.w	r6, r6
 80023a2:	d811      	bhi.n	80023c8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80023a4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a6:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	68cf      	ldr	r7, [r1, #12]
 80023ac:	fa07 f70e 	lsl.w	r7, r7, lr
 80023b0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80023b4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80023b6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b8:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023bc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80023c0:	409f      	lsls	r7, r3
 80023c2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80023c6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80023c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ca:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ce:	688f      	ldr	r7, [r1, #8]
 80023d0:	fa07 f70e 	lsl.w	r7, r7, lr
 80023d4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80023dc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023de:	d116      	bne.n	800240e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80023e4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80023f4:	f04f 0c0f 	mov.w	ip, #15
 80023f8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80023fc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	690f      	ldr	r7, [r1, #16]
 8002402:	fa07 f70b 	lsl.w	r7, r7, fp
 8002406:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800240a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800240e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002410:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002412:	f004 0703 	and.w	r7, r4, #3
 8002416:	fa07 fe0e 	lsl.w	lr, r7, lr
 800241a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800241e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002420:	00e6      	lsls	r6, r4, #3
 8002422:	d569      	bpl.n	80024f8 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002424:	f04f 0b00 	mov.w	fp, #0
 8002428:	f8cd b00c 	str.w	fp, [sp, #12]
 800242c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002430:	4e3f      	ldr	r6, [pc, #252]	; (8002530 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002436:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800243a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800243e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002442:	9703      	str	r7, [sp, #12]
 8002444:	9f03      	ldr	r7, [sp, #12]
 8002446:	f023 0703 	bic.w	r7, r3, #3
 800244a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800244e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002452:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800245a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800245e:	f04f 0c0f 	mov.w	ip, #15
 8002462:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246c:	d04b      	beq.n	8002506 <HAL_GPIO_Init+0x1a2>
 800246e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002472:	42b0      	cmp	r0, r6
 8002474:	d049      	beq.n	800250a <HAL_GPIO_Init+0x1a6>
 8002476:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800247a:	42b0      	cmp	r0, r6
 800247c:	d047      	beq.n	800250e <HAL_GPIO_Init+0x1aa>
 800247e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002482:	42b0      	cmp	r0, r6
 8002484:	d045      	beq.n	8002512 <HAL_GPIO_Init+0x1ae>
 8002486:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800248a:	42b0      	cmp	r0, r6
 800248c:	d043      	beq.n	8002516 <HAL_GPIO_Init+0x1b2>
 800248e:	4548      	cmp	r0, r9
 8002490:	d043      	beq.n	800251a <HAL_GPIO_Init+0x1b6>
 8002492:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002496:	42b0      	cmp	r0, r6
 8002498:	d041      	beq.n	800251e <HAL_GPIO_Init+0x1ba>
 800249a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800249e:	42b0      	cmp	r0, r6
 80024a0:	d03f      	beq.n	8002522 <HAL_GPIO_Init+0x1be>
 80024a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80024a6:	42b0      	cmp	r0, r6
 80024a8:	d03d      	beq.n	8002526 <HAL_GPIO_Init+0x1c2>
 80024aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80024ae:	42b0      	cmp	r0, r6
 80024b0:	bf14      	ite	ne
 80024b2:	260a      	movne	r6, #10
 80024b4:	2609      	moveq	r6, #9
 80024b6:	fa06 f60e 	lsl.w	r6, r6, lr
 80024ba:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024be:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80024c0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80024c8:	bf0c      	ite	eq
 80024ca:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80024cc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80024ce:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80024d0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80024d6:	bf0c      	ite	eq
 80024d8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80024da:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80024dc:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80024e4:	bf0c      	ite	eq
 80024e6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80024e8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80024ea:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ee:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80024f0:	bf54      	ite	pl
 80024f2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80024f4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80024f6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f8:	3301      	adds	r3, #1
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	f47f af3d 	bne.w	800237a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002500:	b005      	add	sp, #20
 8002502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	465e      	mov	r6, fp
 8002508:	e7d5      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 800250a:	2601      	movs	r6, #1
 800250c:	e7d3      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 800250e:	2602      	movs	r6, #2
 8002510:	e7d1      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 8002512:	2603      	movs	r6, #3
 8002514:	e7cf      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 8002516:	2604      	movs	r6, #4
 8002518:	e7cd      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 800251a:	2605      	movs	r6, #5
 800251c:	e7cb      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 800251e:	2606      	movs	r6, #6
 8002520:	e7c9      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 8002522:	2607      	movs	r6, #7
 8002524:	e7c7      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 8002526:	2608      	movs	r6, #8
 8002528:	e7c5      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 800252a:	bf00      	nop
 800252c:	40013c00 	.word	0x40013c00
 8002530:	40020000 	.word	0x40020000
 8002534:	40023800 	.word	0x40023800
 8002538:	40021400 	.word	0x40021400

0800253c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	b10a      	cbz	r2, 8002542 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253e:	6181      	str	r1, [r0, #24]
  }
}
 8002540:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002542:	0409      	lsls	r1, r1, #16
 8002544:	e7fb      	b.n	800253e <HAL_GPIO_WritePin+0x2>
	...

08002548 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800254c:	6806      	ldr	r6, [r0, #0]
{
 800254e:	b085      	sub	sp, #20
 8002550:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002552:	4630      	mov	r0, r6
 8002554:	f002 fc9e 	bl	8004e94 <USB_GetMode>
 8002558:	2801      	cmp	r0, #1
 800255a:	f040 80e4 	bne.w	8002726 <HAL_HCD_IRQHandler+0x1de>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800255e:	6828      	ldr	r0, [r5, #0]
 8002560:	f002 fc94 	bl	8004e8c <USB_ReadInterrupts>
 8002564:	2800      	cmp	r0, #0
 8002566:	f000 80de 	beq.w	8002726 <HAL_HCD_IRQHandler+0x1de>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800256a:	6828      	ldr	r0, [r5, #0]
 800256c:	f002 fc8e 	bl	8004e8c <USB_ReadInterrupts>
 8002570:	0284      	lsls	r4, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002572:	bf48      	it	mi
 8002574:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002576:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002578:	bf44      	itt	mi
 800257a:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800257e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002580:	f002 fc84 	bl	8004e8c <USB_ReadInterrupts>
 8002584:	02c0      	lsls	r0, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002586:	bf48      	it	mi
 8002588:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800258a:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800258c:	bf44      	itt	mi
 800258e:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8002592:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002594:	f002 fc7a 	bl	8004e8c <USB_ReadInterrupts>
 8002598:	0141      	lsls	r1, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800259a:	bf48      	it	mi
 800259c:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800259e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025a0:	bf44      	itt	mi
 80025a2:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80025a6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025a8:	f002 fc70 	bl	8004e8c <USB_ReadInterrupts>
 80025ac:	0782      	lsls	r2, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025ae:	bf48      	it	mi
 80025b0:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025b2:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025b4:	bf44      	itt	mi
 80025b6:	2202      	movmi	r2, #2
 80025b8:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ba:	f002 fc67 	bl	8004e8c <USB_ReadInterrupts>
 80025be:	0083      	lsls	r3, r0, #2
 80025c0:	d50e      	bpl.n	80025e0 <HAL_HCD_IRQHandler+0x98>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025c2:	682b      	ldr	r3, [r5, #0]
 80025c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025ca:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80025ce:	07df      	lsls	r7, r3, #31
 80025d0:	d406      	bmi.n	80025e0 <HAL_HCD_IRQHandler+0x98>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025d2:	4628      	mov	r0, r5
 80025d4:	f005 f9c2 	bl	800795c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025d8:	2101      	movs	r1, #1
 80025da:	6828      	ldr	r0, [r5, #0]
 80025dc:	f002 fc5e 	bl	8004e9c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025e0:	6828      	ldr	r0, [r5, #0]
 80025e2:	f002 fc53 	bl	8004e8c <USB_ReadInterrupts>
 80025e6:	01c4      	lsls	r4, r0, #7
 80025e8:	d53c      	bpl.n	8002664 <HAL_HCD_IRQHandler+0x11c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ea:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80025ec:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80025f0:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80025f2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80025f6:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025fe:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002600:	9b02      	ldr	r3, [sp, #8]
 8002602:	0798      	lsls	r0, r3, #30
 8002604:	d509      	bpl.n	800261a <HAL_HCD_IRQHandler+0xd2>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002606:	9b02      	ldr	r3, [sp, #8]
 8002608:	07d9      	lsls	r1, r3, #31
 800260a:	d502      	bpl.n	8002612 <HAL_HCD_IRQHandler+0xca>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800260c:	4628      	mov	r0, r5
 800260e:	f005 f9a1 	bl	8007954 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002612:	9b03      	ldr	r3, [sp, #12]
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800261a:	9b02      	ldr	r3, [sp, #8]
 800261c:	071a      	lsls	r2, r3, #28
 800261e:	d517      	bpl.n	8002650 <HAL_HCD_IRQHandler+0x108>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002620:	9b03      	ldr	r3, [sp, #12]
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002628:	9b02      	ldr	r3, [sp, #8]
 800262a:	075b      	lsls	r3, r3, #29
 800262c:	f140 8086 	bpl.w	800273c <HAL_HCD_IRQHandler+0x1f4>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002630:	69a9      	ldr	r1, [r5, #24]
 8002632:	2902      	cmp	r1, #2
 8002634:	d17a      	bne.n	800272c <HAL_HCD_IRQHandler+0x1e4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002636:	9b02      	ldr	r3, [sp, #8]
 8002638:	6828      	ldr	r0, [r5, #0]
 800263a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800263e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002642:	bf18      	it	ne
 8002644:	2101      	movne	r1, #1
 8002646:	f002 fc29 	bl	8004e9c <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800264a:	4628      	mov	r0, r5
 800264c:	f005 f98a 	bl	8007964 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002650:	9b02      	ldr	r3, [sp, #8]
 8002652:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002654:	bf42      	ittt	mi
 8002656:	9b03      	ldrmi	r3, [sp, #12]
 8002658:	f043 0320 	orrmi.w	r3, r3, #32
 800265c:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800265e:	9b03      	ldr	r3, [sp, #12]
 8002660:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002664:	6828      	ldr	r0, [r5, #0]
 8002666:	f002 fc11 	bl	8004e8c <USB_ReadInterrupts>
 800266a:	0704      	lsls	r4, r0, #28
 800266c:	d505      	bpl.n	800267a <HAL_HCD_IRQHandler+0x132>
      HAL_HCD_SOF_Callback(hhcd);
 800266e:	4628      	mov	r0, r5
 8002670:	f005 f96c 	bl	800794c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	2208      	movs	r2, #8
 8002678:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800267a:	6828      	ldr	r0, [r5, #0]
 800267c:	f002 fc06 	bl	8004e8c <USB_ReadInterrupts>
 8002680:	0180      	lsls	r0, r0, #6
 8002682:	d512      	bpl.n	80026aa <HAL_HCD_IRQHandler+0x162>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002684:	6828      	ldr	r0, [r5, #0]
 8002686:	f002 fc25 	bl	8004ed4 <USB_HC_ReadInterrupt>
 800268a:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800268e:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002690:	f04f 0900 	mov.w	r9, #0
 8002694:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002696:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002698:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800269c:	68ab      	ldr	r3, [r5, #8]
 800269e:	6828      	ldr	r0, [r5, #0]
 80026a0:	454b      	cmp	r3, r9
 80026a2:	d84f      	bhi.n	8002744 <HAL_HCD_IRQHandler+0x1fc>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a8:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026aa:	6828      	ldr	r0, [r5, #0]
 80026ac:	f002 fbee 	bl	8004e8c <USB_ReadInterrupts>
 80026b0:	06c3      	lsls	r3, r0, #27
 80026b2:	d538      	bpl.n	8002726 <HAL_HCD_IRQHandler+0x1de>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b4:	682c      	ldr	r4, [r5, #0]
 80026b6:	69a3      	ldr	r3, [r4, #24]
 80026b8:	f023 0310 	bic.w	r3, r3, #16
 80026bc:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 80026be:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80026c0:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 80026c4:	2a02      	cmp	r2, #2
 80026c6:	d129      	bne.n	800271c <HAL_HCD_IRQHandler+0x1d4>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026c8:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026cc:	f1b8 0f00 	cmp.w	r8, #0
 80026d0:	d024      	beq.n	800271c <HAL_HCD_IRQHandler+0x1d4>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80026d2:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026d6:	2728      	movs	r7, #40	; 0x28
 80026d8:	fb07 5706 	mla	r7, r7, r6, r5
 80026dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026de:	b1e9      	cbz	r1, 800271c <HAL_HCD_IRQHandler+0x1d4>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80026e0:	4642      	mov	r2, r8
 80026e2:	4620      	mov	r0, r4
 80026e4:	f002 fbc4 	bl	8004e70 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ea:	4443      	add	r3, r8
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80026ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f0:	4443      	add	r3, r8
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80026f4:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 80026f8:	0173      	lsls	r3, r6, #5
 80026fa:	18e2      	adds	r2, r4, r3
 80026fc:	6911      	ldr	r1, [r2, #16]
 80026fe:	4ab1      	ldr	r2, [pc, #708]	; (80029c4 <HAL_HCD_IRQHandler+0x47c>)
 8002700:	400a      	ands	r2, r1
 8002702:	b15a      	cbz	r2, 800271c <HAL_HCD_IRQHandler+0x1d4>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002704:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002706:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800270a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800270e:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002710:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271c:	682a      	ldr	r2, [r5, #0]
 800271e:	6993      	ldr	r3, [r2, #24]
 8002720:	f043 0310 	orr.w	r3, r3, #16
 8002724:	6193      	str	r3, [r2, #24]
}
 8002726:	b005      	add	sp, #20
 8002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800272c:	68eb      	ldr	r3, [r5, #12]
 800272e:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8002730:	bf04      	itt	eq
 8002732:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002736:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 800273a:	e786      	b.n	800264a <HAL_HCD_IRQHandler+0x102>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800273c:	4628      	mov	r0, r5
 800273e:	f005 f915 	bl	800796c <HAL_HCD_PortDisabled_Callback>
 8002742:	e785      	b.n	8002650 <HAL_HCD_IRQHandler+0x108>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002744:	9a00      	ldr	r2, [sp, #0]
 8002746:	f009 030f 	and.w	r3, r9, #15
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	07d9      	lsls	r1, r3, #31
 8002750:	f140 8095 	bpl.w	800287e <HAL_HCD_IRQHandler+0x336>
 8002754:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002758:	9a01      	ldr	r2, [sp, #4]
 800275a:	fa5f f689 	uxtb.w	r6, r9
 800275e:	58d1      	ldr	r1, [r2, r3]
 8002760:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8002764:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 8002768:	eb0b 040a 	add.w	r4, fp, sl
 800276c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002770:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002772:	f000 811d 	beq.w	80029b0 <HAL_HCD_IRQHandler+0x468>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002776:	074a      	lsls	r2, r1, #29
 8002778:	d513      	bpl.n	80027a2 <HAL_HCD_IRQHandler+0x25a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800277a:	2104      	movs	r1, #4
 800277c:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277e:	68e1      	ldr	r1, [r4, #12]
 8002780:	f041 0102 	orr.w	r1, r1, #2
 8002784:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002786:	68a1      	ldr	r1, [r4, #8]
 8002788:	0588      	lsls	r0, r1, #22
 800278a:	d54a      	bpl.n	8002822 <HAL_HCD_IRQHandler+0x2da>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002798:	f002 fba1 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800279c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a0:	e0e6      	b.n	8002970 <HAL_HCD_IRQHandler+0x428>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027a2:	68a1      	ldr	r1, [r4, #8]
 80027a4:	05cb      	lsls	r3, r1, #23
 80027a6:	d510      	bpl.n	80027ca <HAL_HCD_IRQHandler+0x282>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80027a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027ac:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80027ae:	fb07 5106 	mla	r1, r7, r6, r5
 80027b2:	f04f 0c07 	mov.w	ip, #7
 80027b6:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ba:	68e1      	ldr	r1, [r4, #12]
 80027bc:	f041 0102 	orr.w	r1, r1, #2
 80027c0:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c2:	4631      	mov	r1, r6
 80027c4:	f002 fb8b 	bl	8004ede <USB_HC_Halt>
 80027c8:	e7dd      	b.n	8002786 <HAL_HCD_IRQHandler+0x23e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027ca:	68a1      	ldr	r1, [r4, #8]
 80027cc:	0689      	lsls	r1, r1, #26
 80027ce:	d502      	bpl.n	80027d6 <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027d0:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027d2:	60a1      	str	r1, [r4, #8]
 80027d4:	e7d7      	b.n	8002786 <HAL_HCD_IRQHandler+0x23e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027d6:	68a1      	ldr	r1, [r4, #8]
 80027d8:	070a      	lsls	r2, r1, #28
 80027da:	d50e      	bpl.n	80027fa <HAL_HCD_IRQHandler+0x2b2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027dc:	68e1      	ldr	r1, [r4, #12]
 80027de:	f041 0102 	orr.w	r1, r1, #2
 80027e2:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80027e4:	fb07 5106 	mla	r1, r7, r6, r5
 80027e8:	f04f 0c05 	mov.w	ip, #5
 80027ec:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027f0:	2110      	movs	r1, #16
 80027f2:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027f4:	2108      	movs	r1, #8
 80027f6:	60a1      	str	r1, [r4, #8]
 80027f8:	e7e3      	b.n	80027c2 <HAL_HCD_IRQHandler+0x27a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027fa:	68a1      	ldr	r1, [r4, #8]
 80027fc:	054b      	lsls	r3, r1, #21
 80027fe:	d5c2      	bpl.n	8002786 <HAL_HCD_IRQHandler+0x23e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002800:	68e1      	ldr	r1, [r4, #12]
 8002802:	f041 0102 	orr.w	r1, r1, #2
 8002806:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002808:	4631      	mov	r1, r6
 800280a:	f002 fb68 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800280e:	2110      	movs	r1, #16
 8002810:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002812:	fb07 5106 	mla	r1, r7, r6, r5
 8002816:	2008      	movs	r0, #8
 8002818:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800281c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002820:	e7d7      	b.n	80027d2 <HAL_HCD_IRQHandler+0x28a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002822:	68a1      	ldr	r1, [r4, #8]
 8002824:	07c9      	lsls	r1, r1, #31
 8002826:	d548      	bpl.n	80028ba <HAL_HCD_IRQHandler+0x372>
    if (hhcd->Init.dma_enable != 0U)
 8002828:	6929      	ldr	r1, [r5, #16]
 800282a:	b149      	cbz	r1, 8002840 <HAL_HCD_IRQHandler+0x2f8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800282c:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002830:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002832:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002836:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800283a:	1a09      	subs	r1, r1, r0
 800283c:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8002840:	fb07 5106 	mla	r1, r7, r6, r5
 8002844:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002846:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8002848:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800284c:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800284e:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002850:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8002854:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8002858:	d114      	bne.n	8002884 <HAL_HCD_IRQHandler+0x33c>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800285a:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285c:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	4631      	mov	r1, r6
 8002866:	f002 fb3a 	bl	8004ede <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800286a:	2310      	movs	r3, #16
 800286c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800286e:	fb07 5606 	mla	r6, r7, r6, r5
 8002872:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800287e:	f109 0901 	add.w	r9, r9, #1
 8002882:	e70b      	b.n	800269c <HAL_HCD_IRQHandler+0x154>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002884:	2a03      	cmp	r2, #3
 8002886:	d10d      	bne.n	80028a4 <HAL_HCD_IRQHandler+0x35c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002888:	f85b 000a 	ldr.w	r0, [fp, sl]
 800288c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8002890:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002894:	461a      	mov	r2, r3
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002896:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800289a:	4631      	mov	r1, r6
 800289c:	4628      	mov	r0, r5
 800289e:	f005 f869 	bl	8007974 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a2:	e7e4      	b.n	800286e <HAL_HCD_IRQHandler+0x326>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80028a4:	2a01      	cmp	r2, #1
 80028a6:	d1e2      	bne.n	800286e <HAL_HCD_IRQHandler+0x326>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028a8:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028ac:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 80028b8:	e7ef      	b.n	800289a <HAL_HCD_IRQHandler+0x352>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028ba:	68a1      	ldr	r1, [r4, #8]
 80028bc:	078a      	lsls	r2, r1, #30
 80028be:	d542      	bpl.n	8002946 <HAL_HCD_IRQHandler+0x3fe>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80028c0:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028c2:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80028c6:	f021 0102 	bic.w	r1, r1, #2
 80028ca:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028cc:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80028d0:	2901      	cmp	r1, #1
 80028d2:	d102      	bne.n	80028da <HAL_HCD_IRQHandler+0x392>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028d4:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 80028d8:	e02a      	b.n	8002930 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028da:	2905      	cmp	r1, #5
 80028dc:	d0fa      	beq.n	80028d4 <HAL_HCD_IRQHandler+0x38c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028de:	2906      	cmp	r1, #6
 80028e0:	d001      	beq.n	80028e6 <HAL_HCD_IRQHandler+0x39e>
 80028e2:	2908      	cmp	r1, #8
 80028e4:	d10f      	bne.n	8002906 <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt++;
 80028e6:	fb07 5106 	mla	r1, r7, r6, r5
 80028ea:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80028ec:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028ee:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80028f0:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028f2:	bf81      	itttt	hi
 80028f4:	2000      	movhi	r0, #0
 80028f6:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028f8:	2004      	movhi	r0, #4
 80028fa:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028fe:	bf98      	it	ls
 8002900:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
 8002904:	e003      	b.n	800290e <HAL_HCD_IRQHandler+0x3c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002906:	2903      	cmp	r1, #3
 8002908:	d10a      	bne.n	8002920 <HAL_HCD_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800290a:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800290e:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002912:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002916:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800291a:	f84b 100a 	str.w	r1, [fp, sl]
 800291e:	e007      	b.n	8002930 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002920:	2907      	cmp	r1, #7
 8002922:	d105      	bne.n	8002930 <HAL_HCD_IRQHandler+0x3e8>
      hhcd->hc[ch_num].ErrCnt++;
 8002924:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002926:	3301      	adds	r3, #1
 8002928:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292a:	2304      	movs	r3, #4
 800292c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002930:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002934:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002938:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800293c:	4631      	mov	r1, r6
 800293e:	4628      	mov	r0, r5
 8002940:	f005 f818 	bl	8007974 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002944:	e79b      	b.n	800287e <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002946:	68a1      	ldr	r1, [r4, #8]
 8002948:	6828      	ldr	r0, [r5, #0]
 800294a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800294e:	d011      	beq.n	8002974 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002950:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002952:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	f043 0302 	orr.w	r3, r3, #2
 800295a:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800295c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800295e:	3301      	adds	r3, #1
 8002960:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002962:	2306      	movs	r3, #6
 8002964:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002968:	4631      	mov	r1, r6
 800296a:	f002 fab8 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	60a3      	str	r3, [r4, #8]
 8002972:	e784      	b.n	800287e <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002974:	68a3      	ldr	r3, [r4, #8]
 8002976:	06db      	lsls	r3, r3, #27
 8002978:	d581      	bpl.n	800287e <HAL_HCD_IRQHandler+0x336>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800297a:	fb07 5206 	mla	r2, r7, r6, r5
 800297e:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8002982:	2b03      	cmp	r3, #3
 8002984:	d109      	bne.n	800299a <HAL_HCD_IRQHandler+0x452>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002986:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002988:	68e3      	ldr	r3, [r4, #12]
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002990:	4631      	mov	r1, r6
 8002992:	f002 faa4 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002996:	2310      	movs	r3, #16
 8002998:	e7ea      	b.n	8002970 <HAL_HCD_IRQHandler+0x428>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800299a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800299e:	d1fa      	bne.n	8002996 <HAL_HCD_IRQHandler+0x44e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029a0:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80029a2:	692b      	ldr	r3, [r5, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f6      	bne.n	8002996 <HAL_HCD_IRQHandler+0x44e>
        hhcd->hc[ch_num].state = HC_NAK;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80029ae:	e7eb      	b.n	8002988 <HAL_HCD_IRQHandler+0x440>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029b0:	f011 0c04 	ands.w	ip, r1, #4
 80029b4:	d008      	beq.n	80029c8 <HAL_HCD_IRQHandler+0x480>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029b6:	2304      	movs	r3, #4
 80029b8:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ba:	68e3      	ldr	r3, [r4, #12]
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	60e3      	str	r3, [r4, #12]
 80029c2:	e75c      	b.n	800287e <HAL_HCD_IRQHandler+0x336>
 80029c4:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029c8:	68a1      	ldr	r1, [r4, #8]
 80029ca:	f011 0120 	ands.w	r1, r1, #32
 80029ce:	d014      	beq.n	80029fa <HAL_HCD_IRQHandler+0x4b2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029d0:	2320      	movs	r3, #32
 80029d2:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029d4:	fb07 5306 	mla	r3, r7, r6, r5
 80029d8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80029dc:	2a01      	cmp	r2, #1
 80029de:	f47f af4e 	bne.w	800287e <HAL_HCD_IRQHandler+0x336>
      hhcd->hc[ch_num].do_ping = 0U;
 80029e2:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029e6:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ea:	68e3      	ldr	r3, [r4, #12]
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f2:	4631      	mov	r1, r6
 80029f4:	f002 fa73 	bl	8004ede <USB_HC_Halt>
 80029f8:	e741      	b.n	800287e <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029fa:	68a3      	ldr	r3, [r4, #8]
 80029fc:	065a      	lsls	r2, r3, #25
 80029fe:	d511      	bpl.n	8002a24 <HAL_HCD_IRQHandler+0x4dc>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a00:	fb07 5306 	mla	r3, r7, r6, r5
 8002a04:	2204      	movs	r2, #4
 8002a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a10:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a12:	68e3      	ldr	r3, [r4, #12]
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1a:	4631      	mov	r1, r6
 8002a1c:	f002 fa5f 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a20:	2340      	movs	r3, #64	; 0x40
 8002a22:	e7a5      	b.n	8002970 <HAL_HCD_IRQHandler+0x428>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a24:	68a1      	ldr	r1, [r4, #8]
 8002a26:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8002a2a:	d005      	beq.n	8002a38 <HAL_HCD_IRQHandler+0x4f0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2c:	68e3      	ldr	r3, [r4, #12]
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a34:	4631      	mov	r1, r6
 8002a36:	e6af      	b.n	8002798 <HAL_HCD_IRQHandler+0x250>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a38:	68a3      	ldr	r3, [r4, #8]
 8002a3a:	07db      	lsls	r3, r3, #31
 8002a3c:	d50f      	bpl.n	8002a5e <HAL_HCD_IRQHandler+0x516>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a3e:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a40:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a44:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a48:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4c:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4e:	4631      	mov	r1, r6
 8002a50:	f002 fa45 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a54:	2201      	movs	r2, #1
 8002a56:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a58:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8002a5c:	e70f      	b.n	800287e <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a5e:	68a1      	ldr	r1, [r4, #8]
 8002a60:	0709      	lsls	r1, r1, #28
 8002a62:	d50e      	bpl.n	8002a82 <HAL_HCD_IRQHandler+0x53a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a64:	2308      	movs	r3, #8
 8002a66:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a68:	68e3      	ldr	r3, [r4, #12]
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a70:	4631      	mov	r1, r6
 8002a72:	f002 fa34 	bl	8004ede <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a76:	fb07 5606 	mla	r6, r7, r6, r5
 8002a7a:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a7c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002a80:	e6fd      	b.n	800287e <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a82:	68a1      	ldr	r1, [r4, #8]
 8002a84:	06ca      	lsls	r2, r1, #27
 8002a86:	d514      	bpl.n	8002ab2 <HAL_HCD_IRQHandler+0x56a>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a88:	fb07 5306 	mla	r3, r7, r6, r5
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a96:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	f47f af74 	bne.w	8002988 <HAL_HCD_IRQHandler+0x440>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002aa0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002aa4:	2a00      	cmp	r2, #0
 8002aa6:	f47f af6f 	bne.w	8002988 <HAL_HCD_IRQHandler+0x440>
        hhcd->hc[ch_num].do_ping = 1U;
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ab0:	e76a      	b.n	8002988 <HAL_HCD_IRQHandler+0x440>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ab2:	68a1      	ldr	r1, [r4, #8]
 8002ab4:	060b      	lsls	r3, r1, #24
 8002ab6:	d50c      	bpl.n	8002ad2 <HAL_HCD_IRQHandler+0x58a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab8:	68e3      	ldr	r3, [r4, #12]
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac0:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ac2:	fb07 5606 	mla	r6, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	f002 fa0a 	bl	8004ede <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aca:	2306      	movs	r3, #6
 8002acc:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002ad0:	e74d      	b.n	800296e <HAL_HCD_IRQHandler+0x426>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ad2:	68a1      	ldr	r1, [r4, #8]
 8002ad4:	0549      	lsls	r1, r1, #21
 8002ad6:	d50f      	bpl.n	8002af8 <HAL_HCD_IRQHandler+0x5b0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad8:	68e3      	ldr	r3, [r4, #12]
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae0:	4631      	mov	r1, r6
 8002ae2:	f002 f9fc 	bl	8004ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aee:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002af0:	fb07 5606 	mla	r6, r7, r6, r5
 8002af4:	2308      	movs	r3, #8
 8002af6:	e7c1      	b.n	8002a7c <HAL_HCD_IRQHandler+0x534>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002af8:	68a1      	ldr	r1, [r4, #8]
 8002afa:	078a      	lsls	r2, r1, #30
 8002afc:	f57f aebf 	bpl.w	800287e <HAL_HCD_IRQHandler+0x336>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b00:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b02:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b06:	f021 0102 	bic.w	r1, r1, #2
 8002b0a:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b0c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8002b10:	2901      	cmp	r1, #1
 8002b12:	d10e      	bne.n	8002b32 <HAL_HCD_IRQHandler+0x5ea>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b14:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b18:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b1c:	3b02      	subs	r3, #2
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	f63f af06 	bhi.w	8002930 <HAL_HCD_IRQHandler+0x3e8>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b24:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8002b30:	e6fe      	b.n	8002930 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b32:	2903      	cmp	r1, #3
 8002b34:	d102      	bne.n	8002b3c <HAL_HCD_IRQHandler+0x5f4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b36:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 8002b3a:	e6f9      	b.n	8002930 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b3c:	2904      	cmp	r1, #4
 8002b3e:	d0fa      	beq.n	8002b36 <HAL_HCD_IRQHandler+0x5ee>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b40:	2905      	cmp	r1, #5
 8002b42:	f43f aec7 	beq.w	80028d4 <HAL_HCD_IRQHandler+0x38c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b46:	2906      	cmp	r1, #6
 8002b48:	f43f aecd 	beq.w	80028e6 <HAL_HCD_IRQHandler+0x39e>
 8002b4c:	2908      	cmp	r1, #8
 8002b4e:	f47f aeef 	bne.w	8002930 <HAL_HCD_IRQHandler+0x3e8>
 8002b52:	e6c8      	b.n	80028e6 <HAL_HCD_IRQHandler+0x39e>

08002b54 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002b54:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002b58:	2b01      	cmp	r3, #1
{
 8002b5a:	b510      	push	{r4, lr}
 8002b5c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002b5e:	d009      	beq.n	8002b74 <HAL_HCD_Stop+0x20>
 8002b60:	2301      	movs	r3, #1
 8002b62:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002b66:	6800      	ldr	r0, [r0, #0]
 8002b68:	f002 fa0b 	bl	8004f82 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002b72:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002b74:	2002      	movs	r0, #2
 8002b76:	e7fc      	b.n	8002b72 <HAL_HCD_Stop+0x1e>

08002b78 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b78:	6801      	ldr	r1, [r0, #0]
 8002b7a:	694b      	ldr	r3, [r1, #20]
 8002b7c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	d010      	beq.n	8002ba8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002b8a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b98:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	4770      	bx	lr
  }
  return HAL_OK;
 8002ba8:	4618      	mov	r0, r3
}
 8002baa:	4770      	bx	lr

08002bac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	4616      	mov	r6, r2
 8002bb4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb6:	b28f      	uxth	r7, r1
 8002bb8:	6825      	ldr	r5, [r4, #0]
 8002bba:	6968      	ldr	r0, [r5, #20]
 8002bbc:	ea37 0000 	bics.w	r0, r7, r0
 8002bc0:	d017      	beq.n	8002bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc2:	696b      	ldr	r3, [r5, #20]
 8002bc4:	055a      	lsls	r2, r3, #21
 8002bc6:	d516      	bpl.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bce:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002bd4:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bdc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002be6:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
}
 8002bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	1c73      	adds	r3, r6, #1
 8002bf8:	d0df      	beq.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7fe fe87 	bl	800190c <HAL_GetTick>
 8002bfe:	eba0 0008 	sub.w	r0, r0, r8
 8002c02:	42b0      	cmp	r0, r6
 8002c04:	d801      	bhi.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8002c06:	2e00      	cmp	r6, #0
 8002c08:	d1d6      	bne.n	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c0c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	e7e4      	b.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002c20 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
 8002c26:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	075b      	lsls	r3, r3, #29
 8002c2e:	d501      	bpl.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002c30:	2000      	movs	r0, #0
}
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7ff ff9f 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 8002c3a:	b9a8      	cbnz	r0, 8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002c3c:	1c6a      	adds	r2, r5, #1
 8002c3e:	d0f3      	beq.n	8002c28 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c40:	f7fe fe64 	bl	800190c <HAL_GetTick>
 8002c44:	1b80      	subs	r0, r0, r6
 8002c46:	42a8      	cmp	r0, r5
 8002c48:	d801      	bhi.n	8002c4e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	d1ec      	bne.n	8002c28 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c4e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c50:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c52:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c54:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e7e2      	b.n	8002c32 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4604      	mov	r4, r0
 8002c70:	460d      	mov	r5, r1
 8002c72:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	6943      	ldr	r3, [r0, #20]
 8002c78:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002c7c:	d001      	beq.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e010      	b.n	8002ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c82:	6942      	ldr	r2, [r0, #20]
 8002c84:	06d2      	lsls	r2, r2, #27
 8002c86:	d50e      	bpl.n	8002ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	f06f 0210 	mvn.w	r2, #16
 8002c8c:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002ca2:	2001      	movs	r0, #1
}
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca6:	f7fe fe31 	bl	800190c <HAL_GetTick>
 8002caa:	1b80      	subs	r0, r0, r6
 8002cac:	42a8      	cmp	r0, r5
 8002cae:	d801      	bhi.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	d1df      	bne.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cb4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cb6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cb8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	e7e8      	b.n	8002c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002cca <I2C_WaitOnFlagUntilTimeout>:
{
 8002cca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cce:	9e08      	ldr	r6, [sp, #32]
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	4690      	mov	r8, r2
 8002cd4:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd6:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002cda:	b28d      	uxth	r5, r1
 8002cdc:	6821      	ldr	r1, [r4, #0]
 8002cde:	f1b9 0f01 	cmp.w	r9, #1
 8002ce2:	bf0c      	ite	eq
 8002ce4:	694b      	ldreq	r3, [r1, #20]
 8002ce6:	698b      	ldrne	r3, [r1, #24]
 8002ce8:	ea35 0303 	bics.w	r3, r5, r3
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	4598      	cmp	r8, r3
 8002cf4:	d001      	beq.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e016      	b.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	1c7b      	adds	r3, r7, #1
 8002cfc:	d0ef      	beq.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fe05 	bl	800190c <HAL_GetTick>
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	42b8      	cmp	r0, r7
 8002d06:	d801      	bhi.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0x42>
 8002d08:	2f00      	cmp	r7, #0
 8002d0a:	d1e7      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d0c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d0e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d10:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d26:	2001      	movs	r0, #1
}
 8002d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002d2c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	4604      	mov	r4, r0
 8002d30:	460d      	mov	r5, r1
 8002d32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	d501      	bpl.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002d3c:	2000      	movs	r0, #0
}
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff ff19 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 8002d46:	b9a8      	cbnz	r0, 8002d74 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	1c6a      	adds	r2, r5, #1
 8002d4a:	d0f3      	beq.n	8002d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4c:	f7fe fdde 	bl	800190c <HAL_GetTick>
 8002d50:	1b80      	subs	r0, r0, r6
 8002d52:	42a8      	cmp	r0, r5
 8002d54:	d801      	bhi.n	8002d5a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	d1ec      	bne.n	8002d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d5a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d5c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d5e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d74:	2001      	movs	r0, #1
 8002d76:	e7e2      	b.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002d78 <I2C_RequestMemoryWrite>:
{
 8002d78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002d7c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	6802      	ldr	r2, [r0, #0]
{
 8002d80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002d82:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d84:	6813      	ldr	r3, [r2, #0]
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]
{
 8002d8c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d90:	9600      	str	r6, [sp, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002d98:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9a:	f7ff ff96 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	b138      	cbz	r0, 8002db2 <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	d502      	bpl.n	8002dae <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dac:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002dae:	2003      	movs	r0, #3
 8002db0:	e00a      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002db6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dba:	4919      	ldr	r1, [pc, #100]	; (8002e20 <I2C_RequestMemoryWrite+0xa8>)
 8002dbc:	4633      	mov	r3, r6
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff fef4 	bl	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc4:	b118      	cbz	r0, 8002dce <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
}
 8002dc8:	b004      	add	sp, #16
 8002dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	9003      	str	r0, [sp, #12]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	9203      	str	r2, [sp, #12]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	4632      	mov	r2, r6
 8002ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7ff ffa3 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002de6:	b140      	cbz	r0, 8002dfa <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dea:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	bf01      	itttt	eq
 8002dee:	6822      	ldreq	r2, [r4, #0]
 8002df0:	6813      	ldreq	r3, [r2, #0]
 8002df2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002df6:	6013      	streq	r3, [r2, #0]
 8002df8:	e7e5      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfa:	f1b8 0f01 	cmp.w	r8, #1
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	d102      	bne.n	8002e08 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e02:	b2ed      	uxtb	r5, r5
 8002e04:	611d      	str	r5, [r3, #16]
 8002e06:	e7df      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e08:	0a2a      	lsrs	r2, r5, #8
 8002e0a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e0e:	4632      	mov	r2, r6
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff ff8b 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d1e6      	bne.n	8002de8 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	e7f1      	b.n	8002e02 <I2C_RequestMemoryWrite+0x8a>
 8002e1e:	bf00      	nop
 8002e20:	00010002 	.word	0x00010002

08002e24 <I2C_RequestMemoryRead>:
{
 8002e24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002e28:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	6803      	ldr	r3, [r0, #0]
{
 8002e2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002e2e:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e36:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3e:	601a      	str	r2, [r3, #0]
{
 8002e40:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e44:	9500      	str	r5, [sp, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002e4c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4e:	f7ff ff3c 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	b148      	cbz	r0, 8002e6a <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	d502      	bpl.n	8002e62 <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002e62:	2003      	movs	r0, #3
}
 8002e64:	b004      	add	sp, #16
 8002e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e6a:	b2ff      	uxtb	r7, r7
 8002e6c:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e72:	492a      	ldr	r1, [pc, #168]	; (8002f1c <I2C_RequestMemoryRead+0xf8>)
 8002e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e76:	462b      	mov	r3, r5
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7ff fe97 	bl	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7e:	b108      	cbz	r0, 8002e84 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7ef      	b.n	8002e64 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	9003      	str	r0, [sp, #12]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	9203      	str	r2, [sp, #12]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e90:	462a      	mov	r2, r5
 8002e92:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e94:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ff48 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	b140      	cbz	r0, 8002eb0 <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ea0:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	bf01      	itttt	eq
 8002ea4:	6822      	ldreq	r2, [r4, #0]
 8002ea6:	6813      	ldreq	r3, [r2, #0]
 8002ea8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002eac:	6013      	streq	r3, [r2, #0]
 8002eae:	e7e7      	b.n	8002e80 <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb0:	f1b8 0f01 	cmp.w	r8, #1
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	d125      	bne.n	8002f04 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb8:	b2f6      	uxtb	r6, r6
 8002eba:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7ff ff33 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d1e8      	bne.n	8002e9e <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	680b      	ldr	r3, [r1, #0]
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eda:	9500      	str	r5, [sp, #0]
 8002edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee0:	f7ff fef3 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d1b5      	bne.n	8002e56 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eea:	f047 0701 	orr.w	r7, r7, #1
 8002eee:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ef2:	490a      	ldr	r1, [pc, #40]	; (8002f1c <I2C_RequestMemoryRead+0xf8>)
 8002ef4:	462b      	mov	r3, r5
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fe58 	bl	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8002efc:	3000      	adds	r0, #0
 8002efe:	bf18      	it	ne
 8002f00:	2001      	movne	r0, #1
 8002f02:	e7af      	b.n	8002e64 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f04:	0a32      	lsrs	r2, r6, #8
 8002f06:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff ff0d 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d1c3      	bne.n	8002e9e <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	e7ce      	b.n	8002eb8 <I2C_RequestMemoryRead+0x94>
 8002f1a:	bf00      	nop
 8002f1c:	00010002 	.word	0x00010002

08002f20 <HAL_I2C_MspInit>:
}
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_I2C_Init>:
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002f26:	4604      	mov	r4, r0
 8002f28:	b908      	cbnz	r0, 8002f2e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
}
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f36:	b91b      	cbnz	r3, 8002f40 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002f38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	2324      	movs	r3, #36	; 0x24
 8002f42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f60:	f001 fa2e 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_I2C_Init+0x148>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d84d      	bhi.n	8003008 <HAL_I2C_Init+0xe4>
 8002f6c:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_I2C_Init+0x14c>)
 8002f6e:	4290      	cmp	r0, r2
 8002f70:	d9db      	bls.n	8002f2a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f72:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002f74:	493f      	ldr	r1, [pc, #252]	; (8003074 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f76:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002f78:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f80:	430d      	orrs	r5, r1
 8002f82:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f84:	6a15      	ldr	r5, [r2, #32]
 8002f86:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f8a:	3101      	adds	r1, #1
 8002f8c:	4329      	orrs	r1, r5
 8002f8e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	69d1      	ldr	r1, [r2, #28]
 8002f92:	4d36      	ldr	r5, [pc, #216]	; (800306c <HAL_I2C_Init+0x148>)
 8002f94:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002f98:	42ab      	cmp	r3, r5
 8002f9a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002f9e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8002fa2:	d848      	bhi.n	8003036 <HAL_I2C_Init+0x112>
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	bf38      	it	cc
 8002fb4:	2304      	movcc	r3, #4
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fba:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002fbe:	6811      	ldr	r1, [r2, #0]
 8002fc0:	4303      	orrs	r3, r0
 8002fc2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fca:	6891      	ldr	r1, [r2, #8]
 8002fcc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002fd0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002fd4:	4303      	orrs	r3, r0
 8002fd6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fde:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002fe2:	68d1      	ldr	r1, [r2, #12]
 8002fe4:	4303      	orrs	r3, r0
 8002fe6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002fea:	430b      	orrs	r3, r1
 8002fec:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003000:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003006:	e791      	b.n	8002f2c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_I2C_Init+0x154>)
 800300a:	4290      	cmp	r0, r2
 800300c:	d98d      	bls.n	8002f2a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003010:	4e18      	ldr	r6, [pc, #96]	; (8003074 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003012:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003014:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003018:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800301c:	4335      	orrs	r5, r6
 800301e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003020:	6a15      	ldr	r5, [r2, #32]
 8003022:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003026:	4371      	muls	r1, r6
 8003028:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800302c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003030:	fbb1 f1f6 	udiv	r1, r1, r6
 8003034:	e7a9      	b.n	8002f8a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003036:	68a5      	ldr	r5, [r4, #8]
 8003038:	b955      	cbnz	r5, 8003050 <HAL_I2C_Init+0x12c>
 800303a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800303e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	b16b      	cbz	r3, 8003066 <HAL_I2C_Init+0x142>
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	e7b2      	b.n	8002fb6 <HAL_I2C_Init+0x92>
 8003050:	2519      	movs	r5, #25
 8003052:	436b      	muls	r3, r5
 8003054:	fbb0 f0f3 	udiv	r0, r0, r3
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	b113      	cbz	r3, 8003066 <HAL_I2C_Init+0x142>
 8003060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003064:	e7a7      	b.n	8002fb6 <HAL_I2C_Init+0x92>
 8003066:	2301      	movs	r3, #1
 8003068:	e7a5      	b.n	8002fb6 <HAL_I2C_Init+0x92>
 800306a:	bf00      	nop
 800306c:	000186a0 	.word	0x000186a0
 8003070:	001e847f 	.word	0x001e847f
 8003074:	000f4240 	.word	0x000f4240
 8003078:	003d08ff 	.word	0x003d08ff

0800307c <HAL_I2C_MspDeInit>:
 800307c:	4770      	bx	lr

0800307e <HAL_I2C_DeInit>:
{
 800307e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003080:	4604      	mov	r4, r0
 8003082:	b198      	cbz	r0, 80030ac <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003084:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003086:	2324      	movs	r3, #36	; 0x24
 8003088:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003094:	f7ff fff2 	bl	800307c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003098:	2000      	movs	r0, #0
 800309a:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 800309c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80030a0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030a6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80030aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
 80030ae:	e7fc      	b.n	80030aa <HAL_I2C_DeInit+0x2c>

080030b0 <HAL_I2C_Mem_Write>:
{
 80030b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030b4:	4604      	mov	r4, r0
 80030b6:	4699      	mov	r9, r3
 80030b8:	460f      	mov	r7, r1
 80030ba:	4690      	mov	r8, r2
 80030bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80030be:	f7fe fc25 	bl	800190c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80030c6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80030c8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	d003      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80030cc:	2002      	movs	r0, #2
}
 80030ce:	b003      	add	sp, #12
 80030d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d4:	9000      	str	r0, [sp, #0]
 80030d6:	2319      	movs	r3, #25
 80030d8:	2201      	movs	r2, #1
 80030da:	493b      	ldr	r1, [pc, #236]	; (80031c8 <HAL_I2C_Mem_Write+0x118>)
 80030dc:	4620      	mov	r0, r4
 80030de:	f7ff fdf4 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d1f2      	bne.n	80030cc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80030e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d0ee      	beq.n	80030cc <HAL_I2C_Mem_Write+0x1c>
 80030ee:	2301      	movs	r3, #1
 80030f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80030fa:	bf5e      	ittt	pl
 80030fc:	681a      	ldrpl	r2, [r3, #0]
 80030fe:	f042 0201 	orrpl.w	r2, r2, #1
 8003102:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800310c:	2321      	movs	r3, #33	; 0x21
 800310e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	2300      	movs	r3, #0
 800311a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800311c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800311e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003120:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003124:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003126:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003128:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_I2C_Mem_Write+0x11c>)
 800312c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800312e:	e9cd 6500 	strd	r6, r5, [sp]
 8003132:	464b      	mov	r3, r9
 8003134:	4642      	mov	r2, r8
 8003136:	4639      	mov	r1, r7
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff fe1d 	bl	8002d78 <I2C_RequestMemoryWrite>
 800313e:	2800      	cmp	r0, #0
 8003140:	d02a      	beq.n	8003198 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8003142:	2001      	movs	r0, #1
 8003144:	e7c3      	b.n	80030ce <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003146:	f7ff fdf1 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 800314a:	b140      	cbz	r0, 800315e <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800314e:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	bf01      	itttt	eq
 8003152:	6822      	ldreq	r2, [r4, #0]
 8003154:	6813      	ldreq	r3, [r2, #0]
 8003156:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800315a:	6013      	streq	r3, [r2, #0]
 800315c:	e7f1      	b.n	8003142 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003160:	6827      	ldr	r7, [r4, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003168:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800316a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800316c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800316e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003170:	3a01      	subs	r2, #1
 8003172:	b292      	uxth	r2, r2
 8003174:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003176:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003178:	1e48      	subs	r0, r1, #1
 800317a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800317e:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003180:	d50a      	bpl.n	8003198 <HAL_I2C_Mem_Write+0xe8>
 8003182:	b148      	cbz	r0, 8003198 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003184:	785a      	ldrb	r2, [r3, #1]
 8003186:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003188:	3302      	adds	r3, #2
 800318a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800318c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800318e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8003190:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003192:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003194:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003196:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003198:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319a:	462a      	mov	r2, r5
 800319c:	4631      	mov	r1, r6
 800319e:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1d0      	bne.n	8003146 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a4:	f7ff fd3c 	bl	8002c20 <I2C_WaitOnBTFFlagUntilTimeout>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d1cf      	bne.n	800314c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	2320      	movs	r3, #32
 80031b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80031bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80031c4:	e783      	b.n	80030ce <HAL_I2C_Mem_Write+0x1e>
 80031c6:	bf00      	nop
 80031c8:	00100002 	.word	0x00100002
 80031cc:	ffff0000 	.word	0xffff0000

080031d0 <HAL_I2C_Mem_Read>:
{
 80031d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031d4:	4604      	mov	r4, r0
 80031d6:	b087      	sub	sp, #28
 80031d8:	4699      	mov	r9, r3
 80031da:	460d      	mov	r5, r1
 80031dc:	4690      	mov	r8, r2
 80031de:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7fe fb94 	bl	800190c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80031e8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80031ea:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ec:	d004      	beq.n	80031f8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80031ee:	2502      	movs	r5, #2
}
 80031f0:	4628      	mov	r0, r5
 80031f2:	b007      	add	sp, #28
 80031f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	2319      	movs	r3, #25
 80031fc:	2201      	movs	r2, #1
 80031fe:	4977      	ldr	r1, [pc, #476]	; (80033dc <HAL_I2C_Mem_Read+0x20c>)
 8003200:	4620      	mov	r0, r4
 8003202:	f7ff fd62 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 8003206:	2800      	cmp	r0, #0
 8003208:	d1f1      	bne.n	80031ee <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800320a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d0ed      	beq.n	80031ee <HAL_I2C_Mem_Read+0x1e>
 8003212:	2301      	movs	r3, #1
 8003214:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800321e:	bf5e      	ittt	pl
 8003220:	681a      	ldrpl	r2, [r3, #0]
 8003222:	f042 0201 	orrpl.w	r2, r2, #1
 8003226:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003230:	2322      	movs	r3, #34	; 0x22
 8003232:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	2300      	movs	r3, #0
 800323e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003242:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003244:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003248:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800324c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324e:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_I2C_Mem_Read+0x210>)
 8003250:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003252:	4629      	mov	r1, r5
 8003254:	e9cd 7600 	strd	r7, r6, [sp]
 8003258:	464b      	mov	r3, r9
 800325a:	4642      	mov	r2, r8
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff fde1 	bl	8002e24 <I2C_RequestMemoryRead>
 8003262:	4605      	mov	r5, r0
 8003264:	b108      	cbz	r0, 800326a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8003266:	2501      	movs	r5, #1
 8003268:	e7c2      	b.n	80031f0 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800326a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	b992      	cbnz	r2, 8003296 <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003270:	9002      	str	r0, [sp, #8]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003284:	2320      	movs	r3, #32
 8003286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	2300      	movs	r3, #0
 800328c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003290:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003294:	e7ac      	b.n	80031f0 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8003296:	2a01      	cmp	r2, #1
 8003298:	d12c      	bne.n	80032f4 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	9003      	str	r0, [sp, #12]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	9203      	str	r2, [sp, #12]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	9203      	str	r2, [sp, #12]
 80032ac:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80033e4 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 80032ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0e1      	beq.n	8003284 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d86e      	bhi.n	80033a2 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d12d      	bne.n	8003324 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	4632      	mov	r2, r6
 80032ca:	4639      	mov	r1, r7
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fccd 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d1c7      	bne.n	8003266 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032dc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80032de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80032f2:	e7e2      	b.n	80032ba <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 80032f4:	2a02      	cmp	r2, #2
 80032f6:	d10e      	bne.n	8003316 <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003306:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003308:	9004      	str	r0, [sp, #16]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	9204      	str	r2, [sp, #16]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	9304      	str	r3, [sp, #16]
 8003312:	9b04      	ldr	r3, [sp, #16]
 8003314:	e7cf      	b.n	80032b6 <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	9005      	str	r0, [sp, #20]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	9205      	str	r2, [sp, #20]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	9305      	str	r3, [sp, #20]
 8003320:	9b05      	ldr	r3, [sp, #20]
 8003322:	e7c8      	b.n	80032b6 <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8003324:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003326:	9600      	str	r6, [sp, #0]
 8003328:	463b      	mov	r3, r7
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4641      	mov	r1, r8
 8003330:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003332:	d119      	bne.n	8003368 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003334:	f7ff fcc9 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 8003338:	2800      	cmp	r0, #0
 800333a:	d194      	bne.n	8003266 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003344:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800334a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800334c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800334e:	1c53      	adds	r3, r2, #1
 8003350:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003352:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003358:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800335a:	3b01      	subs	r3, #1
 800335c:	b29b      	uxth	r3, r3
 800335e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003360:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	7053      	strb	r3, [r2, #1]
 8003366:	e7ba      	b.n	80032de <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003368:	f7ff fcaf 	bl	8002cca <I2C_WaitOnFlagUntilTimeout>
 800336c:	4602      	mov	r2, r0
 800336e:	2800      	cmp	r0, #0
 8003370:	f47f af79 	bne.w	8003266 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800337c:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	6919      	ldr	r1, [r3, #16]
 8003380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003382:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8003384:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003386:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8003388:	3301      	adds	r3, #1
 800338a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800338c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003394:	3b01      	subs	r3, #1
 8003396:	b29b      	uxth	r3, r3
 8003398:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800339a:	4641      	mov	r1, r8
 800339c:	463b      	mov	r3, r7
 800339e:	4620      	mov	r0, r4
 80033a0:	e7c8      	b.n	8003334 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a2:	4632      	mov	r2, r6
 80033a4:	4639      	mov	r1, r7
 80033a6:	4620      	mov	r0, r4
 80033a8:	f7ff fc60 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	f47f af5a 	bne.w	8003266 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033bc:	1c53      	adds	r3, r2, #1
 80033be:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80033c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80033c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	6959      	ldr	r1, [r3, #20]
 80033d2:	0749      	lsls	r1, r1, #29
 80033d4:	f57f af71 	bpl.w	80032ba <HAL_I2C_Mem_Read+0xea>
 80033d8:	e7c3      	b.n	8003362 <HAL_I2C_Mem_Read+0x192>
 80033da:	bf00      	nop
 80033dc:	00100002 	.word	0x00100002
 80033e0:	ffff0000 	.word	0xffff0000
 80033e4:	00010004 	.word	0x00010004

080033e8 <HAL_I2C_GetState>:
  return hi2c->State;
 80033e8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80033ec:	4770      	bx	lr

080033ee <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80033ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033f2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033f4:	6804      	ldr	r4, [r0, #0]
 80033f6:	684f      	ldr	r7, [r1, #4]
 80033f8:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033fa:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80033fe:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003402:	3284      	adds	r2, #132	; 0x84
 8003404:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003406:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800340a:	6858      	ldr	r0, [r3, #4]
 800340c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003410:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003412:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003414:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003418:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800341c:	4430      	add	r0, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800341e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003420:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003424:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003426:	68e0      	ldr	r0, [r4, #12]
 8003428:	68cd      	ldr	r5, [r1, #12]
 800342a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800342e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003430:	6898      	ldr	r0, [r3, #8]
 8003432:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003436:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003438:	68e6      	ldr	r6, [r4, #12]
 800343a:	6888      	ldr	r0, [r1, #8]
 800343c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003440:	3001      	adds	r0, #1
 8003442:	4430      	add	r0, r6
 8003444:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003448:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800344a:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800344c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800344e:	f020 0007 	bic.w	r0, r0, #7
 8003452:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003454:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003458:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800345a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800345c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003460:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003464:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003468:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800346c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003470:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003474:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003478:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800347a:	6958      	ldr	r0, [r3, #20]
 800347c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003480:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003482:	6948      	ldr	r0, [r1, #20]
 8003484:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003486:	69d8      	ldr	r0, [r3, #28]
 8003488:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800348c:	f020 0007 	bic.w	r0, r0, #7
 8003490:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003492:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8003496:	4305      	orrs	r5, r0
 8003498:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800349a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800349c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800349e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80034a2:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80034a4:	b31e      	cbz	r6, 80034ee <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80034a6:	2e01      	cmp	r6, #1
 80034a8:	d023      	beq.n	80034f2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80034aa:	1eb0      	subs	r0, r6, #2
 80034ac:	2802      	cmp	r0, #2
 80034ae:	d922      	bls.n	80034f6 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80034b0:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80034b2:	bf0c      	ite	eq
 80034b4:	2002      	moveq	r0, #2
 80034b6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80034b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80034ba:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80034be:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80034c0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80034c4:	eba7 070c 	sub.w	r7, r7, ip
 80034c8:	4345      	muls	r5, r0
 80034ca:	4378      	muls	r0, r7
 80034cc:	3003      	adds	r0, #3
 80034ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80034d2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80034d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034d6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80034da:	f020 0007 	bic.w	r0, r0, #7
 80034de:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034e0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80034e2:	58a3      	ldr	r3, [r4, r2]
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	50a3      	str	r3, [r4, r2]
}
 80034ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80034ee:	2004      	movs	r0, #4
 80034f0:	e7e2      	b.n	80034b8 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80034f2:	2003      	movs	r0, #3
 80034f4:	e7e0      	b.n	80034b8 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80034f6:	2002      	movs	r0, #2
 80034f8:	e7de      	b.n	80034b8 <LTDC_SetConfig+0xca>

080034fa <HAL_LTDC_MspInit>:
}
 80034fa:	4770      	bx	lr

080034fc <HAL_LTDC_Init>:
{
 80034fc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80034fe:	4604      	mov	r4, r0
 8003500:	2800      	cmp	r0, #0
 8003502:	d063      	beq.n	80035cc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003504:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003508:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800350c:	b91b      	cbnz	r3, 8003516 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800350e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003512:	f7ff fff2 	bl	80034fa <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003516:	2302      	movs	r3, #2
 8003518:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003524:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003526:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800352a:	4302      	orrs	r2, r0
 800352c:	68e0      	ldr	r0, [r4, #12]
 800352e:	6999      	ldr	r1, [r3, #24]
 8003530:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003532:	6920      	ldr	r0, [r4, #16]
 8003534:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003536:	430a      	orrs	r2, r1
 8003538:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4924      	ldr	r1, [pc, #144]	; (80035d0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800353e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003540:	400a      	ands	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800354a:	69a0      	ldr	r0, [r4, #24]
 800354c:	4302      	orrs	r2, r0
 800354e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003550:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003552:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003554:	400a      	ands	r2, r1
 8003556:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800355e:	6a20      	ldr	r0, [r4, #32]
 8003560:	4302      	orrs	r2, r0
 8003562:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003564:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003566:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003568:	400a      	ands	r2, r1
 800356a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003572:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003574:	4302      	orrs	r2, r0
 8003576:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	4011      	ands	r1, r2
 800357c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800357e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003580:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003582:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003586:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003588:	430a      	orrs	r2, r1
 800358a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800358c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800358e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003592:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003596:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800359a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800359c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80035a2:	430a      	orrs	r2, r1
 80035a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80035a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80035ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b0:	f042 0206 	orr.w	r2, r2, #6
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035be:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80035c0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035c2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80035c6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80035cc:	2001      	movs	r0, #1
 80035ce:	e7fc      	b.n	80035ca <HAL_LTDC_Init+0xce>
 80035d0:	f000f800 	.word	0xf000f800

080035d4 <HAL_LTDC_MspDeInit>:
 80035d4:	4770      	bx	lr

080035d6 <HAL_LTDC_DeInit>:
{
 80035d6:	b510      	push	{r4, lr}
 80035d8:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 80035da:	f7ff fffb 	bl	80035d4 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035de:	2000      	movs	r0, #0
 80035e0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 80035e4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 80035e8:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 80035ec:	bd10      	pop	{r4, pc}

080035ee <HAL_LTDC_ErrorCallback>:
 80035ee:	4770      	bx	lr

080035f0 <HAL_LTDC_LineEventCallback>:
 80035f0:	4770      	bx	lr

080035f2 <HAL_LTDC_ReloadEventCallback>:
 80035f2:	4770      	bx	lr

080035f4 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80035f4:	6803      	ldr	r3, [r0, #0]
{
 80035f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80035f8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80035fa:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80035fc:	0772      	lsls	r2, r6, #29
{
 80035fe:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003600:	d514      	bpl.n	800362c <HAL_LTDC_IRQHandler+0x38>
 8003602:	0769      	lsls	r1, r5, #29
 8003604:	d512      	bpl.n	800362c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003608:	f022 0204 	bic.w	r2, r2, #4
 800360c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800360e:	2204      	movs	r2, #4
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003612:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800361e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003620:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003624:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003628:	f7ff ffe1 	bl	80035ee <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800362c:	07b2      	lsls	r2, r6, #30
 800362e:	d516      	bpl.n	800365e <HAL_LTDC_IRQHandler+0x6a>
 8003630:	07ab      	lsls	r3, r5, #30
 8003632:	d514      	bpl.n	800365e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003638:	f022 0202 	bic.w	r2, r2, #2
 800363c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800363e:	2202      	movs	r2, #2
 8003640:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003642:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800364c:	2304      	movs	r3, #4
 800364e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003652:	2300      	movs	r3, #0
 8003654:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff ffc8 	bl	80035ee <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800365e:	07f0      	lsls	r0, r6, #31
 8003660:	d510      	bpl.n	8003684 <HAL_LTDC_IRQHandler+0x90>
 8003662:	07e9      	lsls	r1, r5, #31
 8003664:	d50e      	bpl.n	8003684 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003670:	2201      	movs	r2, #1
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8003674:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8003676:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800367a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff ffb6 	bl	80035f0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003684:	0732      	lsls	r2, r6, #28
 8003686:	d511      	bpl.n	80036ac <HAL_LTDC_IRQHandler+0xb8>
 8003688:	072b      	lsls	r3, r5, #28
 800368a:	d50f      	bpl.n	80036ac <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003696:	2208      	movs	r2, #8
 8003698:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800369a:	2301      	movs	r3, #1
 800369c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80036a0:	2300      	movs	r3, #0
 80036a2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80036a6:	4620      	mov	r0, r4
 80036a8:	f7ff ffa3 	bl	80035f2 <HAL_LTDC_ReloadEventCallback>
}
 80036ac:	bd70      	pop	{r4, r5, r6, pc}

080036ae <HAL_LTDC_ConfigLayer>:
{
 80036ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80036b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80036b4:	2b01      	cmp	r3, #1
{
 80036b6:	4606      	mov	r6, r0
 80036b8:	468c      	mov	ip, r1
 80036ba:	4696      	mov	lr, r2
 80036bc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80036c0:	d01d      	beq.n	80036fe <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80036c2:	2434      	movs	r4, #52	; 0x34
 80036c4:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036c6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80036ca:	fb04 6402 	mla	r4, r4, r2, r6
 80036ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80036d0:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80036d2:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80036d4:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80036d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80036e6:	4630      	mov	r0, r6
 80036e8:	4672      	mov	r2, lr
 80036ea:	4661      	mov	r1, ip
 80036ec:	f7ff fe7f 	bl	80033ee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036f0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80036f2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036f4:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80036f6:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80036fa:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80036fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003700 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 8003700:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003704:	2b01      	cmp	r3, #1
{
 8003706:	b510      	push	{r4, lr}
 8003708:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hltdc);
 800370c:	d013      	beq.n	8003736 <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800370e:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003710:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003714:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8003718:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800371c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003724:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8003726:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800372a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800372c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003730:	2300      	movs	r3, #0
 8003732:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003736:	4618      	mov	r0, r3
}
 8003738:	bd10      	pop	{r4, pc}

0800373a <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 800373a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800373e:	2b01      	cmp	r3, #1
 8003740:	f04f 0302 	mov.w	r3, #2
 8003744:	d00f      	beq.n	8003766 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003746:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003748:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800374c:	3184      	adds	r1, #132	; 0x84
 800374e:	6803      	ldr	r3, [r0, #0]
 8003750:	585a      	ldr	r2, [r3, r1]
 8003752:	f042 0202 	orr.w	r2, r2, #2
 8003756:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003758:	2201      	movs	r2, #1
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800375c:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800375e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003762:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003766:	4618      	mov	r0, r3
}
 8003768:	4770      	bx	lr

0800376a <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 800376a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800376e:	2b01      	cmp	r3, #1
 8003770:	f04f 0302 	mov.w	r3, #2
 8003774:	d00f      	beq.n	8003796 <HAL_LTDC_DisableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8003776:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003778:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800377c:	3184      	adds	r1, #132	; 0x84
 800377e:	6803      	ldr	r3, [r0, #0]
 8003780:	585a      	ldr	r2, [r3, r1]
 8003782:	f022 0202 	bic.w	r2, r2, #2
 8003786:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003788:	2201      	movs	r2, #1
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800378c:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800378e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003792:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003796:	4618      	mov	r0, r3
}
 8003798:	4770      	bx	lr

0800379a <HAL_LTDC_SetWindowPosition>:
{
 800379a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800379c:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80037a0:	2c01      	cmp	r4, #1
{
 80037a2:	4605      	mov	r5, r0
 80037a4:	469c      	mov	ip, r3
 80037a6:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hltdc);
 80037aa:	d01d      	beq.n	80037e8 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037ac:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 80037b0:	2434      	movs	r4, #52	; 0x34
 80037b2:	435c      	muls	r4, r3
 80037b4:	1906      	adds	r6, r0, r4
  __HAL_LOCK(hltdc);
 80037b6:	2701      	movs	r7, #1
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80037b8:	6e33      	ldr	r3, [r6, #96]	; 0x60
  __HAL_LOCK(hltdc);
 80037ba:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 80037be:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80037c0:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 80037c2:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80037c6:	6e71      	ldr	r1, [r6, #100]	; 0x64
 80037c8:	4411      	add	r1, r2
 80037ca:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80037cc:	f104 0138 	add.w	r1, r4, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037d0:	4401      	add	r1, r0
 80037d2:	4662      	mov	r2, ip
 80037d4:	f7ff fe0b 	bl	80033ee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037d8:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(hltdc);
 80037da:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037dc:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80037de:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80037e2:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
}
 80037e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80037e8:	4620      	mov	r0, r4
 80037ea:	e7fc      	b.n	80037e6 <HAL_LTDC_SetWindowPosition+0x4c>

080037ec <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 80037ec:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80037f0:	2b01      	cmp	r3, #1
{
 80037f2:	b570      	push	{r4, r5, r6, lr}
 80037f4:	f04f 0302 	mov.w	r3, #2
 80037f8:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80037fa:	d015      	beq.n	8003828 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037fc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 8003800:	2334      	movs	r3, #52	; 0x34
 8003802:	4353      	muls	r3, r2
 8003804:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8003806:	2501      	movs	r5, #1
 8003808:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 800380c:	64f1      	str	r1, [r6, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800380e:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003812:	4401      	add	r1, r0
 8003814:	f7ff fdeb 	bl	80033ee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003818:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800381a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800381c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800381e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003822:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003826:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8003828:	4618      	mov	r0, r3
 800382a:	e7fc      	b.n	8003826 <HAL_LTDC_SetAlpha+0x3a>

0800382c <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 800382c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003830:	2b01      	cmp	r3, #1
{
 8003832:	b570      	push	{r4, r5, r6, lr}
 8003834:	f04f 0302 	mov.w	r3, #2
 8003838:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800383a:	d015      	beq.n	8003868 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800383c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8003840:	2334      	movs	r3, #52	; 0x34
 8003842:	4353      	muls	r3, r2
 8003844:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8003846:	2501      	movs	r5, #1
 8003848:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 800384c:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800384e:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003852:	4401      	add	r1, r0
 8003854:	f7ff fdcb 	bl	80033ee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003858:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800385a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800385c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800385e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003862:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003866:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8003868:	4618      	mov	r0, r3
 800386a:	e7fc      	b.n	8003866 <HAL_LTDC_SetAddress+0x3a>

0800386c <HAL_LTDC_SetPitch>:
  __HAL_LOCK(hltdc);
 800386c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003870:	2b01      	cmp	r3, #1
{
 8003872:	b530      	push	{r4, r5, lr}
 8003874:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hltdc);
 8003878:	d02d      	beq.n	80038d6 <HAL_LTDC_SetPitch+0x6a>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800387a:	2434      	movs	r4, #52	; 0x34
 800387c:	fb04 0402 	mla	r4, r4, r2, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003880:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8003884:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003886:	b344      	cbz	r4, 80038da <HAL_LTDC_SetPitch+0x6e>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003888:	2c01      	cmp	r4, #1
 800388a:	d028      	beq.n	80038de <HAL_LTDC_SetPitch+0x72>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800388c:	1ea5      	subs	r5, r4, #2
 800388e:	429d      	cmp	r5, r3
 8003890:	d902      	bls.n	8003898 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8003892:	2c07      	cmp	r4, #7
 8003894:	bf18      	it	ne
 8003896:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8003898:	01d2      	lsls	r2, r2, #7
 800389a:	f102 0484 	add.w	r4, r2, #132	; 0x84
 800389e:	6802      	ldr	r2, [r0, #0]
 80038a0:	4422      	add	r2, r4
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80038a2:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80038a4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80038a6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80038aa:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 80038ae:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80038b0:	4c0c      	ldr	r4, [pc, #48]	; (80038e4 <HAL_LTDC_SetPitch+0x78>)
 80038b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80038b4:	f045 0501 	orr.w	r5, r5, #1
 80038b8:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80038ba:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80038bc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80038c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80038d0:	2300      	movs	r3, #0
 80038d2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 80038da:	2304      	movs	r3, #4
 80038dc:	e7dc      	b.n	8003898 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 80038de:	2303      	movs	r3, #3
 80038e0:	e7da      	b.n	8003898 <HAL_LTDC_SetPitch+0x2c>
 80038e2:	bf00      	nop
 80038e4:	40016800 	.word	0x40016800

080038e8 <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{

}
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038f4:	4c18      	ldr	r4, [pc, #96]	; (8003958 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_PWREx_EnableOverDrive+0x70>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800390e:	f7fd fffd 	bl	800190c <HAL_GetTick>
 8003912:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	03da      	lsls	r2, r3, #15
 8003918:	d50b      	bpl.n	8003932 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800391c:	4c0e      	ldr	r4, [pc, #56]	; (8003958 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003922:	f7fd fff3 	bl	800190c <HAL_GetTick>
 8003926:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	039b      	lsls	r3, r3, #14
 800392c:	d50a      	bpl.n	8003944 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800392e:	2000      	movs	r0, #0
 8003930:	e006      	b.n	8003940 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003932:	f7fd ffeb 	bl	800190c <HAL_GetTick>
 8003936:	1b40      	subs	r0, r0, r5
 8003938:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800393c:	d9ea      	bls.n	8003914 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800393e:	2003      	movs	r0, #3
}
 8003940:	b003      	add	sp, #12
 8003942:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003944:	f7fd ffe2 	bl	800190c <HAL_GetTick>
 8003948:	1b40      	subs	r0, r0, r5
 800394a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800394e:	d9eb      	bls.n	8003928 <HAL_PWREx_EnableOverDrive+0x3c>
 8003950:	e7f5      	b.n	800393e <HAL_PWREx_EnableOverDrive+0x52>
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	40007000 	.word	0x40007000
 800395c:	420e0040 	.word	0x420e0040
 8003960:	420e0044 	.word	0x420e0044

08003964 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003968:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800396a:	b13e      	cbz	r6, 800397c <QSPI_Config+0x18>
 800396c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003970:	bf1f      	itttt	ne
 8003972:	6a8b      	ldrne	r3, [r1, #40]	; 0x28
 8003974:	6804      	ldrne	r4, [r0, #0]
 8003976:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800397a:	6123      	strne	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800397c:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8003980:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 8003984:	f1ba 0f00 	cmp.w	sl, #0
 8003988:	d04e      	beq.n	8003a28 <QSPI_Config+0xc4>
 800398a:	694b      	ldr	r3, [r1, #20]
 800398c:	6805      	ldr	r5, [r0, #0]
 800398e:	f8d1 8000 	ldr.w	r8, [r1]
 8003992:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003994:	ea46 0a0a 	orr.w	sl, r6, sl
 8003998:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 800399c:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 80039a0:	ea4a 0a02 	orr.w	sl, sl, r2
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80039a4:	f1bc 0f00 	cmp.w	ip, #0
 80039a8:	d026      	beq.n	80039f8 <QSPI_Config+0x94>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80039aa:	688b      	ldr	r3, [r1, #8]
 80039ac:	61eb      	str	r3, [r5, #28]
 80039ae:	690e      	ldr	r6, [r1, #16]
 80039b0:	ea4c 0c0a 	orr.w	ip, ip, sl

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80039b4:	b1a7      	cbz	r7, 80039e0 <QSPI_Config+0x7c>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80039b6:	ea48 0307 	orr.w	r3, r8, r7
 80039ba:	4323      	orrs	r3, r4
 80039bc:	ea43 0309 	orr.w	r3, r3, r9
 80039c0:	4303      	orrs	r3, r0
 80039c2:	68c8      	ldr	r0, [r1, #12]
 80039c4:	4333      	orrs	r3, r6
 80039c6:	4303      	orrs	r3, r0
 80039c8:	ea43 030e 	orr.w	r3, r3, lr
 80039cc:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80039d0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80039d4:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80039d6:	d001      	beq.n	80039dc <QSPI_Config+0x78>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80039d8:	684b      	ldr	r3, [r1, #4]
 80039da:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80039dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80039e0:	ea48 0304 	orr.w	r3, r8, r4
 80039e4:	ea43 0309 	orr.w	r3, r3, r9
 80039e8:	4303      	orrs	r3, r0
 80039ea:	4333      	orrs	r3, r6
 80039ec:	ea43 030e 	orr.w	r3, r3, lr
 80039f0:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80039f4:	616b      	str	r3, [r5, #20]
 80039f6:	e7f1      	b.n	80039dc <QSPI_Config+0x78>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80039f8:	b167      	cbz	r7, 8003a14 <QSPI_Config+0xb0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80039fa:	ea48 0307 	orr.w	r3, r8, r7
 80039fe:	4323      	orrs	r3, r4
 8003a00:	ea43 0309 	orr.w	r3, r3, r9
 8003a04:	4303      	orrs	r3, r0
 8003a06:	68c8      	ldr	r0, [r1, #12]
 8003a08:	4303      	orrs	r3, r0
 8003a0a:	ea43 030e 	orr.w	r3, r3, lr
 8003a0e:	ea43 030a 	orr.w	r3, r3, sl
 8003a12:	e7dd      	b.n	80039d0 <QSPI_Config+0x6c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a14:	ea48 0304 	orr.w	r3, r8, r4
 8003a18:	ea43 0309 	orr.w	r3, r3, r9
 8003a1c:	4303      	orrs	r3, r0
 8003a1e:	ea43 030e 	orr.w	r3, r3, lr
 8003a22:	ea43 030a 	orr.w	r3, r3, sl
 8003a26:	e7e5      	b.n	80039f4 <QSPI_Config+0x90>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003a28:	f1bc 0f00 	cmp.w	ip, #0
 8003a2c:	d028      	beq.n	8003a80 <QSPI_Config+0x11c>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003a2e:	6804      	ldr	r4, [r0, #0]
 8003a30:	688b      	ldr	r3, [r1, #8]
 8003a32:	61e3      	str	r3, [r4, #28]
 8003a34:	ea46 030c 	orr.w	r3, r6, ip
 8003a38:	694e      	ldr	r6, [r1, #20]
 8003a3a:	6908      	ldr	r0, [r1, #16]
 8003a3c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8003a40:	ea43 0502 	orr.w	r5, r3, r2
 8003a44:	04b6      	lsls	r6, r6, #18
 8003a46:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003a4a:	b187      	cbz	r7, 8003a6e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a4c:	4338      	orrs	r0, r7
 8003a4e:	ea40 0008 	orr.w	r0, r0, r8
 8003a52:	4303      	orrs	r3, r0
 8003a54:	68c8      	ldr	r0, [r1, #12]
 8003a56:	ea43 030c 	orr.w	r3, r3, ip
 8003a5a:	4303      	orrs	r3, r0
 8003a5c:	4333      	orrs	r3, r6
 8003a5e:	432b      	orrs	r3, r5
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003a60:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a64:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003a66:	d0b9      	beq.n	80039dc <QSPI_Config+0x78>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003a68:	684b      	ldr	r3, [r1, #4]
 8003a6a:	61a3      	str	r3, [r4, #24]
 8003a6c:	e7b6      	b.n	80039dc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a6e:	ea40 0008 	orr.w	r0, r0, r8
 8003a72:	4303      	orrs	r3, r0
 8003a74:	ea43 030c 	orr.w	r3, r3, ip
 8003a78:	4333      	orrs	r3, r6
 8003a7a:	432b      	orrs	r3, r5
 8003a7c:	6163      	str	r3, [r4, #20]
 8003a7e:	e7ad      	b.n	80039dc <QSPI_Config+0x78>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003a80:	b1af      	cbz	r7, 8003aae <QSPI_Config+0x14a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a82:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003a84:	6800      	ldr	r0, [r0, #0]
 8003a86:	ea46 0307 	orr.w	r3, r6, r7
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	4323      	orrs	r3, r4
 8003a8e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8003a90:	4323      	orrs	r3, r4
 8003a92:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003a94:	4323      	orrs	r3, r4
 8003a96:	68cc      	ldr	r4, [r1, #12]
 8003a98:	4323      	orrs	r3, r4
 8003a9a:	694c      	ldr	r4, [r1, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003a9c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003aa0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8003aa4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003aa6:	d099      	beq.n	80039dc <QSPI_Config+0x78>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003aa8:	684b      	ldr	r3, [r1, #4]
 8003aaa:	6183      	str	r3, [r0, #24]
 8003aac:	e796      	b.n	80039dc <QSPI_Config+0x78>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	d094      	beq.n	80039dc <QSPI_Config+0x78>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ab2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003ab4:	6800      	ldr	r0, [r0, #0]
 8003ab6:	4333      	orrs	r3, r6
 8003ab8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003aba:	431a      	orrs	r2, r3
 8003abc:	4332      	orrs	r2, r6
 8003abe:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8003ac0:	694b      	ldr	r3, [r1, #20]
 8003ac2:	4332      	orrs	r2, r6
 8003ac4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8003ac8:	6142      	str	r2, [r0, #20]
}
 8003aca:	e787      	b.n	80039dc <QSPI_Config+0x78>

08003acc <QSPI_WaitFlagStateUntilTimeout>:
{
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad0:	9d06      	ldr	r5, [sp, #24]
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	460f      	mov	r7, r1
 8003ad6:	4616      	mov	r6, r2
 8003ad8:	4698      	mov	r8, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	688a      	ldr	r2, [r1, #8]
 8003ade:	423a      	tst	r2, r7
 8003ae0:	bf14      	ite	ne
 8003ae2:	2201      	movne	r2, #1
 8003ae4:	2200      	moveq	r2, #0
 8003ae6:	42b2      	cmp	r2, r6
 8003ae8:	d101      	bne.n	8003aee <QSPI_WaitFlagStateUntilTimeout+0x22>
  return HAL_OK;
 8003aea:	2000      	movs	r0, #0
 8003aec:	e011      	b.n	8003b12 <QSPI_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	1c6b      	adds	r3, r5, #1
 8003af0:	d0f4      	beq.n	8003adc <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fd ff0b 	bl	800190c <HAL_GetTick>
 8003af6:	eba0 0008 	sub.w	r0, r0, r8
 8003afa:	42a8      	cmp	r0, r5
 8003afc:	d801      	bhi.n	8003b02 <QSPI_WaitFlagStateUntilTimeout+0x36>
 8003afe:	2d00      	cmp	r5, #0
 8003b00:	d1eb      	bne.n	8003ada <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b02:	2304      	movs	r3, #4
 8003b04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6463      	str	r3, [r4, #68]	; 0x44
 8003b10:	2001      	movs	r0, #1
}
 8003b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b16 <HAL_QSPI_MspInit>:
}
 8003b16:	4770      	bx	lr

08003b18 <HAL_QSPI_Init>:
{
 8003b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7fd fef6 	bl	800190c <HAL_GetTick>
 8003b20:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003b22:	2c00      	cmp	r4, #0
 8003b24:	d046      	beq.n	8003bb4 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b26:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003b2a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003b2e:	b93a      	cbnz	r2, 8003b40 <HAL_QSPI_Init+0x28>
    hqspi->Lock = HAL_UNLOCKED;
 8003b30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff ffee 	bl	8003b16 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b3e:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b40:	6820      	ldr	r0, [r4, #0]
 8003b42:	68a1      	ldr	r1, [r4, #8]
 8003b44:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b48:	3901      	subs	r1, #1
 8003b4a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003b4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b52:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b54:	2120      	movs	r1, #32
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	462b      	mov	r3, r5
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f7ff ffb5 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003b62:	bb10      	cbnz	r0, 8003baa <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003b64:	69e5      	ldr	r5, [r4, #28]
 8003b66:	68e3      	ldr	r3, [r4, #12]
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	432b      	orrs	r3, r5
 8003b6c:	6a25      	ldr	r5, [r4, #32]
 8003b6e:	6811      	ldr	r1, [r2, #0]
 8003b70:	432b      	orrs	r3, r5
 8003b72:	6865      	ldr	r5, [r4, #4]
 8003b74:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003b78:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003b7c:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b84:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6921      	ldr	r1, [r4, #16]
 8003b8c:	6855      	ldr	r5, [r2, #4]
 8003b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b92:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <HAL_QSPI_Init+0xa0>)
 8003b94:	4029      	ands	r1, r5
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ba2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ba4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ba6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003baa:	2300      	movs	r3, #0
 8003bac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003bb0:	b003      	add	sp, #12
 8003bb2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	e7fb      	b.n	8003bb0 <HAL_QSPI_Init+0x98>
 8003bb8:	ffe0f8fe 	.word	0xffe0f8fe

08003bbc <HAL_QSPI_MspDeInit>:
 8003bbc:	4770      	bx	lr

08003bbe <HAL_QSPI_DeInit>:
{
 8003bbe:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	b168      	cbz	r0, 8003be0 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8003bc4:	6802      	ldr	r2, [r0, #0]
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8003bce:	f7ff fff5 	bl	8003bbc <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003bd6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003bda:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003bde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003be0:	2001      	movs	r0, #1
 8003be2:	e7fc      	b.n	8003bde <HAL_QSPI_DeInit+0x20>

08003be4 <HAL_QSPI_Command>:
{
 8003be4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4604      	mov	r4, r0
 8003bea:	468a      	mov	sl, r1
 8003bec:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8003bee:	f7fd fe8d 	bl	800190c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003bf2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003bf6:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	4680      	mov	r8, r0
  __HAL_LOCK(hqspi);
 8003bfa:	d035      	beq.n	8003c68 <HAL_QSPI_Command+0x84>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c02:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
 8003c06:	b2f6      	uxtb	r6, r6
 8003c08:	429e      	cmp	r6, r3
 8003c0a:	f04f 0702 	mov.w	r7, #2
 8003c0e:	d129      	bne.n	8003c64 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c10:	2200      	movs	r2, #0
 8003c12:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c14:	4603      	mov	r3, r0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003c16:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c1a:	f8cd 9000 	str.w	r9, [sp]
 8003c1e:	2120      	movs	r1, #32
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff ff53 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003c26:	4605      	mov	r5, r0
 8003c28:	b9a8      	cbnz	r0, 8003c56 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff fe98 	bl	8003964 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8003c34:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003c38:	b95b      	cbnz	r3, 8003c52 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c3a:	f8cd 9000 	str.w	r9, [sp]
 8003c3e:	4643      	mov	r3, r8
 8003c40:	4632      	mov	r2, r6
 8003c42:	4639      	mov	r1, r7
 8003c44:	4620      	mov	r0, r4
 8003c46:	f7ff ff41 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	b918      	cbnz	r0, 8003c56 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	60df      	str	r7, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8003c52:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	b002      	add	sp, #8
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8003c64:	463d      	mov	r5, r7
 8003c66:	e7f6      	b.n	8003c56 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8003c68:	2502      	movs	r5, #2
 8003c6a:	e7f7      	b.n	8003c5c <HAL_QSPI_Command+0x78>

08003c6c <HAL_QSPI_AutoPolling>:
{
 8003c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c70:	4604      	mov	r4, r0
 8003c72:	4698      	mov	r8, r3
 8003c74:	4689      	mov	r9, r1
 8003c76:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7fd fe48 	bl	800190c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003c7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003c80:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 8003c82:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8003c84:	d042      	beq.n	8003d0c <HAL_QSPI_AutoPolling+0xa0>
 8003c86:	2301      	movs	r3, #1
 8003c88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c8c:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8003c90:	b2ed      	uxtb	r5, r5
 8003c92:	429d      	cmp	r5, r3
 8003c94:	d138      	bne.n	8003d08 <HAL_QSPI_AutoPolling+0x9c>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003c96:	2342      	movs	r3, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c98:	2200      	movs	r2, #0
 8003c9a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c9c:	f8cd 8000 	str.w	r8, [sp]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003ca0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff0f 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003cae:	bb28      	cbnz	r0, 8003cfc <HAL_QSPI_AutoPolling+0x90>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	6832      	ldr	r2, [r6, #0]
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003cb6:	6872      	ldr	r2, [r6, #4]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003cba:	68b2      	ldr	r2, [r6, #8]
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	6932      	ldr	r2, [r6, #16]
 8003cc2:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8003cc6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8003cce:	68f3      	ldr	r3, [r6, #12]
 8003cd0:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003cd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cd8:	4649      	mov	r1, r9
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff fe42 	bl	8003964 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003ce0:	f8cd 8000 	str.w	r8, [sp]
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	462a      	mov	r2, r5
 8003ce8:	2108      	movs	r1, #8
 8003cea:	4620      	mov	r0, r4
 8003cec:	f7ff feee 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8003cf0:	b920      	cbnz	r0, 8003cfc <HAL_QSPI_AutoPolling+0x90>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8003cf8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003d02:	b003      	add	sp, #12
 8003d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8003d08:	2002      	movs	r0, #2
 8003d0a:	e7f7      	b.n	8003cfc <HAL_QSPI_AutoPolling+0x90>
  __HAL_LOCK(hqspi);
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	e7f8      	b.n	8003d02 <HAL_QSPI_AutoPolling+0x96>

08003d10 <HAL_QSPI_MemoryMapped>:
{
 8003d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d12:	4604      	mov	r4, r0
 8003d14:	4617      	mov	r7, r2
 8003d16:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7fd fdf8 	bl	800190c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003d1c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8003d20:	2a01      	cmp	r2, #1
  uint32_t tickstart = HAL_GetTick();
 8003d22:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8003d24:	d032      	beq.n	8003d8c <HAL_QSPI_MemoryMapped+0x7c>
 8003d26:	2201      	movs	r2, #1
 8003d28:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d2c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003d30:	2a01      	cmp	r2, #1
 8003d32:	d129      	bne.n	8003d88 <HAL_QSPI_MemoryMapped+0x78>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d34:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003d36:	2182      	movs	r1, #130	; 0x82
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d38:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003d3a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003d3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003d40:	9100      	str	r1, [sp, #0]
 8003d42:	4620      	mov	r0, r4
 8003d44:	2120      	movs	r1, #32
 8003d46:	f7ff fec1 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	b9b0      	cbnz	r0, 8003d7c <HAL_QSPI_MemoryMapped+0x6c>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	f022 0208 	bic.w	r2, r2, #8
 8003d58:	430a      	orrs	r2, r1
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003d5a:	2908      	cmp	r1, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003d5c:	601a      	str	r2, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003d5e:	d107      	bne.n	8003d70 <HAL_QSPI_MemoryMapped+0x60>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8003d64:	2210      	movs	r2, #16
 8003d66:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d6e:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8003d70:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003d74:	4631      	mov	r1, r6
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff fdf4 	bl	8003964 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003d82:	4628      	mov	r0, r5
 8003d84:	b003      	add	sp, #12
 8003d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8003d88:	2502      	movs	r5, #2
 8003d8a:	e7f7      	b.n	8003d7c <HAL_QSPI_MemoryMapped+0x6c>
  __HAL_LOCK(hqspi);
 8003d8c:	2502      	movs	r5, #2
 8003d8e:	e7f8      	b.n	8003d82 <HAL_QSPI_MemoryMapped+0x72>

08003d90 <HAL_QSPI_ErrorCallback>:
 8003d90:	4770      	bx	lr

08003d92 <QSPI_DMAAbortCplt>:
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8003d92:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003d94:	b508      	push	{r3, lr}
  hqspi->RxXferCount = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8003d9a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8003d9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d10b      	bne.n	8003dbc <QSPI_DMAAbortCplt+0x2a>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003da4:	6803      	ldr	r3, [r0, #0]
 8003da6:	2202      	movs	r2, #2
 8003da8:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003db0:	601a      	str	r2, [r3, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	f042 0202 	orr.w	r2, r2, #2
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8003dc2:	f7ff ffe5 	bl	8003d90 <HAL_QSPI_ErrorCallback>
}
 8003dc6:	e7f8      	b.n	8003dba <QSPI_DMAAbortCplt+0x28>

08003dc8 <HAL_QSPI_AbortCpltCallback>:
 8003dc8:	4770      	bx	lr

08003dca <HAL_QSPI_CmdCpltCallback>:
 8003dca:	4770      	bx	lr

08003dcc <HAL_QSPI_RxCpltCallback>:
 8003dcc:	4770      	bx	lr

08003dce <HAL_QSPI_TxCpltCallback>:
 8003dce:	4770      	bx	lr

08003dd0 <HAL_QSPI_FifoThresholdCallback>:
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_QSPI_StatusMatchCallback>:
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_QSPI_TimeOutCallback>:
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_QSPI_Abort>:
{
 8003dd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dd8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003dda:	f7fd fd97 	bl	800190c <HAL_GetTick>
 8003dde:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003de0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8003de4:	f010 0002 	ands.w	r0, r0, #2
 8003de8:	d034      	beq.n	8003e54 <HAL_QSPI_Abort+0x7e>
    __HAL_UNLOCK(hqspi);
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	0752      	lsls	r2, r2, #29
 8003df6:	d50b      	bpl.n	8003e10 <HAL_QSPI_Abort+0x3a>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003df8:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003dfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003dfc:	f022 0204 	bic.w	r2, r2, #4
 8003e00:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003e02:	f7fd feaf 	bl	8001b64 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8003e06:	b118      	cbz	r0, 8003e10 <HAL_QSPI_Abort+0x3a>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003e08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	6463      	str	r3, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	6013      	str	r3, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003e1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	462b      	mov	r3, r5
 8003e22:	2102      	movs	r1, #2
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7ff fe51 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003e2a:	b998      	cbnz	r0, 8003e54 <HAL_QSPI_Abort+0x7e>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	60da      	str	r2, [r3, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4602      	mov	r2, r0
 8003e38:	462b      	mov	r3, r5
 8003e3a:	2120      	movs	r1, #32
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7ff fe45 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003e42:	b938      	cbnz	r0, 8003e54 <HAL_QSPI_Abort+0x7e>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	6953      	ldr	r3, [r2, #20]
 8003e48:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003e4c:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003e54:	b003      	add	sp, #12
 8003e56:	bd30      	pop	{r4, r5, pc}

08003e58 <HAL_QSPI_Transmit>:
{
 8003e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4688      	mov	r8, r1
 8003e60:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8003e62:	f7fd fd53 	bl	800190c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003e66:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003e6a:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 8003e6c:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8003e6e:	d050      	beq.n	8003f12 <HAL_QSPI_Transmit+0xba>
 8003e70:	2301      	movs	r3, #1
 8003e72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003e76:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003e7a:	6825      	ldr	r5, [r4, #0]
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003e7c:	b2c0      	uxtb	r0, r0
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	d145      	bne.n	8003f0e <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8003e86:	f1b8 0f00 	cmp.w	r8, #0
 8003e8a:	d03b      	beq.n	8003f04 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003e8c:	2312      	movs	r3, #18
 8003e8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e92:	692b      	ldr	r3, [r5, #16]
 8003e94:	3301      	adds	r3, #1
 8003e96:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e98:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8003e9a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003ea2:	696b      	ldr	r3, [r5, #20]
 8003ea4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003ea8:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8003eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003eac:	b9b3      	cbnz	r3, 8003edc <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003eae:	9700      	str	r7, [sp, #0]
 8003eb0:	4633      	mov	r3, r6
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff fe08 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003ebc:	b928      	cbnz	r0, 8003eca <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff ff86 	bl	8003dd6 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003ed6:	b002      	add	sp, #8
 8003ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003edc:	9700      	str	r7, [sp, #0]
 8003ede:	4633      	mov	r3, r6
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff fdf1 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d1ed      	bne.n	8003eca <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8003ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	6263      	str	r3, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8003efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003efe:	3b01      	subs	r3, #1
 8003f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f02:	e7d2      	b.n	8003eaa <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f06:	f043 0308 	orr.w	r3, r3, #8
 8003f0a:	6463      	str	r3, [r4, #68]	; 0x44
 8003f0c:	e7e0      	b.n	8003ed0 <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 8003f0e:	2002      	movs	r0, #2
 8003f10:	e7de      	b.n	8003ed0 <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 8003f12:	2002      	movs	r0, #2
 8003f14:	e7df      	b.n	8003ed6 <HAL_QSPI_Transmit+0x7e>

08003f16 <HAL_QSPI_Receive>:
{
 8003f16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4617      	mov	r7, r2
 8003f1e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8003f20:	f7fd fcf4 	bl	800190c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003f24:	6825      	ldr	r5, [r4, #0]
 8003f26:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8003f28:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003f2c:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 8003f2e:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8003f30:	d052      	beq.n	8003fd8 <HAL_QSPI_Receive+0xc2>
 8003f32:	2301      	movs	r3, #1
 8003f34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003f38:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8003f3c:	b2c0      	uxtb	r0, r0
 8003f3e:	4298      	cmp	r0, r3
 8003f40:	d148      	bne.n	8003fd4 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8003f46:	f1b8 0f00 	cmp.w	r8, #0
 8003f4a:	d03e      	beq.n	8003fca <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003f4c:	2322      	movs	r3, #34	; 0x22
 8003f4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003f52:	692b      	ldr	r3, [r5, #16]
 8003f54:	3301      	adds	r3, #1
 8003f56:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003f58:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8003f5a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003f5e:	3301      	adds	r3, #1
 8003f60:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003f62:	696b      	ldr	r3, [r5, #20]
 8003f64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003f68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f6c:	616b      	str	r3, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003f6e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8003f70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f72:	b9b3      	cbnz	r3, 8003fa2 <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f74:	9700      	str	r7, [sp, #0]
 8003f76:	4633      	mov	r3, r6
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff fda5 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8003f82:	b928      	cbnz	r0, 8003f90 <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	2202      	movs	r2, #2
 8003f88:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f7ff ff23 	bl	8003dd6 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003f96:	2300      	movs	r3, #0
 8003f98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003fa2:	9700      	str	r7, [sp, #0]
 8003fa4:	4633      	mov	r3, r6
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2106      	movs	r1, #6
 8003faa:	4620      	mov	r0, r4
 8003fac:	f7ff fd8e 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d1ed      	bne.n	8003f90 <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fb6:	f895 2020 	ldrb.w	r2, [r5, #32]
 8003fba:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	6323      	str	r3, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8003fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8003fc8:	e7d2      	b.n	8003f70 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003fca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	6463      	str	r3, [r4, #68]	; 0x44
 8003fd2:	e7e0      	b.n	8003f96 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	e7de      	b.n	8003f96 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 8003fd8:	2002      	movs	r0, #2
 8003fda:	e7df      	b.n	8003f9c <HAL_QSPI_Receive+0x86>

08003fdc <HAL_QSPI_Abort_IT>:
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003fdc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003fe0:	0799      	lsls	r1, r3, #30
{
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	4604      	mov	r4, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003fe6:	d51d      	bpl.n	8004024 <HAL_QSPI_Abort_IT+0x48>
    __HAL_UNLOCK(hqspi);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8003ff4:	6803      	ldr	r3, [r0, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003ffc:	601a      	str	r2, [r3, #0]
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	0752      	lsls	r2, r2, #29
 8004002:	d511      	bpl.n	8004028 <HAL_QSPI_Abort_IT+0x4c>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004004:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8004006:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004008:	f022 0204 	bic.w	r2, r2, #4
 800400c:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <HAL_QSPI_Abort_IT+0x64>)
 8004010:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8004012:	f7fd fdea 	bl	8001bea <HAL_DMA_Abort_IT>
 8004016:	b128      	cbz	r0, 8004024 <HAL_QSPI_Abort_IT+0x48>
        hqspi->State = HAL_QSPI_STATE_READY;
 8004018:	2301      	movs	r3, #1
 800401a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_QSPI_AbortCpltCallback(hqspi);
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff fed2 	bl	8003dc8 <HAL_QSPI_AbortCpltCallback>
}
 8004024:	2000      	movs	r0, #0
 8004026:	bd10      	pop	{r4, pc}
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004028:	2202      	movs	r2, #2
 800402a:	60da      	str	r2, [r3, #12]
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004032:	601a      	str	r2, [r3, #0]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f042 0202 	orr.w	r2, r2, #2
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e7f2      	b.n	8004024 <HAL_QSPI_Abort_IT+0x48>
 800403e:	bf00      	nop
 8004040:	08003d93 	.word	0x08003d93

08004044 <HAL_QSPI_IRQHandler>:
{
 8004044:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8004046:	6803      	ldr	r3, [r0, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800404a:	681a      	ldr	r2, [r3, #0]
{
 800404c:	4604      	mov	r4, r0
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800404e:	0748      	lsls	r0, r1, #29
 8004050:	d534      	bpl.n	80040bc <HAL_QSPI_IRQHandler+0x78>
 8004052:	0355      	lsls	r5, r2, #13
 8004054:	d532      	bpl.n	80040bc <HAL_QSPI_IRQHandler+0x78>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004056:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800405a:	2a12      	cmp	r2, #18
 800405c:	d114      	bne.n	8004088 <HAL_QSPI_IRQHandler+0x44>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	6891      	ldr	r1, [r2, #8]
 8004062:	0748      	lsls	r0, r1, #29
 8004064:	d403      	bmi.n	800406e <HAL_QSPI_IRQHandler+0x2a>
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff feb2 	bl	8003dd0 <HAL_QSPI_FifoThresholdCallback>
}
 800406c:	bd38      	pop	{r3, r4, r5, pc}
        if (hqspi->TxXferCount > 0U)
 800406e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004070:	b1f9      	cbz	r1, 80040b2 <HAL_QSPI_IRQHandler+0x6e>
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->pTxBuffPtr++;
 800407a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800407c:	3201      	adds	r2, #1
 800407e:	6262      	str	r2, [r4, #36]	; 0x24
          hqspi->TxXferCount--;
 8004080:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004082:	3a01      	subs	r2, #1
 8004084:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004086:	e7ea      	b.n	800405e <HAL_QSPI_IRQHandler+0x1a>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004088:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800408c:	2a22      	cmp	r2, #34	; 0x22
 800408e:	d1ea      	bne.n	8004066 <HAL_QSPI_IRQHandler+0x22>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	6891      	ldr	r1, [r2, #8]
 8004094:	0749      	lsls	r1, r1, #29
 8004096:	d5e6      	bpl.n	8004066 <HAL_QSPI_IRQHandler+0x22>
        if (hqspi->RxXferCount > 0U)
 8004098:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800409a:	b151      	cbz	r1, 80040b2 <HAL_QSPI_IRQHandler+0x6e>
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800409c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800409e:	f893 1020 	ldrb.w	r1, [r3, #32]
 80040a2:	7011      	strb	r1, [r2, #0]
          hqspi->pRxBuffPtr++;
 80040a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040a6:	3201      	adds	r2, #1
 80040a8:	6322      	str	r2, [r4, #48]	; 0x30
          hqspi->RxXferCount--;
 80040aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040ac:	3a01      	subs	r2, #1
 80040ae:	63a2      	str	r2, [r4, #56]	; 0x38
 80040b0:	e7ee      	b.n	8004090 <HAL_QSPI_IRQHandler+0x4c>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
          break;
 80040ba:	e7d4      	b.n	8004066 <HAL_QSPI_IRQHandler+0x22>
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80040bc:	078d      	lsls	r5, r1, #30
 80040be:	d56e      	bpl.n	800419e <HAL_QSPI_IRQHandler+0x15a>
 80040c0:	0390      	lsls	r0, r2, #14
 80040c2:	d56c      	bpl.n	800419e <HAL_QSPI_IRQHandler+0x15a>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80040c4:	2202      	movs	r2, #2
 80040c6:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80040ce:	601a      	str	r2, [r3, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80040d0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80040d4:	2a12      	cmp	r2, #18
 80040d6:	d116      	bne.n	8004106 <HAL_QSPI_IRQHandler+0xc2>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	0751      	lsls	r1, r2, #29
 80040dc:	d509      	bpl.n	80040f2 <HAL_QSPI_IRQHandler+0xae>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	f022 0204 	bic.w	r2, r2, #4
 80040e4:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 80040e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6013      	str	r3, [r2, #0]
      HAL_QSPI_Abort_IT(hqspi);
 80040f2:	4620      	mov	r0, r4
 80040f4:	f7ff ff72 	bl	8003fdc <HAL_QSPI_Abort_IT>
      hqspi->State = HAL_QSPI_STATE_READY;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
 80040fe:	4620      	mov	r0, r4
 8004100:	f7ff fe65 	bl	8003dce <HAL_QSPI_TxCpltCallback>
 8004104:	e7b2      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004106:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800410a:	2a22      	cmp	r2, #34	; 0x22
 800410c:	d129      	bne.n	8004162 <HAL_QSPI_IRQHandler+0x11e>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	0752      	lsls	r2, r2, #29
 8004112:	d520      	bpl.n	8004156 <HAL_QSPI_IRQHandler+0x112>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 800411c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	6013      	str	r3, [r2, #0]
      HAL_QSPI_Abort_IT(hqspi);
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff ff57 	bl	8003fdc <HAL_QSPI_Abort_IT>
      hqspi->State = HAL_QSPI_STATE_READY;
 800412e:	2301      	movs	r3, #1
 8004130:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
 8004134:	4620      	mov	r0, r4
 8004136:	f7ff fe49 	bl	8003dcc <HAL_QSPI_RxCpltCallback>
 800413a:	e797      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
          if (hqspi->RxXferCount > 0U)
 800413c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800413e:	2a00      	cmp	r2, #0
 8004140:	d0f2      	beq.n	8004128 <HAL_QSPI_IRQHandler+0xe4>
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004142:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004144:	f893 1020 	ldrb.w	r1, [r3, #32]
 8004148:	7011      	strb	r1, [r2, #0]
            hqspi->pRxBuffPtr++;
 800414a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800414c:	3201      	adds	r2, #1
 800414e:	6322      	str	r2, [r4, #48]	; 0x30
            hqspi->RxXferCount--;
 8004150:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004152:	3a01      	subs	r2, #1
 8004154:	63a2      	str	r2, [r4, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	6892      	ldr	r2, [r2, #8]
 800415a:	f412 5f7c 	tst.w	r2, #16128	; 0x3f00
 800415e:	d1ed      	bne.n	800413c <HAL_QSPI_IRQHandler+0xf8>
 8004160:	e7e2      	b.n	8004128 <HAL_QSPI_IRQHandler+0xe4>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8004162:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004166:	2a02      	cmp	r2, #2
 8004168:	d106      	bne.n	8004178 <HAL_QSPI_IRQHandler+0x134>
      hqspi->State = HAL_QSPI_STATE_READY;
 800416a:	2301      	movs	r3, #1
 800416c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff fe2a 	bl	8003dca <HAL_QSPI_CmdCpltCallback>
 8004176:	e779      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004178:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800417c:	2a08      	cmp	r2, #8
 800417e:	f47f af75 	bne.w	800406c <HAL_QSPI_IRQHandler+0x28>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004188:	615a      	str	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800418a:	2301      	movs	r3, #1
 800418c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004190:	6c63      	ldr	r3, [r4, #68]	; 0x44
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004192:	4620      	mov	r0, r4
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004194:	2b00      	cmp	r3, #0
 8004196:	d13a      	bne.n	800420e <HAL_QSPI_IRQHandler+0x1ca>
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004198:	f7ff fe16 	bl	8003dc8 <HAL_QSPI_AbortCpltCallback>
 800419c:	e766      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800419e:	070d      	lsls	r5, r1, #28
 80041a0:	d511      	bpl.n	80041c6 <HAL_QSPI_IRQHandler+0x182>
 80041a2:	0310      	lsls	r0, r2, #12
 80041a4:	d50f      	bpl.n	80041c6 <HAL_QSPI_IRQHandler+0x182>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80041a6:	2208      	movs	r2, #8
 80041a8:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	0255      	lsls	r5, r2, #9
 80041ae:	d506      	bpl.n	80041be <HAL_QSPI_IRQHandler+0x17a>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80041b6:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
 80041be:	4620      	mov	r0, r4
 80041c0:	f7ff fe07 	bl	8003dd2 <HAL_QSPI_StatusMatchCallback>
 80041c4:	e752      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80041c6:	07c8      	lsls	r0, r1, #31
 80041c8:	d524      	bpl.n	8004214 <HAL_QSPI_IRQHandler+0x1d0>
 80041ca:	03d5      	lsls	r5, r2, #15
 80041cc:	d522      	bpl.n	8004214 <HAL_QSPI_IRQHandler+0x1d0>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80041ce:	2501      	movs	r5, #1
 80041d0:	60dd      	str	r5, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80041d8:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80041da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041dc:	f042 0202 	orr.w	r2, r2, #2
 80041e0:	6462      	str	r2, [r4, #68]	; 0x44
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	0750      	lsls	r0, r2, #29
 80041e6:	d50f      	bpl.n	8004208 <HAL_QSPI_IRQHandler+0x1c4>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80041e8:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80041ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80041ec:	f022 0204 	bic.w	r2, r2, #4
 80041f0:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_QSPI_IRQHandler+0x1e8>)
 80041f4:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80041f6:	f7fd fcf8 	bl	8001bea <HAL_DMA_Abort_IT>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f43f af36 	beq.w	800406c <HAL_QSPI_IRQHandler+0x28>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004200:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	6463      	str	r3, [r4, #68]	; 0x44
        hqspi->State = HAL_QSPI_STATE_READY;
 8004208:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        HAL_QSPI_ErrorCallback(hqspi);
 800420c:	4620      	mov	r0, r4
 800420e:	f7ff fdbf 	bl	8003d90 <HAL_QSPI_ErrorCallback>
 8004212:	e72b      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004214:	06c9      	lsls	r1, r1, #27
 8004216:	f57f af29 	bpl.w	800406c <HAL_QSPI_IRQHandler+0x28>
 800421a:	02d2      	lsls	r2, r2, #11
 800421c:	f57f af26 	bpl.w	800406c <HAL_QSPI_IRQHandler+0x28>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004220:	2210      	movs	r2, #16
 8004222:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff fdd5 	bl	8003dd4 <HAL_QSPI_TimeOutCallback>
}
 800422a:	e71f      	b.n	800406c <HAL_QSPI_IRQHandler+0x28>
 800422c:	08003d93 	.word	0x08003d93

08004230 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004230:	4913      	ldr	r1, [pc, #76]	; (8004280 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004232:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004234:	688b      	ldr	r3, [r1, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b04      	cmp	r3, #4
 800423c:	d003      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x16>
 800423e:	2b08      	cmp	r3, #8
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004242:	4810      	ldr	r0, [pc, #64]	; (8004284 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8004244:	e000      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8004246:	4810      	ldr	r0, [pc, #64]	; (8004288 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8004248:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800424a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004250:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004254:	bf14      	ite	ne
 8004256:	480c      	ldrne	r0, [pc, #48]	; (8004288 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004258:	480a      	ldreq	r0, [pc, #40]	; (8004284 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800425e:	bf18      	it	ne
 8004260:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004262:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	fba1 0100 	umull	r0, r1, r1, r0
 800426a:	f7fb ffc9 	bl	8000200 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <HAL_RCC_GetSysClockFreq+0x50>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004276:	3301      	adds	r3, #1
 8004278:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800427a:	fbb0 f0f3 	udiv	r0, r0, r3
 800427e:	e7e3      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x18>
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200

0800428c <HAL_RCC_ClockConfig>:
{
 800428c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004290:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004292:	4604      	mov	r4, r0
 8004294:	b910      	cbnz	r0, 800429c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004296:	2001      	movs	r0, #1
}
 8004298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCC_ClockConfig+0x120>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f002 020f 	and.w	r2, r2, #15
 80042a4:	428a      	cmp	r2, r1
 80042a6:	d328      	bcc.n	80042fa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	6821      	ldr	r1, [r4, #0]
 80042aa:	078f      	lsls	r7, r1, #30
 80042ac:	d42d      	bmi.n	800430a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	07c8      	lsls	r0, r1, #31
 80042b0:	d440      	bmi.n	8004334 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_RCC_ClockConfig+0x120>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f002 020f 	and.w	r2, r2, #15
 80042ba:	42aa      	cmp	r2, r5
 80042bc:	d865      	bhi.n	800438a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	0751      	lsls	r1, r2, #29
 80042c2:	d46b      	bmi.n	800439c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	0713      	lsls	r3, r2, #28
 80042c6:	d507      	bpl.n	80042d8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c8:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <HAL_RCC_ClockConfig+0x124>)
 80042ca:	6921      	ldr	r1, [r4, #16]
 80042cc:	6893      	ldr	r3, [r2, #8]
 80042ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80042d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042d6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d8:	f7ff ffaa 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80042dc:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_ClockConfig+0x124>)
 80042de:	4a35      	ldr	r2, [pc, #212]	; (80043b4 <HAL_RCC_ClockConfig+0x128>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	40d8      	lsrs	r0, r3
 80042ea:	4b33      	ldr	r3, [pc, #204]	; (80043b8 <HAL_RCC_ClockConfig+0x12c>)
 80042ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_RCC_ClockConfig+0x130>)
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	f7fc fafd 	bl	80008f0 <HAL_InitTick>
  return HAL_OK;
 80042f6:	2000      	movs	r0, #0
 80042f8:	e7ce      	b.n	8004298 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	b2ca      	uxtb	r2, r1
 80042fc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	428b      	cmp	r3, r1
 8004306:	d1c6      	bne.n	8004296 <HAL_RCC_ClockConfig+0xa>
 8004308:	e7ce      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1c>
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004310:	bf1e      	ittt	ne
 8004312:	689a      	ldrne	r2, [r3, #8]
 8004314:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8004318:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	bf42      	ittt	mi
 800431e:	689a      	ldrmi	r2, [r3, #8]
 8004320:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8004324:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	68a0      	ldr	r0, [r4, #8]
 800432a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800432e:	4302      	orrs	r2, r0
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	e7bc      	b.n	80042ae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004334:	6862      	ldr	r2, [r4, #4]
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <HAL_RCC_ClockConfig+0x124>)
 8004338:	2a01      	cmp	r2, #1
 800433a:	d11c      	bne.n	8004376 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	d0a8      	beq.n	8004296 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004344:	4e1a      	ldr	r6, [pc, #104]	; (80043b0 <HAL_RCC_ClockConfig+0x124>)
 8004346:	68b3      	ldr	r3, [r6, #8]
 8004348:	f023 0303 	bic.w	r3, r3, #3
 800434c:	4313      	orrs	r3, r2
 800434e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004350:	f7fd fadc 	bl	800190c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004358:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	68b3      	ldr	r3, [r6, #8]
 800435c:	6862      	ldr	r2, [r4, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004366:	d0a4      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004368:	f7fd fad0 	bl	800190c <HAL_GetTick>
 800436c:	1bc0      	subs	r0, r0, r7
 800436e:	4540      	cmp	r0, r8
 8004370:	d9f3      	bls.n	800435a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8004372:	2003      	movs	r0, #3
 8004374:	e790      	b.n	8004298 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004376:	1e91      	subs	r1, r2, #2
 8004378:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437c:	d802      	bhi.n	8004384 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004382:	e7de      	b.n	8004342 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	f013 0f02 	tst.w	r3, #2
 8004388:	e7db      	b.n	8004342 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	b2ea      	uxtb	r2, r5
 800438c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	42ab      	cmp	r3, r5
 8004396:	f47f af7e 	bne.w	8004296 <HAL_RCC_ClockConfig+0xa>
 800439a:	e790      	b.n	80042be <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439c:	4904      	ldr	r1, [pc, #16]	; (80043b0 <HAL_RCC_ClockConfig+0x124>)
 800439e:	68e0      	ldr	r0, [r4, #12]
 80043a0:	688b      	ldr	r3, [r1, #8]
 80043a2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80043a6:	4303      	orrs	r3, r0
 80043a8:	608b      	str	r3, [r1, #8]
 80043aa:	e78b      	b.n	80042c4 <HAL_RCC_ClockConfig+0x38>
 80043ac:	40023c00 	.word	0x40023c00
 80043b0:	40023800 	.word	0x40023800
 80043b4:	080150b5 	.word	0x080150b5
 80043b8:	20000038 	.word	0x20000038
 80043bc:	20000040 	.word	0x20000040

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043ce:	6810      	ldr	r0, [r2, #0]
}
 80043d0:	40d8      	lsrs	r0, r3
 80043d2:	4770      	bx	lr
 80043d4:	40023800 	.word	0x40023800
 80043d8:	080150c5 	.word	0x080150c5
 80043dc:	20000038 	.word	0x20000038

080043e0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043e0:	230f      	movs	r3, #15
 80043e2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_GetClockConfig+0x34>)
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	f002 0203 	and.w	r2, r2, #3
 80043ec:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80043f4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80043fc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	08db      	lsrs	r3, r3, #3
 8004402:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004406:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_GetClockConfig+0x38>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	600b      	str	r3, [r1, #0]
}
 8004412:	4770      	bx	lr
 8004414:	40023800 	.word	0x40023800
 8004418:	40023c00 	.word	0x40023c00

0800441c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800441c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800441e:	6802      	ldr	r2, [r0, #0]
{
 8004420:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004422:	0610      	lsls	r0, r2, #24
 8004424:	d508      	bpl.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004426:	49a8      	ldr	r1, [pc, #672]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004428:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800442a:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800442e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004432:	4303      	orrs	r3, r0
 8004434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004438:	05d1      	lsls	r1, r2, #23
 800443a:	d508      	bpl.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800443c:	49a2      	ldr	r1, [pc, #648]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800443e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004440:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004448:	4303      	orrs	r3, r0
 800444a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800444e:	f012 0f43 	tst.w	r2, #67	; 0x43
 8004452:	d172      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f013 0f0c 	tst.w	r3, #12
 800445a:	f000 80bf 	beq.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800445e:	4d9b      	ldr	r5, [pc, #620]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004460:	4e99      	ldr	r6, [pc, #612]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    __HAL_RCC_PLLSAI_DISABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004466:	f7fd fa51 	bl	800190c <HAL_GetTick>
 800446a:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800446c:	6833      	ldr	r3, [r6, #0]
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	f100 80f9 	bmi.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	0753      	lsls	r3, r2, #29
 8004478:	d51a      	bpl.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800447a:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800447e:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8004482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004486:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800448a:	430b      	orrs	r3, r1
 800448c:	6921      	ldr	r1, [r4, #16]
 800448e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004492:	69a1      	ldr	r1, [r4, #24]
 8004494:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004498:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800449c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80044a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80044a6:	3901      	subs	r1, #1
 80044a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044ac:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044b0:	0717      	lsls	r7, r2, #28
 80044b2:	d519      	bpl.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044b4:	4984      	ldr	r1, [pc, #528]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80044b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ba:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80044be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80044c6:	4303      	orrs	r3, r0
 80044c8:	6920      	ldr	r0, [r4, #16]
 80044ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80044ce:	69e0      	ldr	r0, [r4, #28]
 80044d0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044d8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80044dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80044e2:	4303      	orrs	r3, r0
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80044e8:	0616      	lsls	r6, r2, #24
 80044ea:	d517      	bpl.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80044ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f2:	d113      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x100>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044f4:	4974      	ldr	r1, [pc, #464]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80044f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80044fe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004502:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004506:	4313      	orrs	r3, r2
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800450e:	6962      	ldr	r2, [r4, #20]
 8004510:	0852      	lsrs	r2, r2, #1
 8004512:	3a01      	subs	r2, #1
 8004514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800451c:	2301      	movs	r3, #1
 800451e:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004520:	f7fd f9f4 	bl	800190c <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004524:	4d68      	ldr	r5, [pc, #416]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    tickstart = HAL_GetTick();
 8004526:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	0098      	lsls	r0, r3, #2
 800452c:	d458      	bmi.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800452e:	f7fd f9ed 	bl	800190c <HAL_GetTick>
 8004532:	1b80      	subs	r0, r0, r6
 8004534:	2802      	cmp	r0, #2
 8004536:	d9f7      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004538:	e04d      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_PLLI2S_DISABLE();
 800453a:	4d65      	ldr	r5, [pc, #404]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800453c:	4e62      	ldr	r6, [pc, #392]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    __HAL_RCC_PLLI2S_DISABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004542:	f7fd f9e3 	bl	800190c <HAL_GetTick>
 8004546:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	d43e      	bmi.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800454e:	6821      	ldr	r1, [r4, #0]
 8004550:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004552:	bf41      	itttt	mi
 8004554:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8004558:	071b      	lslmi	r3, r3, #28
 800455a:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800455e:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004562:	078a      	lsls	r2, r1, #30
 8004564:	d515      	bpl.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004566:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004568:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800456a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800456e:	6866      	ldr	r6, [r4, #4]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004576:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800457a:	4303      	orrs	r3, r0
 800457c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004580:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004584:	6a23      	ldr	r3, [r4, #32]
 8004586:	f020 001f 	bic.w	r0, r0, #31
 800458a:	3b01      	subs	r3, #1
 800458c:	4303      	orrs	r3, r0
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004592:	064b      	lsls	r3, r1, #25
 8004594:	d50a      	bpl.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	6862      	ldr	r2, [r4, #4]
 800459a:	061b      	lsls	r3, r3, #24
 800459c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80045a0:	68a2      	ldr	r2, [r4, #8]
 80045a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80045a6:	4a48      	ldr	r2, [pc, #288]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80045a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80045ac:	2301      	movs	r3, #1
 80045ae:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80045b0:	f7fd f9ac 	bl	800190c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b4:	4d44      	ldr	r5, [pc, #272]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    tickstart = HAL_GetTick();
 80045b6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	011f      	lsls	r7, r3, #4
 80045bc:	f53f af4a 	bmi.w	8004454 <HAL_RCCEx_PeriphCLKConfig+0x38>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045c0:	f7fd f9a4 	bl	800190c <HAL_GetTick>
 80045c4:	1b80      	subs	r0, r0, r6
 80045c6:	2802      	cmp	r0, #2
 80045c8:	d9f6      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045cc:	f7fd f99e 	bl	800190c <HAL_GetTick>
 80045d0:	1bc0      	subs	r0, r0, r7
 80045d2:	2802      	cmp	r0, #2
 80045d4:	d9b8      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 80045d6:	2003      	movs	r0, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
}
 80045d8:	b003      	add	sp, #12
 80045da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80045dc:	0618      	lsls	r0, r3, #24
 80045de:	d43d      	bmi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x240>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	0699      	lsls	r1, r3, #26
 80045e4:	d530      	bpl.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    PWR->CR |= PWR_CR_DBP;
 80045ec:	4d39      	ldr	r5, [pc, #228]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004608:	f7fd f980 	bl	800190c <HAL_GetTick>
 800460c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800460e:	682b      	ldr	r3, [r5, #0]
 8004610:	05d9      	lsls	r1, r3, #23
 8004612:	d52f      	bpl.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x258>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004614:	4d2c      	ldr	r5, [pc, #176]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004616:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004618:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800461c:	d130      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004620:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004624:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800462a:	d148      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800462c:	6891      	ldr	r1, [r2, #8]
 800462e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004632:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004636:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800463a:	4301      	orrs	r1, r0
 800463c:	6091      	str	r1, [r2, #8]
 800463e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	430b      	orrs	r3, r1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	f010 0010 	ands.w	r0, r0, #16
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800464e:	bf1f      	itttt	ne
 8004650:	4b21      	ldrne	r3, [pc, #132]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004652:	f894 2030 	ldrbne.w	r2, [r4, #48]	; 0x30
 8004656:	601a      	strne	r2, [r3, #0]
  return HAL_OK;
 8004658:	2000      	movne	r0, #0
 800465a:	e7bd      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800465c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800465e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004662:	d1bd      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004664:	e6fb      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004666:	f7fd f951 	bl	800190c <HAL_GetTick>
 800466a:	1bc0      	subs	r0, r0, r7
 800466c:	2802      	cmp	r0, #2
 800466e:	f67f aefd 	bls.w	800446c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004672:	e7b0      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004674:	f7fd f94a 	bl	800190c <HAL_GetTick>
 8004678:	1b80      	subs	r0, r0, r6
 800467a:	2802      	cmp	r0, #2
 800467c:	d9c7      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800467e:	e7aa      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004682:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004686:	4293      	cmp	r3, r2
 8004688:	d0c9      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x202>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800468e:	2101      	movs	r1, #1
 8004690:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004696:	2100      	movs	r1, #0
 8004698:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800469a:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800469c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800469e:	07da      	lsls	r2, r3, #31
 80046a0:	d5bd      	bpl.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x202>
        tickstart = HAL_GetTick();
 80046a2:	f7fd f933 	bl	800190c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046ae:	079b      	lsls	r3, r3, #30
 80046b0:	d4b5      	bmi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x202>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fd f92b 	bl	800190c <HAL_GetTick>
 80046b6:	1b80      	subs	r0, r0, r6
 80046b8:	42b8      	cmp	r0, r7
 80046ba:	d9f7      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x290>
 80046bc:	e78b      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046be:	6891      	ldr	r1, [r2, #8]
 80046c0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80046c4:	e7ba      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x220>
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	42470070 	.word	0x42470070
 80046d0:	42470068 	.word	0x42470068
 80046d4:	40007000 	.word	0x40007000
 80046d8:	424711e0 	.word	0x424711e0
 80046dc:	42470e40 	.word	0x42470e40

080046e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e0:	6803      	ldr	r3, [r0, #0]
{
 80046e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	07dd      	lsls	r5, r3, #31
{
 80046e8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	d410      	bmi.n	800470e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	0798      	lsls	r0, r3, #30
 80046f0:	d45b      	bmi.n	80047aa <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	071a      	lsls	r2, r3, #28
 80046f6:	f100 809d 	bmi.w	8004834 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	075b      	lsls	r3, r3, #29
 80046fe:	f100 80bb 	bmi.w	8004878 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004702:	69a2      	ldr	r2, [r4, #24]
 8004704:	2a00      	cmp	r2, #0
 8004706:	f040 811c 	bne.w	8004942 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800470a:	2000      	movs	r0, #0
 800470c:	e015      	b.n	800473a <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800470e:	4ba7      	ldr	r3, [pc, #668]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	f002 020c 	and.w	r2, r2, #12
 8004716:	2a04      	cmp	r2, #4
 8004718:	d007      	beq.n	800472a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004720:	2a08      	cmp	r2, #8
 8004722:	d10d      	bne.n	8004740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	0259      	lsls	r1, r3, #9
 8004728:	d50a      	bpl.n	8004740 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472a:	4ba0      	ldr	r3, [pc, #640]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	039a      	lsls	r2, r3, #14
 8004730:	d5dc      	bpl.n	80046ec <HAL_RCC_OscConfig+0xc>
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1d9      	bne.n	80046ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
}
 800473a:	b002      	add	sp, #8
 800473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	4d9a      	ldr	r5, [pc, #616]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d111      	bne.n	800476e <HAL_RCC_OscConfig+0x8e>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004752:	f7fd f8db 	bl	800190c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4d95      	ldr	r5, [pc, #596]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8004758:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	039b      	lsls	r3, r3, #14
 800475e:	d4c5      	bmi.n	80046ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004760:	f7fd f8d4 	bl	800190c <HAL_GetTick>
 8004764:	1b80      	subs	r0, r0, r6
 8004766:	2864      	cmp	r0, #100	; 0x64
 8004768:	d9f7      	bls.n	800475a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800476a:	2003      	movs	r0, #3
 800476c:	e7e5      	b.n	800473a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004772:	d104      	bne.n	800477e <HAL_RCC_OscConfig+0x9e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	e7e5      	b.n	800474a <HAL_RCC_OscConfig+0x6a>
 800477e:	682a      	ldr	r2, [r5, #0]
 8004780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004784:	602a      	str	r2, [r5, #0]
 8004786:	682a      	ldr	r2, [r5, #0]
 8004788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800478c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1df      	bne.n	8004752 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8004792:	f7fd f8bb 	bl	800190c <HAL_GetTick>
 8004796:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	039f      	lsls	r7, r3, #14
 800479c:	d5a6      	bpl.n	80046ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479e:	f7fd f8b5 	bl	800190c <HAL_GetTick>
 80047a2:	1b80      	subs	r0, r0, r6
 80047a4:	2864      	cmp	r0, #100	; 0x64
 80047a6:	d9f7      	bls.n	8004798 <HAL_RCC_OscConfig+0xb8>
 80047a8:	e7df      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047aa:	4b80      	ldr	r3, [pc, #512]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	f012 0f0c 	tst.w	r2, #12
 80047b2:	d007      	beq.n	80047c4 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047ba:	2a08      	cmp	r2, #8
 80047bc:	d111      	bne.n	80047e2 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	025e      	lsls	r6, r3, #9
 80047c2:	d40e      	bmi.n	80047e2 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c4:	4b79      	ldr	r3, [pc, #484]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	0795      	lsls	r5, r2, #30
 80047ca:	d502      	bpl.n	80047d2 <HAL_RCC_OscConfig+0xf2>
 80047cc:	68e2      	ldr	r2, [r4, #12]
 80047ce:	2a01      	cmp	r2, #1
 80047d0:	d1b2      	bne.n	8004738 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	6921      	ldr	r1, [r4, #16]
 80047d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80047da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80047de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e0:	e787      	b.n	80046f2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e2:	68e2      	ldr	r2, [r4, #12]
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <HAL_RCC_OscConfig+0x2d0>)
 80047e6:	b1b2      	cbz	r2, 8004816 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047ec:	f7fd f88e 	bl	800190c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f0:	4d6e      	ldr	r5, [pc, #440]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80047f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	0798      	lsls	r0, r3, #30
 80047f8:	d507      	bpl.n	800480a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004802:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	e773      	b.n	80046f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480a:	f7fd f87f 	bl	800190c <HAL_GetTick>
 800480e:	1b80      	subs	r0, r0, r6
 8004810:	2802      	cmp	r0, #2
 8004812:	d9ef      	bls.n	80047f4 <HAL_RCC_OscConfig+0x114>
 8004814:	e7a9      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8004816:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004818:	f7fd f878 	bl	800190c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481c:	4d63      	ldr	r5, [pc, #396]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800481e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	0799      	lsls	r1, r3, #30
 8004824:	f57f af65 	bpl.w	80046f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004828:	f7fd f870 	bl	800190c <HAL_GetTick>
 800482c:	1b80      	subs	r0, r0, r6
 800482e:	2802      	cmp	r0, #2
 8004830:	d9f6      	bls.n	8004820 <HAL_RCC_OscConfig+0x140>
 8004832:	e79a      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_RCC_OscConfig+0x2d4>)
 8004838:	b17a      	cbz	r2, 800485a <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800483e:	f7fd f865 	bl	800190c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	4d5a      	ldr	r5, [pc, #360]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8004844:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004848:	079f      	lsls	r7, r3, #30
 800484a:	f53f af56 	bmi.w	80046fa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484e:	f7fd f85d 	bl	800190c <HAL_GetTick>
 8004852:	1b80      	subs	r0, r0, r6
 8004854:	2802      	cmp	r0, #2
 8004856:	d9f6      	bls.n	8004846 <HAL_RCC_OscConfig+0x166>
 8004858:	e787      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800485a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800485c:	f7fd f856 	bl	800190c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	4d52      	ldr	r5, [pc, #328]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8004862:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004864:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004866:	0798      	lsls	r0, r3, #30
 8004868:	f57f af47 	bpl.w	80046fa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd f84e 	bl	800190c <HAL_GetTick>
 8004870:	1b80      	subs	r0, r0, r6
 8004872:	2802      	cmp	r0, #2
 8004874:	d9f6      	bls.n	8004864 <HAL_RCC_OscConfig+0x184>
 8004876:	e778      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004878:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 800487a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004880:	d128      	bne.n	80048d4 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	9201      	str	r2, [sp, #4]
 8004884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004886:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004896:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4d47      	ldr	r5, [pc, #284]	; (80049b8 <HAL_RCC_OscConfig+0x2d8>)
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	05d9      	lsls	r1, r3, #23
 800489e:	d51b      	bpl.n	80048d8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a0:	68a3      	ldr	r3, [r4, #8]
 80048a2:	4d42      	ldr	r5, [pc, #264]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d127      	bne.n	80048f8 <HAL_RCC_OscConfig+0x218>
 80048a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80048b0:	f7fd f82c 	bl	800190c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	4d3d      	ldr	r5, [pc, #244]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80048b6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80048be:	079b      	lsls	r3, r3, #30
 80048c0:	d539      	bpl.n	8004936 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	f43f af1d 	beq.w	8004702 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c8:	4a38      	ldr	r2, [pc, #224]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 80048ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	e716      	b.n	8004702 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80048d4:	2600      	movs	r6, #0
 80048d6:	e7df      	b.n	8004898 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80048e0:	f7fd f814 	bl	800190c <HAL_GetTick>
 80048e4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	05da      	lsls	r2, r3, #23
 80048ea:	d4d9      	bmi.n	80048a0 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ec:	f7fd f80e 	bl	800190c <HAL_GetTick>
 80048f0:	1bc0      	subs	r0, r0, r7
 80048f2:	2802      	cmp	r0, #2
 80048f4:	d9f7      	bls.n	80048e6 <HAL_RCC_OscConfig+0x206>
 80048f6:	e738      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d104      	bne.n	8004906 <HAL_RCC_OscConfig+0x226>
 80048fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	672b      	str	r3, [r5, #112]	; 0x70
 8004904:	e7d0      	b.n	80048a8 <HAL_RCC_OscConfig+0x1c8>
 8004906:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	672a      	str	r2, [r5, #112]	; 0x70
 800490e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004910:	f022 0204 	bic.w	r2, r2, #4
 8004914:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ca      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 800491a:	f7fc fff7 	bl	800190c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800491e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004922:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004924:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004926:	0798      	lsls	r0, r3, #30
 8004928:	d5cb      	bpl.n	80048c2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fc ffef 	bl	800190c <HAL_GetTick>
 800492e:	1bc0      	subs	r0, r0, r7
 8004930:	4540      	cmp	r0, r8
 8004932:	d9f7      	bls.n	8004924 <HAL_RCC_OscConfig+0x244>
 8004934:	e719      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fc ffe9 	bl	800190c <HAL_GetTick>
 800493a:	1bc0      	subs	r0, r0, r7
 800493c:	4540      	cmp	r0, r8
 800493e:	d9bd      	bls.n	80048bc <HAL_RCC_OscConfig+0x1dc>
 8004940:	e713      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004942:	4d1a      	ldr	r5, [pc, #104]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
 8004944:	68ab      	ldr	r3, [r5, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b08      	cmp	r3, #8
 800494c:	f43f aef4 	beq.w	8004738 <HAL_RCC_OscConfig+0x58>
 8004950:	4e1a      	ldr	r6, [pc, #104]	; (80049bc <HAL_RCC_OscConfig+0x2dc>)
 8004952:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004954:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004956:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004958:	d138      	bne.n	80049cc <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 800495a:	f7fc ffd7 	bl	800190c <HAL_GetTick>
 800495e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	0199      	lsls	r1, r3, #6
 8004964:	d42c      	bmi.n	80049c0 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004966:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800496e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004974:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004978:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800497a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800497e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004980:	4c0a      	ldr	r4, [pc, #40]	; (80049ac <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004982:	0852      	lsrs	r2, r2, #1
 8004984:	3a01      	subs	r2, #1
 8004986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800498a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800498c:	2301      	movs	r3, #1
 800498e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004990:	f7fc ffbc 	bl	800190c <HAL_GetTick>
 8004994:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	019a      	lsls	r2, r3, #6
 800499a:	f53f aeb6 	bmi.w	800470a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499e:	f7fc ffb5 	bl	800190c <HAL_GetTick>
 80049a2:	1b40      	subs	r0, r0, r5
 80049a4:	2802      	cmp	r0, #2
 80049a6:	d9f6      	bls.n	8004996 <HAL_RCC_OscConfig+0x2b6>
 80049a8:	e6df      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	42470000 	.word	0x42470000
 80049b4:	42470e80 	.word	0x42470e80
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fc ffa4 	bl	800190c <HAL_GetTick>
 80049c4:	1bc0      	subs	r0, r0, r7
 80049c6:	2802      	cmp	r0, #2
 80049c8:	d9ca      	bls.n	8004960 <HAL_RCC_OscConfig+0x280>
 80049ca:	e6ce      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80049cc:	f7fc ff9e 	bl	800190c <HAL_GetTick>
 80049d0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	f57f ae98 	bpl.w	800470a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049da:	f7fc ff97 	bl	800190c <HAL_GetTick>
 80049de:	1b00      	subs	r0, r0, r4
 80049e0:	2802      	cmp	r0, #2
 80049e2:	d9f6      	bls.n	80049d2 <HAL_RCC_OscConfig+0x2f2>
 80049e4:	e6c1      	b.n	800476a <HAL_RCC_OscConfig+0x8a>
 80049e6:	bf00      	nop

080049e8 <HAL_SDRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80049e8:	4770      	bx	lr

080049ea <HAL_SDRAM_Init>:
{   
 80049ea:	b538      	push	{r3, r4, r5, lr}
 80049ec:	460d      	mov	r5, r1
  if(hsdram == NULL)
 80049ee:	4604      	mov	r4, r0
 80049f0:	b1c8      	cbz	r0, 8004a26 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80049f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80049f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049fa:	b91b      	cbnz	r3, 8004a04 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80049fc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004a00:	f7ff fff2 	bl	80049e8 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a04:	2302      	movs	r3, #2
 8004a06:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004a0a:	1d21      	adds	r1, r4, #4
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	f000 f96f 	bl	8004cf0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	4629      	mov	r1, r5
 8004a18:	f000 f9a0 	bl	8004d5c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8004a22:	2000      	movs	r0, #0
}
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004a26:	2001      	movs	r0, #1
 8004a28:	e7fc      	b.n	8004a24 <HAL_SDRAM_Init+0x3a>

08004a2a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004a2a:	b538      	push	{r3, r4, r5, lr}
 8004a2c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a2e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004a32:	b2c0      	uxtb	r0, r0
 8004a34:	2802      	cmp	r0, #2
{
 8004a36:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a38:	d00d      	beq.n	8004a56 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	f000 f9c8 	bl	8004dd6 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004a4e:	2301      	movne	r3, #1
 8004a50:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004a54:	2000      	movs	r0, #0
}
 8004a56:	bd38      	pop	{r3, r4, r5, pc}

08004a58 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a5c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004a60:	b2c0      	uxtb	r0, r0
 8004a62:	2802      	cmp	r0, #2
 8004a64:	d009      	beq.n	8004a7a <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	f000 f9d7 	bl	8004e20 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004a78:	2000      	movs	r0, #0
}
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a7e:	6803      	ldr	r3, [r0, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8004a90:	bf1e      	ittt	ne
 8004a92:	681a      	ldrne	r2, [r3, #0]
 8004a94:	f042 0201 	orrne.w	r2, r2, #1
 8004a98:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_OC_DelayElapsedCallback>:
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_IC_CaptureCallback>:
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIM_TriggerCallback>:
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa6:	6803      	ldr	r3, [r0, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	0791      	lsls	r1, r2, #30
{
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ab0:	d50e      	bpl.n	8004ad0 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	0792      	lsls	r2, r2, #30
 8004ab6:	d50b      	bpl.n	8004ad0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ab8:	f06f 0202 	mvn.w	r2, #2
 8004abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004abe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac6:	d077      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac8:	f7ff ffea 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004acc:	2300      	movs	r3, #0
 8004ace:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	0750      	lsls	r0, r2, #29
 8004ad6:	d510      	bpl.n	8004afa <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	0751      	lsls	r1, r2, #29
 8004adc:	d50d      	bpl.n	8004afa <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ade:	f06f 0204 	mvn.w	r2, #4
 8004ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aec:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af0:	d068      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	f7ff ffd5 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	2300      	movs	r3, #0
 8004af8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	0712      	lsls	r2, r2, #28
 8004b00:	d50f      	bpl.n	8004b22 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	0710      	lsls	r0, r2, #28
 8004b06:	d50c      	bpl.n	8004b22 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b08:	f06f 0208 	mvn.w	r2, #8
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b10:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b12:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b14:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b18:	d05a      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	f7ff ffc1 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	06d2      	lsls	r2, r2, #27
 8004b28:	d510      	bpl.n	8004b4c <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	06d0      	lsls	r0, r2, #27
 8004b2e:	d50d      	bpl.n	8004b4c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b38:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b42:	d04b      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b44:	f7ff ffac 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	07d1      	lsls	r1, r2, #31
 8004b52:	d508      	bpl.n	8004b66 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	07d2      	lsls	r2, r2, #31
 8004b58:	d505      	bpl.n	8004b66 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b5a:	f06f 0201 	mvn.w	r2, #1
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7fb ff09 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	0610      	lsls	r0, r2, #24
 8004b6c:	d508      	bpl.n	8004b80 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	0611      	lsls	r1, r2, #24
 8004b72:	d505      	bpl.n	8004b80 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 f8b7 	bl	8004cee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	0652      	lsls	r2, r2, #25
 8004b86:	d508      	bpl.n	8004b9a <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	0650      	lsls	r0, r2, #25
 8004b8c:	d505      	bpl.n	8004b9a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b94:	4620      	mov	r0, r4
 8004b96:	f7ff ff85 	bl	8004aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	0691      	lsls	r1, r2, #26
 8004ba0:	d522      	bpl.n	8004be8 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	0692      	lsls	r2, r2, #26
 8004ba6:	d51f      	bpl.n	8004be8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bae:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004bb4:	f000 b89a 	b.w	8004cec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb8:	f7ff ff71 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff ff70 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bc2:	e783      	b.n	8004acc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc4:	f7ff ff6b 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7ff ff6a 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bce:	e792      	b.n	8004af6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd0:	f7ff ff65 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f7ff ff64 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bda:	e7a0      	b.n	8004b1e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	f7ff ff5f 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff ff5e 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004be6:	e7af      	b.n	8004b48 <HAL_TIM_IRQHandler+0xa2>
}
 8004be8:	bd10      	pop	{r4, pc}
	...

08004bec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004bee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf0:	4290      	cmp	r0, r2
 8004bf2:	d012      	beq.n	8004c1a <TIM_Base_SetConfig+0x2e>
 8004bf4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004bf8:	d00f      	beq.n	8004c1a <TIM_Base_SetConfig+0x2e>
 8004bfa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004bfe:	4290      	cmp	r0, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0x2e>
 8004c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c06:	4290      	cmp	r0, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0x2e>
 8004c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0e:	4290      	cmp	r0, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0x2e>
 8004c12:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c16:	4290      	cmp	r0, r2
 8004c18:	d119      	bne.n	8004c4e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004c1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c20:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c22:	4a23      	ldr	r2, [pc, #140]	; (8004cb0 <TIM_Base_SetConfig+0xc4>)
 8004c24:	4290      	cmp	r0, r2
 8004c26:	d029      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c2c:	d026      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c32:	4290      	cmp	r0, r2
 8004c34:	d022      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3a:	4290      	cmp	r0, r2
 8004c3c:	d01e      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c42:	4290      	cmp	r0, r2
 8004c44:	d01a      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c46:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c4a:	4290      	cmp	r0, r2
 8004c4c:	d016      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c4e:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <TIM_Base_SetConfig+0xc8>)
 8004c50:	4290      	cmp	r0, r2
 8004c52:	d013      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c58:	4290      	cmp	r0, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c60:	4290      	cmp	r0, r2
 8004c62:	d00b      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c64:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c68:	4290      	cmp	r0, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c70:	4290      	cmp	r0, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x90>
 8004c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c78:	4290      	cmp	r0, r2
 8004c7a:	d103      	bne.n	8004c84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c7c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c82:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c84:	694a      	ldr	r2, [r1, #20]
 8004c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004c8c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8e:	688b      	ldr	r3, [r1, #8]
 8004c90:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c92:	680b      	ldr	r3, [r1, #0]
 8004c94:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <TIM_Base_SetConfig+0xc4>)
 8004c98:	4298      	cmp	r0, r3
 8004c9a:	d003      	beq.n	8004ca4 <TIM_Base_SetConfig+0xb8>
 8004c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca0:	4298      	cmp	r0, r3
 8004ca2:	d101      	bne.n	8004ca8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca4:	690b      	ldr	r3, [r1, #16]
 8004ca6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	6143      	str	r3, [r0, #20]
}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40014000 	.word	0x40014000

08004cb8 <HAL_TIM_Base_Init>:
{
 8004cb8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004cba:	4604      	mov	r4, r0
 8004cbc:	b1a0      	cbz	r0, 8004ce8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004cbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cc6:	b91b      	cbnz	r3, 8004cd0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004cc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ccc:	f7ff fed6 	bl	8004a7c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	1d21      	adds	r1, r4, #4
 8004cda:	f7ff ff87 	bl	8004bec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004ce4:	2000      	movs	r0, #0
}
 8004ce6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
 8004cea:	e7fc      	b.n	8004ce6 <HAL_TIM_Base_Init+0x2e>

08004cec <HAL_TIMEx_CommutCallback>:
 8004cec:	4770      	bx	lr

08004cee <HAL_TIMEx_BreakCallback>:
 8004cee:	4770      	bx	lr

08004cf0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004cf6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8004cfa:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8004cfe:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8004d02:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004d06:	6809      	ldr	r1, [r1, #0]
 8004d08:	2901      	cmp	r1, #1
 8004d0a:	ea43 0304 	orr.w	r3, r3, r4
 8004d0e:	4912      	ldr	r1, [pc, #72]	; (8004d58 <FMC_SDRAM_Init+0x68>)
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004d10:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004d12:	d00f      	beq.n	8004d34 <FMC_SDRAM_Init+0x44>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d14:	431a      	orrs	r2, r3
 8004d16:	432a      	orrs	r2, r5
 8004d18:	ea42 0308 	orr.w	r3, r2, r8
 8004d1c:	ea43 030e 	orr.w	r3, r3, lr
 8004d20:	ea43 030c 	orr.w	r3, r3, ip
 8004d24:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004d26:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d28:	4333      	orrs	r3, r6
 8004d2a:	430b      	orrs	r3, r1
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004d2c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004d34:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004d36:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004d38:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d3a:	ea45 0208 	orr.w	r2, r5, r8
 8004d3e:	ea42 020e 	orr.w	r2, r2, lr
 8004d42:	ea42 020c 	orr.w	r2, r2, ip
 8004d46:	433a      	orrs	r2, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004d48:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d4c:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004d4e:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d50:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004d52:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004d54:	6042      	str	r2, [r0, #4]
 8004d56:	e7ea      	b.n	8004d2e <FMC_SDRAM_Init+0x3e>
 8004d58:	ffff8000 	.word	0xffff8000

08004d5c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d5c:	68cb      	ldr	r3, [r1, #12]
 8004d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d60:	680c      	ldr	r4, [r1, #0]
 8004d62:	688e      	ldr	r6, [r1, #8]
 8004d64:	690d      	ldr	r5, [r1, #16]
 8004d66:	1e5f      	subs	r7, r3, #1
 8004d68:	694b      	ldr	r3, [r1, #20]
 8004d6a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8004d6e:	684c      	ldr	r4, [r1, #4]
 8004d70:	6989      	ldr	r1, [r1, #24]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	051b      	lsls	r3, r3, #20
 8004d76:	3c01      	subs	r4, #1
 8004d78:	3e01      	subs	r6, #1
 8004d7a:	3d01      	subs	r5, #1
 8004d7c:	3901      	subs	r1, #1
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004d7e:	2a01      	cmp	r2, #1
 8004d80:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8004d84:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8004d88:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8004d8c:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8004d90:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 8004d94:	d00c      	beq.n	8004db0 <FMC_SDRAM_Timing_Init+0x54>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004d96:	ea43 030c 	orr.w	r3, r3, ip
 8004d9a:	4323      	orrs	r3, r4
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004d9c:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004d9e:	4333      	orrs	r3, r6
 8004da0:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004da2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004da6:	430b      	orrs	r3, r1
 8004da8:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004daa:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8004dac:	2000      	movs	r0, #0
 8004dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004db0:	6887      	ldr	r7, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004db2:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 8004db6:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004dba:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004dbe:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004dc0:	ea42 020c 	orr.w	r2, r2, ip
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004dc4:	68c7      	ldr	r7, [r0, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004dc6:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004dc8:	432a      	orrs	r2, r5
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004dca:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004dd2:	60c2      	str	r2, [r0, #12]
 8004dd4:	e7ea      	b.n	8004dac <FMC_SDRAM_Timing_Init+0x50>

08004dd6 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9301      	str	r3, [sp, #4]
{
 8004ddc:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004dde:	e9d1 3200 	ldrd	r3, r2, [r1]
 8004de2:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 8004de4:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004de6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004dea:	688a      	ldr	r2, [r1, #8]
 8004dec:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004dee:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004df2:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8004df4:	9b01      	ldr	r3, [sp, #4]
 8004df6:	6103      	str	r3, [r0, #16]
{
 8004df8:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004dfa:	f7fc fd87 	bl	800190c <HAL_GetTick>
 8004dfe:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004e00:	69a0      	ldr	r0, [r4, #24]
 8004e02:	f010 0020 	ands.w	r0, r0, #32
 8004e06:	d003      	beq.n	8004e10 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004e08:	1c6b      	adds	r3, r5, #1
 8004e0a:	d0f9      	beq.n	8004e00 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004e0c:	b915      	cbnz	r5, 8004e14 <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 8004e0e:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8004e10:	b002      	add	sp, #8
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004e14:	f7fc fd7a 	bl	800190c <HAL_GetTick>
 8004e18:	1b80      	subs	r0, r0, r6
 8004e1a:	42a8      	cmp	r0, r5
 8004e1c:	d9f0      	bls.n	8004e00 <FMC_SDRAM_SendCommand+0x2a>
 8004e1e:	e7f6      	b.n	8004e0e <FMC_SDRAM_SendCommand+0x38>

08004e20 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004e20:	6943      	ldr	r3, [r0, #20]
 8004e22:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004e26:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004e28:	2000      	movs	r0, #0
 8004e2a:	4770      	bx	lr

08004e2c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e2c:	0189      	lsls	r1, r1, #6
 8004e2e:	f041 0120 	orr.w	r1, r1, #32
 8004e32:	4a06      	ldr	r2, [pc, #24]	; (8004e4c <USB_FlushTxFifo+0x20>)
 8004e34:	6101      	str	r1, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004e36:	3a01      	subs	r2, #1
 8004e38:	d005      	beq.n	8004e46 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e3a:	6903      	ldr	r3, [r0, #16]
 8004e3c:	f013 0320 	ands.w	r3, r3, #32
 8004e40:	d1f9      	bne.n	8004e36 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8004e42:	4618      	mov	r0, r3
 8004e44:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004e46:	2003      	movs	r0, #3
}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	00030d41 	.word	0x00030d41

08004e50 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e50:	2310      	movs	r3, #16
 8004e52:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <USB_FlushRxFifo+0x1c>)
 8004e54:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004e56:	3a01      	subs	r2, #1
 8004e58:	d005      	beq.n	8004e66 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e5a:	6903      	ldr	r3, [r0, #16]
 8004e5c:	f013 0310 	ands.w	r3, r3, #16
 8004e60:	d1f9      	bne.n	8004e56 <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8004e62:	4618      	mov	r0, r3
 8004e64:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004e66:	2003      	movs	r0, #3
}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	00030d41 	.word	0x00030d41

08004e70 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e70:	3203      	adds	r2, #3
 8004e72:	0892      	lsrs	r2, r2, #2
 8004e74:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e78:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8004e7c:	4291      	cmp	r1, r2
 8004e7e:	d101      	bne.n	8004e84 <USB_ReadPacket+0x14>
    pDest++;
  }

  return ((void *)pDest);
}
 8004e80:	4608      	mov	r0, r1
 8004e82:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e84:	6803      	ldr	r3, [r0, #0]
 8004e86:	f841 3b04 	str.w	r3, [r1], #4
 8004e8a:	e7f7      	b.n	8004e7c <USB_ReadPacket+0xc>

08004e8c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e8c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004e8e:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8004e90:	4010      	ands	r0, r2
 8004e92:	4770      	bx	lr

08004e94 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8004e94:	6940      	ldr	r0, [r0, #20]
}
 8004e96:	f000 0001 	and.w	r0, r0, #1
 8004e9a:	4770      	bx	lr

08004e9c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e9c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004ea0:	f023 0303 	bic.w	r3, r3, #3
{
 8004ea4:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ea6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004eaa:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8004eae:	f001 0303 	and.w	r3, r1, #3
 8004eb2:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8004eb4:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004eb6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004eba:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8004ebe:	d104      	bne.n	8004eca <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8004ec0:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8004ec4:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8004eca:	2902      	cmp	r1, #2
 8004ecc:	d1fb      	bne.n	8004ec6 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8004ece:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ed2:	e7f7      	b.n	8004ec4 <USB_InitFSLSPClkSel+0x28>

08004ed4 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004ed4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004ed8:	6940      	ldr	r0, [r0, #20]
}
 8004eda:	b280      	uxth	r0, r0
 8004edc:	4770      	bx	lr

08004ede <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004ede:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004ee2:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004ee6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004eea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004eee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004efa:	d11e      	bne.n	8004f3a <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004efc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004efe:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f02:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f06:	d137      	bne.n	8004f78 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f0c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f10:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f1c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f24:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004f28:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	d002      	beq.n	8004f36 <USB_HC_Halt+0x58>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f30:	6811      	ldr	r1, [r2, #0]
 8004f32:	2900      	cmp	r1, #0
 8004f34:	dbfa      	blt.n	8004f2c <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8004f36:	2000      	movs	r0, #0
 8004f38:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f3a:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8004f3e:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f42:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f46:	d117      	bne.n	8004f78 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f4c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f50:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f58:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f5c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f64:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004f68:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	d0e2      	beq.n	8004f36 <USB_HC_Halt+0x58>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f70:	6811      	ldr	r1, [r2, #0]
 8004f72:	2900      	cmp	r1, #0
 8004f74:	dbfa      	blt.n	8004f6c <USB_HC_Halt+0x8e>
 8004f76:	e7de      	b.n	8004f36 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f7c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004f80:	e7d9      	b.n	8004f36 <USB_HC_Halt+0x58>

08004f82 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f82:	6883      	ldr	r3, [r0, #8]
 8004f84:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b510      	push	{r4, lr}
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004f8a:	2110      	movs	r1, #16
{
 8004f8c:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f8e:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004f90:	f7ff ff4c 	bl	8004e2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ff5b 	bl	8004e50 <USB_FlushRxFifo>
 8004f9a:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8004f9e:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8004fa2:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004fa4:	6811      	ldr	r1, [r2, #0]
 8004fa6:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004faa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8004fae:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8004fb2:	4282      	cmp	r2, r0
 8004fb4:	d1f6      	bne.n	8004fa4 <USB_StopHost+0x22>
  uint32_t count = 0U;
 8004fb6:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004fbe:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8004fc2:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004fca:	d802      	bhi.n	8004fd2 <USB_StopHost+0x50>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	dbf8      	blt.n	8004fc4 <USB_StopHost+0x42>
 8004fd2:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1ef      	bne.n	8004fb8 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fdc:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004fe0:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004fea:	2000      	movs	r0, #0
 8004fec:	bd10      	pop	{r4, pc}

08004fee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fee:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004ff0:	f001 f958 	bl	80062a4 <vTaskStartScheduler>
  
  return osOK;
}
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	bd08      	pop	{r3, pc}

08004ff8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ff8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ffa:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8004ffe:	8a02      	ldrh	r2, [r0, #16]
{
 8005000:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005002:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 8005006:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8005008:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800500a:	bf14      	ite	ne
 800500c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800500e:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005010:	a803      	add	r0, sp, #12
 8005012:	e9cd 4000 	strd	r4, r0, [sp]
 8005016:	4628      	mov	r0, r5
 8005018:	f001 f882 	bl	8006120 <xTaskCreate>
 800501c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800501e:	bf0c      	ite	eq
 8005020:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005022:	2000      	movne	r0, #0
}
 8005024:	b005      	add	sp, #20
 8005026:	bd30      	pop	{r4, r5, pc}

08005028 <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8005028:	f001 bb90 	b.w	800674c <xTaskGetCurrentTaskHandle>

0800502c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800502c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800502e:	2800      	cmp	r0, #0
 8005030:	bf08      	it	eq
 8005032:	2001      	moveq	r0, #1
 8005034:	f001 fa70 	bl	8006518 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005038:	2000      	movs	r0, #0
 800503a:	bd08      	pop	{r3, pc}

0800503c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800503c:	b507      	push	{r0, r1, r2, lr}
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800503e:	6803      	ldr	r3, [r0, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	3901      	subs	r1, #1
 8005044:	4613      	mov	r3, r2
 8005046:	424a      	negs	r2, r1
 8005048:	414a      	adcs	r2, r1
 800504a:	4803      	ldr	r0, [pc, #12]	; (8005058 <osTimerCreate+0x1c>)
 800504c:	2101      	movs	r1, #1
 800504e:	f001 fcfd 	bl	8006a4c <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 8005052:	b003      	add	sp, #12
 8005054:	f85d fb04 	ldr.w	pc, [sp], #4
 8005058:	0801a5cf 	.word	0x0801a5cf

0800505c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800505c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800505e:	2400      	movs	r4, #0
 8005060:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
    ticks = 1;
 8005062:	42a1      	cmp	r1, r4
 8005064:	bf14      	ite	ne
 8005066:	460a      	movne	r2, r1
 8005068:	2201      	moveq	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506a:	f3ef 8305 	mrs	r3, IPSR
    
  if (inHandlerMode()) 
 800506e:	b1a3      	cbz	r3, 800509a <osTimerStart+0x3e>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005070:	9400      	str	r4, [sp, #0]
 8005072:	ab03      	add	r3, sp, #12
 8005074:	2109      	movs	r1, #9
 8005076:	f001 fd17 	bl	8006aa8 <xTimerGenericCommand>
 800507a:	2801      	cmp	r0, #1
 800507c:	d113      	bne.n	80050a6 <osTimerStart+0x4a>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	b913      	cbnz	r3, 8005088 <osTimerStart+0x2c>
  osStatus result = osOK;
 8005082:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8005084:	b004      	add	sp, #16
 8005086:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8005088:	4b08      	ldr	r3, [pc, #32]	; (80050ac <osTimerStart+0x50>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	e7f3      	b.n	8005082 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2104      	movs	r1, #4
 800509e:	f001 fd03 	bl	8006aa8 <xTimerGenericCommand>
 80050a2:	2801      	cmp	r0, #1
 80050a4:	d0ed      	beq.n	8005082 <osTimerStart+0x26>
      result = osErrorOS;
 80050a6:	20ff      	movs	r0, #255	; 0xff
  return result;
 80050a8:	e7ec      	b.n	8005084 <osTimerStart+0x28>
 80050aa:	bf00      	nop
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80050b0:	2001      	movs	r0, #1
 80050b2:	f000 bd15 	b.w	8005ae0 <xQueueCreateMutex>
	...

080050b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80050b8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050ba:	2400      	movs	r4, #0
 80050bc:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80050be:	b1e0      	cbz	r0, 80050fa <osMutexWait+0x42>
 80050c0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80050c4:	b1a3      	cbz	r3, 80050f0 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050c6:	aa01      	add	r2, sp, #4
 80050c8:	4621      	mov	r1, r4
 80050ca:	f000 ff33 	bl	8005f34 <xQueueReceiveFromISR>
 80050ce:	2801      	cmp	r0, #1
 80050d0:	d002      	beq.n	80050d8 <osMutexWait+0x20>
      return osErrorOS;
 80050d2:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80050d4:	b002      	add	sp, #8
 80050d6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	b13b      	cbz	r3, 80050ec <osMutexWait+0x34>
 80050dc:	4b08      	ldr	r3, [pc, #32]	; (8005100 <osMutexWait+0x48>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
  return osOK;
 80050ec:	2000      	movs	r0, #0
 80050ee:	e7f1      	b.n	80050d4 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80050f0:	f000 fe5e 	bl	8005db0 <xQueueSemaphoreTake>
 80050f4:	2801      	cmp	r0, #1
 80050f6:	d0f9      	beq.n	80050ec <osMutexWait+0x34>
 80050f8:	e7eb      	b.n	80050d2 <osMutexWait+0x1a>
    return osErrorParameter;
 80050fa:	2080      	movs	r0, #128	; 0x80
 80050fc:	e7ea      	b.n	80050d4 <osMutexWait+0x1c>
 80050fe:	bf00      	nop
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005104:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005106:	2400      	movs	r4, #0
 8005108:	9401      	str	r4, [sp, #4]
 800510a:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800510e:	b193      	cbz	r3, 8005136 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005110:	a901      	add	r1, sp, #4
 8005112:	f000 fd58 	bl	8005bc6 <xQueueGiveFromISR>
 8005116:	2801      	cmp	r0, #1
 8005118:	d113      	bne.n	8005142 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	b913      	cbnz	r3, 8005124 <osMutexRelease+0x20>
  osStatus result = osOK;
 800511e:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8005120:	b002      	add	sp, #8
 8005122:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <osMutexRelease+0x44>)
 8005126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	e7f3      	b.n	800511e <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005136:	461a      	mov	r2, r3
 8005138:	4619      	mov	r1, r3
 800513a:	f000 fc1f 	bl	800597c <xQueueGenericSend>
 800513e:	2801      	cmp	r0, #1
 8005140:	d0ed      	beq.n	800511e <osMutexRelease+0x1a>
    result = osErrorOS;
 8005142:	20ff      	movs	r0, #255	; 0xff
 8005144:	e7ec      	b.n	8005120 <osMutexRelease+0x1c>
 8005146:	bf00      	nop
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800514c:	2901      	cmp	r1, #1
{ 
 800514e:	b510      	push	{r4, lr}
 8005150:	4608      	mov	r0, r1
  if (count == 1) {
 8005152:	d10c      	bne.n	800516e <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8005154:	2203      	movs	r2, #3
 8005156:	2100      	movs	r1, #0
 8005158:	f000 fbce 	bl	80058f8 <xQueueGenericCreate>
 800515c:	4604      	mov	r4, r0
 800515e:	b120      	cbz	r0, 800516a <osSemaphoreCreate+0x1e>
 8005160:	2300      	movs	r3, #0
 8005162:	461a      	mov	r2, r3
 8005164:	4619      	mov	r1, r3
 8005166:	f000 fc09 	bl	800597c <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800516a:	4620      	mov	r0, r4
 800516c:	bd10      	pop	{r4, pc}
 800516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8005172:	f000 bbe5 	b.w	8005940 <xQueueCreateCountingSemaphore>
	...

08005178 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800517a:	2400      	movs	r4, #0
{
 800517c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800517e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8005180:	42a2      	cmp	r2, r4
 8005182:	bf08      	it	eq
 8005184:	2201      	moveq	r2, #1
 8005186:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800518a:	b1ab      	cbz	r3, 80051b8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800518c:	4623      	mov	r3, r4
 800518e:	aa03      	add	r2, sp, #12
 8005190:	a901      	add	r1, sp, #4
 8005192:	f000 fcb7 	bl	8005b04 <xQueueGenericSendFromISR>
 8005196:	2801      	cmp	r0, #1
 8005198:	d002      	beq.n	80051a0 <osMessagePut+0x28>
      return osErrorOS;
 800519a:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800519c:	b004      	add	sp, #16
 800519e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	b13b      	cbz	r3, 80051b4 <osMessagePut+0x3c>
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <osMessagePut+0x4c>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
  return osOK;
 80051b4:	2000      	movs	r0, #0
 80051b6:	e7f1      	b.n	800519c <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80051b8:	a901      	add	r1, sp, #4
 80051ba:	f000 fbdf 	bl	800597c <xQueueGenericSend>
 80051be:	2801      	cmp	r0, #1
 80051c0:	d0f8      	beq.n	80051b4 <osMessagePut+0x3c>
 80051c2:	e7ea      	b.n	800519a <osMessagePut+0x22>
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80051c8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80051ca:	f001 fac5 	bl	8006758 <xTaskGetSchedulerState>
 80051ce:	2801      	cmp	r0, #1
 80051d0:	d003      	beq.n	80051da <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80051d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80051d6:	f000 b9a5 	b.w	8005524 <xPortSysTickHandler>
}
 80051da:	bd08      	pop	{r3, pc}

080051dc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <prvInsertBlockIntoFreeList+0x40>)
{
 80051de:	b530      	push	{r4, r5, lr}
 80051e0:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4282      	cmp	r2, r0
 80051e6:	d317      	bcc.n	8005218 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051e8:	685c      	ldr	r4, [r3, #4]
 80051ea:	1919      	adds	r1, r3, r4
 80051ec:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051ee:	bf01      	itttt	eq
 80051f0:	6841      	ldreq	r1, [r0, #4]
 80051f2:	4618      	moveq	r0, r3
 80051f4:	1909      	addeq	r1, r1, r4
 80051f6:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051f8:	6844      	ldr	r4, [r0, #4]
 80051fa:	1901      	adds	r1, r0, r4
 80051fc:	428a      	cmp	r2, r1
 80051fe:	d106      	bne.n	800520e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005200:	68a9      	ldr	r1, [r5, #8]
 8005202:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005204:	bf1f      	itttt	ne
 8005206:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005208:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800520a:	1909      	addne	r1, r1, r4
 800520c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800520e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005210:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005212:	bf18      	it	ne
 8005214:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bd30      	pop	{r4, r5, pc}
 8005218:	4613      	mov	r3, r2
 800521a:	e7e2      	b.n	80051e2 <prvInsertBlockIntoFreeList+0x6>
 800521c:	2000030c 	.word	0x2000030c

08005220 <pvPortMalloc>:
{
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005224:	4d3c      	ldr	r5, [pc, #240]	; (8005318 <pvPortMalloc+0xf8>)
{
 8005226:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005228:	f001 f878 	bl	800631c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800522c:	68ab      	ldr	r3, [r5, #8]
 800522e:	b9e3      	cbnz	r3, 800526a <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8005230:	4a3a      	ldr	r2, [pc, #232]	; (800531c <pvPortMalloc+0xfc>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005232:	0756      	lsls	r6, r2, #29
 8005234:	f502 43f0 	add.w	r3, r2, #30720	; 0x7800
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005238:	bf1d      	ittte	ne
 800523a:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800523c:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005240:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005242:	f44f 43f0 	moveq.w	r3, #30720	; 0x7800
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005246:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005248:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800524a:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800524e:	2100      	movs	r1, #0
 8005250:	6069      	str	r1, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005252:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005254:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005258:	1a99      	subs	r1, r3, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800525a:	e9c5 1103 	strd	r1, r1, [r5, #12]
	pxEnd = ( void * ) uxAddress;
 800525e:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005260:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005268:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800526a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800526e:	ea18 0f04 	tst.w	r8, r4
 8005272:	d14b      	bne.n	800530c <pvPortMalloc+0xec>
			if( xWantedSize > 0 )
 8005274:	2c00      	cmp	r4, #0
 8005276:	d03c      	beq.n	80052f2 <pvPortMalloc+0xd2>
				xWantedSize += xHeapStructSize;
 8005278:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800527c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800527e:	bf1c      	itt	ne
 8005280:	f023 0307 	bicne.w	r3, r3, #7
 8005284:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005286:	2b00      	cmp	r3, #0
 8005288:	d040      	beq.n	800530c <pvPortMalloc+0xec>
 800528a:	692f      	ldr	r7, [r5, #16]
 800528c:	429f      	cmp	r7, r3
 800528e:	d33d      	bcc.n	800530c <pvPortMalloc+0xec>
				pxBlock = xStart.pxNextFreeBlock;
 8005290:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8005292:	4821      	ldr	r0, [pc, #132]	; (8005318 <pvPortMalloc+0xf8>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005294:	6872      	ldr	r2, [r6, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d201      	bcs.n	800529e <pvPortMalloc+0x7e>
 800529a:	6831      	ldr	r1, [r6, #0]
 800529c:	b9a1      	cbnz	r1, 80052c8 <pvPortMalloc+0xa8>
				if( pxBlock != pxEnd )
 800529e:	68a9      	ldr	r1, [r5, #8]
 80052a0:	42b1      	cmp	r1, r6
 80052a2:	d033      	beq.n	800530c <pvPortMalloc+0xec>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052a4:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052a6:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052a8:	6804      	ldr	r4, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052aa:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052ac:	2a10      	cmp	r2, #16
 80052ae:	d912      	bls.n	80052d6 <pvPortMalloc+0xb6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052b0:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b2:	0741      	lsls	r1, r0, #29
 80052b4:	d00b      	beq.n	80052ce <pvPortMalloc+0xae>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	e7fe      	b.n	80052c6 <pvPortMalloc+0xa6>
 80052c8:	4630      	mov	r0, r6
 80052ca:	460e      	mov	r6, r1
 80052cc:	e7e2      	b.n	8005294 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052ce:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052d0:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052d2:	f7ff ff83 	bl	80051dc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052d6:	6873      	ldr	r3, [r6, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052d8:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052da:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052dc:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052e0:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052e2:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052e4:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e8:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052ea:	bf38      	it	cc
 80052ec:	60ef      	strcc	r7, [r5, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052ee:	3408      	adds	r4, #8
					pxBlock->pxNextFreeBlock = NULL;
 80052f0:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 80052f2:	f001 f8a7 	bl	8006444 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f6:	0763      	lsls	r3, r4, #29
 80052f8:	d00a      	beq.n	8005310 <pvPortMalloc+0xf0>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	e7fe      	b.n	800530a <pvPortMalloc+0xea>
void *pvReturn = NULL;
 800530c:	2400      	movs	r4, #0
 800530e:	e7f0      	b.n	80052f2 <pvPortMalloc+0xd2>
}
 8005310:	4620      	mov	r0, r4
 8005312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005316:	bf00      	nop
 8005318:	2000030c 	.word	0x2000030c
 800531c:	200008b0 	.word	0x200008b0

08005320 <vPortFree>:
{
 8005320:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8005322:	4604      	mov	r4, r0
 8005324:	b368      	cbz	r0, 8005382 <vPortFree+0x62>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005326:	4d17      	ldr	r5, [pc, #92]	; (8005384 <vPortFree+0x64>)
 8005328:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800532c:	696a      	ldr	r2, [r5, #20]
 800532e:	4213      	tst	r3, r2
 8005330:	d108      	bne.n	8005344 <vPortFree+0x24>
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	e7fe      	b.n	8005342 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005344:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005348:	b141      	cbz	r1, 800535c <vPortFree+0x3c>
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	e7fe      	b.n	800535a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800535c:	ea23 0302 	bic.w	r3, r3, r2
 8005360:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005364:	f000 ffda 	bl	800631c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005368:	692a      	ldr	r2, [r5, #16]
 800536a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800536e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005372:	4413      	add	r3, r2
 8005374:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005376:	f7ff ff31 	bl	80051dc <prvInsertBlockIntoFreeList>
}
 800537a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800537e:	f001 b861 	b.w	8006444 <xTaskResumeAll>
}
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	2000030c 	.word	0x2000030c

08005388 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005388:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <prvTaskExitError+0x3c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	d008      	beq.n	80053a8 <prvTaskExitError+0x20>
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	e7fe      	b.n	80053a6 <prvTaskExitError+0x1e>
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053b8:	9b01      	ldr	r3, [sp, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0fc      	beq.n	80053b8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053be:	b002      	add	sp, #8
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000044 	.word	0x20000044

080053c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <prvPortStartFirstTask+0x24>)
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	6800      	ldr	r0, [r0, #0]
 80053ce:	f380 8808 	msr	MSP, r0
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8814 	msr	CONTROL, r0
 80053da:	b662      	cpsie	i
 80053dc:	b661      	cpsie	f
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	df00      	svc	0
 80053e8:	bf00      	nop
 80053ea:	0000      	.short	0x0000
 80053ec:	e000ed08 	.word	0xe000ed08

080053f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005400 <vPortEnableVFP+0x10>
 80053f4:	6801      	ldr	r1, [r0, #0]
 80053f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053fa:	6001      	str	r1, [r0, #0]
 80053fc:	4770      	bx	lr
 80053fe:	0000      	.short	0x0000
 8005400:	e000ed88 	.word	0xe000ed88

08005404 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005408:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <pxPortInitialiseStack+0x28>)
 800540e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005412:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005416:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800541a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800541e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005422:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005426:	3844      	subs	r0, #68	; 0x44
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	08005389 	.word	0x08005389

08005430 <SVC_Handler>:
	__asm volatile (
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <pxCurrentTCBConst2>)
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6808      	ldr	r0, [r1, #0]
 8005436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f380 8809 	msr	PSP, r0
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8811 	msr	BASEPRI, r0
 800544a:	4770      	bx	lr
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst2>:
 8005450:	20000360 	.word	0x20000360

08005454 <vPortEnterCritical>:
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <vPortEnterCritical+0x3c>)
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800546a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800546c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800546e:	d10d      	bne.n	800548c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <vPortEnterCritical+0x40>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005478:	d008      	beq.n	800548c <vPortEnterCritical+0x38>
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	e7fe      	b.n	800548a <vPortEnterCritical+0x36>
}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000044 	.word	0x20000044
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <vPortExitCritical+0x24>)
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	b943      	cbnz	r3, 80054b0 <vPortExitCritical+0x18>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	e7fe      	b.n	80054ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80054b0:	3b01      	subs	r3, #1
 80054b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054b4:	b90b      	cbnz	r3, 80054ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054b6:	f383 8811 	msr	BASEPRI, r3
}
 80054ba:	4770      	bx	lr
 80054bc:	20000044 	.word	0x20000044

080054c0 <PendSV_Handler>:
	__asm volatile
 80054c0:	f3ef 8009 	mrs	r0, PSP
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <pxCurrentTCBConst>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	f01e 0f10 	tst.w	lr, #16
 80054d0:	bf08      	it	eq
 80054d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	6010      	str	r0, [r2, #0]
 80054dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054e4:	f380 8811 	msr	BASEPRI, r0
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f001 f838 	bl	8006564 <vTaskSwitchContext>
 80054f4:	f04f 0000 	mov.w	r0, #0
 80054f8:	f380 8811 	msr	BASEPRI, r0
 80054fc:	bc09      	pop	{r0, r3}
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	6808      	ldr	r0, [r1, #0]
 8005502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005506:	f01e 0f10 	tst.w	lr, #16
 800550a:	bf08      	it	eq
 800550c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005510:	f380 8809 	msr	PSP, r0
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w

08005520 <pxCurrentTCBConst>:
 8005520:	20000360 	.word	0x20000360

08005524 <xPortSysTickHandler>:
{
 8005524:	b508      	push	{r3, lr}
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005536:	f000 ff09 	bl	800634c <xTaskIncrementTick>
 800553a:	b118      	cbz	r0, 8005544 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <xPortSysTickHandler+0x28>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005544:	2300      	movs	r3, #0
 8005546:	f383 8811 	msr	BASEPRI, r3
}
 800554a:	bd08      	pop	{r3, pc}
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005552:	4909      	ldr	r1, [pc, #36]	; (8005578 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005554:	2300      	movs	r3, #0
 8005556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005558:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <vPortSetupTimerInterrupt+0x2c>)
 800555c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	fbb3 f3f1 	udiv	r3, r3, r1
 8005566:	4906      	ldr	r1, [pc, #24]	; (8005580 <vPortSetupTimerInterrupt+0x30>)
 8005568:	3b01      	subs	r3, #1
 800556a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556c:	2307      	movs	r3, #7
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	e000e010 	.word	0xe000e010
 8005578:	e000e018 	.word	0xe000e018
 800557c:	20000038 	.word	0x20000038
 8005580:	e000e014 	.word	0xe000e014

08005584 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005584:	4b38      	ldr	r3, [pc, #224]	; (8005668 <xPortStartScheduler+0xe4>)
 8005586:	4a39      	ldr	r2, [pc, #228]	; (800566c <xPortStartScheduler+0xe8>)
{
 8005588:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800558a:	6819      	ldr	r1, [r3, #0]
 800558c:	4291      	cmp	r1, r2
 800558e:	d108      	bne.n	80055a2 <xPortStartScheduler+0x1e>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	e7fe      	b.n	80055a0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <xPortStartScheduler+0xec>)
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d108      	bne.n	80055bc <xPortStartScheduler+0x38>
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	e7fe      	b.n	80055ba <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055bc:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <xPortStartScheduler+0xf0>)
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055c4:	22ff      	movs	r2, #255	; 0xff
 80055c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80055d4:	4b28      	ldr	r3, [pc, #160]	; (8005678 <xPortStartScheduler+0xf4>)
 80055d6:	f002 0250 	and.w	r2, r2, #80	; 0x50
 80055da:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055dc:	2207      	movs	r2, #7
 80055de:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055e0:	2100      	movs	r1, #0
 80055e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80055e6:	0600      	lsls	r0, r0, #24
 80055e8:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80055ec:	d40d      	bmi.n	800560a <xPortStartScheduler+0x86>
 80055ee:	b101      	cbz	r1, 80055f2 <xPortStartScheduler+0x6e>
 80055f0:	605a      	str	r2, [r3, #4]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	2a03      	cmp	r2, #3
 80055f6:	d011      	beq.n	800561c <xPortStartScheduler+0x98>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	e7fe      	b.n	8005608 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800560a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	f88d 2003 	strb.w	r2, [sp, #3]
 8005616:	2101      	movs	r1, #1
 8005618:	4622      	mov	r2, r4
 800561a:	e7e2      	b.n	80055e2 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800561c:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800561e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005622:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <xPortStartScheduler+0xf0>)
 8005628:	b2db      	uxtb	r3, r3
 800562a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800562c:	4b13      	ldr	r3, [pc, #76]	; (800567c <xPortStartScheduler+0xf8>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800563c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800563e:	f7ff ff87 	bl	8005550 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <xPortStartScheduler+0xfc>)
 8005644:	2400      	movs	r4, #0
 8005646:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005648:	f7ff fed2 	bl	80053f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800564c:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <xPortStartScheduler+0x100>)
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005654:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005656:	f7ff feb7 	bl	80053c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800565a:	f000 ff83 	bl	8006564 <vTaskSwitchContext>
	prvTaskExitError();
 800565e:	f7ff fe93 	bl	8005388 <prvTaskExitError>
}
 8005662:	4620      	mov	r0, r4
 8005664:	b002      	add	sp, #8
 8005666:	bd10      	pop	{r4, pc}
 8005668:	e000ed00 	.word	0xe000ed00
 800566c:	410fc271 	.word	0x410fc271
 8005670:	410fc270 	.word	0x410fc270
 8005674:	e000e400 	.word	0xe000e400
 8005678:	20000324 	.word	0x20000324
 800567c:	e000ed20 	.word	0xe000ed20
 8005680:	20000044 	.word	0x20000044
 8005684:	e000ef34 	.word	0xe000ef34

08005688 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005688:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800568c:	2b0f      	cmp	r3, #15
 800568e:	4a10      	ldr	r2, [pc, #64]	; (80056d0 <vPortValidateInterruptPriority+0x48>)
 8005690:	d90d      	bls.n	80056ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005692:	4910      	ldr	r1, [pc, #64]	; (80056d4 <vPortValidateInterruptPriority+0x4c>)
 8005694:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005696:	7811      	ldrb	r1, [r2, #0]
 8005698:	4299      	cmp	r1, r3
 800569a:	d908      	bls.n	80056ae <vPortValidateInterruptPriority+0x26>
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	e7fe      	b.n	80056ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <vPortValidateInterruptPriority+0x50>)
 80056b0:	6852      	ldr	r2, [r2, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d908      	bls.n	80056ce <vPortValidateInterruptPriority+0x46>
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	e7fe      	b.n	80056cc <vPortValidateInterruptPriority+0x44>
	}
 80056ce:	4770      	bx	lr
 80056d0:	20000324 	.word	0x20000324
 80056d4:	e000e3f0 	.word	0xe000e3f0
 80056d8:	e000ed0c 	.word	0xe000ed0c

080056dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056dc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056f0:	4770      	bx	lr

080056f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056f6:	4770      	bx	lr

080056f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005704:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005706:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8005708:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800570a:	3301      	adds	r3, #1
 800570c:	6003      	str	r3, [r0, #0]
}
 800570e:	4770      	bx	lr

08005710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005710:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005712:	1c53      	adds	r3, r2, #1
{
 8005714:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8005716:	d10a      	bne.n	800572e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005718:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800571e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005720:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005722:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005724:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8005726:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005728:	3301      	adds	r3, #1
 800572a:	6003      	str	r3, [r0, #0]
}
 800572c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800572e:	f100 0308 	add.w	r3, r0, #8
 8005732:	685c      	ldr	r4, [r3, #4]
 8005734:	6825      	ldr	r5, [r4, #0]
 8005736:	4295      	cmp	r5, r2
 8005738:	d8ef      	bhi.n	800571a <vListInsert+0xa>
 800573a:	4623      	mov	r3, r4
 800573c:	e7f9      	b.n	8005732 <vListInsert+0x22>

0800573e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8005742:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005744:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005746:	6882      	ldr	r2, [r0, #8]
 8005748:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800574e:	bf08      	it	eq
 8005750:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005752:	2200      	movs	r2, #0
 8005754:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	3a01      	subs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800575c:	6818      	ldr	r0, [r3, #0]
}
 800575e:	4770      	bx	lr

08005760 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005760:	b510      	push	{r4, lr}
 8005762:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005764:	f7ff fe76 	bl	8005454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005768:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f7ff fe95 	bl	8005498 <vPortExitCritical>

	return xReturn;
}
 800576e:	fab4 f084 	clz	r0, r4
 8005772:	0940      	lsrs	r0, r0, #5
 8005774:	bd10      	pop	{r4, pc}

08005776 <prvCopyDataToQueue>:
{
 8005776:	b570      	push	{r4, r5, r6, lr}
 8005778:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800577a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800577c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800577e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005780:	b942      	cbnz	r2, 8005794 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005782:	6805      	ldr	r5, [r0, #0]
 8005784:	b99d      	cbnz	r5, 80057ae <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005786:	6880      	ldr	r0, [r0, #8]
 8005788:	f001 f846 	bl	8006818 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800578c:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800578e:	3601      	adds	r6, #1
 8005790:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005792:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005794:	b96d      	cbnz	r5, 80057b2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005796:	6840      	ldr	r0, [r0, #4]
 8005798:	f00f fb79 	bl	8014e8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057a0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057a4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d301      	bcc.n	80057ae <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80057ae:	2000      	movs	r0, #0
 80057b0:	e7ed      	b.n	800578e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057b2:	68c0      	ldr	r0, [r0, #12]
 80057b4:	f00f fb6b 	bl	8014e8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ba:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057bc:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057be:	425b      	negs	r3, r3
 80057c0:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057c2:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057c4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057c6:	bf3e      	ittt	cc
 80057c8:	68a2      	ldrcc	r2, [r4, #8]
 80057ca:	189b      	addcc	r3, r3, r2
 80057cc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80057ce:	2d02      	cmp	r5, #2
 80057d0:	d1ed      	bne.n	80057ae <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057d2:	b10e      	cbz	r6, 80057d8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80057d4:	3e01      	subs	r6, #1
 80057d6:	e7ea      	b.n	80057ae <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80057d8:	4630      	mov	r0, r6
 80057da:	e7d8      	b.n	800578e <prvCopyDataToQueue+0x18>

080057dc <prvCopyDataFromQueue>:
{
 80057dc:	4603      	mov	r3, r0
 80057de:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80057e2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057e4:	b162      	cbz	r2, 8005800 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057e6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057e8:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057ea:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057ec:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057ee:	60d9      	str	r1, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057f0:	bf24      	itt	cs
 80057f2:	6819      	ldrcs	r1, [r3, #0]
 80057f4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057f6:	68d9      	ldr	r1, [r3, #12]
}
 80057f8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057fc:	f00f bb47 	b.w	8014e8e <memcpy>
}
 8005800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005804:	4770      	bx	lr

08005806 <prvUnlockQueue>:
{
 8005806:	b570      	push	{r4, r5, r6, lr}
 8005808:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800580a:	f7ff fe23 	bl	8005454 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800580e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005812:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005816:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005818:	2d00      	cmp	r5, #0
 800581a:	dc14      	bgt.n	8005846 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800581c:	23ff      	movs	r3, #255	; 0xff
 800581e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005822:	f7ff fe39 	bl	8005498 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005826:	f7ff fe15 	bl	8005454 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800582a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8005832:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005834:	2d00      	cmp	r5, #0
 8005836:	dc12      	bgt.n	800585e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005838:	23ff      	movs	r3, #255	; 0xff
 800583a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800583e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005842:	f7ff be29 	b.w	8005498 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0e7      	beq.n	800581c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800584c:	4630      	mov	r0, r6
 800584e:	f000 fef9 	bl	8006644 <xTaskRemoveFromEventList>
 8005852:	b108      	cbz	r0, 8005858 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005854:	f000 ff72 	bl	800673c <vTaskMissedYield>
 8005858:	3d01      	subs	r5, #1
 800585a:	b26d      	sxtb	r5, r5
 800585c:	e7dc      	b.n	8005818 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0e9      	beq.n	8005838 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005864:	4630      	mov	r0, r6
 8005866:	f000 feed 	bl	8006644 <xTaskRemoveFromEventList>
 800586a:	b108      	cbz	r0, 8005870 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800586c:	f000 ff66 	bl	800673c <vTaskMissedYield>
 8005870:	3d01      	subs	r5, #1
 8005872:	b26d      	sxtb	r5, r5
 8005874:	e7de      	b.n	8005834 <prvUnlockQueue+0x2e>
	...

08005878 <xQueueGenericReset>:
{
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800587c:	4604      	mov	r4, r0
 800587e:	b940      	cbnz	r0, 8005892 <xQueueGenericReset+0x1a>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	e7fe      	b.n	8005890 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8005892:	f7ff fddf 	bl	8005454 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005896:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 800589a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800589c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800589e:	4343      	muls	r3, r0
 80058a0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058a2:	1a1b      	subs	r3, r3, r0
 80058a4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058a6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058a8:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058aa:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80058ac:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058ae:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80058b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80058b8:	b995      	cbnz	r5, 80058e0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	b163      	cbz	r3, 80058d8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058be:	f104 0010 	add.w	r0, r4, #16
 80058c2:	f000 febf 	bl	8006644 <xTaskRemoveFromEventList>
 80058c6:	b138      	cbz	r0, 80058d8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <xQueueGenericReset+0x7c>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80058d8:	f7ff fdde 	bl	8005498 <vPortExitCritical>
}
 80058dc:	2001      	movs	r0, #1
 80058de:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058e0:	f104 0010 	add.w	r0, r4, #16
 80058e4:	f7ff fefa 	bl	80056dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80058ec:	f7ff fef6 	bl	80056dc <vListInitialise>
 80058f0:	e7f2      	b.n	80058d8 <xQueueGenericReset+0x60>
 80058f2:	bf00      	nop
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <xQueueGenericCreate>:
	{
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	460d      	mov	r5, r1
 80058fc:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058fe:	4606      	mov	r6, r0
 8005900:	b940      	cbnz	r0, 8005914 <xQueueGenericCreate+0x1c>
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	e7fe      	b.n	8005912 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005916:	3050      	adds	r0, #80	; 0x50
 8005918:	f7ff fc82 	bl	8005220 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800591c:	4604      	mov	r4, r0
 800591e:	b148      	cbz	r0, 8005934 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005920:	b955      	cbnz	r5, 8005938 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005922:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8005924:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005928:	2101      	movs	r1, #1
 800592a:	4620      	mov	r0, r4
 800592c:	f7ff ffa4 	bl	8005878 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005930:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8005934:	4620      	mov	r0, r4
 8005936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005938:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	e7f1      	b.n	8005924 <xQueueGenericCreate+0x2c>

08005940 <xQueueCreateCountingSemaphore>:
	{
 8005940:	b510      	push	{r4, lr}
 8005942:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8005944:	b940      	cbnz	r0, 8005958 <xQueueCreateCountingSemaphore+0x18>
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	e7fe      	b.n	8005956 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005958:	4288      	cmp	r0, r1
 800595a:	d208      	bcs.n	800596e <xQueueCreateCountingSemaphore+0x2e>
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	e7fe      	b.n	800596c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800596e:	2202      	movs	r2, #2
 8005970:	2100      	movs	r1, #0
 8005972:	f7ff ffc1 	bl	80058f8 <xQueueGenericCreate>
		if( xHandle != NULL )
 8005976:	b100      	cbz	r0, 800597a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005978:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800597a:	bd10      	pop	{r4, pc}

0800597c <xQueueGenericSend>:
{
 800597c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	4688      	mov	r8, r1
 8005982:	9201      	str	r2, [sp, #4]
 8005984:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005986:	4604      	mov	r4, r0
 8005988:	b940      	cbnz	r0, 800599c <xQueueGenericSend+0x20>
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	e7fe      	b.n	800599a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599c:	b951      	cbnz	r1, 80059b4 <xQueueGenericSend+0x38>
 800599e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059a0:	b143      	cbz	r3, 80059b4 <xQueueGenericSend+0x38>
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	e7fe      	b.n	80059b2 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059b4:	2f02      	cmp	r7, #2
 80059b6:	d10b      	bne.n	80059d0 <xQueueGenericSend+0x54>
 80059b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d008      	beq.n	80059d0 <xQueueGenericSend+0x54>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	e7fe      	b.n	80059ce <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d0:	f000 fec2 	bl	8006758 <xTaskGetSchedulerState>
 80059d4:	b950      	cbnz	r0, 80059ec <xQueueGenericSend+0x70>
 80059d6:	9e01      	ldr	r6, [sp, #4]
 80059d8:	b14e      	cbz	r6, 80059ee <xQueueGenericSend+0x72>
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	e7fe      	b.n	80059ea <xQueueGenericSend+0x6e>
 80059ec:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80059ee:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80059f2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8005adc <xQueueGenericSend+0x160>
 80059f6:	e037      	b.n	8005a68 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f8:	9d01      	ldr	r5, [sp, #4]
 80059fa:	b91d      	cbnz	r5, 8005a04 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80059fc:	f7ff fd4c 	bl	8005498 <vPortExitCritical>
			return errQUEUE_FULL;
 8005a00:	2000      	movs	r0, #0
 8005a02:	e050      	b.n	8005aa6 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8005a04:	b916      	cbnz	r6, 8005a0c <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a06:	a802      	add	r0, sp, #8
 8005a08:	f000 fe54 	bl	80066b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005a0c:	f7ff fd44 	bl	8005498 <vPortExitCritical>
		vTaskSuspendAll();
 8005a10:	f000 fc84 	bl	800631c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a14:	f7ff fd1e 	bl	8005454 <vPortEnterCritical>
 8005a18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a1c:	2bff      	cmp	r3, #255	; 0xff
 8005a1e:	bf08      	it	eq
 8005a20:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8005a24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a28:	2bff      	cmp	r3, #255	; 0xff
 8005a2a:	bf08      	it	eq
 8005a2c:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8005a30:	f7ff fd32 	bl	8005498 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a34:	a901      	add	r1, sp, #4
 8005a36:	a802      	add	r0, sp, #8
 8005a38:	f000 fe46 	bl	80066c8 <xTaskCheckForTimeOut>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d146      	bne.n	8005ace <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a40:	f7ff fd08 	bl	8005454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d12f      	bne.n	8005aac <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005a4c:	f7ff fd24 	bl	8005498 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a50:	9901      	ldr	r1, [sp, #4]
 8005a52:	f104 0010 	add.w	r0, r4, #16
 8005a56:	f000 fdbd 	bl	80065d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f7ff fed3 	bl	8005806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a60:	f000 fcf0 	bl	8006444 <xTaskResumeAll>
 8005a64:	b350      	cbz	r0, 8005abc <xQueueGenericSend+0x140>
 8005a66:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005a68:	f7ff fcf4 	bl	8005454 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d301      	bcc.n	8005a78 <xQueueGenericSend+0xfc>
 8005a74:	2f02      	cmp	r7, #2
 8005a76:	d1bf      	bne.n	80059f8 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a78:	463a      	mov	r2, r7
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff fe7a 	bl	8005776 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a84:	b11b      	cbz	r3, 8005a8e <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a8a:	f000 fddb 	bl	8006644 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8005a8e:	b138      	cbz	r0, 8005aa0 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <xQueueGenericSend+0x160>)
 8005a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005aa0:	f7ff fcfa 	bl	8005498 <vPortExitCritical>
				return pdPASS;
 8005aa4:	2001      	movs	r0, #1
}
 8005aa6:	b004      	add	sp, #16
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8005aac:	f7ff fcf4 	bl	8005498 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff fea8 	bl	8005806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab6:	f000 fcc5 	bl	8006444 <xTaskResumeAll>
 8005aba:	e7d4      	b.n	8005a66 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8005abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ac0:	f8ca 3000 	str.w	r3, [sl]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	e7cb      	b.n	8005a66 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff fe99 	bl	8005806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad4:	f000 fcb6 	bl	8006444 <xTaskResumeAll>
 8005ad8:	e792      	b.n	8005a00 <xQueueGenericSend+0x84>
 8005ada:	bf00      	nop
 8005adc:	e000ed04 	.word	0xe000ed04

08005ae0 <xQueueCreateMutex>:
	{
 8005ae0:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f7ff ff06 	bl	80058f8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8005aec:	4604      	mov	r4, r0
 8005aee:	b138      	cbz	r0, 8005b00 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005af4:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005af6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005af8:	461a      	mov	r2, r3
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7ff ff3e 	bl	800597c <xQueueGenericSend>
	}
 8005b00:	4620      	mov	r0, r4
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <xQueueGenericSendFromISR>:
{
 8005b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b08:	4689      	mov	r9, r1
 8005b0a:	4690      	mov	r8, r2
 8005b0c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005b0e:	4604      	mov	r4, r0
 8005b10:	b940      	cbnz	r0, 8005b24 <xQueueGenericSendFromISR+0x20>
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	e7fe      	b.n	8005b22 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b24:	b951      	cbnz	r1, 8005b3c <xQueueGenericSendFromISR+0x38>
 8005b26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b28:	b143      	cbz	r3, 8005b3c <xQueueGenericSendFromISR+0x38>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	e7fe      	b.n	8005b3a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b3c:	2f02      	cmp	r7, #2
 8005b3e:	d10b      	bne.n	8005b58 <xQueueGenericSendFromISR+0x54>
 8005b40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d008      	beq.n	8005b58 <xQueueGenericSendFromISR+0x54>
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	e7fe      	b.n	8005b56 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b58:	f7ff fd96 	bl	8005688 <vPortValidateInterruptPriority>
	__asm volatile
 8005b5c:	f3ef 8611 	mrs	r6, BASEPRI
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d301      	bcc.n	8005b7c <xQueueGenericSendFromISR+0x78>
 8005b78:	2f02      	cmp	r7, #2
 8005b7a:	d122      	bne.n	8005bc2 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b7c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b80:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b82:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b84:	4649      	mov	r1, r9
 8005b86:	4620      	mov	r0, r4
 8005b88:	f7ff fdf5 	bl	8005776 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005b8c:	1c6b      	adds	r3, r5, #1
 8005b8e:	d113      	bne.n	8005bb8 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b92:	b90b      	cbnz	r3, 8005b98 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8005b94:	2001      	movs	r0, #1
 8005b96:	e00b      	b.n	8005bb0 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b9c:	f000 fd52 	bl	8006644 <xTaskRemoveFromEventList>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d0f7      	beq.n	8005b94 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	d0f4      	beq.n	8005b94 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005baa:	2001      	movs	r0, #1
 8005bac:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8005bb0:	f386 8811 	msr	BASEPRI, r6
}
 8005bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bb8:	3501      	adds	r5, #1
 8005bba:	b26d      	sxtb	r5, r5
 8005bbc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8005bc0:	e7e8      	b.n	8005b94 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e7f4      	b.n	8005bb0 <xQueueGenericSendFromISR+0xac>

08005bc6 <xQueueGiveFromISR>:
{
 8005bc6:	b570      	push	{r4, r5, r6, lr}
 8005bc8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005bca:	4604      	mov	r4, r0
 8005bcc:	b940      	cbnz	r0, 8005be0 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	e7fe      	b.n	8005bde <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005be0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005be2:	b143      	cbz	r3, 8005bf6 <xQueueGiveFromISR+0x30>
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005bf6:	6803      	ldr	r3, [r0, #0]
 8005bf8:	b953      	cbnz	r3, 8005c10 <xQueueGiveFromISR+0x4a>
 8005bfa:	6883      	ldr	r3, [r0, #8]
 8005bfc:	b143      	cbz	r3, 8005c10 <xQueueGiveFromISR+0x4a>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	e7fe      	b.n	8005c0e <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c10:	f7ff fd3a 	bl	8005688 <vPortValidateInterruptPriority>
	__asm volatile
 8005c14:	f3ef 8611 	mrs	r6, BASEPRI
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d91c      	bls.n	8005c6a <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c34:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c36:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c38:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	d110      	bne.n	8005c60 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c40:	b90b      	cbnz	r3, 8005c46 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8005c42:	2001      	movs	r0, #1
 8005c44:	e009      	b.n	8005c5a <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c4a:	f000 fcfb 	bl	8006644 <xTaskRemoveFromEventList>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d0f7      	beq.n	8005c42 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8005c52:	2d00      	cmp	r5, #0
 8005c54:	d0f5      	beq.n	8005c42 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c56:	2001      	movs	r0, #1
 8005c58:	6028      	str	r0, [r5, #0]
	__asm volatile
 8005c5a:	f386 8811 	msr	BASEPRI, r6
}
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c60:	3301      	adds	r3, #1
 8005c62:	b25b      	sxtb	r3, r3
 8005c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c68:	e7eb      	b.n	8005c42 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e7f5      	b.n	8005c5a <xQueueGiveFromISR+0x94>
	...

08005c70 <xQueueReceive>:
{
 8005c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c74:	b085      	sub	sp, #20
 8005c76:	460f      	mov	r7, r1
 8005c78:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	b940      	cbnz	r0, 8005c90 <xQueueReceive+0x20>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	e7fe      	b.n	8005c8e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c90:	b951      	cbnz	r1, 8005ca8 <xQueueReceive+0x38>
 8005c92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c94:	b143      	cbz	r3, 8005ca8 <xQueueReceive+0x38>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca8:	f000 fd56 	bl	8006758 <xTaskGetSchedulerState>
 8005cac:	b950      	cbnz	r0, 8005cc4 <xQueueReceive+0x54>
 8005cae:	9e01      	ldr	r6, [sp, #4]
 8005cb0:	b14e      	cbz	r6, 8005cc6 <xQueueReceive+0x56>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueReceive+0x52>
 8005cc4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005cc6:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8005cca:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8005dac <xQueueReceive+0x13c>
 8005cce:	e03b      	b.n	8005d48 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd0:	9d01      	ldr	r5, [sp, #4]
 8005cd2:	b91d      	cbnz	r5, 8005cdc <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8005cd4:	f7ff fbe0 	bl	8005498 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e052      	b.n	8005d82 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 8005cdc:	b916      	cbnz	r6, 8005ce4 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cde:	a802      	add	r0, sp, #8
 8005ce0:	f000 fce8 	bl	80066b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005ce4:	f7ff fbd8 	bl	8005498 <vPortExitCritical>
		vTaskSuspendAll();
 8005ce8:	f000 fb18 	bl	800631c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cec:	f7ff fbb2 	bl	8005454 <vPortEnterCritical>
 8005cf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005cf4:	2bff      	cmp	r3, #255	; 0xff
 8005cf6:	bf08      	it	eq
 8005cf8:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005cfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d00:	2bff      	cmp	r3, #255	; 0xff
 8005d02:	bf08      	it	eq
 8005d04:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005d08:	f7ff fbc6 	bl	8005498 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d0c:	a901      	add	r1, sp, #4
 8005d0e:	a802      	add	r0, sp, #8
 8005d10:	f000 fcda 	bl	80066c8 <xTaskCheckForTimeOut>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d13d      	bne.n	8005d94 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f7ff fd21 	bl	8005760 <prvIsQueueEmpty>
 8005d1e:	b398      	cbz	r0, 8005d88 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d20:	9901      	ldr	r1, [sp, #4]
 8005d22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d26:	f000 fc55 	bl	80065d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fd6b 	bl	8005806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d30:	f000 fb88 	bl	8006444 <xTaskResumeAll>
 8005d34:	b938      	cbnz	r0, 8005d46 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8005d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d3a:	f8c9 3000 	str.w	r3, [r9]
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005d48:	f7ff fb84 	bl	8005454 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	d0be      	beq.n	8005cd0 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d52:	4639      	mov	r1, r7
 8005d54:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d56:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d58:	f7ff fd40 	bl	80057dc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d5c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	b163      	cbz	r3, 8005d7c <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d62:	f104 0010 	add.w	r0, r4, #16
 8005d66:	f000 fc6d 	bl	8006644 <xTaskRemoveFromEventList>
 8005d6a:	b138      	cbz	r0, 8005d7c <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <xQueueReceive+0x13c>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005d7c:	f7ff fb8c 	bl	8005498 <vPortExitCritical>
				return pdPASS;
 8005d80:	2001      	movs	r0, #1
}
 8005d82:	b005      	add	sp, #20
 8005d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff fd3c 	bl	8005806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d8e:	f000 fb59 	bl	8006444 <xTaskResumeAll>
 8005d92:	e7d8      	b.n	8005d46 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8005d94:	4620      	mov	r0, r4
 8005d96:	f7ff fd36 	bl	8005806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d9a:	f000 fb53 	bl	8006444 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff fcde 	bl	8005760 <prvIsQueueEmpty>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d0ce      	beq.n	8005d46 <xQueueReceive+0xd6>
 8005da8:	e796      	b.n	8005cd8 <xQueueReceive+0x68>
 8005daa:	bf00      	nop
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <xQueueSemaphoreTake>:
{
 8005db0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8005db4:	4604      	mov	r4, r0
{
 8005db6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005db8:	b940      	cbnz	r0, 8005dcc <xQueueSemaphoreTake+0x1c>
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	e7fe      	b.n	8005dca <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005dcc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005dce:	b145      	cbz	r5, 8005de2 <xQueueSemaphoreTake+0x32>
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	e7fe      	b.n	8005de0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005de2:	f000 fcb9 	bl	8006758 <xTaskGetSchedulerState>
 8005de6:	b950      	cbnz	r0, 8005dfe <xQueueSemaphoreTake+0x4e>
 8005de8:	9d01      	ldr	r5, [sp, #4]
 8005dea:	b145      	cbz	r5, 8005dfe <xQueueSemaphoreTake+0x4e>
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	e7fe      	b.n	8005dfc <xQueueSemaphoreTake+0x4c>
 8005dfe:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005e00:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8005e02:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8005f30 <xQueueSemaphoreTake+0x180>
 8005e06:	e04f      	b.n	8005ea8 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e08:	9b01      	ldr	r3, [sp, #4]
 8005e0a:	b963      	cbnz	r3, 8005e26 <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e0c:	b145      	cbz	r5, 8005e20 <xQueueSemaphoreTake+0x70>
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	e7fe      	b.n	8005e1e <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 8005e20:	f7ff fb3a 	bl	8005498 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005e24:	e05e      	b.n	8005ee4 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8005e26:	b916      	cbnz	r6, 8005e2e <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e28:	a802      	add	r0, sp, #8
 8005e2a:	f000 fc43 	bl	80066b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005e2e:	f7ff fb33 	bl	8005498 <vPortExitCritical>
		vTaskSuspendAll();
 8005e32:	f000 fa73 	bl	800631c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e36:	f7ff fb0d 	bl	8005454 <vPortEnterCritical>
 8005e3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e3e:	2bff      	cmp	r3, #255	; 0xff
 8005e40:	bf08      	it	eq
 8005e42:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005e46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e4a:	2bff      	cmp	r3, #255	; 0xff
 8005e4c:	bf08      	it	eq
 8005e4e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005e52:	f7ff fb21 	bl	8005498 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e56:	a901      	add	r1, sp, #4
 8005e58:	a802      	add	r0, sp, #8
 8005e5a:	f000 fc35 	bl	80066c8 <xTaskCheckForTimeOut>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d14a      	bne.n	8005ef8 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff fc7c 	bl	8005760 <prvIsQueueEmpty>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d03f      	beq.n	8005eec <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	b93b      	cbnz	r3, 8005e80 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8005e70:	f7ff faf0 	bl	8005454 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e74:	68a0      	ldr	r0, [r4, #8]
 8005e76:	f000 fc7f 	bl	8006778 <xTaskPriorityInherit>
 8005e7a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005e7c:	f7ff fb0c 	bl	8005498 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e80:	9901      	ldr	r1, [sp, #4]
 8005e82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e86:	f000 fba5 	bl	80065d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fcbb 	bl	8005806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e90:	f000 fad8 	bl	8006444 <xTaskResumeAll>
 8005e94:	b938      	cbnz	r0, 8005ea6 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8005e96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e9a:	f8c8 3000 	str.w	r3, [r8]
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005ea8:	f7ff fad4 	bl	8005454 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0aa      	beq.n	8005e08 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	b913      	cbnz	r3, 8005ec0 <xQueueSemaphoreTake+0x110>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005eba:	f000 fd57 	bl	800696c <pvTaskIncrementMutexHeldCount>
 8005ebe:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	b163      	cbz	r3, 8005ede <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec4:	f104 0010 	add.w	r0, r4, #16
 8005ec8:	f000 fbbc 	bl	8006644 <xTaskRemoveFromEventList>
 8005ecc:	b138      	cbz	r0, 8005ede <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8005ece:	4b18      	ldr	r3, [pc, #96]	; (8005f30 <xQueueSemaphoreTake+0x180>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005ede:	f7ff fadb 	bl	8005498 <vPortExitCritical>
				return pdPASS;
 8005ee2:	2501      	movs	r5, #1
}
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	b004      	add	sp, #16
 8005ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8005eec:	4620      	mov	r0, r4
 8005eee:	f7ff fc8a 	bl	8005806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ef2:	f000 faa7 	bl	8006444 <xTaskResumeAll>
 8005ef6:	e7d6      	b.n	8005ea6 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff fc84 	bl	8005806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005efe:	f000 faa1 	bl	8006444 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff fc2c 	bl	8005760 <prvIsQueueEmpty>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d0cc      	beq.n	8005ea6 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	d0e9      	beq.n	8005ee4 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8005f10:	f7ff faa0 	bl	8005454 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f16:	b119      	cbz	r1, 8005f20 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	f1c1 010c 	rsb	r1, r1, #12
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f20:	68a0      	ldr	r0, [r4, #8]
 8005f22:	f000 fcc7 	bl	80068b4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8005f26:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8005f28:	f7ff fab6 	bl	8005498 <vPortExitCritical>
 8005f2c:	e7da      	b.n	8005ee4 <xQueueSemaphoreTake+0x134>
 8005f2e:	bf00      	nop
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xQueueReceiveFromISR>:
{
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f38:	4689      	mov	r9, r1
 8005f3a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	b940      	cbnz	r0, 8005f52 <xQueueReceiveFromISR+0x1e>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	e7fe      	b.n	8005f50 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f52:	b951      	cbnz	r1, 8005f6a <xQueueReceiveFromISR+0x36>
 8005f54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f56:	b143      	cbz	r3, 8005f6a <xQueueReceiveFromISR+0x36>
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	e7fe      	b.n	8005f68 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f6a:	f7ff fb8d 	bl	8005688 <vPortValidateInterruptPriority>
	__asm volatile
 8005f6e:	f3ef 8711 	mrs	r7, BASEPRI
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f82:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f84:	b31c      	cbz	r4, 8005fce <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f86:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f8a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f8c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7ff fc24 	bl	80057dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f94:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8005f96:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f98:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005f9a:	d113      	bne.n	8005fc4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f9c:	692b      	ldr	r3, [r5, #16]
 8005f9e:	b90b      	cbnz	r3, 8005fa4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	e00b      	b.n	8005fbc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fa4:	f105 0010 	add.w	r0, r5, #16
 8005fa8:	f000 fb4c 	bl	8006644 <xTaskRemoveFromEventList>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0f7      	beq.n	8005fa0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	d0f4      	beq.n	8005fa0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8005fbc:	f387 8811 	msr	BASEPRI, r7
}
 8005fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	b276      	sxtb	r6, r6
 8005fc8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8005fcc:	e7e8      	b.n	8005fa0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8005fce:	4620      	mov	r0, r4
 8005fd0:	e7f4      	b.n	8005fbc <xQueueReceiveFromISR+0x88>
	...

08005fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fd4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fda:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8005fde:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8005fe2:	b91d      	cbnz	r5, 8005fec <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fe8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fea:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fec:	3301      	adds	r3, #1
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d1f3      	bne.n	8005fda <vQueueAddToRegistry+0x6>
 8005ff2:	e7fa      	b.n	8005fea <vQueueAddToRegistry+0x16>
 8005ff4:	2000833c 	.word	0x2000833c

08005ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006000:	f7ff fa28 	bl	8005454 <vPortEnterCritical>
 8006004:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006008:	2bff      	cmp	r3, #255	; 0xff
 800600a:	bf04      	itt	eq
 800600c:	2300      	moveq	r3, #0
 800600e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8006012:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006016:	2bff      	cmp	r3, #255	; 0xff
 8006018:	bf04      	itt	eq
 800601a:	2300      	moveq	r3, #0
 800601c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8006020:	f7ff fa3a 	bl	8005498 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006026:	b92b      	cbnz	r3, 8006034 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006028:	4632      	mov	r2, r6
 800602a:	4629      	mov	r1, r5
 800602c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006030:	f000 faea 	bl	8006608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006034:	4620      	mov	r0, r4
	}
 8006036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800603a:	f7ff bbe4 	b.w	8005806 <prvUnlockQueue>
	...

08006040 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <prvResetNextTaskUnblockTime+0x1c>)
 8006042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	b91a      	cbnz	r2, 8006050 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800604e:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006052:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006054:	68d2      	ldr	r2, [r2, #12]
 8006056:	6852      	ldr	r2, [r2, #4]
 8006058:	e7f8      	b.n	800604c <prvResetNextTaskUnblockTime+0xc>
 800605a:	bf00      	nop
 800605c:	2000032c 	.word	0x2000032c

08006060 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006062:	4c18      	ldr	r4, [pc, #96]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x64>)
{
 8006064:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8006066:	6b25      	ldr	r5, [r4, #48]	; 0x30
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006068:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800606a:	3004      	adds	r0, #4
{
 800606c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800606e:	f7ff fb66 	bl	800573e <uxListRemove>
 8006072:	b938      	cbnz	r0, 8006084 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006074:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006076:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006078:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800607a:	2201      	movs	r2, #1
 800607c:	408a      	lsls	r2, r1
 800607e:	ea23 0302 	bic.w	r3, r3, r2
 8006082:	63a3      	str	r3, [r4, #56]	; 0x38
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006084:	1c73      	adds	r3, r6, #1
 8006086:	d107      	bne.n	8006098 <prvAddCurrentTaskToDelayedList+0x38>
 8006088:	b137      	cbz	r7, 8006098 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800608c:	480d      	ldr	r0, [pc, #52]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x64>)
 800608e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006094:	f7ff bb30 	b.w	80056f8 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800609a:	19ad      	adds	r5, r5, r6
 800609c:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800609e:	d306      	bcc.n	80060ae <prvAddCurrentTaskToDelayedList+0x4e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80060a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 80060a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a8:	3104      	adds	r1, #4
 80060aa:	f7ff bb31 	b.w	8005710 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80060b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b2:	3104      	adds	r1, #4
 80060b4:	f7ff fb2c 	bl	8005710 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060ba:	42ab      	cmp	r3, r5
					xNextTaskUnblockTime = xTimeToWake;
 80060bc:	bf88      	it	hi
 80060be:	62e5      	strhi	r5, [r4, #44]	; 0x2c
}
 80060c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000032c 	.word	0x2000032c

080060c8 <prvIdleTask>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c8:	4c13      	ldr	r4, [pc, #76]	; (8006118 <prvIdleTask+0x50>)
				taskYIELD();
 80060ca:	4e14      	ldr	r6, [pc, #80]	; (800611c <prvIdleTask+0x54>)
{
 80060cc:	b580      	push	{r7, lr}
				taskYIELD();
 80060ce:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060d4:	b953      	cbnz	r3, 80060ec <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d904      	bls.n	80060e6 <prvIdleTask+0x1e>
				taskYIELD();
 80060dc:	6037      	str	r7, [r6, #0]
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80060e6:	f7fa fc75 	bl	80009d4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80060ea:	e7f2      	b.n	80060d2 <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 80060ec:	f7ff f9b2 	bl	8005454 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060f2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f4:	1d28      	adds	r0, r5, #4
 80060f6:	f7ff fb22 	bl	800573e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060fc:	3b01      	subs	r3, #1
 80060fe:	6563      	str	r3, [r4, #84]	; 0x54
				--uxDeletedTasksWaitingCleanUp;
 8006100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006102:	3b01      	subs	r3, #1
 8006104:	65a3      	str	r3, [r4, #88]	; 0x58
			taskEXIT_CRITICAL();
 8006106:	f7ff f9c7 	bl	8005498 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800610a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800610c:	f7ff f908 	bl	8005320 <vPortFree>
			vPortFree( pxTCB );
 8006110:	4628      	mov	r0, r5
 8006112:	f7ff f905 	bl	8005320 <vPortFree>
 8006116:	e7dc      	b.n	80060d2 <prvIdleTask+0xa>
 8006118:	2000032c 	.word	0x2000032c
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <xTaskCreate>:
	{
 8006120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006124:	0095      	lsls	r5, r2, #2
	{
 8006126:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006128:	4628      	mov	r0, r5
	{
 800612a:	460f      	mov	r7, r1
 800612c:	4699      	mov	r9, r3
 800612e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006130:	f7ff f876 	bl	8005220 <pvPortMalloc>
			if( pxStack != NULL )
 8006134:	4682      	mov	sl, r0
 8006136:	b1b8      	cbz	r0, 8006168 <xTaskCreate+0x48>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006138:	205c      	movs	r0, #92	; 0x5c
 800613a:	f7ff f871 	bl	8005220 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800613e:	4604      	mov	r4, r0
 8006140:	b178      	cbz	r0, 8006162 <xTaskCreate+0x42>
					pxNewTCB->pxStack = pxStack;
 8006142:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006146:	462a      	mov	r2, r5
 8006148:	4650      	mov	r0, sl
 800614a:	21a5      	movs	r1, #165	; 0xa5
 800614c:	f00e fec3 	bl	8014ed6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006150:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006152:	3d04      	subs	r5, #4
 8006154:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006156:	f025 0a07 	bic.w	sl, r5, #7
	if( pcName != NULL )
 800615a:	b947      	cbnz	r7, 800616e <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800615c:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8006160:	e014      	b.n	800618c <xTaskCreate+0x6c>
					vPortFree( pxStack );
 8006162:	4650      	mov	r0, sl
 8006164:	f7ff f8dc 	bl	8005320 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006168:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800616c:	e086      	b.n	800627c <xTaskCreate+0x15c>
 800616e:	1e7b      	subs	r3, r7, #1
 8006170:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006174:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006176:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800617a:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800617e:	7819      	ldrb	r1, [r3, #0]
 8006180:	b109      	cbz	r1, 8006186 <xTaskCreate+0x66>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006182:	42bb      	cmp	r3, r7
 8006184:	d1f7      	bne.n	8006176 <xTaskCreate+0x56>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006186:	2300      	movs	r3, #0
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800618c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800618e:	2d0b      	cmp	r5, #11
 8006190:	bf28      	it	cs
 8006192:	250b      	movcs	r5, #11
		pxNewTCB->uxMutexesHeld = 0;
 8006194:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006198:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800619a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800619c:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800619e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 80061a0:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061a4:	f7ff faa5 	bl	80056f2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a8:	f1c5 050c 	rsb	r5, r5, #12
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061ac:	f104 0018 	add.w	r0, r4, #24
 80061b0:	f7ff fa9f 	bl	80056f2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80061b4:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061b8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ba:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061bc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061be:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061c2:	464a      	mov	r2, r9
 80061c4:	4641      	mov	r1, r8
 80061c6:	4650      	mov	r0, sl
 80061c8:	f7ff f91c 	bl	8005404 <pxPortInitialiseStack>
 80061cc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80061ce:	b106      	cbz	r6, 80061d2 <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061d0:	6034      	str	r4, [r6, #0]
		uxCurrentNumberOfTasks++;
 80061d2:	4d31      	ldr	r5, [pc, #196]	; (8006298 <xTaskCreate+0x178>)
	taskENTER_CRITICAL();
 80061d4:	f7ff f93e 	bl	8005454 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80061d8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80061da:	3301      	adds	r3, #1
 80061dc:	656b      	str	r3, [r5, #84]	; 0x54
		if( pxCurrentTCB == NULL )
 80061de:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80061e0:	f105 085c 	add.w	r8, r5, #92	; 0x5c
 80061e4:	2e00      	cmp	r6, #0
 80061e6:	d14c      	bne.n	8006282 <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 80061e8:	636c      	str	r4, [r5, #52]	; 0x34
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d120      	bne.n	8006232 <xTaskCreate+0x112>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f0:	f04f 0914 	mov.w	r9, #20
 80061f4:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f8:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061fa:	f7ff fa6f 	bl	80056dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061fe:	2e0c      	cmp	r6, #12
 8006200:	d1f8      	bne.n	80061f4 <xTaskCreate+0xd4>
	vListInitialise( &xDelayedTaskList1 );
 8006202:	4e26      	ldr	r6, [pc, #152]	; (800629c <xTaskCreate+0x17c>)
 8006204:	4630      	mov	r0, r6
	vListInitialise( &xDelayedTaskList2 );
 8006206:	f106 0914 	add.w	r9, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 800620a:	f7ff fa67 	bl	80056dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800620e:	4648      	mov	r0, r9
 8006210:	f7ff fa64 	bl	80056dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006214:	f5a6 709c 	sub.w	r0, r6, #312	; 0x138
 8006218:	f7ff fa60 	bl	80056dc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800621c:	f5a6 7086 	sub.w	r0, r6, #268	; 0x10c
 8006220:	f7ff fa5c 	bl	80056dc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006224:	f5a6 70a6 	sub.w	r0, r6, #332	; 0x14c
 8006228:	f7ff fa58 	bl	80056dc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800622c:	62ae      	str	r6, [r5, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800622e:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
		uxTaskNumber++;
 8006232:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
		prvAddTaskToReadyList( pxNewTCB );
 8006236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006238:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		uxTaskNumber++;
 800623a:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800623c:	2601      	movs	r6, #1
		uxTaskNumber++;
 800623e:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006242:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006244:	2014      	movs	r0, #20
 8006246:	fa06 f302 	lsl.w	r3, r6, r2
 800624a:	430b      	orrs	r3, r1
 800624c:	fb00 8002 	mla	r0, r0, r2, r8
 8006250:	4639      	mov	r1, r7
 8006252:	63ab      	str	r3, [r5, #56]	; 0x38
 8006254:	f7ff fa50 	bl	80056f8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006258:	f7ff f91e 	bl	8005498 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800625c:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
 8006260:	b163      	cbz	r3, 800627c <xTaskCreate+0x15c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006262:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d207      	bcs.n	800627c <xTaskCreate+0x15c>
			taskYIELD_IF_USING_PREEMPTION();
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <xTaskCreate+0x180>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
	}
 800627c:	4630      	mov	r0, r6
 800627e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8006282:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d3      	bne.n	8006232 <xTaskCreate+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800628a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800628c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006292:	bf28      	it	cs
 8006294:	636c      	strcs	r4, [r5, #52]	; 0x34
 8006296:	e7cc      	b.n	8006232 <xTaskCreate+0x112>
 8006298:	2000032c 	.word	0x2000032c
 800629c:	20000478 	.word	0x20000478
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <vTaskStartScheduler>:
{
 80062a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80062a6:	4c1a      	ldr	r4, [pc, #104]	; (8006310 <vTaskStartScheduler+0x6c>)
 80062a8:	491a      	ldr	r1, [pc, #104]	; (8006314 <vTaskStartScheduler+0x70>)
 80062aa:	481b      	ldr	r0, [pc, #108]	; (8006318 <vTaskStartScheduler+0x74>)
 80062ac:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 80062b0:	2500      	movs	r5, #0
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	9500      	str	r5, [sp, #0]
 80062b6:	462b      	mov	r3, r5
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	f7ff ff31 	bl	8006120 <xTaskCreate>
		if( xReturn == pdPASS )
 80062be:	2801      	cmp	r0, #1
 80062c0:	d118      	bne.n	80062f4 <vTaskStartScheduler+0x50>
			xReturn = xTimerCreateTimerTask();
 80062c2:	f000 fb9f 	bl	8006a04 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80062c6:	2801      	cmp	r0, #1
 80062c8:	d114      	bne.n	80062f4 <vTaskStartScheduler+0x50>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80062da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062de:	62e3      	str	r3, [r4, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80062e0:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062e4:	6325      	str	r5, [r4, #48]	; 0x30
		traceTASK_SWITCHED_IN();
 80062e6:	f7fa fba1 	bl	8000a2c <StartIdleMonitor>
}
 80062ea:	b003      	add	sp, #12
 80062ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80062f0:	f7ff b948 	b.w	8005584 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062f4:	3001      	adds	r0, #1
 80062f6:	d108      	bne.n	800630a <vTaskStartScheduler+0x66>
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	e7fe      	b.n	8006308 <vTaskStartScheduler+0x64>
}
 800630a:	b003      	add	sp, #12
 800630c:	bd30      	pop	{r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	2000032c 	.word	0x2000032c
 8006314:	0801a601 	.word	0x0801a601
 8006318:	080060c9 	.word	0x080060c9

0800631c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800631c:	4a03      	ldr	r2, [pc, #12]	; (800632c <vTaskSuspendAll+0x10>)
 800631e:	f8d2 317c 	ldr.w	r3, [r2, #380]	; 0x17c
 8006322:	3301      	adds	r3, #1
 8006324:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	2000032c 	.word	0x2000032c

08006330 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006330:	4b01      	ldr	r3, [pc, #4]	; (8006338 <xTaskGetTickCount+0x8>)
 8006332:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	2000032c 	.word	0x2000032c

0800633c <xTaskGetTickCountFromISR>:
{
 800633c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800633e:	f7ff f9a3 	bl	8005688 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8006342:	4b01      	ldr	r3, [pc, #4]	; (8006348 <xTaskGetTickCountFromISR+0xc>)
 8006344:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8006346:	bd08      	pop	{r3, pc}
 8006348:	2000032c 	.word	0x2000032c

0800634c <xTaskIncrementTick>:
{
 800634c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006350:	4b3a      	ldr	r3, [pc, #232]	; (800643c <xTaskIncrementTick+0xf0>)
 8006352:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006356:	461c      	mov	r4, r3
 8006358:	2a00      	cmp	r2, #0
 800635a:	d165      	bne.n	8006428 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800635c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800635e:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8006360:	631f      	str	r7, [r3, #48]	; 0x30
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006362:	b9b7      	cbnz	r7, 8006392 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b143      	cbz	r3, 800637c <xTaskIncrementTick+0x30>
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	e7fe      	b.n	800637a <xTaskIncrementTick+0x2e>
 800637c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800637e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006380:	62a2      	str	r2, [r4, #40]	; 0x28
 8006382:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006384:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
 8006388:	3301      	adds	r3, #1
 800638a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 800638e:	f7ff fe57 	bl	8006040 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006394:	42bb      	cmp	r3, r7
BaseType_t xSwitchRequired = pdFALSE;
 8006396:	f04f 0500 	mov.w	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800639a:	d915      	bls.n	80063c8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800639c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	2214      	movs	r2, #20
 80063a2:	fb02 4303 	mla	r3, r2, r3, r4
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				xSwitchRequired = pdTRUE;
 80063a8:	2b02      	cmp	r3, #2
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80063aa:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				xSwitchRequired = pdTRUE;
 80063ae:	bf28      	it	cs
 80063b0:	2501      	movcs	r5, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80063b2:	b90b      	cbnz	r3, 80063b8 <xTaskIncrementTick+0x6c>
				vApplicationTickHook();
 80063b4:	f7fa fb18 	bl	80009e8 <vApplicationTickHook>
		if( xYieldPending != pdFALSE )
 80063b8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
			xSwitchRequired = pdTRUE;
 80063bc:	2b00      	cmp	r3, #0
}
 80063be:	bf0c      	ite	eq
 80063c0:	4628      	moveq	r0, r5
 80063c2:	2001      	movne	r0, #1
 80063c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 80063c8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8006440 <xTaskIncrementTick+0xf4>
 80063cc:	f04f 0b01 	mov.w	fp, #1
 80063d0:	f04f 0a14 	mov.w	sl, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	b91b      	cbnz	r3, 80063e2 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
						xNextTaskUnblockTime = xItemValue;
 80063de:	62e3      	str	r3, [r4, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063e0:	e7dc      	b.n	800639c <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063e8:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80063ea:	429f      	cmp	r7, r3
 80063ec:	d3f7      	bcc.n	80063de <xTaskIncrementTick+0x92>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ee:	f106 0804 	add.w	r8, r6, #4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff f9a3 	bl	800573e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80063fa:	b11b      	cbz	r3, 8006404 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fc:	f106 0018 	add.w	r0, r6, #24
 8006400:	f7ff f99d 	bl	800573e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006404:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006406:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006408:	fa0b f300 	lsl.w	r3, fp, r0
 800640c:	4313      	orrs	r3, r2
 800640e:	4641      	mov	r1, r8
 8006410:	fb0a 9000 	mla	r0, sl, r0, r9
 8006414:	63a3      	str	r3, [r4, #56]	; 0x38
 8006416:	f7ff f96f 	bl	80056f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800641a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800641c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006420:	429a      	cmp	r2, r3
 8006422:	bf28      	it	cs
 8006424:	2501      	movcs	r5, #1
 8006426:	e7d5      	b.n	80063d4 <xTaskIncrementTick+0x88>
		++uxPendedTicks;
 8006428:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800642c:	3301      	adds	r3, #1
 800642e:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
BaseType_t xSwitchRequired = pdFALSE;
 8006432:	2500      	movs	r5, #0
			vApplicationTickHook();
 8006434:	f7fa fad8 	bl	80009e8 <vApplicationTickHook>
 8006438:	e7be      	b.n	80063b8 <xTaskIncrementTick+0x6c>
 800643a:	bf00      	nop
 800643c:	2000032c 	.word	0x2000032c
 8006440:	20000388 	.word	0x20000388

08006444 <xTaskResumeAll>:
{
 8006444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8006448:	4c31      	ldr	r4, [pc, #196]	; (8006510 <xTaskResumeAll+0xcc>)
 800644a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800644e:	b943      	cbnz	r3, 8006462 <xTaskResumeAll+0x1e>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	e7fe      	b.n	8006460 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8006462:	f7fe fff7 	bl	8005454 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800646a:	3b01      	subs	r3, #1
 800646c:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006470:	f8d4 517c 	ldr.w	r5, [r4, #380]	; 0x17c
 8006474:	b12d      	cbz	r5, 8006482 <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 8006476:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006478:	f7ff f80e 	bl	8005498 <vPortExitCritical>
}
 800647c:	4620      	mov	r0, r4
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006482:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f6      	beq.n	8006476 <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 8006488:	2601      	movs	r6, #1
 800648a:	f104 075c 	add.w	r7, r4, #92	; 0x5c
 800648e:	f04f 0814 	mov.w	r8, #20
 8006492:	e01c      	b.n	80064ce <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006494:	6a23      	ldr	r3, [r4, #32]
 8006496:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006498:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649c:	f105 0018 	add.w	r0, r5, #24
 80064a0:	f7ff f94d 	bl	800573e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a4:	4648      	mov	r0, r9
 80064a6:	f7ff f94a 	bl	800573e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064aa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80064ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80064ae:	fa06 f300 	lsl.w	r3, r6, r0
 80064b2:	4313      	orrs	r3, r2
 80064b4:	4649      	mov	r1, r9
 80064b6:	fb08 7000 	mla	r0, r8, r0, r7
 80064ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80064bc:	f7ff f91c 	bl	80056f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d301      	bcc.n	80064ce <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 80064ca:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ce:	6963      	ldr	r3, [r4, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1df      	bne.n	8006494 <xTaskResumeAll+0x50>
				if( pxTCB != NULL )
 80064d4:	b10d      	cbz	r5, 80064da <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 80064d6:	f7ff fdb3 	bl	8006040 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064da:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064de:	b14d      	cbz	r5, 80064f4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80064e0:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80064e2:	f7ff ff33 	bl	800634c <xTaskIncrementTick>
 80064e6:	b108      	cbz	r0, 80064ec <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80064e8:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064ec:	3d01      	subs	r5, #1
 80064ee:	d1f8      	bne.n	80064e2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80064f0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
				if( xYieldPending != pdFALSE )
 80064f4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0bc      	beq.n	8006476 <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <xTaskResumeAll+0xd0>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800650c:	2401      	movs	r4, #1
 800650e:	e7b3      	b.n	8006478 <xTaskResumeAll+0x34>
 8006510:	2000032c 	.word	0x2000032c
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskDelay>:
	{
 8006518:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800651a:	b940      	cbnz	r0, 800652e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <vTaskDelay+0x44>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
	}
 800652c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <vTaskDelay+0x48>)
 8006530:	f8d3 117c 	ldr.w	r1, [r3, #380]	; 0x17c
 8006534:	b141      	cbz	r1, 8006548 <vTaskDelay+0x30>
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	e7fe      	b.n	8006546 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006548:	f7ff fee8 	bl	800631c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800654c:	f7ff fd88 	bl	8006060 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006550:	f7ff ff78 	bl	8006444 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006554:	2800      	cmp	r0, #0
 8006556:	d0e1      	beq.n	800651c <vTaskDelay+0x4>
 8006558:	e7e8      	b.n	800652c <vTaskDelay+0x14>
 800655a:	bf00      	nop
 800655c:	e000ed04 	.word	0xe000ed04
 8006560:	2000032c 	.word	0x2000032c

08006564 <vTaskSwitchContext>:
{
 8006564:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006566:	4c1a      	ldr	r4, [pc, #104]	; (80065d0 <vTaskSwitchContext+0x6c>)
 8006568:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800656c:	4625      	mov	r5, r4
 800656e:	b11b      	cbz	r3, 8006578 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
}
 8006576:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 8006578:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
		traceTASK_SWITCHED_OUT();
 800657c:	f7fa fa64 	bl	8000a48 <EndIdleMonitor>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006582:	fab3 f383 	clz	r3, r3
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f1c3 031f 	rsb	r3, r3, #31
 800658c:	2214      	movs	r2, #20
 800658e:	435a      	muls	r2, r3
 8006590:	4414      	add	r4, r2
 8006592:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006594:	b941      	cbnz	r1, 80065a8 <vTaskSwitchContext+0x44>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	e7fe      	b.n	80065a6 <vTaskSwitchContext+0x42>
 80065a8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80065aa:	442a      	add	r2, r5
 80065ac:	6849      	ldr	r1, [r1, #4]
 80065ae:	6621      	str	r1, [r4, #96]	; 0x60
 80065b0:	3264      	adds	r2, #100	; 0x64
 80065b2:	4291      	cmp	r1, r2
 80065b4:	bf04      	itt	eq
 80065b6:	684a      	ldreq	r2, [r1, #4]
 80065b8:	6622      	streq	r2, [r4, #96]	; 0x60
 80065ba:	2214      	movs	r2, #20
 80065bc:	fb02 5303 	mla	r3, r2, r3, r5
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	636b      	str	r3, [r5, #52]	; 0x34
}
 80065c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		traceTASK_SWITCHED_IN();
 80065ca:	f7fa ba2f 	b.w	8000a2c <StartIdleMonitor>
 80065ce:	bf00      	nop
 80065d0:	2000032c 	.word	0x2000032c

080065d4 <vTaskPlaceOnEventList>:
{
 80065d4:	b510      	push	{r4, lr}
 80065d6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80065d8:	b940      	cbnz	r0, 80065ec <vTaskPlaceOnEventList+0x18>
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	e7fe      	b.n	80065ea <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <vTaskPlaceOnEventList+0x30>)
 80065ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80065f0:	3118      	adds	r1, #24
 80065f2:	f7ff f88d 	bl	8005710 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065f6:	4620      	mov	r0, r4
 80065f8:	2101      	movs	r1, #1
}
 80065fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065fe:	f7ff bd2f 	b.w	8006060 <prvAddCurrentTaskToDelayedList>
 8006602:	bf00      	nop
 8006604:	2000032c 	.word	0x2000032c

08006608 <vTaskPlaceOnEventListRestricted>:
	{
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	460d      	mov	r5, r1
 800660c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800660e:	b940      	cbnz	r0, 8006622 <vTaskPlaceOnEventListRestricted+0x1a>
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	e7fe      	b.n	8006620 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006622:	4b07      	ldr	r3, [pc, #28]	; (8006640 <vTaskPlaceOnEventListRestricted+0x38>)
 8006624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006626:	3118      	adds	r1, #24
 8006628:	f7ff f866 	bl	80056f8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800662c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800662e:	4621      	mov	r1, r4
 8006630:	bf0c      	ite	eq
 8006632:	4628      	moveq	r0, r5
 8006634:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}
 8006638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800663c:	f7ff bd10 	b.w	8006060 <prvAddCurrentTaskToDelayedList>
 8006640:	2000032c 	.word	0x2000032c

08006644 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006644:	68c3      	ldr	r3, [r0, #12]
{
 8006646:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006648:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800664a:	b945      	cbnz	r5, 800665e <xTaskRemoveFromEventList+0x1a>
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	e7fe      	b.n	800665c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800665e:	f105 0618 	add.w	r6, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006662:	4c13      	ldr	r4, [pc, #76]	; (80066b0 <xTaskRemoveFromEventList+0x6c>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff f86a 	bl	800573e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800666e:	b9db      	cbnz	r3, 80066a8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006670:	1d2e      	adds	r6, r5, #4
 8006672:	4630      	mov	r0, r6
 8006674:	f7ff f863 	bl	800573e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006678:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800667a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800667c:	2301      	movs	r3, #1
 800667e:	4093      	lsls	r3, r2
 8006680:	430b      	orrs	r3, r1
 8006682:	63a3      	str	r3, [r4, #56]	; 0x38
 8006684:	2014      	movs	r0, #20
 8006686:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800668a:	4631      	mov	r1, r6
 800668c:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006690:	f7ff f832 	bl	80056f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006696:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800669c:	bf86      	itte	hi
 800669e:	2001      	movhi	r0, #1
 80066a0:	f8c4 018c 	strhi.w	r0, [r4, #396]	; 0x18c
		xReturn = pdFALSE;
 80066a4:	2000      	movls	r0, #0
}
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066a8:	4631      	mov	r1, r6
 80066aa:	f104 0014 	add.w	r0, r4, #20
 80066ae:	e7ef      	b.n	8006690 <xTaskRemoveFromEventList+0x4c>
 80066b0:	2000032c 	.word	0x2000032c

080066b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b4:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <vTaskInternalSetTimeOutState+0x10>)
 80066b6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066bc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066be:	6043      	str	r3, [r0, #4]
}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000032c 	.word	0x2000032c

080066c8 <xTaskCheckForTimeOut>:
{
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80066cc:	4605      	mov	r5, r0
 80066ce:	b940      	cbnz	r0, 80066e2 <xTaskCheckForTimeOut+0x1a>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	e7fe      	b.n	80066e0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80066e2:	b941      	cbnz	r1, 80066f6 <xTaskCheckForTimeOut+0x2e>
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	e7fe      	b.n	80066f4 <xTaskCheckForTimeOut+0x2c>
		const TickType_t xConstTickCount = xTickCount;
 80066f6:	4e10      	ldr	r6, [pc, #64]	; (8006738 <xTaskCheckForTimeOut+0x70>)
	taskENTER_CRITICAL();
 80066f8:	f7fe feac 	bl	8005454 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80066fc:	6823      	ldr	r3, [r4, #0]
		const TickType_t xConstTickCount = xTickCount;
 80066fe:	6b31      	ldr	r1, [r6, #48]	; 0x30
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006700:	6868      	ldr	r0, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
 8006702:	1c5f      	adds	r7, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006704:	eba1 0200 	sub.w	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006708:	d00d      	beq.n	8006726 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800670a:	f8d6 6184 	ldr.w	r6, [r6, #388]	; 0x184
 800670e:	682f      	ldr	r7, [r5, #0]
 8006710:	42b7      	cmp	r7, r6
 8006712:	d001      	beq.n	8006718 <xTaskCheckForTimeOut+0x50>
 8006714:	4288      	cmp	r0, r1
 8006716:	d90d      	bls.n	8006734 <xTaskCheckForTimeOut+0x6c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006718:	4293      	cmp	r3, r2
 800671a:	d909      	bls.n	8006730 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006720:	4628      	mov	r0, r5
 8006722:	f7ff ffc7 	bl	80066b4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006726:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006728:	f7fe feb6 	bl	8005498 <vPortExitCritical>
}
 800672c:	4620      	mov	r0, r4
 800672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006734:	2401      	movs	r4, #1
 8006736:	e7f7      	b.n	8006728 <xTaskCheckForTimeOut+0x60>
 8006738:	2000032c 	.word	0x2000032c

0800673c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800673c:	4b02      	ldr	r3, [pc, #8]	; (8006748 <vTaskMissedYield+0xc>)
 800673e:	2201      	movs	r2, #1
 8006740:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
}
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	2000032c 	.word	0x2000032c

0800674c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800674c:	4b01      	ldr	r3, [pc, #4]	; (8006754 <xTaskGetCurrentTaskHandle+0x8>)
 800674e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	2000032c 	.word	0x2000032c

08006758 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <xTaskGetSchedulerState+0x1c>)
 800675a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800675e:	b132      	cbz	r2, 800676e <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006760:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8006764:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006766:	bf0c      	ite	eq
 8006768:	2002      	moveq	r0, #2
 800676a:	2000      	movne	r0, #0
 800676c:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800676e:	2001      	movs	r0, #1
	}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000032c 	.word	0x2000032c

08006778 <xTaskPriorityInherit>:
	{
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800677c:	4604      	mov	r4, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	d035      	beq.n	80067ee <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006782:	4a23      	ldr	r2, [pc, #140]	; (8006810 <xTaskPriorityInherit+0x98>)
 8006784:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006786:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006788:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800678a:	428b      	cmp	r3, r1
 800678c:	4615      	mov	r5, r2
 800678e:	d236      	bcs.n	80067fe <xTaskPriorityInherit+0x86>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006790:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006792:	4e20      	ldr	r6, [pc, #128]	; (8006814 <xTaskPriorityInherit+0x9c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006794:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006796:	bfa1      	itttt	ge
 8006798:	6b6a      	ldrge	r2, [r5, #52]	; 0x34
 800679a:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800679c:	f1c2 020c 	rsbge	r2, r2, #12
 80067a0:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067a2:	2714      	movs	r7, #20
 80067a4:	6942      	ldr	r2, [r0, #20]
 80067a6:	fb07 6303 	mla	r3, r7, r3, r6
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d121      	bne.n	80067f2 <xTaskPriorityInherit+0x7a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ae:	f100 0804 	add.w	r8, r0, #4
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7fe ffc3 	bl	800573e <uxListRemove>
 80067b8:	b950      	cbnz	r0, 80067d0 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80067ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80067bc:	fb07 5701 	mla	r7, r7, r1, r5
 80067c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c2:	b92b      	cbnz	r3, 80067d0 <xTaskPriorityInherit+0x58>
 80067c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80067c6:	2201      	movs	r2, #1
 80067c8:	408a      	lsls	r2, r1
 80067ca:	ea23 0302 	bic.w	r3, r3, r2
 80067ce:	63ab      	str	r3, [r5, #56]	; 0x38
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067d2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067d8:	2401      	movs	r4, #1
 80067da:	fa04 f203 	lsl.w	r2, r4, r3
 80067de:	2014      	movs	r0, #20
 80067e0:	430a      	orrs	r2, r1
 80067e2:	fb00 6003 	mla	r0, r0, r3, r6
 80067e6:	4641      	mov	r1, r8
 80067e8:	63aa      	str	r2, [r5, #56]	; 0x38
 80067ea:	f7fe ff85 	bl	80056f8 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 80067ee:	4620      	mov	r0, r4
		return xReturn;
 80067f0:	e003      	b.n	80067fa <xTaskPriorityInherit+0x82>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 80067f8:	2001      	movs	r0, #1
	}
 80067fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006800:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006802:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006804:	42a0      	cmp	r0, r4
 8006806:	bf2c      	ite	cs
 8006808:	2000      	movcs	r0, #0
 800680a:	2001      	movcc	r0, #1
 800680c:	e7f5      	b.n	80067fa <xTaskPriorityInherit+0x82>
 800680e:	bf00      	nop
 8006810:	2000032c 	.word	0x2000032c
 8006814:	20000388 	.word	0x20000388

08006818 <xTaskPriorityDisinherit>:
	{
 8006818:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800681a:	4604      	mov	r4, r0
 800681c:	b908      	cbnz	r0, 8006822 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800681e:	2000      	movs	r0, #0
	}
 8006820:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006822:	4d22      	ldr	r5, [pc, #136]	; (80068ac <xTaskPriorityDisinherit+0x94>)
 8006824:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006826:	4283      	cmp	r3, r0
 8006828:	d008      	beq.n	800683c <xTaskPriorityDisinherit+0x24>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	e7fe      	b.n	800683a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800683c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683e:	b943      	cbnz	r3, 8006852 <xTaskPriorityDisinherit+0x3a>
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	e7fe      	b.n	8006850 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006852:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006854:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006856:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006858:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800685a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800685c:	d0df      	beq.n	800681e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1dd      	bne.n	800681e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006862:	1d06      	adds	r6, r0, #4
 8006864:	4630      	mov	r0, r6
 8006866:	f7fe ff6a 	bl	800573e <uxListRemove>
 800686a:	b958      	cbnz	r0, 8006884 <xTaskPriorityDisinherit+0x6c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800686c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800686e:	2114      	movs	r1, #20
 8006870:	fb01 5100 	mla	r1, r1, r0, r5
 8006874:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8006876:	b92b      	cbnz	r3, 8006884 <xTaskPriorityDisinherit+0x6c>
 8006878:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800687a:	2201      	movs	r2, #1
 800687c:	4082      	lsls	r2, r0
 800687e:	ea23 0302 	bic.w	r3, r3, r2
 8006882:	63ab      	str	r3, [r5, #56]	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006884:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006886:	6ba9      	ldr	r1, [r5, #56]	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006888:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688a:	f1c3 020c 	rsb	r2, r3, #12
 800688e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006890:	2401      	movs	r4, #1
 8006892:	fa04 f203 	lsl.w	r2, r4, r3
 8006896:	430a      	orrs	r2, r1
 8006898:	63aa      	str	r2, [r5, #56]	; 0x38
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <xTaskPriorityDisinherit+0x98>)
 800689c:	2014      	movs	r0, #20
 800689e:	fb00 2003 	mla	r0, r0, r3, r2
 80068a2:	4631      	mov	r1, r6
 80068a4:	f7fe ff28 	bl	80056f8 <vListInsertEnd>
					xReturn = pdTRUE;
 80068a8:	4620      	mov	r0, r4
		return xReturn;
 80068aa:	e7b9      	b.n	8006820 <xTaskPriorityDisinherit+0x8>
 80068ac:	2000032c 	.word	0x2000032c
 80068b0:	20000388 	.word	0x20000388

080068b4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80068b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80068b8:	4604      	mov	r4, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d04f      	beq.n	800695e <vTaskPriorityDisinheritAfterTimeout+0xaa>
			configASSERT( pxTCB->uxMutexesHeld );
 80068be:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80068c0:	b942      	cbnz	r2, 80068d4 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	e7fe      	b.n	80068d2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80068d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80068d6:	4299      	cmp	r1, r3
 80068d8:	bf38      	it	cc
 80068da:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80068dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80068de:	428b      	cmp	r3, r1
 80068e0:	d03d      	beq.n	800695e <vTaskPriorityDisinheritAfterTimeout+0xaa>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80068e2:	2a01      	cmp	r2, #1
 80068e4:	d13b      	bne.n	800695e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					configASSERT( pxTCB != pxCurrentTCB );
 80068e6:	4d1f      	ldr	r5, [pc, #124]	; (8006964 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80068e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80068ea:	4282      	cmp	r2, r0
 80068ec:	d108      	bne.n	8006900 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	e7fe      	b.n	80068fe <vTaskPriorityDisinheritAfterTimeout+0x4a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006900:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006902:	4e19      	ldr	r6, [pc, #100]	; (8006968 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					pxTCB->uxPriority = uxPriorityToUse;
 8006904:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006906:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006908:	f04f 0714 	mov.w	r7, #20
 800690c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690e:	bfa8      	it	ge
 8006910:	f1c1 010c 	rsbge	r1, r1, #12
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006914:	fb07 6303 	mla	r3, r7, r3, r6
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006918:	bfa8      	it	ge
 800691a:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800691c:	429a      	cmp	r2, r3
 800691e:	d11e      	bne.n	800695e <vTaskPriorityDisinheritAfterTimeout+0xaa>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006920:	f100 0804 	add.w	r8, r0, #4
 8006924:	4640      	mov	r0, r8
 8006926:	f7fe ff0a 	bl	800573e <uxListRemove>
 800692a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800692c:	b950      	cbnz	r0, 8006944 <vTaskPriorityDisinheritAfterTimeout+0x90>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800692e:	fb07 5702 	mla	r7, r7, r2, r5
 8006932:	2301      	movs	r3, #1
 8006934:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006936:	fa03 f102 	lsl.w	r1, r3, r2
 800693a:	b918      	cbnz	r0, 8006944 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800693c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800693e:	ea23 0301 	bic.w	r3, r3, r1
 8006942:	63ab      	str	r3, [r5, #56]	; 0x38
						prvAddTaskToReadyList( pxTCB );
 8006944:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8006946:	2301      	movs	r3, #1
 8006948:	4093      	lsls	r3, r2
 800694a:	430b      	orrs	r3, r1
 800694c:	2014      	movs	r0, #20
 800694e:	63ab      	str	r3, [r5, #56]	; 0x38
 8006950:	4641      	mov	r1, r8
 8006952:	fb00 6002 	mla	r0, r0, r2, r6
	}
 8006956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						prvAddTaskToReadyList( pxTCB );
 800695a:	f7fe becd 	b.w	80056f8 <vListInsertEnd>
	}
 800695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006962:	bf00      	nop
 8006964:	2000032c 	.word	0x2000032c
 8006968:	20000388 	.word	0x20000388

0800696c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <pvTaskIncrementMutexHeldCount+0x14>)
 800696e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006970:	b11a      	cbz	r2, 800697a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006974:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006976:	3201      	adds	r2, #1
 8006978:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800697a:	6b58      	ldr	r0, [r3, #52]	; 0x34
	}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	2000032c 	.word	0x2000032c

08006984 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006986:	4c0f      	ldr	r4, [pc, #60]	; (80069c4 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8006988:	f7fe fd64 	bl	8005454 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800698c:	6825      	ldr	r5, [r4, #0]
 800698e:	b9a5      	cbnz	r5, 80069ba <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
 8006990:	1d27      	adds	r7, r4, #4
 8006992:	4638      	mov	r0, r7
			vListInitialise( &xActiveTimerList2 );
 8006994:	f104 0618 	add.w	r6, r4, #24
			vListInitialise( &xActiveTimerList1 );
 8006998:	f7fe fea0 	bl	80056dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800699c:	4630      	mov	r0, r6
 800699e:	f7fe fe9d 	bl	80056dc <vListInitialise>

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80069a2:	462a      	mov	r2, r5
 80069a4:	210c      	movs	r1, #12
 80069a6:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80069a8:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80069ac:	f7fe ffa4 	bl	80058f8 <xQueueGenericCreate>
 80069b0:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069b2:	b110      	cbz	r0, 80069ba <prvCheckForValidListAndQueue+0x36>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069b4:	4904      	ldr	r1, [pc, #16]	; (80069c8 <prvCheckForValidListAndQueue+0x44>)
 80069b6:	f7ff fb0d 	bl	8005fd4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80069ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80069be:	f7fe bd6b 	b.w	8005498 <vPortExitCritical>
 80069c2:	bf00      	nop
 80069c4:	200004bc 	.word	0x200004bc
 80069c8:	0801a606 	.word	0x0801a606

080069cc <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80069cc:	4291      	cmp	r1, r2
{
 80069ce:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069d0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069d2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80069d4:	d80a      	bhi.n	80069ec <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	6983      	ldr	r3, [r0, #24]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d20e      	bcs.n	80069fc <prvInsertTimerInActiveList+0x30>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <prvInsertTimerInActiveList+0x34>)
 80069e0:	1d01      	adds	r1, r0, #4
 80069e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069e4:	f7fe fe94 	bl	8005710 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80069e8:	2000      	movs	r0, #0
}
 80069ea:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d201      	bcs.n	80069f4 <prvInsertTimerInActiveList+0x28>
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d203      	bcs.n	80069fc <prvInsertTimerInActiveList+0x30>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <prvInsertTimerInActiveList+0x34>)
 80069f6:	1d01      	adds	r1, r0, #4
 80069f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80069fa:	e7f3      	b.n	80069e4 <prvInsertTimerInActiveList+0x18>
			xProcessTimerNow = pdTRUE;
 80069fc:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80069fe:	e7f4      	b.n	80069ea <prvInsertTimerInActiveList+0x1e>
 8006a00:	200004bc 	.word	0x200004bc

08006a04 <xTimerCreateTimerTask>:
{
 8006a04:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 8006a06:	f7ff ffbd 	bl	8006984 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <xTimerCreateTimerTask+0x3c>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	b942      	cbnz	r2, 8006a22 <xTimerCreateTimerTask+0x1e>
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	e7fe      	b.n	8006a20 <xTimerCreateTimerTask+0x1c>
			xReturn = xTaskCreate(	prvTimerTask,
 8006a22:	3334      	adds	r3, #52	; 0x34
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2304      	movs	r3, #4
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2280      	movs	r2, #128	; 0x80
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4905      	ldr	r1, [pc, #20]	; (8006a44 <xTimerCreateTimerTask+0x40>)
 8006a30:	4805      	ldr	r0, [pc, #20]	; (8006a48 <xTimerCreateTimerTask+0x44>)
 8006a32:	f7ff fb75 	bl	8006120 <xTaskCreate>
	configASSERT( xReturn );
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d0ea      	beq.n	8006a10 <xTimerCreateTimerTask+0xc>
}
 8006a3a:	b003      	add	sp, #12
 8006a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a40:	200004bc 	.word	0x200004bc
 8006a44:	0801a60b 	.word	0x0801a60b
 8006a48:	08006b79 	.word	0x08006b79

08006a4c <xTimerCreate>:
	{
 8006a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a50:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006a52:	202c      	movs	r0, #44	; 0x2c
	{
 8006a54:	460d      	mov	r5, r1
 8006a56:	4616      	mov	r6, r2
 8006a58:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006a5a:	f7fe fbe1 	bl	8005220 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8006a5e:	4604      	mov	r4, r0
 8006a60:	b1f0      	cbz	r0, 8006aa0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006a68:	b945      	cbnz	r5, 8006a7c <xTimerCreate+0x30>
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	e7fe      	b.n	8006a7a <xTimerCreate+0x2e>
		prvCheckForValidListAndQueue();
 8006a7c:	f7ff ff82 	bl	8006984 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006a80:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8006a82:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8006a86:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006a8a:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006a8c:	1d20      	adds	r0, r4, #4
 8006a8e:	f7fe fe30 	bl	80056f2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006a92:	b12e      	cbz	r6, 8006aa0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006a94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006aa8 <xTimerGenericCommand>:
{
 8006aa8:	b530      	push	{r4, r5, lr}
 8006aaa:	4615      	mov	r5, r2
 8006aac:	b085      	sub	sp, #20
 8006aae:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	b940      	cbnz	r0, 8006ac6 <xTimerGenericCommand+0x1e>
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	e7fe      	b.n	8006ac4 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8006ac6:	4c0d      	ldr	r4, [pc, #52]	; (8006afc <xTimerGenericCommand+0x54>)
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	b180      	cbz	r0, 8006aee <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006acc:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ace:	e9cd 1501 	strd	r1, r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ad2:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ad4:	dc0d      	bgt.n	8006af2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ad6:	f7ff fe3f 	bl	8006758 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ada:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006adc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ade:	bf08      	it	eq
 8006ae0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ae2:	6820      	ldr	r0, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	461a      	movne	r2, r3
 8006ae8:	a901      	add	r1, sp, #4
 8006aea:	f7fe ff47 	bl	800597c <xQueueGenericSend>
}
 8006aee:	b005      	add	sp, #20
 8006af0:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006af2:	2300      	movs	r3, #0
 8006af4:	a901      	add	r1, sp, #4
 8006af6:	f7ff f805 	bl	8005b04 <xQueueGenericSendFromISR>
 8006afa:	e7f8      	b.n	8006aee <xTimerGenericCommand+0x46>
 8006afc:	200004bc 	.word	0x200004bc

08006b00 <prvSwitchTimerLists>:
{
 8006b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b04:	4d1b      	ldr	r5, [pc, #108]	; (8006b74 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b06:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	b92a      	cbnz	r2, 8006b1c <prvSwitchTimerLists+0x1c>
	pxCurrentTimerList = pxOverflowTimerList;
 8006b10:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 8006b12:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
}
 8006b16:	b002      	add	sp, #8
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b1c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b20:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b22:	1d27      	adds	r7, r4, #4
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7fe fe0a 	bl	800573e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b2a:	6a23      	ldr	r3, [r4, #32]
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006b34:	075b      	lsls	r3, r3, #29
 8006b36:	d5e8      	bpl.n	8006b0a <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b38:	69a3      	ldr	r3, [r4, #24]
 8006b3a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8006b3c:	429e      	cmp	r6, r3
 8006b3e:	d206      	bcs.n	8006b4e <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b40:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b42:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b44:	4639      	mov	r1, r7
 8006b46:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006b48:	f7fe fde2 	bl	8005710 <vListInsert>
 8006b4c:	e7dd      	b.n	8006b0a <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8cd 8000 	str.w	r8, [sp]
 8006b54:	4632      	mov	r2, r6
 8006b56:	4619      	mov	r1, r3
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7ff ffa5 	bl	8006aa8 <xTimerGenericCommand>
				configASSERT( xResult );
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d1d3      	bne.n	8006b0a <prvSwitchTimerLists+0xa>
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	e7fe      	b.n	8006b72 <prvSwitchTimerLists+0x72>
 8006b74:	200004bc 	.word	0x200004bc

08006b78 <prvTimerTask>:
{
 8006b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b7c:	4f77      	ldr	r7, [pc, #476]	; (8006d5c <prvTimerTask+0x1e4>)
					portYIELD_WITHIN_API();
 8006b7e:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8006d60 <prvTimerTask+0x1e8>
{
 8006b82:	b086      	sub	sp, #24
 8006b84:	463d      	mov	r5, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	681e      	ldr	r6, [r3, #0]
 8006b8a:	b316      	cbz	r6, 8006bd2 <prvTimerTask+0x5a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	681e      	ldr	r6, [r3, #0]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b90:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8006b92:	f7ff fbc3 	bl	800631c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006b96:	f7ff fbcb 	bl	8006330 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006b9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006b9c:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8006b9e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006ba0:	d319      	bcc.n	8006bd6 <prvTimerTask+0x5e>
	xLastTime = xTimeNow;
 8006ba2:	63a8      	str	r0, [r5, #56]	; 0x38
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ba4:	b304      	cbz	r4, 8006be8 <prvTimerTask+0x70>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	fab2 f282 	clz	r2, r2
 8006bae:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bb0:	eba6 010a 	sub.w	r1, r6, sl
 8006bb4:	6828      	ldr	r0, [r5, #0]
 8006bb6:	f7ff fa1f 	bl	8005ff8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bba:	f7ff fc43 	bl	8006444 <xTaskResumeAll>
 8006bbe:	b980      	cbnz	r0, 8006be2 <prvTimerTask+0x6a>
					portYIELD_WITHIN_API();
 8006bc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bc4:	f8c8 3000 	str.w	r3, [r8]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	e007      	b.n	8006be2 <prvTimerTask+0x6a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bd2:	2401      	movs	r4, #1
 8006bd4:	e7dd      	b.n	8006b92 <prvTimerTask+0x1a>
		prvSwitchTimerLists();
 8006bd6:	f7ff ff93 	bl	8006b00 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006bda:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
			( void ) xTaskResumeAll();
 8006bde:	f7ff fc31 	bl	8006444 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006be2:	f04f 0900 	mov.w	r9, #0
 8006be6:	e07d      	b.n	8006ce4 <prvTimerTask+0x16c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006be8:	4286      	cmp	r6, r0
 8006bea:	d830      	bhi.n	8006c4e <prvTimerTask+0xd6>
				( void ) xTaskResumeAll();
 8006bec:	f7ff fc2a 	bl	8006444 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf8:	f109 0004 	add.w	r0, r9, #4
 8006bfc:	f7fe fd9f 	bl	800573e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c00:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8006c04:	0758      	lsls	r0, r3, #29
 8006c06:	d519      	bpl.n	8006c3c <prvTimerTask+0xc4>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c08:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006c0c:	4633      	mov	r3, r6
 8006c0e:	4652      	mov	r2, sl
 8006c10:	4431      	add	r1, r6
 8006c12:	4648      	mov	r0, r9
 8006c14:	f7ff feda 	bl	80069cc <prvInsertTimerInActiveList>
 8006c18:	b1a0      	cbz	r0, 8006c44 <prvTimerTask+0xcc>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c1a:	9400      	str	r4, [sp, #0]
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	4632      	mov	r2, r6
 8006c20:	4621      	mov	r1, r4
 8006c22:	4648      	mov	r0, r9
 8006c24:	f7ff ff40 	bl	8006aa8 <xTimerGenericCommand>
			configASSERT( xResult );
 8006c28:	b960      	cbnz	r0, 8006c44 <prvTimerTask+0xcc>
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	e7fe      	b.n	8006c3a <prvTimerTask+0xc2>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c44:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8006c48:	4648      	mov	r0, r9
 8006c4a:	4798      	blx	r3
 8006c4c:	e7c9      	b.n	8006be2 <prvTimerTask+0x6a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c4e:	4622      	mov	r2, r4
 8006c50:	e7ae      	b.n	8006bb0 <prvTimerTask+0x38>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c56:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	4632      	mov	r2, r6
 8006c64:	4419      	add	r1, r3
 8006c66:	4620      	mov	r0, r4
 8006c68:	f7ff feb0 	bl	80069cc <prvInsertTimerInActiveList>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d039      	beq.n	8006ce4 <prvTimerTask+0x16c>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c70:	6a23      	ldr	r3, [r4, #32]
 8006c72:	4620      	mov	r0, r4
 8006c74:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006c7a:	0759      	lsls	r1, r3, #29
 8006c7c:	d532      	bpl.n	8006ce4 <prvTimerTask+0x16c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c7e:	69a2      	ldr	r2, [r4, #24]
 8006c80:	9904      	ldr	r1, [sp, #16]
 8006c82:	f8cd 9000 	str.w	r9, [sp]
 8006c86:	2300      	movs	r3, #0
 8006c88:	440a      	add	r2, r1
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	f7ff ff0b 	bl	8006aa8 <xTimerGenericCommand>
							configASSERT( xResult );
 8006c92:	bb38      	cbnz	r0, 8006ce4 <prvTimerTask+0x16c>
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	e7fe      	b.n	8006ca4 <prvTimerTask+0x12c>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ca6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8006cb2:	e017      	b.n	8006ce4 <prvTimerTask+0x16c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cb4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cb8:	9904      	ldr	r1, [sp, #16]
 8006cba:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cbc:	f043 0301 	orr.w	r3, r3, #1
 8006cc0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cc4:	b941      	cbnz	r1, 8006cd8 <prvTimerTask+0x160>
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	e7fe      	b.n	8006cd6 <prvTimerTask+0x15e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cd8:	4633      	mov	r3, r6
 8006cda:	4632      	mov	r2, r6
 8006cdc:	4431      	add	r1, r6
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff fe74 	bl	80069cc <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	a903      	add	r1, sp, #12
 8006ce8:	6828      	ldr	r0, [r5, #0]
 8006cea:	f7fe ffc1 	bl	8005c70 <xQueueReceive>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f43f af49 	beq.w	8006b86 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dbf4      	blt.n	8006ce4 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cfa:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cfc:	6963      	ldr	r3, [r4, #20]
 8006cfe:	b113      	cbz	r3, 8006d06 <prvTimerTask+0x18e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d00:	1d20      	adds	r0, r4, #4
 8006d02:	f7fe fd1c 	bl	800573e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006d06:	f7ff fb13 	bl	8006330 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006d0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006d0c:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8006d0e:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8006d10:	d201      	bcs.n	8006d16 <prvTimerTask+0x19e>
		prvSwitchTimerLists();
 8006d12:	f7ff fef5 	bl	8006b00 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8006d16:	9b03      	ldr	r3, [sp, #12]
	xLastTime = xTimeNow;
 8006d18:	63ae      	str	r6, [r5, #56]	; 0x38
			switch( xMessage.xMessageID )
 8006d1a:	2b09      	cmp	r3, #9
 8006d1c:	d8e2      	bhi.n	8006ce4 <prvTimerTask+0x16c>
 8006d1e:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <prvTimerTask+0x1ac>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006c53 	.word	0x08006c53
 8006d28:	08006c53 	.word	0x08006c53
 8006d2c:	08006c53 	.word	0x08006c53
 8006d30:	08006ca7 	.word	0x08006ca7
 8006d34:	08006cb5 	.word	0x08006cb5
 8006d38:	08006d4d 	.word	0x08006d4d
 8006d3c:	08006c53 	.word	0x08006c53
 8006d40:	08006c53 	.word	0x08006c53
 8006d44:	08006ca7 	.word	0x08006ca7
 8006d48:	08006cb5 	.word	0x08006cb5
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006d50:	079a      	lsls	r2, r3, #30
 8006d52:	d4aa      	bmi.n	8006caa <prvTimerTask+0x132>
							vPortFree( pxTimer );
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7fe fae3 	bl	8005320 <vPortFree>
 8006d5a:	e7c3      	b.n	8006ce4 <prvTimerTask+0x16c>
 8006d5c:	200004bc 	.word	0x200004bc
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) 
{
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8006d64:	f44f 3134 	mov.w	r1, #184320	; 0x2d000
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <GUI_X_Config+0xc>)
 8006d6a:	f001 bf05 	b.w	8008b78 <GUI_ALLOC_AssignMemory>
 8006d6e:	bf00      	nop
 8006d70:	2000837c 	.word	0x2000837c

08006d74 <DMA2D_CopyBuffer>:
  {
    return LTDC_PIXEL_FORMAT_RGB565;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006d74:	2800      	cmp	r0, #0
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8006d76:	480e      	ldr	r0, [pc, #56]	; (8006db0 <DMA2D_CopyBuffer+0x3c>)
{
 8006d78:	b530      	push	{r4, r5, lr}
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8006d7a:	f44f 7500 	mov.w	r5, #512	; 0x200
 8006d7e:	6005      	str	r5, [r0, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8006d80:	60c1      	str	r1, [r0, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8006d82:	63c2      	str	r2, [r0, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8006d84:	9a04      	ldr	r2, [sp, #16]
 8006d86:	6102      	str	r2, [r0, #16]
  DMA2D->OOR     = OffLineDst; 
 8006d88:	9a05      	ldr	r2, [sp, #20]
 8006d8a:	6402      	str	r2, [r0, #64]	; 0x40
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2402      	moveq	r4, #2
 8006d90:	2403      	movne	r4, #3

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8006d92:	61c4      	str	r4, [r0, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8006d94:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006d98:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8006d9c:	6443      	str	r3, [r0, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8006d9e:	6803      	ldr	r3, [r0, #0]
 8006da0:	f043 0301 	orr.w	r3, r3, #1
 8006da4:	6003      	str	r3, [r0, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 8006da6:	6803      	ldr	r3, [r0, #0]
 8006da8:	07db      	lsls	r3, r3, #31
 8006daa:	d4fc      	bmi.n	8006da6 <DMA2D_CopyBuffer+0x32>
  {
  }
}
 8006dac:	bd30      	pop	{r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	4002b000 	.word	0x4002b000

08006db4 <GetBufferSize>:
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <GetBufferSize+0x14>)
 8006db6:	231c      	movs	r3, #28
 8006db8:	fb03 2300 	mla	r3, r3, r0, r2
 8006dbc:	e9d3 2003 	ldrd	r2, r0, [r3, #12]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	4350      	muls	r0, r2
}
 8006dc4:	4358      	muls	r0, r3
 8006dc6:	4770      	bx	lr
 8006dc8:	200004f8 	.word	0x200004f8

08006dcc <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 8006dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	4615      	mov	r5, r2
 8006dd2:	4606      	mov	r6, r0
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8006dd4:	f7ff ffee 	bl	8006db4 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 8006dd8:	231c      	movs	r3, #28
 8006dda:	4373      	muls	r3, r6
 8006ddc:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <LCD_LL_CopyBuffer+0x38>)
 8006dde:	58d7      	ldr	r7, [r2, r3]
 8006de0:	18d4      	adds	r4, r2, r3
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8006de2:	2300      	movs	r3, #0
 8006de4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	fb00 7205 	mla	r2, r0, r5, r7
 8006df0:	fb00 7101 	mla	r1, r0, r1, r7
 8006df4:	68e3      	ldr	r3, [r4, #12]
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7ff ffbc 	bl	8006d74 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8006dfc:	60a5      	str	r5, [r4, #8]
}
 8006dfe:	b005      	add	sp, #20
 8006e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200004f8 	.word	0x200004f8

08006e08 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	4699      	mov	r9, r3
 8006e10:	4614      	mov	r4, r2
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006e12:	251c      	movs	r5, #28
  BufferSize = GetBufferSize(LayerIndex);
 8006e14:	f7ff ffce 	bl	8006db4 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <LCD_LL_CopyRect+0x54>)
 8006e1a:	4375      	muls	r5, r6
 8006e1c:	195a      	adds	r2, r3, r5
 8006e1e:	f853 c005 	ldr.w	ip, [r3, r5]
 8006e22:	68d5      	ldr	r5, [r2, #12]
 8006e24:	6953      	ldr	r3, [r2, #20]
 8006e26:	6852      	ldr	r2, [r2, #4]
{
 8006e28:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006e2c:	4350      	muls	r0, r2
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8006e2e:	9a08      	ldr	r2, [sp, #32]
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006e30:	fb04 1405 	mla	r4, r4, r5, r1
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8006e34:	fb02 9205 	mla	r2, r2, r5, r9
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006e38:	fb03 c404 	mla	r4, r3, r4, ip
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8006e3c:	fb03 c202 	mla	r2, r3, r2, ip
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8006e40:	1bed      	subs	r5, r5, r7
 8006e42:	2300      	movs	r3, #0
 8006e44:	930a      	str	r3, [sp, #40]	; 0x28
 8006e46:	1821      	adds	r1, r4, r0
 8006e48:	e9cd 8508 	strd	r8, r5, [sp, #32]
 8006e4c:	463b      	mov	r3, r7
 8006e4e:	4402      	add	r2, r0
 8006e50:	4630      	mov	r0, r6
}
 8006e52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8006e56:	f7ff bf8d 	b.w	8006d74 <DMA2D_CopyBuffer>
 8006e5a:	bf00      	nop
 8006e5c:	200004f8 	.word	0x200004f8

08006e60 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	4607      	mov	r7, r0
 8006e66:	4698      	mov	r8, r3
 8006e68:	4614      	mov	r4, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8006e6a:	f7ff ffa3 	bl	8006db4 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <LCD_LL_DrawBitmap16bpp+0x5c>)
{
 8006e70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006e72:	231c      	movs	r3, #28
 8006e74:	437b      	muls	r3, r7
 8006e76:	eb02 0c03 	add.w	ip, r2, r3
{
 8006e7a:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006e7e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8006e82:	fb04 1406 	mla	r4, r4, r6, r1
 8006e86:	58d1      	ldr	r1, [r2, r3]
 8006e88:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006e8c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006e90:	fb03 1404 	mla	r4, r3, r4, r1
  OffLineSrc = (BytesPerLine / 2) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8006e94:	eba6 0609 	sub.w	r6, r6, r9
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e9e:	eba5 0509 	sub.w	r5, r5, r9
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8006ea2:	fb02 4200 	mla	r2, r2, r0, r4
 8006ea6:	960a      	str	r6, [sp, #40]	; 0x28
 8006ea8:	e9cd a508 	strd	sl, r5, [sp, #32]
 8006eac:	464b      	mov	r3, r9
 8006eae:	4641      	mov	r1, r8
 8006eb0:	4638      	mov	r0, r7
}
 8006eb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8006eb6:	f7ff bf5d 	b.w	8006d74 <DMA2D_CopyBuffer>
 8006eba:	bf00      	nop
 8006ebc:	200004f8 	.word	0x200004f8

08006ec0 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8006ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	4615      	mov	r5, r2
 8006ec8:	4698      	mov	r8, r3
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8006eca:	f7ff ff73 	bl	8006db4 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <LCD_LL_DrawBitmap32bpp+0x88>)
{
 8006ed0:	9f06      	ldr	r7, [sp, #24]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006ed2:	231c      	movs	r3, #28
 8006ed4:	4373      	muls	r3, r6
 8006ed6:	eb02 0c03 	add.w	ip, r2, r3
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006eda:	2e00      	cmp	r6, #0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006edc:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8006ee0:	fb05 1504 	mla	r5, r5, r4, r1
 8006ee4:	58d1      	ldr	r1, [r2, r3]
 8006ee6:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006eea:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006eee:	fb03 1505 	mla	r5, r3, r5, r1
 8006ef2:	fb02 5500 	mla	r5, r2, r0, r5
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8006ef6:	f04f 0104 	mov.w	r1, #4
 8006efa:	9a08      	ldr	r2, [sp, #32]
 8006efc:	fb92 f2f1 	sdiv	r2, r2, r1
 8006f00:	eba2 0107 	sub.w	r1, r2, r7
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <LCD_LL_DrawBitmap32bpp+0x8c>)
 8006f06:	4812      	ldr	r0, [pc, #72]	; (8006f50 <LCD_LL_DrawBitmap32bpp+0x90>)
 8006f08:	6010      	str	r0, [r2, #0]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8006f0a:	eba4 0407 	sub.w	r4, r4, r7
  DMA2D->FGMAR   = (U32)pSrc;                       
 8006f0e:	f8c2 800c 	str.w	r8, [r2, #12]
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006f12:	bf08      	it	eq
 8006f14:	2302      	moveq	r3, #2
  DMA2D->OMAR    = (U32)pDst;                       
 8006f16:	63d5      	str	r5, [r2, #60]	; 0x3c
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006f18:	bf18      	it	ne
 8006f1a:	2303      	movne	r3, #3
  DMA2D->BGMAR   = (U32)pDst; 
 8006f1c:	6155      	str	r5, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 8006f1e:	6111      	str	r1, [r2, #16]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8006f20:	2100      	movs	r1, #0
  DMA2D->OOR     = OffLineDst; 
 8006f22:	6414      	str	r4, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 8006f24:	6194      	str	r4, [r2, #24]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8006f26:	61d1      	str	r1, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 8006f28:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 8006f2a:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8006f2c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006f30:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8006f34:	6457      	str	r7, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	07db      	lsls	r3, r3, #31
 8006f42:	d4fc      	bmi.n	8006f3e <LCD_LL_DrawBitmap32bpp+0x7e>
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
}
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f48:	200004f8 	.word	0x200004f8
 8006f4c:	4002b000 	.word	0x4002b000
 8006f50:	00020200 	.word	0x00020200

08006f54 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	4607      	mov	r7, r0
 8006f5a:	4614      	mov	r4, r2
 8006f5c:	4699      	mov	r9, r3
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006f5e:	261c      	movs	r6, #28
  BufferSize = GetBufferSize(LayerIndex);
 8006f60:	f7ff ff28 	bl	8006db4 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006f64:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <LCD_LL_DrawBitmap8bpp+0x78>)
{
 8006f66:	f8dd 8020 	ldr.w	r8, [sp, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006f6a:	437e      	muls	r6, r7
 8006f6c:	1993      	adds	r3, r2, r6
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006f6e:	2f00      	cmp	r7, #0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006f70:	68dd      	ldr	r5, [r3, #12]
 8006f72:	fb04 1405 	mla	r4, r4, r5, r1
 8006f76:	5991      	ldr	r1, [r2, r6]
 8006f78:	695a      	ldr	r2, [r3, #20]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	fb02 1404 	mla	r4, r2, r4, r1
 8006f80:	fb03 4400 	mla	r4, r3, r0, r4
  OffLineSrc = BytesPerLine - xSize;
 8006f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <LCD_LL_DrawBitmap8bpp+0x7c>)
  OffLineSrc = BytesPerLine - xSize;
 8006f88:	eba3 0308 	sub.w	r3, r3, r8
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8006f8c:	f44f 3081 	mov.w	r0, #66048	; 0x10200
 8006f90:	6010      	str	r0, [r2, #0]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8006f92:	eba5 0508 	sub.w	r5, r5, r8
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8006f96:	f8c2 900c 	str.w	r9, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8006f9a:	63d4      	str	r4, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 8006f9c:	6113      	str	r3, [r2, #16]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8006f9e:	f04f 0305 	mov.w	r3, #5
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8006fa2:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8006fa4:	61d3      	str	r3, [r2, #28]
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006fa8:	bf08      	it	eq
 8006faa:	2102      	moveq	r1, #2
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 8006fac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006fb0:	bf18      	it	ne
 8006fb2:	2103      	movne	r1, #3
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 8006fb4:	6351      	str	r1, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 8006fb6:	6453      	str	r3, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 8006fb8:	6813      	ldr	r3, [r2, #0]
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	6013      	str	r3, [r2, #0]
  while (DMA2D->CR & DMA2D_CR_START)
 8006fc0:	6813      	ldr	r3, [r2, #0]
 8006fc2:	07db      	lsls	r3, r3, #31
 8006fc4:	d4fc      	bmi.n	8006fc0 <LCD_LL_DrawBitmap8bpp+0x6c>
  PixelFormat = GetPixelformat(LayerIndex);
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
}
 8006fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fca:	bf00      	nop
 8006fcc:	200004f8 	.word	0x200004f8
 8006fd0:	4002b000 	.word	0x4002b000

08006fd4 <LCD_LL_LayerInit>:
{   
 8006fd4:	b530      	push	{r4, r5, lr}
 8006fd6:	b08f      	sub	sp, #60	; 0x3c
  Layercfg.WindowX1 = HACT;
 8006fd8:	2300      	movs	r3, #0
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006fda:	4298      	cmp	r0, r3
 8006fdc:	bf0c      	ite	eq
 8006fde:	2502      	moveq	r5, #2
 8006fe0:	2503      	movne	r5, #3
  Layercfg.FBStartAdress = address;
 8006fe2:	910a      	str	r1, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 8006fe4:	21ff      	movs	r1, #255	; 0xff
  Layercfg.WindowX1 = HACT;
 8006fe6:	24c8      	movs	r4, #200	; 0xc8
  Layercfg.WindowY1 = YSIZE_PHYS; 
 8006fe8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Layercfg.PixelFormat = GetPixelformat(LayerIndex);
 8006fec:	9505      	str	r5, [sp, #20]
  Layercfg.Alpha0 = 0;
 8006fee:	e9cd 1306 	strd	r1, r3, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006ff2:	f44f 65c0 	mov.w	r5, #1536	; 0x600
 8006ff6:	2107      	movs	r1, #7
  Layercfg.WindowY1 = YSIZE_PHYS; 
 8006ff8:	9204      	str	r2, [sp, #16]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006ffa:	e9cd 5108 	strd	r5, r1, [sp, #32]
  Layercfg.ImageWidth = HACT;
 8006ffe:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hltdc_disco, &Layercfg, LayerIndex); 
 8007002:	a901      	add	r1, sp, #4
 8007004:	4602      	mov	r2, r0
 8007006:	4806      	ldr	r0, [pc, #24]	; (8007020 <LCD_LL_LayerInit+0x4c>)
  Layercfg.WindowY0 = 0;
 8007008:	9303      	str	r3, [sp, #12]
  Layercfg.WindowX1 = HACT;
 800700a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  Layercfg.ImageHeight = YSIZE_PHYS;
 800700e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8007012:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  HAL_LTDC_ConfigLayer(&hltdc_disco, &Layercfg, LayerIndex); 
 8007016:	f7fc fb4a 	bl	80036ae <HAL_LTDC_ConfigLayer>
}
 800701a:	b00f      	add	sp, #60	; 0x3c
 800701c:	bd30      	pop	{r4, r5, pc}
 800701e:	bf00      	nop
 8007020:	20035398 	.word	0x20035398

08007024 <LCD_LL_FillRect>:
{
 8007024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007028:	4680      	mov	r8, r0
 800702a:	460e      	mov	r6, r1
 800702c:	4691      	mov	r9, r2
 800702e:	461d      	mov	r5, r3
 8007030:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8007034:	f001 fed2 	bl	8008ddc <GUI_GetDrawMode>
 8007038:	2801      	cmp	r0, #1
 800703a:	d111      	bne.n	8007060 <LCD_LL_FillRect+0x3c>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800703c:	2200      	movs	r2, #0
 800703e:	2119      	movs	r1, #25
 8007040:	4640      	mov	r0, r8
 8007042:	f004 f8ff 	bl	800b244 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8007046:	462a      	mov	r2, r5
 8007048:	4649      	mov	r1, r9
 800704a:	4630      	mov	r0, r6
 800704c:	4623      	mov	r3, r4
 800704e:	f003 fa9f 	bl	800a590 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8007052:	4640      	mov	r0, r8
 8007054:	4a1d      	ldr	r2, [pc, #116]	; (80070cc <LCD_LL_FillRect+0xa8>)
 8007056:	2119      	movs	r1, #25
}
 8007058:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800705c:	f004 b8f2 	b.w	800b244 <LCD_SetDevFunc>
    BufferSize = GetBufferSize(LayerIndex);
 8007060:	4640      	mov	r0, r8
 8007062:	f7ff fea7 	bl	8006db4 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8007066:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <LCD_LL_FillRect+0xac>)
 8007068:	211c      	movs	r1, #28
 800706a:	fb01 f108 	mul.w	r1, r1, r8
 800706e:	eb03 0c01 	add.w	ip, r3, r1
 8007072:	5859      	ldr	r1, [r3, r1]
 8007074:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007078:	f8dc 3014 	ldr.w	r3, [ip, #20]
    xSize = x1 - x0 + 1;
 800707c:	1bad      	subs	r5, r5, r6
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800707e:	fb09 6602 	mla	r6, r9, r2, r6
 8007082:	fb03 1606 	mla	r6, r3, r6, r1
 8007086:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800708a:	fb03 6600 	mla	r6, r3, r0, r6
    ySize = y1 - y0 + 1;
 800708e:	eba4 0309 	sub.w	r3, r4, r9
 8007092:	3301      	adds	r3, #1
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8007094:	4c0f      	ldr	r4, [pc, #60]	; (80070d4 <LCD_LL_FillRect+0xb0>)
 8007096:	4810      	ldr	r0, [pc, #64]	; (80070d8 <LCD_LL_FillRect+0xb4>)
 8007098:	6020      	str	r0, [r4, #0]
    xSize = x1 - x0 + 1;
 800709a:	3501      	adds	r5, #1
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800709c:	f1b8 0f00 	cmp.w	r8, #0
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 80070a6:	eba2 0205 	sub.w	r2, r2, r5
    return LTDC_PIXEL_FORMAT_ARGB1555;
 80070aa:	bf0c      	ite	eq
 80070ac:	2102      	moveq	r1, #2
 80070ae:	2103      	movne	r1, #3
  DMA2D->OCOLR   = ColorIndex;                     
 80070b0:	63a7      	str	r7, [r4, #56]	; 0x38
  DMA2D->OMAR    = (U32)pDst;                      
 80070b2:	63e6      	str	r6, [r4, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 80070b4:	6422      	str	r2, [r4, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 80070b6:	6361      	str	r1, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80070b8:	6463      	str	r3, [r4, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START; 
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	f043 0301 	orr.w	r3, r3, #1
 80070c0:	6023      	str	r3, [r4, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	07db      	lsls	r3, r3, #31
 80070c6:	d4fc      	bmi.n	80070c2 <LCD_LL_FillRect+0x9e>
}
 80070c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070cc:	08007025 	.word	0x08007025
 80070d0:	200004f8 	.word	0x200004f8
 80070d4:	4002b000 	.word	0x4002b000
 80070d8:	00030200 	.word	0x00030200

080070dc <DSI_IO_WriteCmd>:
  if(NbrParams <= 1)
 80070dc:	2801      	cmp	r0, #1
{
 80070de:	b507      	push	{r0, r1, r2, lr}
 80070e0:	4603      	mov	r3, r0
  if(NbrParams <= 1)
 80070e2:	d80a      	bhi.n	80070fa <DSI_IO_WriteCmd+0x1e>
    HAL_DSI_ShortWrite(&hdsi_disco, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80070e4:	784a      	ldrb	r2, [r1, #1]
 80070e6:	780b      	ldrb	r3, [r1, #0]
 80070e8:	4808      	ldr	r0, [pc, #32]	; (800710c <DSI_IO_WriteCmd+0x30>)
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	2100      	movs	r1, #0
 80070ee:	2215      	movs	r2, #21
 80070f0:	f7fb f8c6 	bl	8002280 <HAL_DSI_ShortWrite>
}
 80070f4:	b003      	add	sp, #12
 80070f6:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_DSI_LongWrite(&hdsi_disco,  0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80070fa:	9101      	str	r1, [sp, #4]
 80070fc:	5c0a      	ldrb	r2, [r1, r0]
 80070fe:	9200      	str	r2, [sp, #0]
 8007100:	2100      	movs	r1, #0
 8007102:	2239      	movs	r2, #57	; 0x39
 8007104:	4801      	ldr	r0, [pc, #4]	; (800710c <DSI_IO_WriteCmd+0x30>)
 8007106:	f7fb f8cc 	bl	80022a2 <HAL_DSI_LongWrite>
}
 800710a:	e7f3      	b.n	80070f4 <DSI_IO_WriteCmd+0x18>
 800710c:	2003537c 	.word	0x2003537c

08007110 <BSP_LCD_MspInit>:
{
 8007110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8007112:	4b21      	ldr	r3, [pc, #132]	; (8007198 <BSP_LCD_MspInit+0x88>)
 8007114:	2200      	movs	r2, #0
 8007116:	9201      	str	r2, [sp, #4]
 8007118:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800711a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800711e:	6459      	str	r1, [r3, #68]	; 0x44
 8007120:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007122:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8007126:	9101      	str	r1, [sp, #4]
 8007128:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 800712a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800712c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007130:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8007132:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007134:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 8007138:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800713a:	9202      	str	r2, [sp, #8]
 800713c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800713e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007142:	6319      	str	r1, [r3, #48]	; 0x30
 8007144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007146:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800714a:	9102      	str	r1, [sp, #8]
 800714c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 800714e:	6919      	ldr	r1, [r3, #16]
 8007150:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007154:	6119      	str	r1, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8007156:	6919      	ldr	r1, [r3, #16]
 8007158:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800715c:	6119      	str	r1, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 800715e:	9203      	str	r2, [sp, #12]
 8007160:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007162:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8007166:	6459      	str	r1, [r3, #68]	; 0x44
 8007168:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800716a:	f001 6100 	and.w	r1, r1, #134217728	; 0x8000000
 800716e:	9103      	str	r1, [sp, #12]
 8007170:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8007172:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007174:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8007178:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800717a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800717c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
 8007180:	6259      	str	r1, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(DSI_IRQn, 0xF, 0);
 8007182:	205c      	movs	r0, #92	; 0x5c
 8007184:	210f      	movs	r1, #15
 8007186:	f7fa fbed 	bl	8001964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800718a:	205c      	movs	r0, #92	; 0x5c
}
 800718c:	b005      	add	sp, #20
 800718e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8007192:	f7fa bc1b 	b.w	80019cc <HAL_NVIC_EnableIRQ>
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800

0800719c <LCD_SetUpdateRegion>:
  * @brief  Set LCD updated region.
  * @param  idx: active region index.
  * @retval None
  */
void LCD_SetUpdateRegion(int idx)
{
 800719c:	b507      	push	{r0, r1, r2, lr}
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 800719e:	4b07      	ldr	r3, [pc, #28]	; (80071bc <LCD_SetUpdateRegion+0x20>)
 80071a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071a4:	232a      	movs	r3, #42	; 0x2a
 80071a6:	9001      	str	r0, [sp, #4]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	2239      	movs	r2, #57	; 0x39
 80071ac:	2304      	movs	r3, #4
 80071ae:	2100      	movs	r1, #0
 80071b0:	4803      	ldr	r0, [pc, #12]	; (80071c0 <LCD_SetUpdateRegion+0x24>)
 80071b2:	f7fb f876 	bl	80022a2 <HAL_DSI_LongWrite>
}
 80071b6:	b003      	add	sp, #12
 80071b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80071bc:	20000048 	.word	0x20000048
 80071c0:	2003537c 	.word	0x2003537c

080071c4 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80071c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t index = 0;

  if(!LCD_Refershing)
 80071c6:	4c0f      	ldr	r4, [pc, #60]	; (8007204 <HAL_DSI_TearingEffectCallback+0x40>)
{
 80071c8:	4605      	mov	r5, r0
  if(!LCD_Refershing)
 80071ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80071cc:	b9c8      	cbnz	r0, 8007202 <HAL_DSI_TearingEffectCallback+0x3e>
  {
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
    {
      if(layer_prop[index].pending_buffer >= 0)
 80071ce:	6861      	ldr	r1, [r4, #4]
 80071d0:	2900      	cmp	r1, #0
 80071d2:	db04      	blt.n	80071de <HAL_DSI_TearingEffectCallback+0x1a>
      {
        GUI_MULTIBUF_ConfirmEx(index,  layer_prop[index].pending_buffer);
 80071d4:	f002 fd84 	bl	8009ce0 <GUI_MULTIBUF_ConfirmEx>
        layer_prop[index].pending_buffer = -1;
 80071d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071dc:	6063      	str	r3, [r4, #4]
      if(layer_prop[index].pending_buffer >= 0)
 80071de:	6a21      	ldr	r1, [r4, #32]
 80071e0:	2900      	cmp	r1, #0
 80071e2:	db05      	blt.n	80071f0 <HAL_DSI_TearingEffectCallback+0x2c>
        GUI_MULTIBUF_ConfirmEx(index,  layer_prop[index].pending_buffer);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f002 fd7b 	bl	8009ce0 <GUI_MULTIBUF_ConfirmEx>
        layer_prop[index].pending_buffer = -1;
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ee:	6223      	str	r3, [r4, #32]
      } 
    }    
    LCD_Refershing = 1;
    LCD_ActiveRegion = 1;
 80071f0:	4a05      	ldr	r2, [pc, #20]	; (8007208 <HAL_DSI_TearingEffectCallback+0x44>)
    LCD_Refershing = 1;
 80071f2:	2301      	movs	r3, #1
 80071f4:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_DSI_Refresh(hdsi); 
 80071f6:	4628      	mov	r0, r5
    LCD_ActiveRegion = 1;
 80071f8:	6113      	str	r3, [r2, #16]
  }
}  
 80071fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_DSI_Refresh(hdsi); 
 80071fe:	f7fb b82f 	b.w	8002260 <HAL_DSI_Refresh>
}  
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200004f8 	.word	0x200004f8
 8007208:	20000048 	.word	0x20000048

0800720c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800720c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;

  if(LCD_ActiveRegion < ZONES )
 8007210:	4b38      	ldr	r3, [pc, #224]	; (80072f4 <HAL_DSI_EndOfRefreshCallback+0xe8>)
 8007212:	4a39      	ldr	r2, [pc, #228]	; (80072f8 <HAL_DSI_EndOfRefreshCallback+0xec>)
 8007214:	6919      	ldr	r1, [r3, #16]
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	695e      	ldr	r6, [r3, #20]
 800721a:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800721e:	2903      	cmp	r1, #3
{
 8007220:	4605      	mov	r5, r0
 8007222:	f102 0e84 	add.w	lr, r2, #132	; 0x84
 8007226:	f502 7782 	add.w	r7, r2, #260	; 0x104
 800722a:	4934      	ldr	r1, [pc, #208]	; (80072fc <HAL_DSI_EndOfRefreshCallback+0xf0>)
 800722c:	f04f 0000 	mov.w	r0, #0
  if(LCD_ActiveRegion < ZONES )
 8007230:	dc36      	bgt.n	80072a0 <HAL_DSI_EndOfRefreshCallback+0x94>
  {
    LCD_Refershing = 1;
 8007232:	2401      	movs	r4, #1
 8007234:	638c      	str	r4, [r1, #56]	; 0x38
    /* Disable DSI Wrapper */
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8007236:	6829      	ldr	r1, [r5, #0]
 8007238:	9000      	str	r0, [sp, #0]
 800723a:	f8d1 4404 	ldr.w	r4, [r1, #1028]	; 0x404
 800723e:	f024 0408 	bic.w	r4, r4, #8
 8007242:	f8c1 4404 	str.w	r4, [r1, #1028]	; 0x404
 8007246:	f8d1 4404 	ldr.w	r4, [r1, #1028]	; 0x404
 800724a:	f004 0408 	and.w	r4, r4, #8
 800724e:	9400      	str	r4, [sp, #0]
 8007250:	9c00      	ldr	r4, [sp, #0]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
    {
      /* Update LTDC configuaration */
      LTDC_LAYER(&hltdc_disco, index)->CFBAR  = LCD_Addr[index] + LCD_ActiveRegion  * HACT * 2;
 8007252:	691c      	ldr	r4, [r3, #16]
 8007254:	f44f 78c8 	mov.w	r8, #400	; 0x190
 8007258:	fb08 6604 	mla	r6, r8, r4, r6
 800725c:	f8ce 6028 	str.w	r6, [lr, #40]	; 0x28
 8007260:	691c      	ldr	r4, [r3, #16]
 8007262:	fb08 c404 	mla	r4, r8, r4, ip
 8007266:	62bc      	str	r4, [r7, #40]	; 0x28
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco);
 8007268:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800726a:	f044 0401 	orr.w	r4, r4, #1
 800726e:	6254      	str	r4, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007270:	9001      	str	r0, [sp, #4]
 8007272:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 8007276:	f042 0208 	orr.w	r2, r2, #8
 800727a:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 800727e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 8007282:	f002 0208 	and.w	r2, r2, #8
 8007286:	9201      	str	r2, [sp, #4]
 8007288:	9a01      	ldr	r2, [sp, #4]
    LCD_SetUpdateRegion(LCD_ActiveRegion++);
 800728a:	6918      	ldr	r0, [r3, #16]
 800728c:	1c42      	adds	r2, r0, #1
 800728e:	611a      	str	r2, [r3, #16]
 8007290:	f7ff ff84 	bl	800719c <LCD_SetUpdateRegion>
    /* Refresh the right part of the display */
    HAL_DSI_Refresh(hdsi);
 8007294:	4628      	mov	r0, r5
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco);
    __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);  
    LCD_SetUpdateRegion(0); 
  }
}
 8007296:	b004      	add	sp, #16
 8007298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_DSI_Refresh(hdsi);
 800729c:	f7fa bfe0 	b.w	8002260 <HAL_DSI_Refresh>
    __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 80072a0:	4b17      	ldr	r3, [pc, #92]	; (8007300 <HAL_DSI_EndOfRefreshCallback+0xf4>)
    LCD_Refershing = 0;
 80072a2:	6388      	str	r0, [r1, #56]	; 0x38
    __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	9002      	str	r0, [sp, #8]
 80072a8:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 80072ac:	f021 0108 	bic.w	r1, r1, #8
 80072b0:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 80072b4:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 80072b8:	f001 0108 	and.w	r1, r1, #8
 80072bc:	9102      	str	r1, [sp, #8]
 80072be:	9902      	ldr	r1, [sp, #8]
      LTDC_LAYER(&hltdc_disco, index)->CFBAR  = LCD_Addr[index];
 80072c0:	f8ce 6028 	str.w	r6, [lr, #40]	; 0x28
 80072c4:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco);
 80072c8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80072ca:	f041 0101 	orr.w	r1, r1, #1
 80072ce:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);  
 80072d0:	9003      	str	r0, [sp, #12]
 80072d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072d6:	f042 0208 	orr.w	r2, r2, #8
 80072da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80072de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
}
 80072ea:	b004      	add	sp, #16
 80072ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LCD_SetUpdateRegion(0); 
 80072f0:	f7ff bf54 	b.w	800719c <LCD_SetUpdateRegion>
 80072f4:	20000048 	.word	0x20000048
 80072f8:	20035398 	.word	0x20035398
 80072fc:	200004f8 	.word	0x200004f8
 8007300:	2003537c 	.word	0x2003537c

08007304 <LCD_ReqTear>:
  * @brief  Request TE at scanline.
  * @param  None
  * @retval None
  */
void LCD_ReqTear(void)
{
 8007304:	b513      	push	{r0, r1, r4, lr}
#if (ZONES == 4 )
  uint16_t scanline = 283;
#elif (ZONES == 2 )
  uint16_t scanline = 200;
#endif
  ScanLineParams[0] = scanline >> 8;
 8007306:	4b0d      	ldr	r3, [pc, #52]	; (800733c <LCD_ReqTear+0x38>)
  ScanLineParams[1] = scanline & 0x00FF;
  
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);     
 8007308:	4c0d      	ldr	r4, [pc, #52]	; (8007340 <LCD_ReqTear+0x3c>)
  ScanLineParams[0] = scanline >> 8;
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  ScanLineParams[1] = scanline & 0x00FF;
 8007310:	221b      	movs	r2, #27
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);     
 8007316:	333c      	adds	r3, #60	; 0x3c
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	2344      	movs	r3, #68	; 0x44
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	2239      	movs	r2, #57	; 0x39
 8007320:	2302      	movs	r3, #2
 8007322:	2100      	movs	r1, #0
 8007324:	4620      	mov	r0, r4
 8007326:	f7fa ffbc 	bl	80022a2 <HAL_DSI_LongWrite>
  /* set_tear_on */
  HAL_DSI_ShortWrite(&hdsi_disco, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);  
 800732a:	2100      	movs	r1, #0
 800732c:	9100      	str	r1, [sp, #0]
 800732e:	2335      	movs	r3, #53	; 0x35
 8007330:	2215      	movs	r2, #21
 8007332:	4620      	mov	r0, r4
 8007334:	f7fa ffa4 	bl	8002280 <HAL_DSI_ShortWrite>
}
 8007338:	b002      	add	sp, #8
 800733a:	bd10      	pop	{r4, pc}
 800733c:	200004f8 	.word	0x200004f8
 8007340:	2003537c 	.word	0x2003537c

08007344 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
  {
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8007348:	2103      	movs	r1, #3
{
 800734a:	b09b      	sub	sp, #108	; 0x6c
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 800734c:	2000      	movs	r0, #0
 800734e:	f002 fcdd 	bl	8009d0c <GUI_MULTIBUF_ConfigEx>
 8007352:	2103      	movs	r1, #3
 8007354:	2001      	movs	r0, #1
 8007356:	f002 fcd9 	bl	8009d0c <GUI_MULTIBUF_ConfigEx>
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800735a:	2300      	movs	r3, #0
 800735c:	461a      	mov	r2, r3
 800735e:	49d3      	ldr	r1, [pc, #844]	; (80076ac <LCD_X_Config+0x368>)
 8007360:	48d3      	ldr	r0, [pc, #844]	; (80076b0 <LCD_X_Config+0x36c>)
 8007362:	f002 f96f 	bl	8009644 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8007366:	2000      	movs	r0, #0
 8007368:	f003 fe12 	bl	800af90 <LCD_GetSwapXYEx>
 800736c:	4604      	mov	r4, r0
 800736e:	2800      	cmp	r0, #0
 8007370:	f000 81d0 	beq.w	8007714 <LCD_X_Config+0x3d0>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8007374:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007378:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800737c:	2000      	movs	r0, #0
 800737e:	f003 ffaf 	bl	800b2e0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8007382:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007386:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800738a:	2000      	movs	r0, #0
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800738c:	f003 fff2 	bl	800b374 <LCD_SetVSizeEx>
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 8007390:	2301      	movs	r3, #1
 8007392:	2200      	movs	r2, #0
 8007394:	49c7      	ldr	r1, [pc, #796]	; (80076b4 <LCD_X_Config+0x370>)
 8007396:	48c6      	ldr	r0, [pc, #792]	; (80076b0 <LCD_X_Config+0x36c>)
 8007398:	f002 f954 	bl	8009644 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 800739c:	2001      	movs	r0, #1
 800739e:	f003 fdf7 	bl	800af90 <LCD_GetSwapXYEx>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f000 81c2 	beq.w	800772c <LCD_X_Config+0x3e8>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 80073a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80073ac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80073b0:	2001      	movs	r0, #1
 80073b2:	f003 ff95 	bl	800b2e0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 80073b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80073ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80073be:	4dbe      	ldr	r5, [pc, #760]	; (80076b8 <LCD_X_Config+0x374>)
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80073c0:	f8df 9344 	ldr.w	r9, [pc, #836]	; 8007708 <LCD_X_Config+0x3c4>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 80073c4:	f8df 8344 	ldr.w	r8, [pc, #836]	; 800770c <LCD_X_Config+0x3c8>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 80073c8:	4fbc      	ldr	r7, [pc, #752]	; (80076bc <LCD_X_Config+0x378>)
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80073ca:	2001      	movs	r0, #1
 80073cc:	f003 ffd2 	bl	800b374 <LCD_SetVSizeEx>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80073d0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80073d4:	602b      	str	r3, [r5, #0]
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 80073d6:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80073da:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 80073dc:	2600      	movs	r6, #0
 80073de:	462c      	mov	r4, r5
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80073e0:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
 80073e4:	61ab      	str	r3, [r5, #24]
    layer_prop[i].pending_buffer = -1;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ea:	606b      	str	r3, [r5, #4]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 80073ec:	4630      	mov	r0, r6
 80073ee:	f003 fd8f 	bl	800af10 <LCD_GetBitsPerPixelEx>
 80073f2:	10c0      	asrs	r0, r0, #3
 80073f4:	6168      	str	r0, [r5, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 80073f6:	4642      	mov	r2, r8
 80073f8:	2121      	movs	r1, #33	; 0x21
 80073fa:	4630      	mov	r0, r6
 80073fc:	f003 ff22 	bl	800b244 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8007400:	463a      	mov	r2, r7
 8007402:	2123      	movs	r1, #35	; 0x23
 8007404:	4630      	mov	r0, r6
 8007406:	f003 ff1d 	bl	800b244 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800740a:	4aad      	ldr	r2, [pc, #692]	; (80076c0 <LCD_X_Config+0x37c>)
 800740c:	2119      	movs	r1, #25
 800740e:	4630      	mov	r0, r6
 8007410:	f003 ff18 	bl	800b244 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8007414:	4aab      	ldr	r2, [pc, #684]	; (80076c4 <LCD_X_Config+0x380>)
 8007416:	2125      	movs	r1, #37	; 0x25
 8007418:	4630      	mov	r0, r6
 800741a:	f003 ff13 	bl	800b244 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 800741e:	4aaa      	ldr	r2, [pc, #680]	; (80076c8 <LCD_X_Config+0x384>)
 8007420:	2124      	movs	r1, #36	; 0x24
 8007422:	4630      	mov	r0, r6
 8007424:	f003 ff0e 	bl	800b244 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp); 
 8007428:	2128      	movs	r1, #40	; 0x28
 800742a:	4aa8      	ldr	r2, [pc, #672]	; (80076cc <LCD_X_Config+0x388>)
 800742c:	4630      	mov	r0, r6
 800742e:	f003 ff09 	bl	800b244 <LCD_SetDevFunc>

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8007432:	f855 1b1c 	ldr.w	r1, [r5], #28
 8007436:	4630      	mov	r0, r6
 8007438:	f003 ff84 	bl	800b344 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800743c:	2e00      	cmp	r6, #0
 800743e:	f000 8181 	beq.w	8007744 <LCD_X_Config+0x400>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007442:	2500      	movs	r5, #0
 8007444:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8007710 <LCD_X_Config+0x3cc>
 8007448:	9505      	str	r5, [sp, #20]
 800744a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800744e:	48a0      	ldr	r0, [pc, #640]	; (80076d0 <LCD_X_Config+0x38c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007454:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8007458:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800745c:	960d      	str	r6, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_7;
 8007462:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007464:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8007466:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800746a:	a90b      	add	r1, sp, #44	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800746c:	9b05      	ldr	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800746e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8007472:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8007476:	f7fa ff75 	bl	8002364 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800747a:	4639      	mov	r1, r7
 800747c:	462a      	mov	r2, r5
 800747e:	4894      	ldr	r0, [pc, #592]	; (80076d0 <LCD_X_Config+0x38c>)
 8007480:	f7fb f85c 	bl	800253c <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8007484:	2014      	movs	r0, #20
 8007486:	f7fa fa47 	bl	8001918 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 800748a:	4639      	mov	r1, r7
 800748c:	4632      	mov	r2, r6
 800748e:	4890      	ldr	r0, [pc, #576]	; (80076d0 <LCD_X_Config+0x38c>)
  hdsi_disco.Instance = DSI;
 8007490:	4f90      	ldr	r7, [pc, #576]	; (80076d4 <LCD_X_Config+0x390>)
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8007492:	f7fb f853 	bl	800253c <HAL_GPIO_WritePin>
  HAL_Delay(10); /* wait 10 ms */
 8007496:	200a      	movs	r0, #10
 8007498:	f7fa fa3e 	bl	8001918 <HAL_Delay>
  BSP_LCD_MspInit();
 800749c:	f7ff fe38 	bl	8007110 <BSP_LCD_MspInit>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80074a0:	2308      	movs	r3, #8
 80074a2:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80074a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80074a8:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80074aa:	2305      	movs	r3, #5
 80074ac:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80074ae:	a80b      	add	r0, sp, #44	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80074b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074b4:	9315      	str	r3, [sp, #84]	; 0x54
 80074b6:	9303      	str	r3, [sp, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80074b8:	f7fc ffb0 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>
  hdsi_disco.Instance = DSI;
 80074bc:	4a86      	ldr	r2, [pc, #536]	; (80076d8 <LCD_X_Config+0x394>)
 80074be:	603a      	str	r2, [r7, #0]
  HAL_DSI_DeInit(&(hdsi_disco));
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7fa fd36 	bl	8001f32 <HAL_DSI_DeInit>
  PLLInit.PLLIDF   = DSI_PLL_IN_DIV2;
 80074c6:	f04f 0802 	mov.w	r8, #2
 80074ca:	227d      	movs	r2, #125	; 0x7d
  hdsi_disco.Init.TXEscapeCkdiv = 0x4;
 80074cc:	f04f 0a04 	mov.w	sl, #4
  HAL_DSI_Init(&(hdsi_disco), &(PLLInit));
 80074d0:	4982      	ldr	r1, [pc, #520]	; (80076dc <LCD_X_Config+0x398>)
  PLLInit.PLLODF   = DSI_PLL_OUT_DIV1;
 80074d2:	64a5      	str	r5, [r4, #72]	; 0x48
  HAL_DSI_Init(&(hdsi_disco), &(PLLInit));
 80074d4:	4638      	mov	r0, r7
  PLLInit.PLLIDF   = DSI_PLL_IN_DIV2;
 80074d6:	e9c4 2810 	strd	r2, r8, [r4, #64]	; 0x40
  hdsi_disco.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80074da:	60fe      	str	r6, [r7, #12]
  hdsi_disco.Init.TXEscapeCkdiv = 0x4;
 80074dc:	f8c7 a008 	str.w	sl, [r7, #8]
  HAL_DSI_Init(&(hdsi_disco), &(PLLInit));
 80074e0:	f7fa fc76 	bl	8001dd0 <HAL_DSI_Init>
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 80074e4:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 80074e8:	2210      	movs	r2, #16
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_disco, &CmdCfg);
 80074ea:	497d      	ldr	r1, [pc, #500]	; (80076e0 <LCD_X_Config+0x39c>)
  CmdCfg.VirtualChannelID      = 0;
 80074ec:	64e5      	str	r5, [r4, #76]	; 0x4c
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_disco, &CmdCfg);
 80074ee:	4638      	mov	r0, r7
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 80074f0:	e9c4 c215 	strd	ip, r2, [r4, #84]	; 0x54
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 80074f4:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80074f8:	66a5      	str	r5, [r4, #104]	; 0x68
  CmdCfg.ColorCoding           = DSI_RGB565;
 80074fa:	6525      	str	r5, [r4, #80]	; 0x50
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80074fc:	65e5      	str	r5, [r4, #92]	; 0x5c
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 80074fe:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 8007502:	6766      	str	r6, [r4, #116]	; 0x74
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_disco, &CmdCfg);
 8007504:	f7fa fdd2 	bl	80020ac <HAL_DSI_ConfigAdaptedCommandMode>
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8007508:	f44f 7e80 	mov.w	lr, #256	; 0x100
 800750c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007510:	e9c4 e21e 	strd	lr, r2, [r4, #120]	; 0x78
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 8007514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800751c:	e9c4 3220 	strd	r3, r2, [r4, #128]	; 0x80
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8007526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800752a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 800752e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007532:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8007536:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 800753a:	e9c4 0326 	strd	r0, r3, [r4, #152]	; 0x98
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 800753e:	4969      	ldr	r1, [pc, #420]	; (80076e4 <LCD_X_Config+0x3a0>)
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_ENABLE;
 8007540:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 8007544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 8007548:	4638      	mov	r0, r7
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_ENABLE;
 800754a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 800754e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 8007552:	f7fa fe1d 	bl	8002190 <HAL_DSI_ConfigCommand>
  HAL_LTDC_DeInit(&hltdc_disco);
 8007556:	4b64      	ldr	r3, [pc, #400]	; (80076e8 <LCD_X_Config+0x3a4>)
 8007558:	9303      	str	r3, [sp, #12]
 800755a:	4618      	mov	r0, r3
 800755c:	f7fc f83b 	bl	80035d6 <HAL_LTDC_DeInit>
  hltdc_disco.Instance = LTDC;
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	4a62      	ldr	r2, [pc, #392]	; (80076ec <LCD_X_Config+0x3a8>)
  hltdc_disco.Init.AccumulatedHBP = HSYNC+HBP;
 8007564:	f8c3 8020 	str.w	r8, [r3, #32]
  hltdc_disco.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 8007568:	f04f 0cca 	mov.w	ip, #202	; 0xca
  hltdc_disco.Instance = LTDC;
 800756c:	e9c3 2500 	strd	r2, r5, [r3]
  hltdc_disco.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 8007570:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8007574:	e9c3 c209 	strd	ip, r2, [r3, #36]	; 0x24
  hltdc_disco.Init.TotalWidth = HSYNC+HBP+HACT+HFP;
 8007578:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
 800757c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007580:	e9c3 e20b 	strd	lr, r2, [r3, #44]	; 0x2c
  hltdc_disco.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007584:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hltdc_disco.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007588:	e9c3 5604 	strd	r5, r6, [r3, #16]
  hltdc_disco.Init.VerticalSync = VSYNC;
 800758c:	e9c3 6806 	strd	r6, r8, [r3, #24]
  hltdc_disco.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 8007590:	869d      	strh	r5, [r3, #52]	; 0x34
  hltdc_disco.Init.Backcolor.Green = 0;
 8007592:	f883 5036 	strb.w	r5, [r3, #54]	; 0x36
  HAL_LTDC_Init(&hltdc_disco);
 8007596:	4618      	mov	r0, r3
 8007598:	f7fb ffb0 	bl	80034fc <HAL_LTDC_Init>
  HAL_DSI_Start(&(hdsi_disco));
 800759c:	4638      	mov	r0, r7
 800759e:	f7fa fe3c 	bl	800221a <HAL_DSI_Start>
  HAL_DSI_ShortWrite(&(hdsi_disco),
 80075a2:	2215      	movs	r2, #21
 80075a4:	2328      	movs	r3, #40	; 0x28
 80075a6:	4629      	mov	r1, r5
 80075a8:	9500      	str	r5, [sp, #0]
 80075aa:	4638      	mov	r0, r7
 80075ac:	f7fa fe68 	bl	8002280 <HAL_DSI_ShortWrite>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 80075b0:	4631      	mov	r1, r6
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7f9 fad6 	bl	8000b64 <OTM8009A_Init>
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 80075b8:	494a      	ldr	r1, [pc, #296]	; (80076e4 <LCD_X_Config+0x3a0>)
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 80075ba:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 80075be:	4638      	mov	r0, r7
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 80075c0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 80075c4:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 80075c8:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 80075cc:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 80075d0:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 80075d4:	f7fa fddc 	bl	8002190 <HAL_DSI_ConfigCommand>
  HAL_DSI_ConfigFlowControl(&hdsi_disco, DSI_FLOW_CONTROL_BTA);
 80075d8:	4651      	mov	r1, sl
 80075da:	4638      	mov	r0, r7
 80075dc:	f7fa fe0c 	bl	80021f8 <HAL_DSI_ConfigFlowControl>
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80075e0:	9504      	str	r5, [sp, #16]
 80075e2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 80075e6:	4842      	ldr	r0, [pc, #264]	; (80076f0 <LCD_X_Config+0x3ac>)
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80075e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075ec:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80075f0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80075f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 80075fc:	a906      	add	r1, sp, #24
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 80075fe:	230d      	movs	r3, #13
 8007600:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8007602:	e9cd a806 	strd	sl, r8, [sp, #24]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8007606:	e9cd 5b08 	strd	r5, fp, [sp, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 800760a:	f7fa feab 	bl	8002364 <HAL_GPIO_Init>
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800760e:	4b39      	ldr	r3, [pc, #228]	; (80076f4 <LCD_X_Config+0x3b0>)
 8007610:	4a39      	ldr	r2, [pc, #228]	; (80076f8 <LCD_X_Config+0x3b4>)
 8007612:	601a      	str	r2, [r3, #0]
  DMA2D->OMAR    = (U32)pDst;                      
 8007614:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  DMA2D->OCOLR   = ColorIndex;                     
 8007618:	639d      	str	r5, [r3, #56]	; 0x38
  DMA2D->OMAR    = (U32)pDst;                      
 800761a:	63da      	str	r2, [r3, #60]	; 0x3c
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800761c:	4a37      	ldr	r2, [pc, #220]	; (80076fc <LCD_X_Config+0x3b8>)
  DMA2D->OOR     = OffLine;                        
 800761e:	641d      	str	r5, [r3, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 8007620:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8007624:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START; 
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 800762e:	681c      	ldr	r4, [r3, #0]
 8007630:	f014 0401 	ands.w	r4, r4, #1
 8007634:	d1fb      	bne.n	800762e <LCD_X_Config+0x2ea>
  HAL_DSI_Refresh(&hdsi_disco);
 8007636:	4827      	ldr	r0, [pc, #156]	; (80076d4 <LCD_X_Config+0x390>)
  LCD_LL_LayerInit(0, LCD_LAYER0_FRAME_BUFFER);
#if (GUI_NUM_LAYERS > 1)    
  LCD_LL_LayerInit(1, LCD_LAYER1_FRAME_BUFFER);
#endif

  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 8007638:	4d31      	ldr	r5, [pc, #196]	; (8007700 <LCD_X_Config+0x3bc>)
  HAL_DSI_Refresh(&hdsi_disco);
 800763a:	f7fa fe11 	bl	8002260 <HAL_DSI_Refresh>
  LCD_LL_LayerInit(0, LCD_LAYER0_FRAME_BUFFER);
 800763e:	4620      	mov	r0, r4
 8007640:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007644:	f7ff fcc6 	bl	8006fd4 <LCD_LL_LayerInit>
  LCD_LL_LayerInit(1, LCD_LAYER1_FRAME_BUFFER);
 8007648:	492e      	ldr	r1, [pc, #184]	; (8007704 <LCD_X_Config+0x3c0>)
 800764a:	2001      	movs	r0, #1
 800764c:	f7ff fcc2 	bl	8006fd4 <LCD_LL_LayerInit>
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 8007650:	232a      	movs	r3, #42	; 0x2a
 8007652:	9501      	str	r5, [sp, #4]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	4621      	mov	r1, r4
 8007658:	2304      	movs	r3, #4
 800765a:	2239      	movs	r2, #57	; 0x39
 800765c:	481d      	ldr	r0, [pc, #116]	; (80076d4 <LCD_X_Config+0x390>)
 800765e:	f7fa fe20 	bl	80022a2 <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 8007662:	351c      	adds	r5, #28
 8007664:	232b      	movs	r3, #43	; 0x2b
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4621      	mov	r1, r4
 800766a:	2304      	movs	r3, #4
 800766c:	9501      	str	r5, [sp, #4]
 800766e:	2239      	movs	r2, #57	; 0x39
 8007670:	4818      	ldr	r0, [pc, #96]	; (80076d4 <LCD_X_Config+0x390>)
 8007672:	f7fa fe16 	bl	80022a2 <HAL_DSI_LongWrite>

  /* Update pitch : the draw is done on the whole physical X Size */
  HAL_LTDC_SetPitch(&hltdc_disco, XSIZE_PHYS, 0);
 8007676:	4622      	mov	r2, r4
 8007678:	f44f 7148 	mov.w	r1, #800	; 0x320
 800767c:	481a      	ldr	r0, [pc, #104]	; (80076e8 <LCD_X_Config+0x3a4>)
 800767e:	f7fc f8f5 	bl	800386c <HAL_LTDC_SetPitch>
#if (GUI_NUM_LAYERS > 1)    
  HAL_LTDC_SetPitch(&hltdc_disco, XSIZE_PHYS, 1);
 8007682:	2201      	movs	r2, #1
 8007684:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007688:	4817      	ldr	r0, [pc, #92]	; (80076e8 <LCD_X_Config+0x3a4>)
 800768a:	f7fc f8ef 	bl	800386c <HAL_LTDC_SetPitch>
#endif

  HAL_Delay(20);
 800768e:	2014      	movs	r0, #20
 8007690:	f7fa f942 	bl	8001918 <HAL_Delay>

  LCD_ReqTear();
 8007694:	f7ff fe36 	bl	8007304 <LCD_ReqTear>

  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi_disco),
 8007698:	9400      	str	r4, [sp, #0]
 800769a:	2329      	movs	r3, #41	; 0x29
 800769c:	2215      	movs	r2, #21
 800769e:	4621      	mov	r1, r4
 80076a0:	480c      	ldr	r0, [pc, #48]	; (80076d4 <LCD_X_Config+0x390>)
 80076a2:	f7fa fded 	bl	8002280 <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
}
 80076a6:	b01b      	add	sp, #108	; 0x6c
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	080150f8 	.word	0x080150f8
 80076b0:	080154b4 	.word	0x080154b4
 80076b4:	080150e0 	.word	0x080150e0
 80076b8:	200004f8 	.word	0x200004f8
 80076bc:	08006e09 	.word	0x08006e09
 80076c0:	08007025 	.word	0x08007025
 80076c4:	08006f55 	.word	0x08006f55
 80076c8:	08006e61 	.word	0x08006e61
 80076cc:	08006ec1 	.word	0x08006ec1
 80076d0:	40021c00 	.word	0x40021c00
 80076d4:	2003537c 	.word	0x2003537c
 80076d8:	40016c00 	.word	0x40016c00
 80076dc:	20000538 	.word	0x20000538
 80076e0:	20000544 	.word	0x20000544
 80076e4:	20000570 	.word	0x20000570
 80076e8:	20035398 	.word	0x20035398
 80076ec:	40016800 	.word	0x40016800
 80076f0:	40022400 	.word	0x40022400
 80076f4:	4002b000 	.word	0x4002b000
 80076f8:	00030200 	.word	0x00030200
 80076fc:	032001e0 	.word	0x032001e0
 8007700:	20000048 	.word	0x20000048
 8007704:	c0400000 	.word	0xc0400000
 8007708:	080150d8 	.word	0x080150d8
 800770c:	08006dcd 	.word	0x08006dcd
 8007710:	40023800 	.word	0x40023800
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8007714:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007718:	f44f 7148 	mov.w	r1, #800	; 0x320
 800771c:	f003 fde0 	bl	800b2e0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8007720:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007724:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007728:	4620      	mov	r0, r4
 800772a:	e62f      	b.n	800738c <LCD_X_Config+0x48>
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 800772c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007730:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007734:	2001      	movs	r0, #1
 8007736:	f003 fdd3 	bl	800b2e0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800773a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800773e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007742:	e63c      	b.n	80073be <LCD_X_Config+0x7a>
 8007744:	2601      	movs	r6, #1
 8007746:	e64b      	b.n	80073e0 <LCD_X_Config+0x9c>

08007748 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8007748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  U32 addr;
  int xPos, yPos;
  U32 Color;

  LCD_X_SHOWBUFFER_INFO * p;  
  switch (Cmd) 
 800774a:	3903      	subs	r1, #3
{
 800774c:	4604      	mov	r4, r0
 800774e:	4615      	mov	r5, r2
  switch (Cmd) 
 8007750:	290b      	cmp	r1, #11
 8007752:	f200 80c3 	bhi.w	80078dc <LCD_X_DisplayDriver+0x194>
 8007756:	e8df f001 	tbb	[pc, r1]
 800775a:	c106      	.short	0xc106
 800775c:	8b92332c 	.word	0x8b92332c
 8007760:	a8c1a239 	.word	0xa8c1a239
 8007764:	19b2      	.short	0x19b2
  {   
  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8007766:	4a5f      	ldr	r2, [pc, #380]	; (80078e4 <LCD_X_DisplayDriver+0x19c>)
 8007768:	686d      	ldr	r5, [r5, #4]
 800776a:	231c      	movs	r3, #28
 800776c:	4343      	muls	r3, r0
 800776e:	18d0      	adds	r0, r2, r3
 8007770:	58d3      	ldr	r3, [r2, r3]
 8007772:	68c1      	ldr	r1, [r0, #12]
 8007774:	6940      	ldr	r0, [r0, #20]
 8007776:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc_disco, addr, LayerIndex);
 8007778:	fb00 3101 	mla	r1, r0, r1, r3
 800777c:	4622      	mov	r2, r4
 800777e:	485a      	ldr	r0, [pc, #360]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 8007780:	f7fc f854 	bl	800382c <HAL_LTDC_SetAddress>
  int r = 0;
 8007784:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r;
}
 8007786:	4628      	mov	r0, r5
 8007788:	b004      	add	sp, #16
 800778a:	bd70      	pop	{r4, r5, r6, pc}
    LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + \
 800778c:	4857      	ldr	r0, [pc, #348]	; (80078ec <LCD_X_DisplayDriver+0x1a4>)
      layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel * p->Index;
 800778e:	4e55      	ldr	r6, [pc, #340]	; (80078e4 <LCD_X_DisplayDriver+0x19c>)
 8007790:	6815      	ldr	r5, [r2, #0]
 8007792:	231c      	movs	r3, #28
    LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + \
 8007794:	eb00 0084 	add.w	r0, r0, r4, lsl #2
      layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel * p->Index;
 8007798:	435c      	muls	r4, r3
 800779a:	1931      	adds	r1, r6, r4
 800779c:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
 80077a0:	4353      	muls	r3, r2
 80077a2:	694a      	ldr	r2, [r1, #20]
    layer_prop[LayerIndex].pending_buffer = p->Index;
 80077a4:	604d      	str	r5, [r1, #4]
      layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel * p->Index;
 80077a6:	435a      	muls	r2, r3
    LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + \
 80077a8:	5933      	ldr	r3, [r6, r4]
 80077aa:	fb05 3202 	mla	r2, r5, r2, r3
 80077ae:	6142      	str	r2, [r0, #20]
 80077b0:	e7e8      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
    __HAL_LTDC_ENABLE(&hltdc_disco);
 80077b2:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	6993      	ldr	r3, [r2, #24]
 80077b8:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc_disco);
 80077bc:	6193      	str	r3, [r2, #24]
 80077be:	e7e1      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
 80077c0:	4b49      	ldr	r3, [pc, #292]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	6993      	ldr	r3, [r2, #24]
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	e7f7      	b.n	80077bc <LCD_X_DisplayDriver+0x74>
 80077cc:	4b48      	ldr	r3, [pc, #288]	; (80078f0 <LCD_X_DisplayDriver+0x1a8>)
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80077ce:	6829      	ldr	r1, [r5, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b45      	ldr	r3, [pc, #276]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	2901      	cmp	r1, #1
 80077d8:	f100 0384 	add.w	r3, r0, #132	; 0x84
 80077dc:	ea4f 14c4 	mov.w	r4, r4, lsl #7
 80077e0:	f04f 0100 	mov.w	r1, #0
 80077e4:	d125      	bne.n	8007832 <LCD_X_DisplayDriver+0xea>
      __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 80077e6:	9100      	str	r1, [sp, #0]
 80077e8:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 80077ec:	f025 0508 	bic.w	r5, r5, #8
 80077f0:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
 80077f4:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 80077f8:	f005 0508 	and.w	r5, r5, #8
 80077fc:	9500      	str	r5, [sp, #0]
 80077fe:	9d00      	ldr	r5, [sp, #0]
      __HAL_LTDC_LAYER_ENABLE(&hltdc_disco, LayerIndex); 
 8007800:	591d      	ldr	r5, [r3, r4]
 8007802:	f045 0501 	orr.w	r5, r5, #1
 8007806:	511d      	str	r5, [r3, r4]
      __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);
 8007808:	9101      	str	r1, [sp, #4]
 800780a:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800780e:	f043 0308 	orr.w	r3, r3, #8
 8007812:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8007816:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	9b01      	ldr	r3, [sp, #4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco); 
 8007822:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007824:	f043 0301 	orr.w	r3, r3, #1
 8007828:	6243      	str	r3, [r0, #36]	; 0x24
    HAL_DSI_Refresh(&hdsi_disco); 
 800782a:	4831      	ldr	r0, [pc, #196]	; (80078f0 <LCD_X_DisplayDriver+0x1a8>)
 800782c:	f7fa fd18 	bl	8002260 <HAL_DSI_Refresh>
 8007830:	e7a8      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
      __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 8007832:	9102      	str	r1, [sp, #8]
 8007834:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 8007838:	f025 0508 	bic.w	r5, r5, #8
 800783c:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
 8007840:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 8007844:	f005 0508 	and.w	r5, r5, #8
 8007848:	9502      	str	r5, [sp, #8]
 800784a:	9d02      	ldr	r5, [sp, #8]
      __HAL_LTDC_LAYER_DISABLE(&hltdc_disco, LayerIndex); 
 800784c:	591d      	ldr	r5, [r3, r4]
 800784e:	f025 0501 	bic.w	r5, r5, #1
 8007852:	511d      	str	r5, [r3, r4]
      __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);
 8007854:	9103      	str	r1, [sp, #12]
 8007856:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800785a:	f043 0308 	orr.w	r3, r3, #8
 800785e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8007862:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	e7d8      	b.n	8007822 <LCD_X_DisplayDriver+0xda>
    HAL_LTDC_SetWindowPosition(&hltdc_disco, 
 8007870:	e9d2 1200 	ldrd	r1, r2, [r2]
 8007874:	4603      	mov	r3, r0
    HAL_LTDC_SetWindowPosition(&hltdc_disco, xPos, yPos, LayerIndex);
 8007876:	481c      	ldr	r0, [pc, #112]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 8007878:	f7fb ff8f 	bl	800379a <HAL_LTDC_SetWindowPosition>
 800787c:	e782      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 800787e:	aa03      	add	r2, sp, #12
 8007880:	a902      	add	r1, sp, #8
 8007882:	f002 fa97 	bl	8009db4 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8007886:	4a17      	ldr	r2, [pc, #92]	; (80078e4 <LCD_X_DisplayDriver+0x19c>)
 8007888:	231c      	movs	r3, #28
 800788a:	fb03 2304 	mla	r3, r3, r4, r2
 800788e:	682a      	ldr	r2, [r5, #0]
 8007890:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8007892:	686a      	ldr	r2, [r5, #4]
 8007894:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc_disco, xPos, yPos, LayerIndex);
 8007896:	4623      	mov	r3, r4
 8007898:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800789c:	e7eb      	b.n	8007876 <LCD_X_DisplayDriver+0x12e>
    HAL_LTDC_SetAlpha(&hltdc_disco, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800789e:	4602      	mov	r2, r0
 80078a0:	6829      	ldr	r1, [r5, #0]
 80078a2:	4811      	ldr	r0, [pc, #68]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 80078a4:	f7fb ffa2 	bl	80037ec <HAL_LTDC_SetAlpha>
 80078a8:	e76c      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80078aa:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc_disco, LayerIndex);
 80078ac:	4601      	mov	r1, r0
 80078ae:	480e      	ldr	r0, [pc, #56]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80078b0:	b115      	cbz	r5, 80078b8 <LCD_X_DisplayDriver+0x170>
      HAL_LTDC_EnableColorKeying(&hltdc_disco, LayerIndex);
 80078b2:	f7fb ff42 	bl	800373a <HAL_LTDC_EnableColorKeying>
 80078b6:	e765      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
      HAL_LTDC_DisableColorKeying(&hltdc_disco, LayerIndex);      
 80078b8:	f7fb ff57 	bl	800376a <HAL_LTDC_DisableColorKeying>
 80078bc:	e763      	b.n	8007786 <LCD_X_DisplayDriver+0x3e>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80078be:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80078c0:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80078c2:	f3c3 4107 	ubfx	r1, r3, #16, #8
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80078c6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80078ca:	4311      	orrs	r1, r2
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80078cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    HAL_LTDC_ConfigColorKeying(&hltdc_disco, Color, LayerIndex);
 80078d0:	4602      	mov	r2, r0
 80078d2:	4319      	orrs	r1, r3
 80078d4:	4804      	ldr	r0, [pc, #16]	; (80078e8 <LCD_X_DisplayDriver+0x1a0>)
 80078d6:	f7fb ff13 	bl	8003700 <HAL_LTDC_ConfigColorKeying>
 80078da:	e753      	b.n	8007784 <LCD_X_DisplayDriver+0x3c>
    r = -1;
 80078dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  return r;
 80078e0:	e751      	b.n	8007786 <LCD_X_DisplayDriver+0x3e>
 80078e2:	bf00      	nop
 80078e4:	200004f8 	.word	0x200004f8
 80078e8:	20035398 	.word	0x20035398
 80078ec:	20000048 	.word	0x20000048
 80078f0:	2003537c 	.word	0x2003537c

080078f4 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hdsi_disco);
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <DSI_IRQHandler+0x8>)
 80078f6:	f7fa bb67 	b.w	8001fc8 <HAL_DSI_IRQHandler>
 80078fa:	bf00      	nop
 80078fc:	2003537c 	.word	0x2003537c

08007900 <GUI_X_Init>:
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
}
 8007900:	4770      	bx	lr
	...

08007904 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 8007904:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 8007906:	a802      	add	r0, sp, #8
 8007908:	2500      	movs	r5, #0
 800790a:	f840 5d08 	str.w	r5, [r0, #-8]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800790e:	f7fd fbcf 	bl	80050b0 <osMutexCreate>
 8007912:	4c05      	ldr	r4, [pc, #20]	; (8007928 <GUI_X_InitOS+0x24>)
 8007914:	6020      	str	r0, [r4, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 8007916:	a802      	add	r0, sp, #8
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 8007918:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800791a:	f840 5d04 	str.w	r5, [r0, #-4]!
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800791e:	f7fd fc15 	bl	800514c <osSemaphoreCreate>
 8007922:	6060      	str	r0, [r4, #4]
}
 8007924:	b003      	add	sp, #12
 8007926:	bd30      	pop	{r4, r5, pc}
 8007928:	200005a4 	.word	0x200005a4

0800792c <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
  osMutexRelease(osMutex);
 800792c:	4b01      	ldr	r3, [pc, #4]	; (8007934 <GUI_X_Unlock+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	f7fd bbe8 	b.w	8005104 <osMutexRelease>
 8007934:	200005a4 	.word	0x200005a4

08007938 <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
  osMutexWait(osMutex , osWaitForever) ;
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <GUI_X_Lock+0xc>)
 800793a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	f7fd bbba 	b.w	80050b8 <osMutexWait>
 8007944:	200005a4 	.word	0x200005a4

08007948 <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
  return ((U32) osThreadGetId());
 8007948:	f7fd bb6e 	b.w	8005028 <osThreadGetId>

0800794c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 800794c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007950:	f000 b81b 	b.w	800798a <USBH_LL_IncTimer>

08007954 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8007954:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007958:	f000 b833 	b.w	80079c2 <USBH_LL_Connect>

0800795c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800795c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007960:	f000 b841 	b.w	80079e6 <USBH_LL_Disconnect>

08007964 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8007964:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007968:	f000 b81d 	b.w	80079a6 <USBH_LL_PortEnabled>

0800796c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800796c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007970:	f000 b823 	b.w	80079ba <USBH_LL_PortDisabled>

08007974 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
#if (USBH_USE_OS == 1)   
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007974:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007978:	f000 b853 	b.w	8007a22 <USBH_LL_NotifyURBChange>

0800797c <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800797c:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 800797e:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8007982:	f7fb f8e7 	bl	8002b54 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8007986:	2000      	movs	r0, #0
 8007988:	bd08      	pop	{r3, pc}

0800798a <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 800798a:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 800798e:	3201      	adds	r2, #1
 8007990:	f8c0 24c4 	str.w	r2, [r0, #1220]	; 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007994:	7802      	ldrb	r2, [r0, #0]
 8007996:	2a0b      	cmp	r2, #11
 8007998:	d104      	bne.n	80079a4 <USBH_LL_IncTimer+0x1a>
 800799a:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 800799e:	b10b      	cbz	r3, 80079a4 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	4718      	bx	r3
}
 80079a4:	4770      	bx	lr

080079a6 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 80079a6:	2101      	movs	r1, #1
 80079a8:	f880 1423 	strb.w	r1, [r0, #1059]	; 0x423

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079ac:	f8c0 14e0 	str.w	r1, [r0, #1248]	; 0x4e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8d0 04d8 	ldr.w	r0, [r0, #1240]	; 0x4d8
 80079b6:	f7fd bbdf 	b.w	8005178 <osMessagePut>

080079ba <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 80079c0:	4770      	bx	lr

080079c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079c2:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 80079c4:	2101      	movs	r1, #1
  phost->device.is_disconnected = 0U;
 80079c6:	2400      	movs	r4, #0
  phost->device.is_connected = 1U;
 80079c8:	f880 1420 	strb.w	r1, [r0, #1056]	; 0x420
  phost->device.is_ReEnumerated = 0U;


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079cc:	f8c0 14e0 	str.w	r1, [r0, #1248]	; 0x4e0
  phost->device.is_disconnected = 0U;
 80079d0:	f880 4421 	strb.w	r4, [r0, #1057]	; 0x421
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079d4:	4622      	mov	r2, r4
  phost->device.is_ReEnumerated = 0U;
 80079d6:	f880 4422 	strb.w	r4, [r0, #1058]	; 0x422
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079da:	f8d0 04d8 	ldr.w	r0, [r0, #1240]	; 0x4d8
 80079de:	f7fd fbcb 	bl	8005178 <osMessagePut>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80079e2:	4620      	mov	r0, r4
 80079e4:	bd10      	pop	{r4, pc}

080079e6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079e6:	b570      	push	{r4, r5, r6, lr}
 80079e8:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
  phost->device.is_connected = 0U;
 80079ea:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 80079ec:	2601      	movs	r6, #1
 80079ee:	f880 6421 	strb.w	r6, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 80079f2:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 80079f6:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 80079fa:	f7ff ffbf 	bl	800797c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80079fe:	7921      	ldrb	r1, [r4, #4]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 f819 	bl	8007a38 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a06:	7961      	ldrb	r1, [r4, #5]
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f815 	bl	8007a38 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a0e:	f8c4 64e0 	str.w	r6, [r4, #1248]	; 0x4e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a12:	462a      	mov	r2, r5
 8007a14:	4631      	mov	r1, r6
 8007a16:	f8d4 04d8 	ldr.w	r0, [r4, #1240]	; 0x4d8
 8007a1a:	f7fd fbad 	bl	8005178 <osMessagePut>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007a1e:	4628      	mov	r0, r5
 8007a20:	bd70      	pop	{r4, r5, r6, pc}

08007a22 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007a22:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a24:	2101      	movs	r1, #1
 8007a26:	f8c0 14e0 	str.w	r1, [r0, #1248]	; 0x4e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8d0 04d8 	ldr.w	r0, [r0, #1240]	; 0x4d8
 8007a30:	f7fd fba2 	bl	8005178 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 8007a34:	2000      	movs	r0, #0
 8007a36:	bd08      	pop	{r3, pc}

08007a38 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
  if (idx < 11U)
 8007a38:	290a      	cmp	r1, #10
 8007a3a:	bf9f      	itttt	ls
 8007a3c:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007a40:	f8d0 3484 	ldrls.w	r3, [r0, #1156]	; 0x484
 8007a44:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8007a48:	f8c0 3484 	strls.w	r3, [r0, #1156]	; 0x484
  }

  return USBH_OK;
}
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	4770      	bx	lr

08007a50 <_Color2Index_M1555I>:
 8007a50:	490a      	ldr	r1, [pc, #40]	; (8007a7c <_Color2Index_M1555I+0x2c>)
 8007a52:	b2c3      	uxtb	r3, r0
 8007a54:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8007a58:	b410      	push	{r4}
 8007a5a:	5c8a      	ldrb	r2, [r1, r2]
 8007a5c:	5ccc      	ldrb	r4, [r1, r3]
 8007a5e:	0fc3      	lsrs	r3, r0, #31
 8007a60:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007a64:	03db      	lsls	r3, r3, #15
 8007a66:	eb02 2284 	add.w	r2, r2, r4, lsl #10
 8007a6a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8007a6e:	5c08      	ldrb	r0, [r1, r0]
 8007a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a74:	4413      	add	r3, r2
 8007a76:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8007a7a:	4770      	bx	lr
 8007a7c:	08015238 	.word	0x08015238

08007a80 <_Index2Color_M1555I>:
 8007a80:	f000 031f 	and.w	r3, r0, #31
 8007a84:	f3c0 2284 	ubfx	r2, r0, #10, #5
 8007a88:	490a      	ldr	r1, [pc, #40]	; (8007ab4 <_Index2Color_M1555I+0x34>)
 8007a8a:	b410      	push	{r4}
 8007a8c:	f3c0 1444 	ubfx	r4, r0, #5, #5
 8007a90:	5ccb      	ldrb	r3, [r1, r3]
 8007a92:	5c8a      	ldrb	r2, [r1, r2]
 8007a94:	5d09      	ldrb	r1, [r1, r4]
 8007a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a9a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007a9e:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8007aa2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8007aa6:	bf14      	ite	ne
 8007aa8:	2000      	movne	r0, #0
 8007aaa:	f04f 407f 	moveq.w	r0, #4278190080	; 0xff000000
 8007aae:	4418      	add	r0, r3
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	08015478 	.word	0x08015478

08007ab8 <_GetIndexMask_M1555I>:
 8007ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <_Color2IndexBulk_M1555I>:
 8007ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac2:	4c13      	ldr	r4, [pc, #76]	; (8007b10 <_Color2IndexBulk_M1555I+0x50>)
 8007ac4:	f8d4 e000 	ldr.w	lr, [r4]
 8007ac8:	f1be 0f00 	cmp.w	lr, #0
 8007acc:	d003      	beq.n	8007ad6 <_Color2IndexBulk_M1555I+0x16>
 8007ace:	46f4      	mov	ip, lr
 8007ad0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ad4:	4760      	bx	ip
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	480e      	ldr	r0, [pc, #56]	; (8007b14 <_Color2IndexBulk_M1555I+0x54>)
 8007ada:	460c      	mov	r4, r1
 8007adc:	4615      	mov	r5, r2
 8007ade:	461f      	mov	r7, r3
 8007ae0:	f856 1b04 	ldr.w	r1, [r6], #4
 8007ae4:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8007ae8:	b2cb      	uxtb	r3, r1
 8007aea:	5c82      	ldrb	r2, [r0, r2]
 8007aec:	5cc3      	ldrb	r3, [r0, r3]
 8007aee:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 8007af2:	eb02 2283 	add.w	r2, r2, r3, lsl #10
 8007af6:	43cb      	mvns	r3, r1
 8007af8:	0fdb      	lsrs	r3, r3, #31
 8007afa:	f810 100e 	ldrb.w	r1, [r0, lr]
 8007afe:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8007b02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007b06:	3d01      	subs	r5, #1
 8007b08:	8023      	strh	r3, [r4, #0]
 8007b0a:	443c      	add	r4, r7
 8007b0c:	d1e8      	bne.n	8007ae0 <_Color2IndexBulk_M1555I+0x20>
 8007b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b10:	200005ac 	.word	0x200005ac
 8007b14:	08015238 	.word	0x08015238

08007b18 <_Index2ColorBulk_M1555I>:
 8007b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b1a:	4c18      	ldr	r4, [pc, #96]	; (8007b7c <_Index2ColorBulk_M1555I+0x64>)
 8007b1c:	6864      	ldr	r4, [r4, #4]
 8007b1e:	b11c      	cbz	r4, 8007b28 <_Index2ColorBulk_M1555I+0x10>
 8007b20:	46a4      	mov	ip, r4
 8007b22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007b26:	4760      	bx	ip
 8007b28:	468e      	mov	lr, r1
 8007b2a:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8007b2e:	3901      	subs	r1, #1
 8007b30:	3a01      	subs	r2, #1
 8007b32:	fb03 0002 	mla	r0, r3, r2, r0
 8007b36:	4e12      	ldr	r6, [pc, #72]	; (8007b80 <_Index2ColorBulk_M1555I+0x68>)
 8007b38:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 8007b3c:	425b      	negs	r3, r3
 8007b3e:	e000      	b.n	8007b42 <_Index2ColorBulk_M1555I+0x2a>
 8007b40:	3a01      	subs	r2, #1
 8007b42:	8805      	ldrh	r5, [r0, #0]
 8007b44:	f005 071f 	and.w	r7, r5, #31
 8007b48:	f3c5 2484 	ubfx	r4, r5, #10, #5
 8007b4c:	f816 e007 	ldrb.w	lr, [r6, r7]
 8007b50:	5d34      	ldrb	r4, [r6, r4]
 8007b52:	f3c5 1744 	ubfx	r7, r5, #5, #5
 8007b56:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 8007b5a:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 8007b5e:	5df7      	ldrb	r7, [r6, r7]
 8007b60:	bf0c      	ite	eq
 8007b62:	f04f 457f 	moveq.w	r5, #4278190080	; 0xff000000
 8007b66:	2500      	movne	r5, #0
 8007b68:	442c      	add	r4, r5
 8007b6a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8007b6e:	4418      	add	r0, r3
 8007b70:	f841 4904 	str.w	r4, [r1], #-4
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	d1e3      	bne.n	8007b40 <_Index2ColorBulk_M1555I+0x28>
 8007b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200005ac 	.word	0x200005ac
 8007b80:	08015478 	.word	0x08015478

08007b84 <LCD_Index2Color_M565>:
 8007b84:	b410      	push	{r4}
 8007b86:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8007b8a:	f000 041f 	and.w	r4, r0, #31
 8007b8e:	4a07      	ldr	r2, [pc, #28]	; (8007bac <LCD_Index2Color_M565+0x28>)
 8007b90:	4907      	ldr	r1, [pc, #28]	; (8007bb0 <LCD_Index2Color_M565+0x2c>)
 8007b92:	5cd3      	ldrb	r3, [r2, r3]
 8007b94:	5d12      	ldrb	r2, [r2, r4]
 8007b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b9a:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8007b9e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8007ba2:	5c08      	ldrb	r0, [r1, r0]
 8007ba4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	08015478 	.word	0x08015478
 8007bb0:	08015438 	.word	0x08015438

08007bb4 <_Color2Index_M565>:
 8007bb4:	b410      	push	{r4}
 8007bb6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007bba:	b2c4      	uxtb	r4, r0
 8007bbc:	4a06      	ldr	r2, [pc, #24]	; (8007bd8 <_Color2Index_M565+0x24>)
 8007bbe:	4907      	ldr	r1, [pc, #28]	; (8007bdc <_Color2Index_M565+0x28>)
 8007bc0:	5cd3      	ldrb	r3, [r2, r3]
 8007bc2:	5d12      	ldrb	r2, [r2, r4]
 8007bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007bcc:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8007bd0:	5c08      	ldrb	r0, [r1, r0]
 8007bd2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8007bd6:	4770      	bx	lr
 8007bd8:	08015238 	.word	0x08015238
 8007bdc:	08015138 	.word	0x08015138

08007be0 <_GetIndexMask_M565>:
 8007be0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop

08007be8 <_Color2IndexBulk>:
 8007be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bea:	4c13      	ldr	r4, [pc, #76]	; (8007c38 <_Color2IndexBulk+0x50>)
 8007bec:	f8d4 e000 	ldr.w	lr, [r4]
 8007bf0:	f1be 0f00 	cmp.w	lr, #0
 8007bf4:	d003      	beq.n	8007bfe <_Color2IndexBulk+0x16>
 8007bf6:	46f4      	mov	ip, lr
 8007bf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007bfc:	4760      	bx	ip
 8007bfe:	4606      	mov	r6, r0
 8007c00:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8007c40 <_Color2IndexBulk+0x58>
 8007c04:	480d      	ldr	r0, [pc, #52]	; (8007c3c <_Color2IndexBulk+0x54>)
 8007c06:	460c      	mov	r4, r1
 8007c08:	4615      	mov	r5, r2
 8007c0a:	461f      	mov	r7, r3
 8007c0c:	f856 3b04 	ldr.w	r3, [r6], #4
 8007c10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007c14:	fa5f fe83 	uxtb.w	lr, r3
 8007c18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007c1c:	5c82      	ldrb	r2, [r0, r2]
 8007c1e:	f810 300e 	ldrb.w	r3, [r0, lr]
 8007c22:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8007c26:	eb02 23c3 	add.w	r3, r2, r3, lsl #11
 8007c2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007c2e:	3d01      	subs	r5, #1
 8007c30:	8023      	strh	r3, [r4, #0]
 8007c32:	443c      	add	r4, r7
 8007c34:	d1ea      	bne.n	8007c0c <_Color2IndexBulk+0x24>
 8007c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c38:	200005b4 	.word	0x200005b4
 8007c3c:	08015238 	.word	0x08015238
 8007c40:	08015138 	.word	0x08015138

08007c44 <_Index2ColorBulk>:
 8007c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c48:	4c15      	ldr	r4, [pc, #84]	; (8007ca0 <_Index2ColorBulk+0x5c>)
 8007c4a:	6864      	ldr	r4, [r4, #4]
 8007c4c:	b11c      	cbz	r4, 8007c56 <_Index2ColorBulk+0x12>
 8007c4e:	46a4      	mov	ip, r4
 8007c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	4760      	bx	ip
 8007c56:	4688      	mov	r8, r1
 8007c58:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8007c5c:	3901      	subs	r1, #1
 8007c5e:	3a01      	subs	r2, #1
 8007c60:	fb03 0002 	mla	r0, r3, r2, r0
 8007c64:	4f0f      	ldr	r7, [pc, #60]	; (8007ca4 <_Index2ColorBulk+0x60>)
 8007c66:	f8df e040 	ldr.w	lr, [pc, #64]	; 8007ca8 <_Index2ColorBulk+0x64>
 8007c6a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8007c6e:	425b      	negs	r3, r3
 8007c70:	e000      	b.n	8007c74 <_Index2ColorBulk+0x30>
 8007c72:	3a01      	subs	r2, #1
 8007c74:	8804      	ldrh	r4, [r0, #0]
 8007c76:	0ae5      	lsrs	r5, r4, #11
 8007c78:	f004 0c1f 	and.w	ip, r4, #31
 8007c7c:	f3c4 1645 	ubfx	r6, r4, #5, #6
 8007c80:	5d7d      	ldrb	r5, [r7, r5]
 8007c82:	f817 400c 	ldrb.w	r4, [r7, ip]
 8007c86:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8007c8a:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 8007c8e:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8007c92:	4418      	add	r0, r3
 8007c94:	f841 4904 	str.w	r4, [r1], #-4
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	d1ea      	bne.n	8007c72 <_Index2ColorBulk+0x2e>
 8007c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca0:	200005b4 	.word	0x200005b4
 8007ca4:	08015478 	.word	0x08015478
 8007ca8:	08015438 	.word	0x08015438

08007cac <_AddFreeMemory>:
 8007cac:	4bc0      	ldr	r3, [pc, #768]	; (8007fb0 <_AddFreeMemory+0x304>)
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	4422      	add	r2, r4
 8007cb8:	180d      	adds	r5, r1, r0
 8007cba:	42aa      	cmp	r2, r5
 8007cbc:	d303      	bcc.n	8007cc6 <_AddFreeMemory+0x1a>
 8007cbe:	580a      	ldr	r2, [r1, r0]
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	f000 80a1 	beq.w	8007e08 <_AddFreeMemory+0x15c>
 8007cc6:	428c      	cmp	r4, r1
 8007cc8:	d205      	bcs.n	8007cd6 <_AddFreeMemory+0x2a>
 8007cca:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8007cce:	1a8a      	subs	r2, r1, r2
 8007cd0:	6814      	ldr	r4, [r2, #0]
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	d04a      	beq.n	8007d6c <_AddFreeMemory+0xc0>
 8007cd6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8007cda:	4ab5      	ldr	r2, [pc, #724]	; (8007fb0 <_AddFreeMemory+0x304>)
 8007cdc:	42a0      	cmp	r0, r4
 8007cde:	f080 811e 	bcs.w	8007f1e <_AddFreeMemory+0x272>
 8007ce2:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007ce6:	42a0      	cmp	r0, r4
 8007ce8:	f080 811b 	bcs.w	8007f22 <_AddFreeMemory+0x276>
 8007cec:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	f080 8118 	bcs.w	8007f26 <_AddFreeMemory+0x27a>
 8007cf6:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 8007cfa:	42a0      	cmp	r0, r4
 8007cfc:	f080 8115 	bcs.w	8007f2a <_AddFreeMemory+0x27e>
 8007d00:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8007d04:	42a0      	cmp	r0, r4
 8007d06:	f080 8112 	bcs.w	8007f2e <_AddFreeMemory+0x282>
 8007d0a:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8007d0e:	42a0      	cmp	r0, r4
 8007d10:	f080 810f 	bcs.w	8007f32 <_AddFreeMemory+0x286>
 8007d14:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8007d18:	42a0      	cmp	r0, r4
 8007d1a:	f080 810c 	bcs.w	8007f36 <_AddFreeMemory+0x28a>
 8007d1e:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 8007d22:	42a0      	cmp	r0, r4
 8007d24:	f080 8109 	bcs.w	8007f3a <_AddFreeMemory+0x28e>
 8007d28:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8007d2a:	42a0      	cmp	r0, r4
 8007d2c:	f080 8107 	bcs.w	8007f3e <_AddFreeMemory+0x292>
 8007d30:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007d32:	4290      	cmp	r0, r2
 8007d34:	f080 8105 	bcs.w	8007f42 <_AddFreeMemory+0x296>
 8007d38:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8007d3a:	4a9d      	ldr	r2, [pc, #628]	; (8007fb0 <_AddFreeMemory+0x304>)
 8007d3c:	42a0      	cmp	r0, r4
 8007d3e:	f080 8102 	bcs.w	8007f46 <_AddFreeMemory+0x29a>
 8007d42:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	f080 8100 	bcs.w	8007f4a <_AddFreeMemory+0x29e>
 8007d4a:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	f080 80fe 	bcs.w	8007f4e <_AddFreeMemory+0x2a2>
 8007d52:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	f080 80fc 	bcs.w	8007f52 <_AddFreeMemory+0x2a6>
 8007d5a:	6c94      	ldr	r4, [r2, #72]	; 0x48
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	f080 80fa 	bcs.w	8007f56 <_AddFreeMemory+0x2aa>
 8007d62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d64:	4290      	cmp	r0, r2
 8007d66:	f080 80a6 	bcs.w	8007eb6 <_AddFreeMemory+0x20a>
 8007d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6c:	6851      	ldr	r1, [r2, #4]
 8007d6e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8007d72:	4c8f      	ldr	r4, [pc, #572]	; (8007fb0 <_AddFreeMemory+0x304>)
 8007d74:	42a9      	cmp	r1, r5
 8007d76:	4408      	add	r0, r1
 8007d78:	f080 80f9 	bcs.w	8007f6e <_AddFreeMemory+0x2c2>
 8007d7c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8007d80:	42a9      	cmp	r1, r5
 8007d82:	f080 8106 	bcs.w	8007f92 <_AddFreeMemory+0x2e6>
 8007d86:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007d8a:	42a9      	cmp	r1, r5
 8007d8c:	f080 80ff 	bcs.w	8007f8e <_AddFreeMemory+0x2e2>
 8007d90:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8007d94:	42a9      	cmp	r1, r5
 8007d96:	f080 80f8 	bcs.w	8007f8a <_AddFreeMemory+0x2de>
 8007d9a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8007d9e:	42a9      	cmp	r1, r5
 8007da0:	f080 80fc 	bcs.w	8007f9c <_AddFreeMemory+0x2f0>
 8007da4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8007da8:	42a9      	cmp	r1, r5
 8007daa:	f080 80ff 	bcs.w	8007fac <_AddFreeMemory+0x300>
 8007dae:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8007db2:	42a9      	cmp	r1, r5
 8007db4:	f080 80f8 	bcs.w	8007fa8 <_AddFreeMemory+0x2fc>
 8007db8:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8007dbc:	42a1      	cmp	r1, r4
 8007dbe:	f080 80f1 	bcs.w	8007fa4 <_AddFreeMemory+0x2f8>
 8007dc2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8007dc4:	4c7a      	ldr	r4, [pc, #488]	; (8007fb0 <_AddFreeMemory+0x304>)
 8007dc6:	42a9      	cmp	r1, r5
 8007dc8:	f080 80ea 	bcs.w	8007fa0 <_AddFreeMemory+0x2f4>
 8007dcc:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007dce:	42a9      	cmp	r1, r5
 8007dd0:	f080 8113 	bcs.w	8007ffa <_AddFreeMemory+0x34e>
 8007dd4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8007dd6:	42a9      	cmp	r1, r5
 8007dd8:	f080 810d 	bcs.w	8007ff6 <_AddFreeMemory+0x34a>
 8007ddc:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007dde:	42a9      	cmp	r1, r5
 8007de0:	f080 8107 	bcs.w	8007ff2 <_AddFreeMemory+0x346>
 8007de4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8007de6:	42a9      	cmp	r1, r5
 8007de8:	f080 8101 	bcs.w	8007fee <_AddFreeMemory+0x342>
 8007dec:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8007dee:	42a9      	cmp	r1, r5
 8007df0:	f080 80fb 	bcs.w	8007fea <_AddFreeMemory+0x33e>
 8007df4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8007df6:	42a9      	cmp	r1, r5
 8007df8:	f080 8104 	bcs.w	8008004 <_AddFreeMemory+0x358>
 8007dfc:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8007dfe:	42a1      	cmp	r1, r4
 8007e00:	f080 8081 	bcs.w	8007f06 <_AddFreeMemory+0x25a>
 8007e04:	4611      	mov	r1, r2
 8007e06:	e766      	b.n	8007cd6 <_AddFreeMemory+0x2a>
 8007e08:	686a      	ldr	r2, [r5, #4]
 8007e0a:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8007e0e:	42b2      	cmp	r2, r6
 8007e10:	4410      	add	r0, r2
 8007e12:	f080 80ae 	bcs.w	8007f72 <_AddFreeMemory+0x2c6>
 8007e16:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8007e1a:	42b2      	cmp	r2, r6
 8007e1c:	f080 80b2 	bcs.w	8007f84 <_AddFreeMemory+0x2d8>
 8007e20:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8007e24:	42b2      	cmp	r2, r6
 8007e26:	f080 80aa 	bcs.w	8007f7e <_AddFreeMemory+0x2d2>
 8007e2a:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8007e2e:	42b2      	cmp	r2, r6
 8007e30:	f080 80a2 	bcs.w	8007f78 <_AddFreeMemory+0x2cc>
 8007e34:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8007e38:	42b2      	cmp	r2, r6
 8007e3a:	f080 80ac 	bcs.w	8007f96 <_AddFreeMemory+0x2ea>
 8007e3e:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 8007e42:	42b2      	cmp	r2, r6
 8007e44:	f080 80bf 	bcs.w	8007fc6 <_AddFreeMemory+0x31a>
 8007e48:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8007e4c:	42b2      	cmp	r2, r6
 8007e4e:	f080 80b7 	bcs.w	8007fc0 <_AddFreeMemory+0x314>
 8007e52:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8007e56:	42b2      	cmp	r2, r6
 8007e58:	f080 80af 	bcs.w	8007fba <_AddFreeMemory+0x30e>
 8007e5c:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8007e5e:	42ba      	cmp	r2, r7
 8007e60:	f080 80a8 	bcs.w	8007fb4 <_AddFreeMemory+0x308>
 8007e64:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8007e66:	42ba      	cmp	r2, r7
 8007e68:	f080 80b9 	bcs.w	8007fde <_AddFreeMemory+0x332>
 8007e6c:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8007e6e:	42ba      	cmp	r2, r7
 8007e70:	f080 80b2 	bcs.w	8007fd8 <_AddFreeMemory+0x32c>
 8007e74:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8007e76:	42ba      	cmp	r2, r7
 8007e78:	f080 80ab 	bcs.w	8007fd2 <_AddFreeMemory+0x326>
 8007e7c:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8007e7e:	42ba      	cmp	r2, r7
 8007e80:	f080 80a4 	bcs.w	8007fcc <_AddFreeMemory+0x320>
 8007e84:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8007e86:	42ba      	cmp	r2, r7
 8007e88:	f080 80ac 	bcs.w	8007fe4 <_AddFreeMemory+0x338>
 8007e8c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8007e8e:	42ba      	cmp	r2, r7
 8007e90:	f080 80b5 	bcs.w	8007ffe <_AddFreeMemory+0x352>
 8007e94:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8007e96:	42b2      	cmp	r2, r6
 8007e98:	f4ff af15 	bcc.w	8007cc6 <_AddFreeMemory+0x1a>
 8007e9c:	f04f 0e00 	mov.w	lr, #0
 8007ea0:	681e      	ldr	r6, [r3, #0]
 8007ea2:	68af      	ldr	r7, [r5, #8]
 8007ea4:	68ed      	ldr	r5, [r5, #12]
 8007ea6:	1ab2      	subs	r2, r6, r2
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	b107      	cbz	r7, 8007eae <_AddFreeMemory+0x202>
 8007eac:	607d      	str	r5, [r7, #4]
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	d058      	beq.n	8007f64 <_AddFreeMemory+0x2b8>
 8007eb2:	602f      	str	r7, [r5, #0]
 8007eb4:	e707      	b.n	8007cc6 <_AddFreeMemory+0x1a>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	3208      	adds	r2, #8
 8007eba:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8007ebe:	180d      	adds	r5, r1, r0
 8007ec0:	6864      	ldr	r4, [r4, #4]
 8007ec2:	608c      	str	r4, [r1, #8]
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	600e      	str	r6, [r1, #0]
 8007ec8:	6048      	str	r0, [r1, #4]
 8007eca:	6109      	str	r1, [r1, #16]
 8007ecc:	f101 0608 	add.w	r6, r1, #8
 8007ed0:	f845 0c04 	str.w	r0, [r5, #-4]
 8007ed4:	b104      	cbz	r4, 8007ed8 <_AddFreeMemory+0x22c>
 8007ed6:	6066      	str	r6, [r4, #4]
 8007ed8:	2500      	movs	r5, #0
 8007eda:	608c      	str	r4, [r1, #8]
 8007edc:	60cd      	str	r5, [r1, #12]
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 8007ee4:	4c32      	ldr	r4, [pc, #200]	; (8007fb0 <_AddFreeMemory+0x304>)
 8007ee6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007eea:	4401      	add	r1, r0
 8007eec:	6056      	str	r6, [r2, #4]
 8007eee:	6019      	str	r1, [r3, #0]
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	f47f af3a 	bne.w	8007d6a <_AddFreeMemory+0xbe>
 8007ef6:	68e3      	ldr	r3, [r4, #12]
 8007ef8:	68a2      	ldr	r2, [r4, #8]
 8007efa:	1a59      	subs	r1, r3, r1
 8007efc:	4291      	cmp	r1, r2
 8007efe:	f67f af34 	bls.w	8007d6a <_AddFreeMemory+0xbe>
 8007f02:	60a1      	str	r1, [r4, #8]
 8007f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f06:	2700      	movs	r7, #0
 8007f08:	681c      	ldr	r4, [r3, #0]
 8007f0a:	6895      	ldr	r5, [r2, #8]
 8007f0c:	68d6      	ldr	r6, [r2, #12]
 8007f0e:	1a61      	subs	r1, r4, r1
 8007f10:	6019      	str	r1, [r3, #0]
 8007f12:	b105      	cbz	r5, 8007f16 <_AddFreeMemory+0x26a>
 8007f14:	606e      	str	r6, [r5, #4]
 8007f16:	b306      	cbz	r6, 8007f5a <_AddFreeMemory+0x2ae>
 8007f18:	6035      	str	r5, [r6, #0]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	e6db      	b.n	8007cd6 <_AddFreeMemory+0x2a>
 8007f1e:	220f      	movs	r2, #15
 8007f20:	e7ca      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f22:	220e      	movs	r2, #14
 8007f24:	e7c8      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f26:	220d      	movs	r2, #13
 8007f28:	e7c6      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f2a:	220c      	movs	r2, #12
 8007f2c:	e7c4      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f2e:	220b      	movs	r2, #11
 8007f30:	e7c2      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f32:	220a      	movs	r2, #10
 8007f34:	e7c0      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f36:	2209      	movs	r2, #9
 8007f38:	e7be      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	e7bc      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f3e:	2207      	movs	r2, #7
 8007f40:	e7ba      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f42:	2206      	movs	r2, #6
 8007f44:	e7b8      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f46:	2205      	movs	r2, #5
 8007f48:	e7b6      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	e7b4      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f4e:	2203      	movs	r2, #3
 8007f50:	e7b2      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f52:	2202      	movs	r2, #2
 8007f54:	e7b0      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f56:	2201      	movs	r2, #1
 8007f58:	e7ae      	b.n	8007eb8 <_AddFreeMemory+0x20c>
 8007f5a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007f5e:	4611      	mov	r1, r2
 8007f60:	647d      	str	r5, [r7, #68]	; 0x44
 8007f62:	e6b8      	b.n	8007cd6 <_AddFreeMemory+0x2a>
 8007f64:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8007f68:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 8007f6c:	e6ab      	b.n	8007cc6 <_AddFreeMemory+0x1a>
 8007f6e:	270f      	movs	r7, #15
 8007f70:	e7ca      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007f72:	f04f 0e0f 	mov.w	lr, #15
 8007f76:	e793      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007f78:	f04f 0e0c 	mov.w	lr, #12
 8007f7c:	e790      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007f7e:	f04f 0e0d 	mov.w	lr, #13
 8007f82:	e78d      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007f84:	f04f 0e0e 	mov.w	lr, #14
 8007f88:	e78a      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007f8a:	270c      	movs	r7, #12
 8007f8c:	e7bc      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007f8e:	270d      	movs	r7, #13
 8007f90:	e7ba      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007f92:	270e      	movs	r7, #14
 8007f94:	e7b8      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007f96:	f04f 0e0b 	mov.w	lr, #11
 8007f9a:	e781      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007f9c:	270b      	movs	r7, #11
 8007f9e:	e7b3      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007fa0:	2707      	movs	r7, #7
 8007fa2:	e7b1      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007fa4:	2708      	movs	r7, #8
 8007fa6:	e7af      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007fa8:	2709      	movs	r7, #9
 8007faa:	e7ad      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007fac:	270a      	movs	r7, #10
 8007fae:	e7ab      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007fb0:	20035704 	.word	0x20035704
 8007fb4:	f04f 0e07 	mov.w	lr, #7
 8007fb8:	e772      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fba:	f04f 0e08 	mov.w	lr, #8
 8007fbe:	e76f      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fc0:	f04f 0e09 	mov.w	lr, #9
 8007fc4:	e76c      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fc6:	f04f 0e0a 	mov.w	lr, #10
 8007fca:	e769      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fcc:	f04f 0e03 	mov.w	lr, #3
 8007fd0:	e766      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fd2:	f04f 0e04 	mov.w	lr, #4
 8007fd6:	e763      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fd8:	f04f 0e05 	mov.w	lr, #5
 8007fdc:	e760      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fde:	f04f 0e06 	mov.w	lr, #6
 8007fe2:	e75d      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fe4:	f04f 0e02 	mov.w	lr, #2
 8007fe8:	e75a      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8007fea:	2702      	movs	r7, #2
 8007fec:	e78c      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007fee:	2703      	movs	r7, #3
 8007ff0:	e78a      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007ff2:	2704      	movs	r7, #4
 8007ff4:	e788      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007ff6:	2705      	movs	r7, #5
 8007ff8:	e786      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007ffa:	2706      	movs	r7, #6
 8007ffc:	e784      	b.n	8007f08 <_AddFreeMemory+0x25c>
 8007ffe:	f04f 0e01 	mov.w	lr, #1
 8008002:	e74d      	b.n	8007ea0 <_AddFreeMemory+0x1f4>
 8008004:	2701      	movs	r7, #1
 8008006:	e77f      	b.n	8007f08 <_AddFreeMemory+0x25c>

08008008 <_RemoveHoles>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081b4 <_RemoveHoles+0x1ac>
 8008010:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8008014:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8008018:	e893 0060 	ldmia.w	r3, {r5, r6}
 800801c:	3f01      	subs	r7, #1
 800801e:	b083      	sub	sp, #12
 8008020:	4683      	mov	fp, r0
 8008022:	441f      	add	r7, r3
 8008024:	46c1      	mov	r9, r8
 8008026:	b135      	cbz	r5, 8008036 <_RemoveHoles+0x2e>
 8008028:	4433      	add	r3, r6
 800802a:	429f      	cmp	r7, r3
 800802c:	d906      	bls.n	800803c <_RemoveHoles+0x34>
 800802e:	e893 0060 	ldmia.w	r3, {r5, r6}
 8008032:	2d00      	cmp	r5, #0
 8008034:	d1f8      	bne.n	8008028 <_RemoveHoles+0x20>
 8008036:	1999      	adds	r1, r3, r6
 8008038:	428f      	cmp	r7, r1
 800803a:	d803      	bhi.n	8008044 <_RemoveHoles+0x3c>
 800803c:	2001      	movs	r0, #1
 800803e:	b003      	add	sp, #12
 8008040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008044:	599d      	ldr	r5, [r3, r6]
 8008046:	684c      	ldr	r4, [r1, #4]
 8008048:	b155      	cbz	r5, 8008060 <_RemoveHoles+0x58>
 800804a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800804e:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 8008052:	2801      	cmp	r0, #1
 8008054:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8008058:	d005      	beq.n	8008066 <_RemoveHoles+0x5e>
 800805a:	4626      	mov	r6, r4
 800805c:	460b      	mov	r3, r1
 800805e:	e7e2      	b.n	8008026 <_RemoveHoles+0x1e>
 8008060:	4626      	mov	r6, r4
 8008062:	460b      	mov	r3, r1
 8008064:	e7e7      	b.n	8008036 <_RemoveHoles+0x2e>
 8008066:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 800806a:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 800806e:	42b0      	cmp	r0, r6
 8008070:	d976      	bls.n	8008160 <_RemoveHoles+0x158>
 8008072:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 8008076:	42b0      	cmp	r0, r6
 8008078:	d975      	bls.n	8008166 <_RemoveHoles+0x15e>
 800807a:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 800807e:	42b0      	cmp	r0, r6
 8008080:	d974      	bls.n	800816c <_RemoveHoles+0x164>
 8008082:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8008086:	42b0      	cmp	r0, r6
 8008088:	d973      	bls.n	8008172 <_RemoveHoles+0x16a>
 800808a:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 800808e:	4286      	cmp	r6, r0
 8008090:	d278      	bcs.n	8008184 <_RemoveHoles+0x17c>
 8008092:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 8008096:	4286      	cmp	r6, r0
 8008098:	d277      	bcs.n	800818a <_RemoveHoles+0x182>
 800809a:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 800809e:	4286      	cmp	r6, r0
 80080a0:	d26a      	bcs.n	8008178 <_RemoveHoles+0x170>
 80080a2:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 80080a6:	4286      	cmp	r6, r0
 80080a8:	d269      	bcs.n	800817e <_RemoveHoles+0x176>
 80080aa:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 80080ae:	4286      	cmp	r6, r0
 80080b0:	d274      	bcs.n	800819c <_RemoveHoles+0x194>
 80080b2:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 80080b6:	4286      	cmp	r6, r0
 80080b8:	d273      	bcs.n	80081a2 <_RemoveHoles+0x19a>
 80080ba:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 80080be:	4286      	cmp	r6, r0
 80080c0:	d272      	bcs.n	80081a8 <_RemoveHoles+0x1a0>
 80080c2:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 80080c6:	4286      	cmp	r6, r0
 80080c8:	d262      	bcs.n	8008190 <_RemoveHoles+0x188>
 80080ca:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80080ce:	4286      	cmp	r6, r0
 80080d0:	d261      	bcs.n	8008196 <_RemoveHoles+0x18e>
 80080d2:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80080d6:	4286      	cmp	r6, r0
 80080d8:	d269      	bcs.n	80081ae <_RemoveHoles+0x1a6>
 80080da:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 80080de:	4286      	cmp	r6, r0
 80080e0:	d21f      	bcs.n	8008122 <_RemoveHoles+0x11a>
 80080e2:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 80080e6:	4286      	cmp	r6, r0
 80080e8:	d231      	bcs.n	800814e <_RemoveHoles+0x146>
 80080ea:	6053      	str	r3, [r2, #4]
 80080ec:	4618      	mov	r0, r3
 80080ee:	4622      	mov	r2, r4
 80080f0:	f00c fed8 	bl	8014ea4 <memmove>
 80080f4:	4555      	cmp	r5, sl
 80080f6:	4603      	mov	r3, r0
 80080f8:	d00b      	beq.n	8008112 <_RemoveHoles+0x10a>
 80080fa:	441c      	add	r4, r3
 80080fc:	4630      	mov	r0, r6
 80080fe:	4621      	mov	r1, r4
 8008100:	f7ff fdd4 	bl	8007cac <_AddFreeMemory>
 8008104:	f1bb 0f00 	cmp.w	fp, #0
 8008108:	d001      	beq.n	800810e <_RemoveHoles+0x106>
 800810a:	4558      	cmp	r0, fp
 800810c:	d207      	bcs.n	800811e <_RemoveHoles+0x116>
 800810e:	4623      	mov	r3, r4
 8008110:	e78b      	b.n	800802a <_RemoveHoles+0x22>
 8008112:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8008116:	1b92      	subs	r2, r2, r6
 8008118:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 800811c:	e7ed      	b.n	80080fa <_RemoveHoles+0xf2>
 800811e:	2000      	movs	r0, #0
 8008120:	e78d      	b.n	800803e <_RemoveHoles+0x36>
 8008122:	2001      	movs	r0, #1
 8008124:	9001      	str	r0, [sp, #4]
 8008126:	f8d8 0000 	ldr.w	r0, [r8]
 800812a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800812e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008132:	1b80      	subs	r0, r0, r6
 8008134:	f8c8 0000 	str.w	r0, [r8]
 8008138:	f1be 0f00 	cmp.w	lr, #0
 800813c:	d001      	beq.n	8008142 <_RemoveHoles+0x13a>
 800813e:	f8ce c004 	str.w	ip, [lr, #4]
 8008142:	f1bc 0f00 	cmp.w	ip, #0
 8008146:	d005      	beq.n	8008154 <_RemoveHoles+0x14c>
 8008148:	f8cc e000 	str.w	lr, [ip]
 800814c:	e7cd      	b.n	80080ea <_RemoveHoles+0xe2>
 800814e:	2000      	movs	r0, #0
 8008150:	9001      	str	r0, [sp, #4]
 8008152:	e7e8      	b.n	8008126 <_RemoveHoles+0x11e>
 8008154:	9801      	ldr	r0, [sp, #4]
 8008156:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 800815a:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 800815e:	e7c4      	b.n	80080ea <_RemoveHoles+0xe2>
 8008160:	200f      	movs	r0, #15
 8008162:	9001      	str	r0, [sp, #4]
 8008164:	e7df      	b.n	8008126 <_RemoveHoles+0x11e>
 8008166:	200e      	movs	r0, #14
 8008168:	9001      	str	r0, [sp, #4]
 800816a:	e7dc      	b.n	8008126 <_RemoveHoles+0x11e>
 800816c:	200d      	movs	r0, #13
 800816e:	9001      	str	r0, [sp, #4]
 8008170:	e7d9      	b.n	8008126 <_RemoveHoles+0x11e>
 8008172:	200c      	movs	r0, #12
 8008174:	9001      	str	r0, [sp, #4]
 8008176:	e7d6      	b.n	8008126 <_RemoveHoles+0x11e>
 8008178:	2009      	movs	r0, #9
 800817a:	9001      	str	r0, [sp, #4]
 800817c:	e7d3      	b.n	8008126 <_RemoveHoles+0x11e>
 800817e:	2008      	movs	r0, #8
 8008180:	9001      	str	r0, [sp, #4]
 8008182:	e7d0      	b.n	8008126 <_RemoveHoles+0x11e>
 8008184:	200b      	movs	r0, #11
 8008186:	9001      	str	r0, [sp, #4]
 8008188:	e7cd      	b.n	8008126 <_RemoveHoles+0x11e>
 800818a:	200a      	movs	r0, #10
 800818c:	9001      	str	r0, [sp, #4]
 800818e:	e7ca      	b.n	8008126 <_RemoveHoles+0x11e>
 8008190:	2004      	movs	r0, #4
 8008192:	9001      	str	r0, [sp, #4]
 8008194:	e7c7      	b.n	8008126 <_RemoveHoles+0x11e>
 8008196:	2003      	movs	r0, #3
 8008198:	9001      	str	r0, [sp, #4]
 800819a:	e7c4      	b.n	8008126 <_RemoveHoles+0x11e>
 800819c:	2007      	movs	r0, #7
 800819e:	9001      	str	r0, [sp, #4]
 80081a0:	e7c1      	b.n	8008126 <_RemoveHoles+0x11e>
 80081a2:	2006      	movs	r0, #6
 80081a4:	9001      	str	r0, [sp, #4]
 80081a6:	e7be      	b.n	8008126 <_RemoveHoles+0x11e>
 80081a8:	2005      	movs	r0, #5
 80081aa:	9001      	str	r0, [sp, #4]
 80081ac:	e7bb      	b.n	8008126 <_RemoveHoles+0x11e>
 80081ae:	2002      	movs	r0, #2
 80081b0:	9001      	str	r0, [sp, #4]
 80081b2:	e7b8      	b.n	8008126 <_RemoveHoles+0x11e>
 80081b4:	20035704 	.word	0x20035704

080081b8 <_EnlargeBlocks>:
 80081b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081bc:	4c32      	ldr	r4, [pc, #200]	; (8008288 <_EnlargeBlocks+0xd0>)
 80081be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081c0:	b973      	cbnz	r3, 80081e0 <_EnlargeBlocks+0x28>
 80081c2:	4b32      	ldr	r3, [pc, #200]	; (800828c <_EnlargeBlocks+0xd4>)
 80081c4:	689d      	ldr	r5, [r3, #8]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	3508      	adds	r5, #8
 80081ca:	fbb3 f5f5 	udiv	r5, r3, r5
 80081ce:	3502      	adds	r5, #2
 80081d0:	00e8      	lsls	r0, r5, #3
 80081d2:	f000 f85f 	bl	8008294 <_Alloc>
 80081d6:	4607      	mov	r7, r0
 80081d8:	b960      	cbnz	r0, 80081f4 <_EnlargeBlocks+0x3c>
 80081da:	2001      	movs	r0, #1
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	1d1d      	adds	r5, r3, #4
 80081e4:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80081e8:	00e8      	lsls	r0, r5, #3
 80081ea:	f000 f853 	bl	8008294 <_Alloc>
 80081ee:	4607      	mov	r7, r0
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0f2      	beq.n	80081da <_EnlargeBlocks+0x22>
 80081f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <_EnlargeBlocks+0xd8>)
 80081fa:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008204:	00d2      	lsls	r2, r2, #3
 8008206:	6846      	ldr	r6, [r0, #4]
 8008208:	3608      	adds	r6, #8
 800820a:	4630      	mov	r0, r6
 800820c:	4798      	blx	r3
 800820e:	6920      	ldr	r0, [r4, #16]
 8008210:	6366      	str	r6, [r4, #52]	; 0x34
 8008212:	1e69      	subs	r1, r5, #1
 8008214:	4288      	cmp	r0, r1
 8008216:	62e7      	str	r7, [r4, #44]	; 0x2c
 8008218:	d233      	bcs.n	8008282 <_EnlargeBlocks+0xca>
 800821a:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 800821e:	4603      	mov	r3, r0
 8008220:	3301      	adds	r3, #1
 8008222:	428b      	cmp	r3, r1
 8008224:	6053      	str	r3, [r2, #4]
 8008226:	f102 0208 	add.w	r2, r2, #8
 800822a:	d1f9      	bne.n	8008220 <_EnlargeBlocks+0x68>
 800822c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8008230:	2600      	movs	r6, #0
 8008232:	604e      	str	r6, [r1, #4]
 8008234:	6863      	ldr	r3, [r4, #4]
 8008236:	6260      	str	r0, [r4, #36]	; 0x24
 8008238:	1a1b      	subs	r3, r3, r0
 800823a:	442b      	add	r3, r5
 800823c:	6125      	str	r5, [r4, #16]
 800823e:	6063      	str	r3, [r4, #4]
 8008240:	4c11      	ldr	r4, [pc, #68]	; (8008288 <_EnlargeBlocks+0xd0>)
 8008242:	f1b8 0f00 	cmp.w	r8, #0
 8008246:	d019      	beq.n	800827c <_EnlargeBlocks+0xc4>
 8008248:	f001 fe44 	bl	8009ed4 <GUI_Lock>
 800824c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800824e:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 8008252:	442b      	add	r3, r5
 8008254:	6859      	ldr	r1, [r3, #4]
 8008256:	6848      	ldr	r0, [r1, #4]
 8008258:	f7ff fd28 	bl	8007cac <_AddFreeMemory>
 800825c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008262:	440d      	add	r5, r1
 8008264:	3301      	adds	r3, #1
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	606a      	str	r2, [r5, #4]
 800826a:	f801 6038 	strb.w	r6, [r1, r8, lsl #3]
 800826e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 8008272:	f001 fe25 	bl	8009ec0 <GUI_Unlock>
 8008276:	4630      	mov	r0, r6
 8008278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800827c:	4640      	mov	r0, r8
 800827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008282:	4601      	mov	r1, r0
 8008284:	e7d2      	b.n	800822c <_EnlargeBlocks+0x74>
 8008286:	bf00      	nop
 8008288:	20035704 	.word	0x20035704
 800828c:	200005bc 	.word	0x200005bc
 8008290:	20000090 	.word	0x20000090

08008294 <_Alloc>:
 8008294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4cc0      	ldr	r4, [pc, #768]	; (800859c <_Alloc+0x308>)
 800829a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800829e:	4605      	mov	r5, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 80f8 	beq.w	8008496 <_Alloc+0x202>
 80082a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	4285      	cmp	r5, r0
 80082ac:	bf24      	itt	cs
 80082ae:	1ce8      	addcs	r0, r5, #3
 80082b0:	f020 0003 	biccs.w	r0, r0, #3
 80082b4:	f100 060c 	add.w	r6, r0, #12
 80082b8:	42b3      	cmp	r3, r6
 80082ba:	4db8      	ldr	r5, [pc, #736]	; (800859c <_Alloc+0x308>)
 80082bc:	d202      	bcs.n	80082c4 <_Alloc+0x30>
 80082be:	2000      	movs	r0, #0
 80082c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c4:	686b      	ldr	r3, [r5, #4]
 80082c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80082c8:	4293      	cmp	r3, r2
 80082ca:	f240 8154 	bls.w	8008576 <_Alloc+0x2e2>
 80082ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80082d2:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	eb02 0108 	add.w	r1, r2, r8
 80082dc:	6063      	str	r3, [r4, #4]
 80082de:	684b      	ldr	r3, [r1, #4]
 80082e0:	6263      	str	r3, [r4, #36]	; 0x24
 80082e2:	2301      	movs	r3, #1
 80082e4:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	d0e8      	beq.n	80082be <_Alloc+0x2a>
 80082ec:	4fab      	ldr	r7, [pc, #684]	; (800859c <_Alloc+0x308>)
 80082ee:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 80082f2:	4576      	cmp	r6, lr
 80082f4:	f080 8121 	bcs.w	800853a <_Alloc+0x2a6>
 80082f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082fc:	429e      	cmp	r6, r3
 80082fe:	f080 811e 	bcs.w	800853e <_Alloc+0x2aa>
 8008302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008306:	429e      	cmp	r6, r3
 8008308:	f080 811b 	bcs.w	8008542 <_Alloc+0x2ae>
 800830c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008310:	429e      	cmp	r6, r3
 8008312:	f080 811a 	bcs.w	800854a <_Alloc+0x2b6>
 8008316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800831a:	429e      	cmp	r6, r3
 800831c:	f080 8113 	bcs.w	8008546 <_Alloc+0x2b2>
 8008320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008324:	429e      	cmp	r6, r3
 8008326:	f080 8114 	bcs.w	8008552 <_Alloc+0x2be>
 800832a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800832e:	429e      	cmp	r6, r3
 8008330:	f080 810d 	bcs.w	800854e <_Alloc+0x2ba>
 8008334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008338:	429e      	cmp	r6, r3
 800833a:	f080 810e 	bcs.w	800855a <_Alloc+0x2c6>
 800833e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008340:	429e      	cmp	r6, r3
 8008342:	f080 8108 	bcs.w	8008556 <_Alloc+0x2c2>
 8008346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008348:	429e      	cmp	r6, r3
 800834a:	f080 810a 	bcs.w	8008562 <_Alloc+0x2ce>
 800834e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008350:	429e      	cmp	r6, r3
 8008352:	f080 8104 	bcs.w	800855e <_Alloc+0x2ca>
 8008356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008358:	429e      	cmp	r6, r3
 800835a:	f080 8104 	bcs.w	8008566 <_Alloc+0x2d2>
 800835e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008360:	429e      	cmp	r6, r3
 8008362:	f080 8102 	bcs.w	800856a <_Alloc+0x2d6>
 8008366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008368:	429e      	cmp	r6, r3
 800836a:	f080 8102 	bcs.w	8008572 <_Alloc+0x2de>
 800836e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008370:	429e      	cmp	r6, r3
 8008372:	f080 80fc 	bcs.w	800856e <_Alloc+0x2da>
 8008376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008378:	429e      	cmp	r6, r3
 800837a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800837e:	bf28      	it	cs
 8008380:	2300      	movcs	r3, #0
 8008382:	2b0f      	cmp	r3, #15
 8008384:	d812      	bhi.n	80083ac <_Alloc+0x118>
 8008386:	2100      	movs	r1, #0
 8008388:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 800838c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800838e:	b92b      	cbnz	r3, 800839c <_Alloc+0x108>
 8008390:	e007      	b.n	80083a2 <_Alloc+0x10e>
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	4296      	cmp	r6, r2
 8008396:	d91d      	bls.n	80083d4 <_Alloc+0x140>
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	b113      	cbz	r3, 80083a2 <_Alloc+0x10e>
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f7      	bne.n	8008392 <_Alloc+0xfe>
 80083a2:	3101      	adds	r1, #1
 80083a4:	2910      	cmp	r1, #16
 80083a6:	f100 0008 	add.w	r0, r0, #8
 80083aa:	d1ef      	bne.n	800838c <_Alloc+0xf8>
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff fe2b 	bl	8008008 <_RemoveHoles>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d09b      	beq.n	80082ee <_Alloc+0x5a>
 80083b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083bc:	4490      	add	r8, r2
 80083be:	2600      	movs	r6, #0
 80083c0:	3301      	adds	r3, #1
 80083c2:	6063      	str	r3, [r4, #4]
 80083c4:	f8c8 1004 	str.w	r1, [r8, #4]
 80083c8:	f802 6035 	strb.w	r6, [r2, r5, lsl #3]
 80083cc:	4630      	mov	r0, r6
 80083ce:	6265      	str	r5, [r4, #36]	; 0x24
 80083d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083d6:	1b97      	subs	r7, r2, r6
 80083d8:	f101 000c 	add.w	r0, r1, #12
 80083dc:	4287      	cmp	r7, r0
 80083de:	bf2c      	ite	cs
 80083e0:	4630      	movcs	r0, r6
 80083e2:	4610      	movcc	r0, r2
 80083e4:	4596      	cmp	lr, r2
 80083e6:	f240 80f5 	bls.w	80085d4 <_Alloc+0x340>
 80083ea:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 80083ee:	4e6b      	ldr	r6, [pc, #428]	; (800859c <_Alloc+0x308>)
 80083f0:	42ba      	cmp	r2, r7
 80083f2:	f080 80f1 	bcs.w	80085d8 <_Alloc+0x344>
 80083f6:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 80083fa:	42ba      	cmp	r2, r7
 80083fc:	f080 80e8 	bcs.w	80085d0 <_Alloc+0x33c>
 8008400:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8008404:	42ba      	cmp	r2, r7
 8008406:	f080 80cd 	bcs.w	80085a4 <_Alloc+0x310>
 800840a:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 800840e:	42ba      	cmp	r2, r7
 8008410:	f080 80d8 	bcs.w	80085c4 <_Alloc+0x330>
 8008414:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8008418:	4297      	cmp	r7, r2
 800841a:	f240 80df 	bls.w	80085dc <_Alloc+0x348>
 800841e:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8008422:	4297      	cmp	r7, r2
 8008424:	f240 80de 	bls.w	80085e4 <_Alloc+0x350>
 8008428:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800842c:	4297      	cmp	r7, r2
 800842e:	f240 80d7 	bls.w	80085e0 <_Alloc+0x34c>
 8008432:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8008434:	4297      	cmp	r7, r2
 8008436:	f240 80e5 	bls.w	8008604 <_Alloc+0x370>
 800843a:	6f36      	ldr	r6, [r6, #112]	; 0x70
 800843c:	4296      	cmp	r6, r2
 800843e:	f240 80df 	bls.w	8008600 <_Alloc+0x36c>
 8008442:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 8008444:	4f55      	ldr	r7, [pc, #340]	; (800859c <_Alloc+0x308>)
 8008446:	4296      	cmp	r6, r2
 8008448:	f240 80d8 	bls.w	80085fc <_Alloc+0x368>
 800844c:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800844e:	4296      	cmp	r6, r2
 8008450:	f240 80d2 	bls.w	80085f8 <_Alloc+0x364>
 8008454:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8008456:	42b2      	cmp	r2, r6
 8008458:	f080 80cc 	bcs.w	80085f4 <_Alloc+0x360>
 800845c:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800845e:	4296      	cmp	r6, r2
 8008460:	f240 80c6 	bls.w	80085f0 <_Alloc+0x35c>
 8008464:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8008466:	42b2      	cmp	r2, r6
 8008468:	f080 80c0 	bcs.w	80085ec <_Alloc+0x358>
 800846c:	4291      	cmp	r1, r2
 800846e:	f240 80bb 	bls.w	80085e8 <_Alloc+0x354>
 8008472:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8008474:	1819      	adds	r1, r3, r0
 8008476:	44a0      	add	r8, r4
 8008478:	4290      	cmp	r0, r2
 800847a:	f04f 0400 	mov.w	r4, #0
 800847e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008482:	601d      	str	r5, [r3, #0]
 8008484:	6058      	str	r0, [r3, #4]
 8008486:	611b      	str	r3, [r3, #16]
 8008488:	609c      	str	r4, [r3, #8]
 800848a:	f841 0c04 	str.w	r0, [r1, #-4]
 800848e:	db7e      	blt.n	800858e <_Alloc+0x2fa>
 8008490:	4628      	mov	r0, r5
 8008492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008496:	4b42      	ldr	r3, [pc, #264]	; (80085a0 <_Alloc+0x30c>)
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	6858      	ldr	r0, [r3, #4]
 800849c:	2101      	movs	r1, #1
 800849e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80084a2:	b90a      	cbnz	r2, 80084a8 <_Alloc+0x214>
 80084a4:	0882      	lsrs	r2, r0, #2
 80084a6:	609a      	str	r2, [r3, #8]
 80084a8:	265a      	movs	r6, #90	; 0x5a
 80084aa:	6226      	str	r6, [r4, #32]
 80084ac:	2710      	movs	r7, #16
 80084ae:	2220      	movs	r2, #32
 80084b0:	2640      	movs	r6, #64	; 0x40
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6427      	str	r7, [r4, #64]	; 0x40
 80084b6:	64a2      	str	r2, [r4, #72]	; 0x48
 80084b8:	6526      	str	r6, [r4, #80]	; 0x50
 80084ba:	2780      	movs	r7, #128	; 0x80
 80084bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084c0:	f44f 7600 	mov.w	r6, #512	; 0x200
 80084c4:	65a7      	str	r7, [r4, #88]	; 0x58
 80084c6:	6622      	str	r2, [r4, #96]	; 0x60
 80084c8:	66a6      	str	r6, [r4, #104]	; 0x68
 80084ca:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80084ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084d2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80084d6:	f1a1 0314 	sub.w	r3, r1, #20
 80084da:	6727      	str	r7, [r4, #112]	; 0x70
 80084dc:	67a2      	str	r2, [r4, #120]	; 0x78
 80084de:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80084e2:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 80084e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80084ea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 80084ee:	4403      	add	r3, r0
 80084f0:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
 80084f4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80084f8:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 80084fc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8008500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008504:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8008508:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
 800850c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 8008510:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 8008514:	2202      	movs	r2, #2
 8008516:	2601      	movs	r6, #1
 8008518:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800851c:	63a1      	str	r1, [r4, #56]	; 0x38
 800851e:	6363      	str	r3, [r4, #52]	; 0x34
 8008520:	6122      	str	r2, [r4, #16]
 8008522:	60e0      	str	r0, [r4, #12]
 8008524:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 8008528:	605e      	str	r6, [r3, #4]
 800852a:	6266      	str	r6, [r4, #36]	; 0x24
 800852c:	6066      	str	r6, [r4, #4]
 800852e:	f7ff fbbd 	bl	8007cac <_AddFreeMemory>
 8008532:	f7ff fe41 	bl	80081b8 <_EnlargeBlocks>
 8008536:	6326      	str	r6, [r4, #48]	; 0x30
 8008538:	e6b5      	b.n	80082a6 <_Alloc+0x12>
 800853a:	210f      	movs	r1, #15
 800853c:	e724      	b.n	8008388 <_Alloc+0xf4>
 800853e:	210e      	movs	r1, #14
 8008540:	e722      	b.n	8008388 <_Alloc+0xf4>
 8008542:	210d      	movs	r1, #13
 8008544:	e720      	b.n	8008388 <_Alloc+0xf4>
 8008546:	210b      	movs	r1, #11
 8008548:	e71e      	b.n	8008388 <_Alloc+0xf4>
 800854a:	210c      	movs	r1, #12
 800854c:	e71c      	b.n	8008388 <_Alloc+0xf4>
 800854e:	2109      	movs	r1, #9
 8008550:	e71a      	b.n	8008388 <_Alloc+0xf4>
 8008552:	210a      	movs	r1, #10
 8008554:	e718      	b.n	8008388 <_Alloc+0xf4>
 8008556:	2107      	movs	r1, #7
 8008558:	e716      	b.n	8008388 <_Alloc+0xf4>
 800855a:	2108      	movs	r1, #8
 800855c:	e714      	b.n	8008388 <_Alloc+0xf4>
 800855e:	2105      	movs	r1, #5
 8008560:	e712      	b.n	8008388 <_Alloc+0xf4>
 8008562:	2106      	movs	r1, #6
 8008564:	e710      	b.n	8008388 <_Alloc+0xf4>
 8008566:	2104      	movs	r1, #4
 8008568:	e70e      	b.n	8008388 <_Alloc+0xf4>
 800856a:	2103      	movs	r1, #3
 800856c:	e70c      	b.n	8008388 <_Alloc+0xf4>
 800856e:	2101      	movs	r1, #1
 8008570:	e70a      	b.n	8008388 <_Alloc+0xf4>
 8008572:	2102      	movs	r1, #2
 8008574:	e708      	b.n	8008388 <_Alloc+0xf4>
 8008576:	3a01      	subs	r2, #1
 8008578:	632a      	str	r2, [r5, #48]	; 0x30
 800857a:	f7ff fe1d 	bl	80081b8 <_EnlargeBlocks>
 800857e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008580:	3301      	adds	r3, #1
 8008582:	632b      	str	r3, [r5, #48]	; 0x30
 8008584:	2800      	cmp	r0, #0
 8008586:	f47f ae9a 	bne.w	80082be <_Alloc+0x2a>
 800858a:	686b      	ldr	r3, [r5, #4]
 800858c:	e69f      	b.n	80082ce <_Alloc+0x3a>
 800858e:	1a10      	subs	r0, r2, r0
 8008590:	f7ff fb8c 	bl	8007cac <_AddFreeMemory>
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859a:	bf00      	nop
 800859c:	20035704 	.word	0x20035704
 80085a0:	200005bc 	.word	0x200005bc
 80085a4:	210c      	movs	r1, #12
 80085a6:	6826      	ldr	r6, [r4, #0]
 80085a8:	689f      	ldr	r7, [r3, #8]
 80085aa:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80085ae:	1ab6      	subs	r6, r6, r2
 80085b0:	6026      	str	r6, [r4, #0]
 80085b2:	b10f      	cbz	r7, 80085b8 <_Alloc+0x324>
 80085b4:	f8c7 e004 	str.w	lr, [r7, #4]
 80085b8:	f1be 0f00 	cmp.w	lr, #0
 80085bc:	d004      	beq.n	80085c8 <_Alloc+0x334>
 80085be:	f8ce 7000 	str.w	r7, [lr]
 80085c2:	e756      	b.n	8008472 <_Alloc+0x1de>
 80085c4:	210b      	movs	r1, #11
 80085c6:	e7ee      	b.n	80085a6 <_Alloc+0x312>
 80085c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80085cc:	644f      	str	r7, [r1, #68]	; 0x44
 80085ce:	e750      	b.n	8008472 <_Alloc+0x1de>
 80085d0:	210d      	movs	r1, #13
 80085d2:	e7e8      	b.n	80085a6 <_Alloc+0x312>
 80085d4:	210f      	movs	r1, #15
 80085d6:	e7e6      	b.n	80085a6 <_Alloc+0x312>
 80085d8:	210e      	movs	r1, #14
 80085da:	e7e4      	b.n	80085a6 <_Alloc+0x312>
 80085dc:	210a      	movs	r1, #10
 80085de:	e7e2      	b.n	80085a6 <_Alloc+0x312>
 80085e0:	2108      	movs	r1, #8
 80085e2:	e7e0      	b.n	80085a6 <_Alloc+0x312>
 80085e4:	2109      	movs	r1, #9
 80085e6:	e7de      	b.n	80085a6 <_Alloc+0x312>
 80085e8:	2100      	movs	r1, #0
 80085ea:	e7dc      	b.n	80085a6 <_Alloc+0x312>
 80085ec:	2101      	movs	r1, #1
 80085ee:	e7da      	b.n	80085a6 <_Alloc+0x312>
 80085f0:	2102      	movs	r1, #2
 80085f2:	e7d8      	b.n	80085a6 <_Alloc+0x312>
 80085f4:	2103      	movs	r1, #3
 80085f6:	e7d6      	b.n	80085a6 <_Alloc+0x312>
 80085f8:	2104      	movs	r1, #4
 80085fa:	e7d4      	b.n	80085a6 <_Alloc+0x312>
 80085fc:	2105      	movs	r1, #5
 80085fe:	e7d2      	b.n	80085a6 <_Alloc+0x312>
 8008600:	2106      	movs	r1, #6
 8008602:	e7d0      	b.n	80085a6 <_Alloc+0x312>
 8008604:	2107      	movs	r1, #7
 8008606:	e7ce      	b.n	80085a6 <_Alloc+0x312>

08008608 <GUI_ALLOC_FreeFixedBlock>:
 8008608:	b128      	cbz	r0, 8008616 <GUI_ALLOC_FreeFixedBlock+0xe>
 800860a:	4a03      	ldr	r2, [pc, #12]	; (8008618 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800860c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800860e:	6003      	str	r3, [r0, #0]
 8008610:	b103      	cbz	r3, 8008614 <GUI_ALLOC_FreeFixedBlock+0xc>
 8008612:	6058      	str	r0, [r3, #4]
 8008614:	63d0      	str	r0, [r2, #60]	; 0x3c
 8008616:	4770      	bx	lr
 8008618:	20035704 	.word	0x20035704

0800861c <GUI_ALLOC_GetFixedBlock>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	4e89      	ldr	r6, [pc, #548]	; (8008844 <GUI_ALLOC_GetFixedBlock+0x228>)
 8008620:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8008624:	4604      	mov	r4, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d02f      	beq.n	800868a <GUI_ALLOC_GetFixedBlock+0x6e>
 800862a:	3403      	adds	r4, #3
 800862c:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800862e:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008630:	f024 0403 	bic.w	r4, r4, #3
 8008634:	3404      	adds	r4, #4
 8008636:	42a5      	cmp	r5, r4
 8008638:	bf38      	it	cc
 800863a:	4625      	movcc	r5, r4
 800863c:	b162      	cbz	r2, 8008658 <GUI_ALLOC_GetFixedBlock+0x3c>
 800863e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008642:	429d      	cmp	r5, r3
 8008644:	4614      	mov	r4, r2
 8008646:	d104      	bne.n	8008652 <GUI_ALLOC_GetFixedBlock+0x36>
 8008648:	e014      	b.n	8008674 <GUI_ALLOC_GetFixedBlock+0x58>
 800864a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800864e:	429d      	cmp	r5, r3
 8008650:	d010      	beq.n	8008674 <GUI_ALLOC_GetFixedBlock+0x58>
 8008652:	6824      	ldr	r4, [r4, #0]
 8008654:	2c00      	cmp	r4, #0
 8008656:	d1f8      	bne.n	800864a <GUI_ALLOC_GetFixedBlock+0x2e>
 8008658:	68f3      	ldr	r3, [r6, #12]
 800865a:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800865c:	441c      	add	r4, r3
 800865e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008662:	1a61      	subs	r1, r4, r1
 8008664:	680b      	ldr	r3, [r1, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d165      	bne.n	8008736 <GUI_ALLOC_GetFixedBlock+0x11a>
 800866a:	684b      	ldr	r3, [r1, #4]
 800866c:	429d      	cmp	r5, r3
 800866e:	dd6c      	ble.n	800874a <GUI_ALLOC_GetFixedBlock+0x12e>
 8008670:	2400      	movs	r4, #0
 8008672:	e008      	b.n	8008686 <GUI_ALLOC_GetFixedBlock+0x6a>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	b10b      	cbz	r3, 800867c <GUI_ALLOC_GetFixedBlock+0x60>
 8008678:	6861      	ldr	r1, [r4, #4]
 800867a:	6059      	str	r1, [r3, #4]
 800867c:	6861      	ldr	r1, [r4, #4]
 800867e:	b101      	cbz	r1, 8008682 <GUI_ALLOC_GetFixedBlock+0x66>
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	42a2      	cmp	r2, r4
 8008684:	d053      	beq.n	800872e <GUI_ALLOC_GetFixedBlock+0x112>
 8008686:	4620      	mov	r0, r4
 8008688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800868a:	4b6f      	ldr	r3, [pc, #444]	; (8008848 <GUI_ALLOC_GetFixedBlock+0x22c>)
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	6858      	ldr	r0, [r3, #4]
 8008690:	2101      	movs	r1, #1
 8008692:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 8008696:	b90a      	cbnz	r2, 800869c <GUI_ALLOC_GetFixedBlock+0x80>
 8008698:	0882      	lsrs	r2, r0, #2
 800869a:	609a      	str	r2, [r3, #8]
 800869c:	255a      	movs	r5, #90	; 0x5a
 800869e:	6235      	str	r5, [r6, #32]
 80086a0:	2710      	movs	r7, #16
 80086a2:	2220      	movs	r2, #32
 80086a4:	2540      	movs	r5, #64	; 0x40
 80086a6:	6819      	ldr	r1, [r3, #0]
 80086a8:	6437      	str	r7, [r6, #64]	; 0x40
 80086aa:	64b2      	str	r2, [r6, #72]	; 0x48
 80086ac:	6535      	str	r5, [r6, #80]	; 0x50
 80086ae:	2780      	movs	r7, #128	; 0x80
 80086b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086b4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80086b8:	65b7      	str	r7, [r6, #88]	; 0x58
 80086ba:	6632      	str	r2, [r6, #96]	; 0x60
 80086bc:	66b5      	str	r5, [r6, #104]	; 0x68
 80086be:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80086c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80086ca:	f1a1 0314 	sub.w	r3, r1, #20
 80086ce:	6737      	str	r7, [r6, #112]	; 0x70
 80086d0:	67b2      	str	r2, [r6, #120]	; 0x78
 80086d2:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
 80086d6:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 80086da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086de:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80086e2:	4403      	add	r3, r0
 80086e4:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
 80086e8:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80086ec:	f8c6 5098 	str.w	r5, [r6, #152]	; 0x98
 80086f0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80086f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086f8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80086fc:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
 8008700:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 8008704:	f8c6 50b0 	str.w	r5, [r6, #176]	; 0xb0
 8008708:	2202      	movs	r2, #2
 800870a:	2501      	movs	r5, #1
 800870c:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8008710:	63b1      	str	r1, [r6, #56]	; 0x38
 8008712:	6373      	str	r3, [r6, #52]	; 0x34
 8008714:	6132      	str	r2, [r6, #16]
 8008716:	60f0      	str	r0, [r6, #12]
 8008718:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 800871c:	605d      	str	r5, [r3, #4]
 800871e:	6275      	str	r5, [r6, #36]	; 0x24
 8008720:	6075      	str	r5, [r6, #4]
 8008722:	f7ff fac3 	bl	8007cac <_AddFreeMemory>
 8008726:	f7ff fd47 	bl	80081b8 <_EnlargeBlocks>
 800872a:	6335      	str	r5, [r6, #48]	; 0x30
 800872c:	e77d      	b.n	800862a <GUI_ALLOC_GetFixedBlock+0xe>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008732:	4620      	mov	r0, r4
 8008734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008736:	2000      	movs	r0, #0
 8008738:	f7ff fc66 	bl	8008008 <_RemoveHoles>
 800873c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008740:	1a61      	subs	r1, r4, r1
 8008742:	680b      	ldr	r3, [r1, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d193      	bne.n	8008670 <GUI_ALLOC_GetFixedBlock+0x54>
 8008748:	e78f      	b.n	800866a <GUI_ALLOC_GetFixedBlock+0x4e>
 800874a:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 800874e:	4a3d      	ldr	r2, [pc, #244]	; (8008844 <GUI_ALLOC_GetFixedBlock+0x228>)
 8008750:	1b58      	subs	r0, r3, r5
 8008752:	1d04      	adds	r4, r0, #4
 8008754:	42bb      	cmp	r3, r7
 8008756:	440c      	add	r4, r1
 8008758:	d272      	bcs.n	8008840 <GUI_ALLOC_GetFixedBlock+0x224>
 800875a:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 800875e:	42bb      	cmp	r3, r7
 8008760:	d26c      	bcs.n	800883c <GUI_ALLOC_GetFixedBlock+0x220>
 8008762:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 8008766:	42bb      	cmp	r3, r7
 8008768:	d266      	bcs.n	8008838 <GUI_ALLOC_GetFixedBlock+0x21c>
 800876a:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 800876e:	42bb      	cmp	r3, r7
 8008770:	d260      	bcs.n	8008834 <GUI_ALLOC_GetFixedBlock+0x218>
 8008772:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 8008776:	429f      	cmp	r7, r3
 8008778:	d95a      	bls.n	8008830 <GUI_ALLOC_GetFixedBlock+0x214>
 800877a:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 800877e:	42bb      	cmp	r3, r7
 8008780:	d254      	bcs.n	800882c <GUI_ALLOC_GetFixedBlock+0x210>
 8008782:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 8008786:	42bb      	cmp	r3, r7
 8008788:	d24e      	bcs.n	8008828 <GUI_ALLOC_GetFixedBlock+0x20c>
 800878a:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 800878e:	42bb      	cmp	r3, r7
 8008790:	d248      	bcs.n	8008824 <GUI_ALLOC_GetFixedBlock+0x208>
 8008792:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008794:	4293      	cmp	r3, r2
 8008796:	d243      	bcs.n	8008820 <GUI_ALLOC_GetFixedBlock+0x204>
 8008798:	6f37      	ldr	r7, [r6, #112]	; 0x70
 800879a:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <GUI_ALLOC_GetFixedBlock+0x228>)
 800879c:	42bb      	cmp	r3, r7
 800879e:	d23d      	bcs.n	800881c <GUI_ALLOC_GetFixedBlock+0x200>
 80087a0:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80087a2:	42bb      	cmp	r3, r7
 80087a4:	d238      	bcs.n	8008818 <GUI_ALLOC_GetFixedBlock+0x1fc>
 80087a6:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80087a8:	42bb      	cmp	r3, r7
 80087aa:	d233      	bcs.n	8008814 <GUI_ALLOC_GetFixedBlock+0x1f8>
 80087ac:	6d97      	ldr	r7, [r2, #88]	; 0x58
 80087ae:	42bb      	cmp	r3, r7
 80087b0:	d22e      	bcs.n	8008810 <GUI_ALLOC_GetFixedBlock+0x1f4>
 80087b2:	6d17      	ldr	r7, [r2, #80]	; 0x50
 80087b4:	42bb      	cmp	r3, r7
 80087b6:	d229      	bcs.n	800880c <GUI_ALLOC_GetFixedBlock+0x1f0>
 80087b8:	6c97      	ldr	r7, [r2, #72]	; 0x48
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	d224      	bcs.n	8008808 <GUI_ALLOC_GetFixedBlock+0x1ec>
 80087be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d20c      	bcs.n	80087de <GUI_ALLOC_GetFixedBlock+0x1c2>
 80087c4:	68f2      	ldr	r2, [r6, #12]
 80087c6:	6973      	ldr	r3, [r6, #20]
 80087c8:	1b52      	subs	r2, r2, r5
 80087ca:	442b      	add	r3, r5
 80087cc:	60f2      	str	r2, [r6, #12]
 80087ce:	6173      	str	r3, [r6, #20]
 80087d0:	b910      	cbnz	r0, 80087d8 <GUI_ALLOC_GetFixedBlock+0x1bc>
 80087d2:	f844 5c04 	str.w	r5, [r4, #-4]
 80087d6:	e756      	b.n	8008686 <GUI_ALLOC_GetFixedBlock+0x6a>
 80087d8:	f7ff fa68 	bl	8007cac <_AddFreeMemory>
 80087dc:	e7f9      	b.n	80087d2 <GUI_ALLOC_GetFixedBlock+0x1b6>
 80087de:	2200      	movs	r2, #0
 80087e0:	6837      	ldr	r7, [r6, #0]
 80087e2:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80087e6:	1afb      	subs	r3, r7, r3
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	68cb      	ldr	r3, [r1, #12]
 80087ec:	f1be 0f00 	cmp.w	lr, #0
 80087f0:	d001      	beq.n	80087f6 <GUI_ALLOC_GetFixedBlock+0x1da>
 80087f2:	f8ce 3004 	str.w	r3, [lr, #4]
 80087f6:	b113      	cbz	r3, 80087fe <GUI_ALLOC_GetFixedBlock+0x1e2>
 80087f8:	f8c3 e000 	str.w	lr, [r3]
 80087fc:	e7e2      	b.n	80087c4 <GUI_ALLOC_GetFixedBlock+0x1a8>
 80087fe:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008802:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 8008806:	e7dd      	b.n	80087c4 <GUI_ALLOC_GetFixedBlock+0x1a8>
 8008808:	2201      	movs	r2, #1
 800880a:	e7e9      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 800880c:	2202      	movs	r2, #2
 800880e:	e7e7      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008810:	2203      	movs	r2, #3
 8008812:	e7e5      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008814:	2204      	movs	r2, #4
 8008816:	e7e3      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008818:	2205      	movs	r2, #5
 800881a:	e7e1      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 800881c:	2206      	movs	r2, #6
 800881e:	e7df      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008820:	2207      	movs	r2, #7
 8008822:	e7dd      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008824:	2208      	movs	r2, #8
 8008826:	e7db      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008828:	2209      	movs	r2, #9
 800882a:	e7d9      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 800882c:	220a      	movs	r2, #10
 800882e:	e7d7      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008830:	220b      	movs	r2, #11
 8008832:	e7d5      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008834:	220c      	movs	r2, #12
 8008836:	e7d3      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008838:	220d      	movs	r2, #13
 800883a:	e7d1      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 800883c:	220e      	movs	r2, #14
 800883e:	e7cf      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008840:	220f      	movs	r2, #15
 8008842:	e7cd      	b.n	80087e0 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8008844:	20035704 	.word	0x20035704
 8008848:	200005bc 	.word	0x200005bc

0800884c <GUI_ALLOC_AllocNoInit>:
 800884c:	b900      	cbnz	r0, 8008850 <GUI_ALLOC_AllocNoInit+0x4>
 800884e:	4770      	bx	lr
 8008850:	b510      	push	{r4, lr}
 8008852:	4604      	mov	r4, r0
 8008854:	f001 fb3e 	bl	8009ed4 <GUI_Lock>
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff fd1b 	bl	8008294 <_Alloc>
 800885e:	4604      	mov	r4, r0
 8008860:	f001 fb2e 	bl	8009ec0 <GUI_Unlock>
 8008864:	4620      	mov	r0, r4
 8008866:	bd10      	pop	{r4, pc}

08008868 <GUI_ALLOC_h2p>:
 8008868:	4b03      	ldr	r3, [pc, #12]	; (8008878 <GUI_ALLOC_h2p+0x10>)
 800886a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008870:	6840      	ldr	r0, [r0, #4]
 8008872:	3008      	adds	r0, #8
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20035704 	.word	0x20035704

0800887c <GUI_ALLOC_LockH>:
 800887c:	4a07      	ldr	r2, [pc, #28]	; (800889c <GUI_ALLOC_LockH+0x20>)
 800887e:	69d1      	ldr	r1, [r2, #28]
 8008880:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008882:	3101      	adds	r1, #1
 8008884:	61d1      	str	r1, [r2, #28]
 8008886:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 800888a:	3201      	adds	r2, #1
 800888c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8008890:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008894:	6858      	ldr	r0, [r3, #4]
 8008896:	3008      	adds	r0, #8
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	20035704 	.word	0x20035704

080088a0 <GUI_ALLOC_UnlockH>:
 80088a0:	b430      	push	{r4, r5}
 80088a2:	6803      	ldr	r3, [r0, #0]
 80088a4:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <GUI_ALLOC_UnlockH+0x30>)
 80088a6:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80088aa:	4604      	mov	r4, r0
 80088ac:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80088ae:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d903      	bls.n	80088be <GUI_ALLOC_UnlockH+0x1e>
 80088b6:	69d1      	ldr	r1, [r2, #28]
 80088b8:	b109      	cbz	r1, 80088be <GUI_ALLOC_UnlockH+0x1e>
 80088ba:	3901      	subs	r1, #1
 80088bc:	61d1      	str	r1, [r2, #28]
 80088be:	3b01      	subs	r3, #1
 80088c0:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 80088c4:	2200      	movs	r2, #0
 80088c6:	4610      	mov	r0, r2
 80088c8:	6022      	str	r2, [r4, #0]
 80088ca:	bc30      	pop	{r4, r5}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20035704 	.word	0x20035704

080088d4 <GUI_ALLOC_GetMaxSize>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	4c4a      	ldr	r4, [pc, #296]	; (8008a00 <GUI_ALLOC_GetMaxSize+0x12c>)
 80088d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d03d      	beq.n	800895c <GUI_ALLOC_GetMaxSize+0x88>
 80088e0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80088e4:	4a46      	ldr	r2, [pc, #280]	; (8008a00 <GUI_ALLOC_GetMaxSize+0x12c>)
 80088e6:	bb3b      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 80088e8:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 80088ec:	bb23      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 80088ee:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 80088f2:	bb0b      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 80088f4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80088f8:	b9f3      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 80088fa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80088fe:	b9db      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008900:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008904:	b9c3      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008906:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800890a:	b9ab      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 800890c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8008910:	b993      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008912:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8008914:	b983      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008916:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008918:	b973      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 800891a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800891c:	b963      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 800891e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008920:	b953      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008922:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008924:	b943      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008926:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008928:	b933      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 800892a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800892c:	b923      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 800892e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008930:	b913      	cbnz	r3, 8008938 <GUI_ALLOC_GetMaxSize+0x64>
 8008932:	f06f 000b 	mvn.w	r0, #11
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0f9      	beq.n	8008932 <GUI_ALLOC_GetMaxSize+0x5e>
 800893e:	2200      	movs	r2, #0
 8008940:	e001      	b.n	8008946 <GUI_ALLOC_GetMaxSize+0x72>
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	b143      	cbz	r3, 8008958 <GUI_ALLOC_GetMaxSize+0x84>
 8008946:	6859      	ldr	r1, [r3, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	4291      	cmp	r1, r2
 800894c:	4610      	mov	r0, r2
 800894e:	bf84      	itt	hi
 8008950:	460a      	movhi	r2, r1
 8008952:	4610      	movhi	r0, r2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1f4      	bne.n	8008942 <GUI_ALLOC_GetMaxSize+0x6e>
 8008958:	380c      	subs	r0, #12
 800895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800895c:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <GUI_ALLOC_GetMaxSize+0x130>)
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	6858      	ldr	r0, [r3, #4]
 8008962:	2101      	movs	r1, #1
 8008964:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8008968:	b90a      	cbnz	r2, 800896e <GUI_ALLOC_GetMaxSize+0x9a>
 800896a:	0882      	lsrs	r2, r0, #2
 800896c:	609a      	str	r2, [r3, #8]
 800896e:	6819      	ldr	r1, [r3, #0]
 8008970:	63a1      	str	r1, [r4, #56]	; 0x38
 8008972:	265a      	movs	r6, #90	; 0x5a
 8008974:	2210      	movs	r2, #16
 8008976:	2520      	movs	r5, #32
 8008978:	6226      	str	r6, [r4, #32]
 800897a:	6422      	str	r2, [r4, #64]	; 0x40
 800897c:	64a5      	str	r5, [r4, #72]	; 0x48
 800897e:	2740      	movs	r7, #64	; 0x40
 8008980:	2680      	movs	r6, #128	; 0x80
 8008982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008986:	f44f 7500 	mov.w	r5, #512	; 0x200
 800898a:	f1a1 0314 	sub.w	r3, r1, #20
 800898e:	6527      	str	r7, [r4, #80]	; 0x50
 8008990:	65a6      	str	r6, [r4, #88]	; 0x58
 8008992:	6622      	str	r2, [r4, #96]	; 0x60
 8008994:	66a5      	str	r5, [r4, #104]	; 0x68
 8008996:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800899a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800899e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089a2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80089a6:	4403      	add	r3, r0
 80089a8:	6727      	str	r7, [r4, #112]	; 0x70
 80089aa:	67a6      	str	r6, [r4, #120]	; 0x78
 80089ac:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 80089b0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80089b4:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 80089b8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 80089bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089c0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80089c4:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 80089c8:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 80089cc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 80089d0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80089d4:	2202      	movs	r2, #2
 80089d6:	2501      	movs	r5, #1
 80089d8:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80089dc:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80089e0:	6363      	str	r3, [r4, #52]	; 0x34
 80089e2:	6122      	str	r2, [r4, #16]
 80089e4:	60e0      	str	r0, [r4, #12]
 80089e6:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 80089ea:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 80089ee:	605d      	str	r5, [r3, #4]
 80089f0:	6265      	str	r5, [r4, #36]	; 0x24
 80089f2:	6065      	str	r5, [r4, #4]
 80089f4:	f7ff f95a 	bl	8007cac <_AddFreeMemory>
 80089f8:	f7ff fbde 	bl	80081b8 <_EnlargeBlocks>
 80089fc:	6325      	str	r5, [r4, #48]	; 0x30
 80089fe:	e76f      	b.n	80088e0 <GUI_ALLOC_GetMaxSize+0xc>
 8008a00:	20035704 	.word	0x20035704
 8008a04:	200005bc 	.word	0x200005bc

08008a08 <GUI_ALLOC_RequestSize>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	4c58      	ldr	r4, [pc, #352]	; (8008b6c <GUI_ALLOC_RequestSize+0x164>)
 8008a0c:	f001 fa62 	bl	8009ed4 <GUI_Lock>
 8008a10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d057      	beq.n	8008ac8 <GUI_ALLOC_RequestSize+0xc0>
 8008a18:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8008a1c:	4a53      	ldr	r2, [pc, #332]	; (8008b6c <GUI_ALLOC_RequestSize+0x164>)
 8008a1e:	bb9b      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a20:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8008a24:	bb83      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a26:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8008a2a:	bb6b      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a2c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8008a30:	bb53      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a32:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8008a36:	bb3b      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a38:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008a3c:	bb23      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a3e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008a42:	bb0b      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a44:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8008a48:	b9f3      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a4a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8008a4c:	b9e3      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a4e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008a50:	b9d3      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a54:	b9c3      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a56:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008a58:	b9b3      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a5a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008a5c:	b9a3      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a5e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008a60:	b993      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008a64:	b983      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a66:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008a68:	b973      	cbnz	r3, 8008a88 <GUI_ALLOC_RequestSize+0x80>
 8008a6a:	f06f 030b 	mvn.w	r3, #11
 8008a6e:	4940      	ldr	r1, [pc, #256]	; (8008b70 <GUI_ALLOC_RequestSize+0x168>)
 8008a70:	17da      	asrs	r2, r3, #31
 8008a72:	fb81 1303 	smull	r1, r3, r1, r3
 8008a76:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8008a7a:	6a24      	ldr	r4, [r4, #32]
 8008a7c:	fb04 f403 	mul.w	r4, r4, r3
 8008a80:	f001 fa1e 	bl	8009ec0 <GUI_Unlock>
 8008a84:	4620      	mov	r0, r4
 8008a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0f5      	beq.n	8008a7a <GUI_ALLOC_RequestSize+0x72>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	e001      	b.n	8008a96 <GUI_ALLOC_RequestSize+0x8e>
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	b143      	cbz	r3, 8008aa8 <GUI_ALLOC_RequestSize+0xa0>
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	bf84      	itt	hi
 8008aa0:	460a      	movhi	r2, r1
 8008aa2:	4610      	movhi	r0, r2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f4      	bne.n	8008a92 <GUI_ALLOC_RequestSize+0x8a>
 8008aa8:	380c      	subs	r0, #12
 8008aaa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8008aae:	4603      	mov	r3, r0
 8008ab0:	d8dd      	bhi.n	8008a6e <GUI_ALLOC_RequestSize+0x66>
 8008ab2:	6a22      	ldr	r2, [r4, #32]
 8008ab4:	4b2e      	ldr	r3, [pc, #184]	; (8008b70 <GUI_ALLOC_RequestSize+0x168>)
 8008ab6:	fb02 f000 	mul.w	r0, r2, r0
 8008aba:	fba3 2300 	umull	r2, r3, r3, r0
 8008abe:	095c      	lsrs	r4, r3, #5
 8008ac0:	f001 f9fe 	bl	8009ec0 <GUI_Unlock>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	; (8008b74 <GUI_ALLOC_RequestSize+0x16c>)
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	6858      	ldr	r0, [r3, #4]
 8008ace:	2101      	movs	r1, #1
 8008ad0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8008ad4:	b90a      	cbnz	r2, 8008ada <GUI_ALLOC_RequestSize+0xd2>
 8008ad6:	0882      	lsrs	r2, r0, #2
 8008ad8:	609a      	str	r2, [r3, #8]
 8008ada:	6819      	ldr	r1, [r3, #0]
 8008adc:	63a1      	str	r1, [r4, #56]	; 0x38
 8008ade:	265a      	movs	r6, #90	; 0x5a
 8008ae0:	2210      	movs	r2, #16
 8008ae2:	2520      	movs	r5, #32
 8008ae4:	6226      	str	r6, [r4, #32]
 8008ae6:	6422      	str	r2, [r4, #64]	; 0x40
 8008ae8:	64a5      	str	r5, [r4, #72]	; 0x48
 8008aea:	2740      	movs	r7, #64	; 0x40
 8008aec:	2680      	movs	r6, #128	; 0x80
 8008aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008af2:	f44f 7500 	mov.w	r5, #512	; 0x200
 8008af6:	f1a1 0314 	sub.w	r3, r1, #20
 8008afa:	6527      	str	r7, [r4, #80]	; 0x50
 8008afc:	65a6      	str	r6, [r4, #88]	; 0x58
 8008afe:	6622      	str	r2, [r4, #96]	; 0x60
 8008b00:	66a5      	str	r5, [r4, #104]	; 0x68
 8008b02:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8008b06:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8008b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b0e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8008b12:	4403      	add	r3, r0
 8008b14:	6727      	str	r7, [r4, #112]	; 0x70
 8008b16:	67a6      	str	r6, [r4, #120]	; 0x78
 8008b18:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8008b1c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008b20:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8008b24:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8008b28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b2c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8008b30:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8008b34:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8008b38:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8008b3c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8008b40:	2202      	movs	r2, #2
 8008b42:	2501      	movs	r5, #1
 8008b44:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8008b48:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8008b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b4e:	6122      	str	r2, [r4, #16]
 8008b50:	60e0      	str	r0, [r4, #12]
 8008b52:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8008b56:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8008b5a:	605d      	str	r5, [r3, #4]
 8008b5c:	6265      	str	r5, [r4, #36]	; 0x24
 8008b5e:	6065      	str	r5, [r4, #4]
 8008b60:	f7ff f8a4 	bl	8007cac <_AddFreeMemory>
 8008b64:	f7ff fb28 	bl	80081b8 <_EnlargeBlocks>
 8008b68:	6325      	str	r5, [r4, #48]	; 0x30
 8008b6a:	e755      	b.n	8008a18 <GUI_ALLOC_RequestSize+0x10>
 8008b6c:	20035704 	.word	0x20035704
 8008b70:	51eb851f 	.word	0x51eb851f
 8008b74:	200005bc 	.word	0x200005bc

08008b78 <GUI_ALLOC_AssignMemory>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <GUI_ALLOC_AssignMemory+0xc>)
 8008b7a:	f021 0103 	bic.w	r1, r1, #3
 8008b7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b82:	4770      	bx	lr
 8008b84:	200005bc 	.word	0x200005bc

08008b88 <GUI_ALLOC_Free>:
 8008b88:	b900      	cbnz	r0, 8008b8c <GUI_ALLOC_Free+0x4>
 8008b8a:	4770      	bx	lr
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	4c0d      	ldr	r4, [pc, #52]	; (8008bc4 <GUI_ALLOC_Free+0x3c>)
 8008b90:	4605      	mov	r5, r0
 8008b92:	f001 f99f 	bl	8009ed4 <GUI_Lock>
 8008b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b98:	00ee      	lsls	r6, r5, #3
 8008b9a:	4433      	add	r3, r6
 8008b9c:	6859      	ldr	r1, [r3, #4]
 8008b9e:	6848      	ldr	r0, [r1, #4]
 8008ba0:	f7ff f884 	bl	8007cac <_AddFreeMemory>
 8008ba4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008ba6:	6863      	ldr	r3, [r4, #4]
 8008ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008baa:	4416      	add	r6, r2
 8008bac:	3301      	adds	r3, #1
 8008bae:	2000      	movs	r0, #0
 8008bb0:	6063      	str	r3, [r4, #4]
 8008bb2:	6071      	str	r1, [r6, #4]
 8008bb4:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 8008bb8:	6265      	str	r5, [r4, #36]	; 0x24
 8008bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bbe:	f001 b97f 	b.w	8009ec0 <GUI_Unlock>
 8008bc2:	bf00      	nop
 8008bc4:	20035704 	.word	0x20035704

08008bc8 <GUI_ALLOC_AllocZero>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	4605      	mov	r5, r0
 8008bcc:	f001 f982 	bl	8009ed4 <GUI_Lock>
 8008bd0:	b925      	cbnz	r5, 8008bdc <GUI_ALLOC_AllocZero+0x14>
 8008bd2:	2400      	movs	r4, #0
 8008bd4:	f001 f974 	bl	8009ec0 <GUI_Unlock>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	f001 f97a 	bl	8009ed4 <GUI_Lock>
 8008be0:	4628      	mov	r0, r5
 8008be2:	f7ff fb57 	bl	8008294 <_Alloc>
 8008be6:	4604      	mov	r4, r0
 8008be8:	f001 f96a 	bl	8009ec0 <GUI_Unlock>
 8008bec:	2c00      	cmp	r4, #0
 8008bee:	d0f0      	beq.n	8008bd2 <GUI_ALLOC_AllocZero+0xa>
 8008bf0:	4e14      	ldr	r6, [pc, #80]	; (8008c44 <GUI_ALLOC_AllocZero+0x7c>)
 8008bf2:	4915      	ldr	r1, [pc, #84]	; (8008c48 <GUI_ALLOC_AllocZero+0x80>)
 8008bf4:	69f2      	ldr	r2, [r6, #28]
 8008bf6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	61f2      	str	r2, [r6, #28]
 8008bfc:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
 8008c00:	3201      	adds	r2, #1
 8008c02:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 8008c06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	685d      	ldr	r5, [r3, #4]
 8008c0e:	680b      	ldr	r3, [r1, #0]
 8008c10:	f105 0008 	add.w	r0, r5, #8
 8008c14:	2100      	movs	r1, #0
 8008c16:	4798      	blx	r3
 8008c18:	6829      	ldr	r1, [r5, #0]
 8008c1a:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8008c1c:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d901      	bls.n	8008c28 <GUI_ALLOC_AllocZero+0x60>
 8008c24:	69f0      	ldr	r0, [r6, #28]
 8008c26:	b930      	cbnz	r0, 8008c36 <GUI_ALLOC_AllocZero+0x6e>
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8008c2e:	f001 f947 	bl	8009ec0 <GUI_Unlock>
 8008c32:	4620      	mov	r0, r4
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	3801      	subs	r0, #1
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	61f0      	str	r0, [r6, #28]
 8008c3c:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8008c40:	e7f5      	b.n	8008c2e <GUI_ALLOC_AllocZero+0x66>
 8008c42:	bf00      	nop
 8008c44:	20035704 	.word	0x20035704
 8008c48:	20000094 	.word	0x20000094

08008c4c <GL_DispChar>:
 8008c4c:	280a      	cmp	r0, #10
 8008c4e:	b538      	push	{r3, r4, r5, lr}
 8008c50:	d014      	beq.n	8008c7c <GL_DispChar+0x30>
 8008c52:	280d      	cmp	r0, #13
 8008c54:	4604      	mov	r4, r0
 8008c56:	d010      	beq.n	8008c7a <GL_DispChar+0x2e>
 8008c58:	f001 f93c 	bl	8009ed4 <GUI_Lock>
 8008c5c:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <GL_DispChar+0x58>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4620      	mov	r0, r4
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4798      	blx	r3
 8008c68:	4b0f      	ldr	r3, [pc, #60]	; (8008ca8 <GL_DispChar+0x5c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	b10b      	cbz	r3, 8008c72 <GL_DispChar+0x26>
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4798      	blx	r3
 8008c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c76:	f001 b923 	b.w	8009ec0 <GUI_Unlock>
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	4c09      	ldr	r4, [pc, #36]	; (8008ca4 <GL_DispChar+0x58>)
 8008c7e:	f001 f929 	bl	8009ed4 <GUI_Lock>
 8008c82:	f001 f927 	bl	8009ed4 <GUI_Lock>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	7e5d      	ldrb	r5, [r3, #25]
 8008c8c:	f001 f918 	bl	8009ec0 <GUI_Unlock>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8008c94:	8c19      	ldrh	r1, [r3, #32]
 8008c96:	8459      	strh	r1, [r3, #34]	; 0x22
 8008c98:	442a      	add	r2, r5
 8008c9a:	849a      	strh	r2, [r3, #36]	; 0x24
 8008c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca0:	f001 b90e 	b.w	8009ec0 <GUI_Unlock>
 8008ca4:	2000007c 	.word	0x2000007c
 8008ca8:	2003581c 	.word	0x2003581c

08008cac <GUI_GetYAdjust>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	f001 f911 	bl	8009ed4 <GUI_Lock>
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <GUI_GetYAdjust+0x44>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8008cb8:	f003 030c 	and.w	r3, r3, #12
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d008      	beq.n	8008cd2 <GUI_GetYAdjust+0x26>
 8008cc0:	2b0c      	cmp	r3, #12
 8008cc2:	d006      	beq.n	8008cd2 <GUI_GetYAdjust+0x26>
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d00b      	beq.n	8008ce0 <GUI_GetYAdjust+0x34>
 8008cc8:	2400      	movs	r4, #0
 8008cca:	f001 f8f9 	bl	8009ec0 <GUI_Unlock>
 8008cce:	4620      	mov	r0, r4
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	69d3      	ldr	r3, [r2, #28]
 8008cd4:	7e1c      	ldrb	r4, [r3, #24]
 8008cd6:	0864      	lsrs	r4, r4, #1
 8008cd8:	f001 f8f2 	bl	8009ec0 <GUI_Unlock>
 8008cdc:	4620      	mov	r0, r4
 8008cde:	bd10      	pop	{r4, pc}
 8008ce0:	69d3      	ldr	r3, [r2, #28]
 8008ce2:	7e1c      	ldrb	r4, [r3, #24]
 8008ce4:	3c01      	subs	r4, #1
 8008ce6:	f001 f8eb 	bl	8009ec0 <GUI_Unlock>
 8008cea:	4620      	mov	r0, r4
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	bf00      	nop
 8008cf0:	2000007c 	.word	0x2000007c

08008cf4 <GUI_GetFontDistY>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	f001 f8ed 	bl	8009ed4 <GUI_Lock>
 8008cfa:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <GUI_GetFontDistY+0x18>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	7e5c      	ldrb	r4, [r3, #25]
 8008d02:	f001 f8dd 	bl	8009ec0 <GUI_Unlock>
 8008d06:	4620      	mov	r0, r4
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2000007c 	.word	0x2000007c

08008d10 <GUI_GetCharDistX>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	4604      	mov	r4, r0
 8008d14:	f001 f8de 	bl	8009ed4 <GUI_Lock>
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <GUI_GetCharDistX+0x20>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	2100      	movs	r1, #0
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	4620      	mov	r0, r4
 8008d24:	4798      	blx	r3
 8008d26:	4604      	mov	r4, r0
 8008d28:	f001 f8ca 	bl	8009ec0 <GUI_Unlock>
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bd10      	pop	{r4, pc}
 8008d30:	2000007c 	.word	0x2000007c

08008d34 <GUI_GetCharDistXEx>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4604      	mov	r4, r0
 8008d38:	460d      	mov	r5, r1
 8008d3a:	f001 f8cb 	bl	8009ed4 <GUI_Lock>
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <GUI_GetCharDistXEx+0x24>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	4629      	mov	r1, r5
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4798      	blx	r3
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	f001 f8b7 	bl	8009ec0 <GUI_Unlock>
 8008d52:	4620      	mov	r0, r4
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	bf00      	nop
 8008d58:	2000007c 	.word	0x2000007c

08008d5c <GUI_CalcColorDist>:
 8008d5c:	b2c3      	uxtb	r3, r0
 8008d5e:	b2ca      	uxtb	r2, r1
 8008d60:	1a9a      	subs	r2, r3, r2
 8008d62:	b292      	uxth	r2, r2
 8008d64:	b430      	push	{r4, r5}
 8008d66:	b215      	sxth	r5, r2
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	bfbc      	itt	lt
 8008d6c:	4252      	neglt	r2, r2
 8008d6e:	b215      	sxthlt	r5, r2
 8008d70:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008d74:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	0c09      	lsrs	r1, r1, #16
 8008d7e:	b21a      	sxth	r2, r3
 8008d80:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	b289      	uxth	r1, r1
 8008d88:	b20c      	sxth	r4, r1
 8008d8a:	bfbc      	itt	lt
 8008d8c:	425b      	neglt	r3, r3
 8008d8e:	b21a      	sxthlt	r2, r3
 8008d90:	2c00      	cmp	r4, #0
 8008d92:	bfbc      	itt	lt
 8008d94:	4249      	neglt	r1, r1
 8008d96:	b20c      	sxthlt	r4, r1
 8008d98:	fb02 f202 	mul.w	r2, r2, r2
 8008d9c:	fb05 2005 	mla	r0, r5, r5, r2
 8008da0:	b2a1      	uxth	r1, r4
 8008da2:	fb01 0001 	mla	r0, r1, r1, r0
 8008da6:	bc30      	pop	{r4, r5}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop

08008dac <GUI_GetBkColor>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	f001 f891 	bl	8009ed4 <GUI_Lock>
 8008db2:	f002 f85d 	bl	800ae70 <LCD_GetBkColorIndex>
 8008db6:	f001 ff53 	bl	800ac60 <LCD_Index2Color>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	f001 f880 	bl	8009ec0 <GUI_Unlock>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	bd10      	pop	{r4, pc}

08008dc4 <GUI_GetColor>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	f001 f885 	bl	8009ed4 <GUI_Lock>
 8008dca:	f002 f859 	bl	800ae80 <LCD_GetColorIndex>
 8008dce:	f001 ff47 	bl	800ac60 <LCD_Index2Color>
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	f001 f874 	bl	8009ec0 <GUI_Unlock>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	bd10      	pop	{r4, pc}

08008ddc <GUI_GetDrawMode>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	f001 f879 	bl	8009ed4 <GUI_Lock>
 8008de2:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <GUI_GetDrawMode+0x14>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	7c1c      	ldrb	r4, [r3, #16]
 8008de8:	f001 f86a 	bl	8009ec0 <GUI_Unlock>
 8008dec:	4620      	mov	r0, r4
 8008dee:	bd10      	pop	{r4, pc}
 8008df0:	2000007c 	.word	0x2000007c

08008df4 <GUI_GetFontSizeY>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	f001 f86d 	bl	8009ed4 <GUI_Lock>
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <GUI_GetFontSizeY+0x1c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	7e1c      	ldrb	r4, [r3, #24]
 8008e02:	7edb      	ldrb	r3, [r3, #27]
 8008e04:	fb14 f403 	smulbb	r4, r4, r3
 8008e08:	f001 f85a 	bl	8009ec0 <GUI_Unlock>
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	bd10      	pop	{r4, pc}
 8008e10:	2000007c 	.word	0x2000007c

08008e14 <GUI_GetOrg>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4605      	mov	r5, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	f001 f85b 	bl	8009ed4 <GUI_Lock>
 8008e1e:	4a06      	ldr	r2, [pc, #24]	; (8008e38 <GUI_GetOrg+0x24>)
 8008e20:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <GUI_GetOrg+0x28>)
 8008e22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e2a:	602a      	str	r2, [r5, #0]
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e32:	f001 b845 	b.w	8009ec0 <GUI_Unlock>
 8008e36:	bf00      	nop
 8008e38:	200357da 	.word	0x200357da
 8008e3c:	2003580c 	.word	0x2003580c

08008e40 <GUI_GetVersionString>:
 8008e40:	4804      	ldr	r0, [pc, #16]	; (8008e54 <GUI_GetVersionString+0x14>)
 8008e42:	2334      	movs	r3, #52	; 0x34
 8008e44:	2135      	movs	r1, #53	; 0x35
 8008e46:	2261      	movs	r2, #97	; 0x61
 8008e48:	7001      	strb	r1, [r0, #0]
 8008e4a:	7102      	strb	r2, [r0, #4]
 8008e4c:	7083      	strb	r3, [r0, #2]
 8008e4e:	70c3      	strb	r3, [r0, #3]
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20000068 	.word	0x20000068

08008e58 <GUI_MergeRect>:
 8008e58:	b320      	cbz	r0, 8008ea4 <GUI_MergeRect+0x4c>
 8008e5a:	b321      	cbz	r1, 8008ea6 <GUI_MergeRect+0x4e>
 8008e5c:	b322      	cbz	r2, 8008ea8 <GUI_MergeRect+0x50>
 8008e5e:	f9b2 c000 	ldrsh.w	ip, [r2]
 8008e62:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8008e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e68:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008e6c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8008e70:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8008e74:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8008e78:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8008e7c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8008e80:	4565      	cmp	r5, ip
 8008e82:	bfa8      	it	ge
 8008e84:	4665      	movge	r5, ip
 8008e86:	45a6      	cmp	lr, r4
 8008e88:	4671      	mov	r1, lr
 8008e8a:	bfa8      	it	ge
 8008e8c:	4621      	movge	r1, r4
 8008e8e:	42ba      	cmp	r2, r7
 8008e90:	bfb8      	it	lt
 8008e92:	463a      	movlt	r2, r7
 8008e94:	42b3      	cmp	r3, r6
 8008e96:	bfb8      	it	lt
 8008e98:	4633      	movlt	r3, r6
 8008e9a:	8005      	strh	r5, [r0, #0]
 8008e9c:	8041      	strh	r1, [r0, #2]
 8008e9e:	8082      	strh	r2, [r0, #4]
 8008ea0:	80c3      	strh	r3, [r0, #6]
 8008ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea4:	4770      	bx	lr
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	680b      	ldr	r3, [r1, #0]
 8008eaa:	684a      	ldr	r2, [r1, #4]
 8008eac:	6042      	str	r2, [r0, #4]
 8008eae:	6003      	str	r3, [r0, #0]
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop

08008eb4 <GUI_MoveRect>:
 8008eb4:	b178      	cbz	r0, 8008ed6 <GUI_MoveRect+0x22>
 8008eb6:	b470      	push	{r4, r5, r6}
 8008eb8:	8806      	ldrh	r6, [r0, #0]
 8008eba:	8844      	ldrh	r4, [r0, #2]
 8008ebc:	8885      	ldrh	r5, [r0, #4]
 8008ebe:	88c3      	ldrh	r3, [r0, #6]
 8008ec0:	b289      	uxth	r1, r1
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	440e      	add	r6, r1
 8008ec6:	4414      	add	r4, r2
 8008ec8:	4429      	add	r1, r5
 8008eca:	8006      	strh	r6, [r0, #0]
 8008ecc:	8044      	strh	r4, [r0, #2]
 8008ece:	bc70      	pop	{r4, r5, r6}
 8008ed0:	441a      	add	r2, r3
 8008ed2:	8081      	strh	r1, [r0, #4]
 8008ed4:	80c2      	strh	r2, [r0, #6]
 8008ed6:	4770      	bx	lr

08008ed8 <GUI_Exec>:
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	4f12      	ldr	r7, [pc, #72]	; (8008f28 <GUI_Exec+0x50>)
 8008ede:	4e13      	ldr	r6, [pc, #76]	; (8008f2c <GUI_Exec+0x54>)
 8008ee0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8008f30 <GUI_Exec+0x58>
 8008ee4:	2500      	movs	r5, #0
 8008ee6:	683c      	ldr	r4, [r7, #0]
 8008ee8:	b11c      	cbz	r4, 8008ef2 <GUI_Exec+0x1a>
 8008eea:	47a0      	blx	r4
 8008eec:	1c04      	adds	r4, r0, #0
 8008eee:	bf18      	it	ne
 8008ef0:	2401      	movne	r4, #1
 8008ef2:	f006 fe0f 	bl	800fb14 <WM_Exec>
 8008ef6:	6833      	ldr	r3, [r6, #0]
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	bf18      	it	ne
 8008efc:	2401      	movne	r4, #1
 8008efe:	b14b      	cbz	r3, 8008f14 <GUI_Exec+0x3c>
 8008f00:	4798      	blx	r3
 8008f02:	b138      	cbz	r0, 8008f14 <GUI_Exec+0x3c>
 8008f04:	f8d8 3000 	ldr.w	r3, [r8]
 8008f08:	b113      	cbz	r3, 8008f10 <GUI_Exec+0x38>
 8008f0a:	2401      	movs	r4, #1
 8008f0c:	4798      	blx	r3
 8008f0e:	b13c      	cbz	r4, 8008f20 <GUI_Exec+0x48>
 8008f10:	2501      	movs	r5, #1
 8008f12:	e7e8      	b.n	8008ee6 <GUI_Exec+0xe>
 8008f14:	f8d8 3000 	ldr.w	r3, [r8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1f7      	bne.n	8008f0c <GUI_Exec+0x34>
 8008f1c:	2c00      	cmp	r4, #0
 8008f1e:	d1f7      	bne.n	8008f10 <GUI_Exec+0x38>
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f26:	bf00      	nop
 8008f28:	20035804 	.word	0x20035804
 8008f2c:	200357e0 	.word	0x200357e0
 8008f30:	20035800 	.word	0x20035800

08008f34 <GUI_GetBitmapPixelIndex>:
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d050      	beq.n	8008fda <GUI_GetBitmapPixelIndex+0xa6>
 8008f38:	88c3      	ldrh	r3, [r0, #6]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	8884      	ldrh	r4, [r0, #4]
 8008f40:	6880      	ldr	r0, [r0, #8]
 8008f42:	2b1f      	cmp	r3, #31
 8008f44:	d847      	bhi.n	8008fd6 <GUI_GetBitmapPixelIndex+0xa2>
 8008f46:	e8df f003 	tbb	[pc, r3]
 8008f4a:	2316      	.short	0x2316
 8008f4c:	46463146 	.word	0x46463146
 8008f50:	46463c46 	.word	0x46463c46
 8008f54:	46464646 	.word	0x46464646
 8008f58:	46464046 	.word	0x46464046
 8008f5c:	46464646 	.word	0x46464646
 8008f60:	46464646 	.word	0x46464646
 8008f64:	46464646 	.word	0x46464646
 8008f68:	1046      	.short	0x1046
 8008f6a:	10a3      	asrs	r3, r4, #2
 8008f6c:	fb02 1103 	mla	r1, r2, r3, r1
 8008f70:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	fb02 f204 	mul.w	r2, r2, r4
 8008f7a:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 8008f7e:	43c8      	mvns	r0, r1
 8008f80:	5ca3      	ldrb	r3, [r4, r2]
 8008f82:	f000 0007 	and.w	r0, r0, #7
 8008f86:	fa23 f000 	lsr.w	r0, r3, r0
 8008f8a:	f000 0001 	and.w	r0, r0, #1
 8008f8e:	bd10      	pop	{r4, pc}
 8008f90:	fb02 f204 	mul.w	r2, r2, r4
 8008f94:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 8008f98:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 8008f9c:	5ca3      	ldrb	r3, [r4, r2]
 8008f9e:	f000 0006 	and.w	r0, r0, #6
 8008fa2:	fa23 f000 	lsr.w	r0, r3, r0
 8008fa6:	f000 0003 	and.w	r0, r0, #3
 8008faa:	bd10      	pop	{r4, pc}
 8008fac:	fb02 f204 	mul.w	r2, r2, r4
 8008fb0:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 8008fb4:	07cb      	lsls	r3, r1, #31
 8008fb6:	5ca0      	ldrb	r0, [r4, r2]
 8008fb8:	bf4c      	ite	mi
 8008fba:	f000 000f 	andmi.w	r0, r0, #15
 8008fbe:	0900      	lsrpl	r0, r0, #4
 8008fc0:	bd10      	pop	{r4, pc}
 8008fc2:	fb02 0404 	mla	r4, r2, r4, r0
 8008fc6:	5c60      	ldrb	r0, [r4, r1]
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	1063      	asrs	r3, r4, #1
 8008fcc:	fb02 1103 	mla	r1, r2, r3, r1
 8008fd0:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	4770      	bx	lr

08008fdc <GUI_GotoXY>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4605      	mov	r5, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	f000 ff77 	bl	8009ed4 <GUI_Lock>
 8008fe6:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <GUI_GotoXY+0x1c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	845d      	strh	r5, [r3, #34]	; 0x22
 8008fec:	849c      	strh	r4, [r3, #36]	; 0x24
 8008fee:	f000 ff67 	bl	8009ec0 <GUI_Unlock>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	bd38      	pop	{r3, r4, r5, pc}
 8008ff6:	bf00      	nop
 8008ff8:	2000007c 	.word	0x2000007c

08008ffc <GUI_SetPenSize>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4605      	mov	r5, r0
 8009000:	f000 ff68 	bl	8009ed4 <GUI_Lock>
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <GUI_SetPenSize+0x18>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	7e1c      	ldrb	r4, [r3, #24]
 800900a:	761d      	strb	r5, [r3, #24]
 800900c:	f000 ff58 	bl	8009ec0 <GUI_Unlock>
 8009010:	4620      	mov	r0, r4
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	2000007c 	.word	0x2000007c

08009018 <GUI_RectsIntersect>:
 8009018:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800901c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8009020:	429a      	cmp	r2, r3
 8009022:	dc14      	bgt.n	800904e <GUI_RectsIntersect+0x36>
 8009024:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8009028:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800902c:	429a      	cmp	r2, r3
 800902e:	dc0e      	bgt.n	800904e <GUI_RectsIntersect+0x36>
 8009030:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009034:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8009038:	429a      	cmp	r2, r3
 800903a:	dc08      	bgt.n	800904e <GUI_RectsIntersect+0x36>
 800903c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009040:	f9b1 3000 	ldrsh.w	r3, [r1]
 8009044:	4283      	cmp	r3, r0
 8009046:	bfcc      	ite	gt
 8009048:	2000      	movgt	r0, #0
 800904a:	2001      	movle	r0, #1
 800904c:	4770      	bx	lr
 800904e:	2000      	movs	r0, #0
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop

08009054 <GUI_SaveContext_W>:
 8009054:	b508      	push	{r3, lr}
 8009056:	4b03      	ldr	r3, [pc, #12]	; (8009064 <GUI_SaveContext_W+0x10>)
 8009058:	2274      	movs	r2, #116	; 0x74
 800905a:	6819      	ldr	r1, [r3, #0]
 800905c:	f00b ff17 	bl	8014e8e <memcpy>
 8009060:	bd08      	pop	{r3, pc}
 8009062:	bf00      	nop
 8009064:	2000007c 	.word	0x2000007c

08009068 <GUI_RestoreContext>:
 8009068:	b508      	push	{r3, lr}
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <GUI_RestoreContext+0x10>)
 800906c:	4601      	mov	r1, r0
 800906e:	2274      	movs	r2, #116	; 0x74
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	f00b ff0c 	bl	8014e8e <memcpy>
 8009076:	bd08      	pop	{r3, pc}
 8009078:	2000007c 	.word	0x2000007c

0800907c <GUI_SelectLCD>:
 800907c:	b508      	push	{r3, lr}
 800907e:	f000 ff29 	bl	8009ed4 <GUI_Lock>
 8009082:	f002 f8a3 	bl	800b1cc <LCD_SelectLCD>
 8009086:	f002 f98f 	bl	800b3a8 <LCD_UpdateColorIndices>
 800908a:	f006 fe91 	bl	800fdb0 <WM_Activate>
 800908e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009092:	f000 bf15 	b.w	8009ec0 <GUI_Unlock>
 8009096:	bf00      	nop

08009098 <GUI_SetBkColor>:
 8009098:	b510      	push	{r4, lr}
 800909a:	4604      	mov	r4, r0
 800909c:	f000 ff1a 	bl	8009ed4 <GUI_Lock>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 fe03 	bl	800acac <LCD_SetBkColor>
 80090a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090aa:	f000 bf09 	b.w	8009ec0 <GUI_Unlock>
 80090ae:	bf00      	nop

080090b0 <GUI_SetColor>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4604      	mov	r4, r0
 80090b4:	f000 ff0e 	bl	8009ed4 <GUI_Lock>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f001 fdfd 	bl	800acb8 <LCD_SetColor>
 80090be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c2:	f000 befd 	b.w	8009ec0 <GUI_Unlock>
 80090c6:	bf00      	nop

080090c8 <GL_SetDefault>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4b20      	ldr	r3, [pc, #128]	; (800914c <GL_SetDefault+0x84>)
 80090cc:	4c20      	ldr	r4, [pc, #128]	; (8009150 <GL_SetDefault+0x88>)
 80090ce:	681d      	ldr	r5, [r3, #0]
 80090d0:	f000 ff00 	bl	8009ed4 <GUI_Lock>
 80090d4:	4628      	mov	r0, r5
 80090d6:	f001 fde9 	bl	800acac <LCD_SetBkColor>
 80090da:	f000 fef1 	bl	8009ec0 <GUI_Unlock>
 80090de:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <GL_SetDefault+0x8c>)
 80090e0:	681d      	ldr	r5, [r3, #0]
 80090e2:	f000 fef7 	bl	8009ed4 <GUI_Lock>
 80090e6:	4628      	mov	r0, r5
 80090e8:	f001 fde6 	bl	800acb8 <LCD_SetColor>
 80090ec:	f000 fee8 	bl	8009ec0 <GUI_Unlock>
 80090f0:	f000 fef0 	bl	8009ed4 <GUI_Lock>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	2201      	movs	r2, #1
 80090f8:	761a      	strb	r2, [r3, #24]
 80090fa:	f000 fee1 	bl	8009ec0 <GUI_Unlock>
 80090fe:	f000 fee9 	bl	8009ed4 <GUI_Lock>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	2500      	movs	r5, #0
 8009106:	859d      	strh	r5, [r3, #44]	; 0x2c
 8009108:	f000 feda 	bl	8009ec0 <GUI_Unlock>
 800910c:	f000 fee2 	bl	8009ed4 <GUI_Lock>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	855d      	strh	r5, [r3, #42]	; 0x2a
 8009114:	f000 fed4 	bl	8009ec0 <GUI_Unlock>
 8009118:	f000 fedc 	bl	8009ed4 <GUI_Lock>
 800911c:	4628      	mov	r0, r5
 800911e:	f001 f9a7 	bl	800a470 <LCD_SetDrawMode>
 8009122:	f000 fecd 	bl	8009ec0 <GUI_Unlock>
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <GL_SetDefault+0x90>)
 8009128:	681d      	ldr	r5, [r3, #0]
 800912a:	f000 fed3 	bl	8009ed4 <GUI_Lock>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	b105      	cbz	r5, 8009134 <GL_SetDefault+0x6c>
 8009132:	61dd      	str	r5, [r3, #28]
 8009134:	f000 fec4 	bl	8009ec0 <GUI_Unlock>
 8009138:	f000 fecc 	bl	8009ed4 <GUI_Lock>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	2200      	movs	r2, #0
 8009140:	769a      	strb	r2, [r3, #26]
 8009142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009146:	f000 bebb 	b.w	8009ec0 <GUI_Unlock>
 800914a:	bf00      	nop
 800914c:	200005d0 	.word	0x200005d0
 8009150:	2000007c 	.word	0x2000007c
 8009154:	20000078 	.word	0x20000078
 8009158:	20000074 	.word	0x20000074

0800915c <GUI_SetDrawMode>:
 800915c:	b510      	push	{r4, lr}
 800915e:	4604      	mov	r4, r0
 8009160:	f000 feb8 	bl	8009ed4 <GUI_Lock>
 8009164:	4620      	mov	r0, r4
 8009166:	f001 f983 	bl	800a470 <LCD_SetDrawMode>
 800916a:	4604      	mov	r4, r0
 800916c:	f000 fea8 	bl	8009ec0 <GUI_Unlock>
 8009170:	4620      	mov	r0, r4
 8009172:	bd10      	pop	{r4, pc}

08009174 <GUI_SetFont>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	f000 feac 	bl	8009ed4 <GUI_Lock>
 800917c:	4b04      	ldr	r3, [pc, #16]	; (8009190 <GUI_SetFont+0x1c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	69dd      	ldr	r5, [r3, #28]
 8009182:	b104      	cbz	r4, 8009186 <GUI_SetFont+0x12>
 8009184:	61dc      	str	r4, [r3, #28]
 8009186:	f000 fe9b 	bl	8009ec0 <GUI_Unlock>
 800918a:	4628      	mov	r0, r5
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	2000007c 	.word	0x2000007c

08009194 <GUI_SetOrg>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4605      	mov	r5, r0
 8009198:	460c      	mov	r4, r1
 800919a:	f000 fe9b 	bl	8009ed4 <GUI_Lock>
 800919e:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <GUI_SetOrg+0x30>)
 80091a0:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <GUI_SetOrg+0x34>)
 80091a2:	6812      	ldr	r2, [r2, #0]
 80091a4:	4909      	ldr	r1, [pc, #36]	; (80091cc <GUI_SetOrg+0x38>)
 80091a6:	7c50      	ldrb	r0, [r2, #17]
 80091a8:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <GUI_SetOrg+0x3c>)
 80091aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80091ae:	800d      	strh	r5, [r1, #0]
 80091b0:	68c3      	ldr	r3, [r0, #12]
 80091b2:	8014      	strh	r4, [r2, #0]
 80091b4:	4629      	mov	r1, r5
 80091b6:	4622      	mov	r2, r4
 80091b8:	6a1c      	ldr	r4, [r3, #32]
 80091ba:	47a0      	blx	r4
 80091bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c0:	f000 be7e 	b.w	8009ec0 <GUI_Unlock>
 80091c4:	2000007c 	.word	0x2000007c
 80091c8:	200357f4 	.word	0x200357f4
 80091cc:	200357da 	.word	0x200357da
 80091d0:	2003580c 	.word	0x2003580c

080091d4 <_InitContext>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	4d1a      	ldr	r5, [pc, #104]	; (8009240 <_InitContext+0x6c>)
 80091d8:	4e1a      	ldr	r6, [pc, #104]	; (8009244 <_InitContext+0x70>)
 80091da:	68eb      	ldr	r3, [r5, #12]
 80091dc:	4a1a      	ldr	r2, [pc, #104]	; (8009248 <_InitContext+0x74>)
 80091de:	4604      	mov	r4, r0
 80091e0:	f103 0108 	add.w	r1, r3, #8
 80091e4:	1d18      	adds	r0, r3, #4
 80091e6:	f106 0784 	add.w	r7, r6, #132	; 0x84
 80091ea:	6727      	str	r7, [r4, #112]	; 0x70
 80091ec:	63d8      	str	r0, [r3, #60]	; 0x3c
 80091ee:	639b      	str	r3, [r3, #56]	; 0x38
 80091f0:	641b      	str	r3, [r3, #64]	; 0x40
 80091f2:	6161      	str	r1, [r4, #20]
 80091f4:	7c5b      	ldrb	r3, [r3, #17]
 80091f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80091fa:	68c3      	ldr	r3, [r0, #12]
 80091fc:	f104 0108 	add.w	r1, r4, #8
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	4798      	blx	r3
 8009204:	68eb      	ldr	r3, [r5, #12]
 8009206:	4a11      	ldr	r2, [pc, #68]	; (800924c <_InitContext+0x78>)
 8009208:	6869      	ldr	r1, [r5, #4]
 800920a:	6662      	str	r2, [r4, #100]	; 0x64
 800920c:	3308      	adds	r3, #8
 800920e:	2201      	movs	r2, #1
 8009210:	61e1      	str	r1, [r4, #28]
 8009212:	6163      	str	r3, [r4, #20]
 8009214:	7622      	strb	r2, [r4, #24]
 8009216:	76e2      	strb	r2, [r4, #27]
 8009218:	f006 ff42 	bl	80100a0 <WM_GetDesktopWindow>
 800921c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009220:	2203      	movs	r2, #3
 8009222:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 8009226:	6323      	str	r3, [r4, #48]	; 0x30
 8009228:	6363      	str	r3, [r4, #52]	; 0x34
 800922a:	64a0      	str	r0, [r4, #72]	; 0x48
 800922c:	6830      	ldr	r0, [r6, #0]
 800922e:	f001 fd3d 	bl	800acac <LCD_SetBkColor>
 8009232:	68a8      	ldr	r0, [r5, #8]
 8009234:	f001 fd40 	bl	800acb8 <LCD_SetColor>
 8009238:	4b05      	ldr	r3, [pc, #20]	; (8009250 <_InitContext+0x7c>)
 800923a:	4a06      	ldr	r2, [pc, #24]	; (8009254 <_InitContext+0x80>)
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009240:	20000070 	.word	0x20000070
 8009244:	200005d0 	.word	0x200005d0
 8009248:	200357f4 	.word	0x200357f4
 800924c:	08015110 	.word	0x08015110
 8009250:	20035818 	.word	0x20035818
 8009254:	08015128 	.word	0x08015128

08009258 <_OnExit>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <_OnExit+0x30>)
 800925c:	4e0b      	ldr	r6, [pc, #44]	; (800928c <_OnExit+0x34>)
 800925e:	2400      	movs	r4, #0
 8009260:	1d1d      	adds	r5, r3, #4
 8009262:	4621      	mov	r1, r4
 8009264:	2274      	movs	r2, #116	; 0x74
 8009266:	4628      	mov	r0, r5
 8009268:	6837      	ldr	r7, [r6, #0]
 800926a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 800926e:	47b8      	blx	r7
 8009270:	6833      	ldr	r3, [r6, #0]
 8009272:	4807      	ldr	r0, [pc, #28]	; (8009290 <_OnExit+0x38>)
 8009274:	4621      	mov	r1, r4
 8009276:	2208      	movs	r2, #8
 8009278:	4798      	blx	r3
 800927a:	4a06      	ldr	r2, [pc, #24]	; (8009294 <_OnExit+0x3c>)
 800927c:	4906      	ldr	r1, [pc, #24]	; (8009298 <_OnExit+0x40>)
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <_OnExit+0x44>)
 8009280:	7014      	strb	r4, [r2, #0]
 8009282:	60cd      	str	r5, [r1, #12]
 8009284:	601c      	str	r4, [r3, #0]
 8009286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009288:	200005d0 	.word	0x200005d0
 800928c:	20000094 	.word	0x20000094
 8009290:	200357f4 	.word	0x200357f4
 8009294:	200357d8 	.word	0x200357d8
 8009298:	20000070 	.word	0x20000070
 800929c:	200357c8 	.word	0x200357c8

080092a0 <GUI_Clear>:
 80092a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a4:	2100      	movs	r1, #0
 80092a6:	b082      	sub	sp, #8
 80092a8:	4608      	mov	r0, r1
 80092aa:	f7ff fe97 	bl	8008fdc <GUI_GotoXY>
 80092ae:	f000 fe11 	bl	8009ed4 <GUI_Lock>
 80092b2:	2004      	movs	r0, #4
 80092b4:	f001 f8dc 	bl	800a470 <LCD_SetDrawMode>
 80092b8:	4b17      	ldr	r3, [pc, #92]	; (8009318 <GUI_Clear+0x78>)
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80092be:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80092c0:	f5a5 577f 	sub.w	r7, r5, #16320	; 0x3fc0
 80092c4:	f5a4 567f 	sub.w	r6, r4, #16320	; 0x3fc0
 80092c8:	f505 557f 	add.w	r5, r5, #16320	; 0x3fc0
 80092cc:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 80092d0:	4680      	mov	r8, r0
 80092d2:	3f3f      	subs	r7, #63	; 0x3f
 80092d4:	353f      	adds	r5, #63	; 0x3f
 80092d6:	3e3f      	subs	r6, #63	; 0x3f
 80092d8:	343f      	adds	r4, #63	; 0x3f
 80092da:	4668      	mov	r0, sp
 80092dc:	f8ad 7000 	strh.w	r7, [sp]
 80092e0:	f8ad 5004 	strh.w	r5, [sp, #4]
 80092e4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80092e8:	f8ad 4006 	strh.w	r4, [sp, #6]
 80092ec:	f006 faea 	bl	800f8c4 <WM__InitIVRSearch>
 80092f0:	b148      	cbz	r0, 8009306 <GUI_Clear+0x66>
 80092f2:	4623      	mov	r3, r4
 80092f4:	462a      	mov	r2, r5
 80092f6:	4631      	mov	r1, r6
 80092f8:	4638      	mov	r0, r7
 80092fa:	f001 f949 	bl	800a590 <LCD_FillRect>
 80092fe:	f006 f9bb 	bl	800f678 <WM__GetNextIVR>
 8009302:	2800      	cmp	r0, #0
 8009304:	d1f5      	bne.n	80092f2 <GUI_Clear+0x52>
 8009306:	4640      	mov	r0, r8
 8009308:	f001 f8b2 	bl	800a470 <LCD_SetDrawMode>
 800930c:	f000 fdd8 	bl	8009ec0 <GUI_Unlock>
 8009310:	b002      	add	sp, #8
 8009312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009316:	bf00      	nop
 8009318:	20000070 	.word	0x20000070

0800931c <GUI__Config>:
 800931c:	b530      	push	{r4, r5, lr}
 800931e:	4d1c      	ldr	r5, [pc, #112]	; (8009390 <GUI__Config+0x74>)
 8009320:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8009324:	b085      	sub	sp, #20
 8009326:	b10b      	cbz	r3, 800932c <GUI__Config+0x10>
 8009328:	b005      	add	sp, #20
 800932a:	bd30      	pop	{r4, r5, pc}
 800932c:	4b19      	ldr	r3, [pc, #100]	; (8009394 <GUI__Config+0x78>)
 800932e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009330:	466c      	mov	r4, sp
 8009332:	c407      	stmia	r4!, {r0, r1, r2}
 8009334:	a904      	add	r1, sp, #16
 8009336:	f824 3b02 	strh.w	r3, [r4], #2
 800933a:	0c1b      	lsrs	r3, r3, #16
 800933c:	7023      	strb	r3, [r4, #0]
 800933e:	f811 2d10 	ldrb.w	r2, [r1, #-16]!
 8009342:	2301      	movs	r3, #1
 8009344:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8009348:	f105 0484 	add.w	r4, r5, #132	; 0x84
 800934c:	f804 2b01 	strb.w	r2, [r4], #1
 8009350:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009354:	2a00      	cmp	r2, #0
 8009356:	d1f9      	bne.n	800934c <GUI__Config+0x30>
 8009358:	f7ff fd72 	bl	8008e40 <GUI_GetVersionString>
 800935c:	4623      	mov	r3, r4
 800935e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009362:	4619      	mov	r1, r3
 8009364:	f803 2b01 	strb.w	r2, [r3], #1
 8009368:	7802      	ldrb	r2, [r0, #0]
 800936a:	2a00      	cmp	r2, #0
 800936c:	d1f7      	bne.n	800935e <GUI__Config+0x42>
 800936e:	704a      	strb	r2, [r1, #1]
 8009370:	f7fd fcf8 	bl	8006d64 <GUI_X_Config>
 8009374:	f000 fdfe 	bl	8009f74 <GUITASK_Init>
 8009378:	f7fd ffe4 	bl	8007344 <LCD_X_Config>
 800937c:	4b06      	ldr	r3, [pc, #24]	; (8009398 <GUI__Config+0x7c>)
 800937e:	4807      	ldr	r0, [pc, #28]	; (800939c <GUI__Config+0x80>)
 8009380:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8009384:	b005      	add	sp, #20
 8009386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800938a:	f000 b887 	b.w	800949c <GUI__RegisterExit>
 800938e:	bf00      	nop
 8009390:	200005d0 	.word	0x200005d0
 8009394:	08015118 	.word	0x08015118
 8009398:	08009259 	.word	0x08009259
 800939c:	20000668 	.word	0x20000668

080093a0 <GUI_Init>:
 80093a0:	b590      	push	{r4, r7, lr}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4a34      	ldr	r2, [pc, #208]	; (8009478 <GUI_Init+0xd8>)
 80093a8:	4b33      	ldr	r3, [pc, #204]	; (8009478 <GUI_Init+0xd8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f023 0301 	bic.w	r3, r3, #1
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	4b32      	ldr	r3, [pc, #200]	; (800947c <GUI_Init+0xdc>)
 80093b4:	2201      	movs	r2, #1
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	bf00      	nop
 80093ba:	4b30      	ldr	r3, [pc, #192]	; (800947c <GUI_Init+0xdc>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1fb      	bne.n	80093ba <GUI_Init+0x1a>
 80093c2:	4b2f      	ldr	r3, [pc, #188]	; (8009480 <GUI_Init+0xe0>)
 80093c4:	4a2f      	ldr	r2, [pc, #188]	; (8009484 <GUI_Init+0xe4>)
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	4b2d      	ldr	r3, [pc, #180]	; (8009480 <GUI_Init+0xe0>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a2e      	ldr	r2, [pc, #184]	; (8009488 <GUI_Init+0xe8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d000      	beq.n	80093d4 <GUI_Init+0x34>
 80093d2:	e7fe      	b.n	80093d2 <GUI_Init+0x32>
 80093d4:	f7ff ffa2 	bl	800931c <GUI__Config>
 80093d8:	4b2c      	ldr	r3, [pc, #176]	; (800948c <GUI_Init+0xec>)
 80093da:	222e      	movs	r2, #46	; 0x2e
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	f7fe fa8f 	bl	8007900 <GUI_X_Init>
 80093e2:	482b      	ldr	r0, [pc, #172]	; (8009490 <GUI_Init+0xf0>)
 80093e4:	f7ff fef6 	bl	80091d4 <_InitContext>
 80093e8:	f001 fba4 	bl	800ab34 <emWin_LCD_Init>
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	f001 fe9f 	bl	800b130 <LCD_GetXSizeDisplay>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bf0c      	ite	eq
 80093f8:	2301      	moveq	r3, #1
 80093fa:	2300      	movne	r3, #0
 80093fc:	b2dc      	uxtb	r4, r3
 80093fe:	f001 fe9d 	bl	800b13c <LCD_GetYSizeDisplay>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	bf0c      	ite	eq
 8009408:	2301      	moveq	r3, #1
 800940a:	2300      	movne	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	4323      	orrs	r3, r4
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <GUI_Init+0x8a>
 8009416:	f001 fe37 	bl	800b088 <LCD_GetXSizeMax>
 800941a:	4604      	mov	r4, r0
 800941c:	f001 fe4e 	bl	800b0bc <LCD_GetYSizeMax>
 8009420:	4603      	mov	r3, r0
 8009422:	4619      	mov	r1, r3
 8009424:	4620      	mov	r0, r4
 8009426:	f001 fe7d 	bl	800b124 <LCD_SetDisplaySize>
 800942a:	2100      	movs	r1, #0
 800942c:	2000      	movs	r0, #0
 800942e:	f7ff feb1 	bl	8009194 <GUI_SetOrg>
 8009432:	f006 fd05 	bl	800fe40 <WM_Init>
 8009436:	f000 fdd9 	bl	8009fec <GUITASK_CopyContext>
 800943a:	4b16      	ldr	r3, [pc, #88]	; (8009494 <GUI_Init+0xf4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d012      	beq.n	8009468 <GUI_Init+0xc8>
 8009442:	e00d      	b.n	8009460 <GUI_Init+0xc0>
 8009444:	4b13      	ldr	r3, [pc, #76]	; (8009494 <GUI_Init+0xf4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <GUI_Init+0xb6>
 800944e:	4b11      	ldr	r3, [pc, #68]	; (8009494 <GUI_Init+0xf4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4798      	blx	r3
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <GUI_Init+0xf4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	4a0d      	ldr	r2, [pc, #52]	; (8009494 <GUI_Init+0xf4>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <GUI_Init+0xf4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1ed      	bne.n	8009444 <GUI_Init+0xa4>
 8009468:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <GUI_Init+0xf8>)
 800946a:	2201      	movs	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	bd90      	pop	{r4, r7, pc}
 8009478:	e0002000 	.word	0xe0002000
 800947c:	40023008 	.word	0x40023008
 8009480:	40023000 	.word	0x40023000
 8009484:	f407a5c2 	.word	0xf407a5c2
 8009488:	b5e8b5cd 	.word	0xb5e8b5cd
 800948c:	200357f0 	.word	0x200357f0
 8009490:	200005d4 	.word	0x200005d4
 8009494:	2000064c 	.word	0x2000064c
 8009498:	20035820 	.word	0x20035820

0800949c <GUI__RegisterExit>:
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <GUI__RegisterExit+0x24>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
 80094ac:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <GUI__RegisterExit+0x24>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000648 	.word	0x20000648

080094c4 <GUI_DCACHE_Clear>:
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <GUI_DCACHE_Clear+0x20>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <GUI_DCACHE_Clear+0x18>
 80094d4:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <GUI_DCACHE_Clear+0x20>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	200357c8 	.word	0x200357c8

080094e8 <GUI_DEVICE__GetpDriver>:
 80094e8:	2801      	cmp	r0, #1
 80094ea:	dc0e      	bgt.n	800950a <GUI_DEVICE__GetpDriver+0x22>
 80094ec:	4b08      	ldr	r3, [pc, #32]	; (8009510 <GUI_DEVICE__GetpDriver+0x28>)
 80094ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80094f2:	b158      	cbz	r0, 800950c <GUI_DEVICE__GetpDriver+0x24>
 80094f4:	68c3      	ldr	r3, [r0, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	b91b      	cbnz	r3, 8009502 <GUI_DEVICE__GetpDriver+0x1a>
 80094fa:	e008      	b.n	800950e <GUI_DEVICE__GetpDriver+0x26>
 80094fc:	68c3      	ldr	r3, [r0, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	b123      	cbz	r3, 800950c <GUI_DEVICE__GetpDriver+0x24>
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	2800      	cmp	r0, #0
 8009506:	d1f9      	bne.n	80094fc <GUI_DEVICE__GetpDriver+0x14>
 8009508:	4770      	bx	lr
 800950a:	2000      	movs	r0, #0
 800950c:	4770      	bx	lr
 800950e:	4770      	bx	lr
 8009510:	200357f4 	.word	0x200357f4

08009514 <GUI_DEVICE_Delete>:
 8009514:	f7ff b878 	b.w	8008608 <GUI_ALLOC_FreeFixedBlock>

08009518 <GUI_DEVICE_Create>:
 8009518:	2b01      	cmp	r3, #1
 800951a:	dc12      	bgt.n	8009542 <GUI_DEVICE_Create+0x2a>
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	4606      	mov	r6, r0
 8009520:	201c      	movs	r0, #28
 8009522:	4617      	mov	r7, r2
 8009524:	460c      	mov	r4, r1
 8009526:	461d      	mov	r5, r3
 8009528:	f7ff f878 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800952c:	b1b8      	cbz	r0, 800955e <GUI_DEVICE_Create+0x46>
 800952e:	b154      	cbz	r4, 8009546 <GUI_DEVICE_Create+0x2e>
 8009530:	6104      	str	r4, [r0, #16]
 8009532:	2300      	movs	r3, #0
 8009534:	6083      	str	r3, [r0, #8]
 8009536:	6185      	str	r5, [r0, #24]
 8009538:	8287      	strh	r7, [r0, #20]
 800953a:	60c6      	str	r6, [r0, #12]
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	6043      	str	r3, [r0, #4]
 8009540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009542:	2000      	movs	r0, #0
 8009544:	4770      	bx	lr
 8009546:	4b07      	ldr	r3, [pc, #28]	; (8009564 <GUI_DEVICE_Create+0x4c>)
 8009548:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800954c:	b90a      	cbnz	r2, 8009552 <GUI_DEVICE_Create+0x3a>
 800954e:	e7f0      	b.n	8009532 <GUI_DEVICE_Create+0x1a>
 8009550:	461a      	mov	r2, r3
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1fb      	bne.n	8009550 <GUI_DEVICE_Create+0x38>
 8009558:	6913      	ldr	r3, [r2, #16]
 800955a:	6103      	str	r3, [r0, #16]
 800955c:	e7e9      	b.n	8009532 <GUI_DEVICE_Create+0x1a>
 800955e:	2000      	movs	r0, #0
 8009560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009562:	bf00      	nop
 8009564:	200357f4 	.word	0x200357f4

08009568 <GUI_DEVICE_Unlink>:
 8009568:	4a0f      	ldr	r2, [pc, #60]	; (80095a8 <GUI_DEVICE_Unlink+0x40>)
 800956a:	6981      	ldr	r1, [r0, #24]
 800956c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009570:	4298      	cmp	r0, r3
 8009572:	d00a      	beq.n	800958a <GUI_DEVICE_Unlink+0x22>
 8009574:	6842      	ldr	r2, [r0, #4]
 8009576:	b10a      	cbz	r2, 800957c <GUI_DEVICE_Unlink+0x14>
 8009578:	6803      	ldr	r3, [r0, #0]
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	6803      	ldr	r3, [r0, #0]
 800957e:	b103      	cbz	r3, 8009582 <GUI_DEVICE_Unlink+0x1a>
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	2300      	movs	r3, #0
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	6043      	str	r3, [r0, #4]
 8009588:	4770      	bx	lr
 800958a:	6803      	ldr	r3, [r0, #0]
 800958c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009590:	b12b      	cbz	r3, 800959e <GUI_DEVICE_Unlink+0x36>
 8009592:	2200      	movs	r2, #0
 8009594:	605a      	str	r2, [r3, #4]
 8009596:	6842      	ldr	r2, [r0, #4]
 8009598:	2a00      	cmp	r2, #0
 800959a:	d1ee      	bne.n	800957a <GUI_DEVICE_Unlink+0x12>
 800959c:	e7f0      	b.n	8009580 <GUI_DEVICE_Unlink+0x18>
 800959e:	6842      	ldr	r2, [r0, #4]
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d1ea      	bne.n	800957a <GUI_DEVICE_Unlink+0x12>
 80095a4:	e7ed      	b.n	8009582 <GUI_DEVICE_Unlink+0x1a>
 80095a6:	bf00      	nop
 80095a8:	200357f4 	.word	0x200357f4

080095ac <GUI_DEVICE_Link>:
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d03c      	beq.n	800962a <GUI_DEVICE_Link+0x7e>
 80095b0:	b470      	push	{r4, r5, r6}
 80095b2:	6984      	ldr	r4, [r0, #24]
 80095b4:	2c01      	cmp	r4, #1
 80095b6:	dd03      	ble.n	80095c0 <GUI_DEVICE_Link+0x14>
 80095b8:	2301      	movs	r3, #1
 80095ba:	4618      	mov	r0, r3
 80095bc:	bc70      	pop	{r4, r5, r6}
 80095be:	4770      	bx	lr
 80095c0:	4b1e      	ldr	r3, [pc, #120]	; (800963c <GUI_DEVICE_Link+0x90>)
 80095c2:	4d1f      	ldr	r5, [pc, #124]	; (8009640 <GUI_DEVICE_Link+0x94>)
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	4294      	cmp	r4, r2
 80095c8:	bfa4      	itt	ge
 80095ca:	1c62      	addge	r2, r4, #1
 80095cc:	701a      	strbge	r2, [r3, #0]
 80095ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80095d2:	b90b      	cbnz	r3, 80095d8 <GUI_DEVICE_Link+0x2c>
 80095d4:	e02f      	b.n	8009636 <GUI_DEVICE_Link+0x8a>
 80095d6:	4613      	mov	r3, r2
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	2a00      	cmp	r2, #0
 80095dc:	d1fb      	bne.n	80095d6 <GUI_DEVICE_Link+0x2a>
 80095de:	68c2      	ldr	r2, [r0, #12]
 80095e0:	6811      	ldr	r1, [r2, #0]
 80095e2:	e002      	b.n	80095ea <GUI_DEVICE_Link+0x3e>
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0e6      	beq.n	80095b8 <GUI_DEVICE_Link+0xc>
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	6812      	ldr	r2, [r2, #0]
 80095ee:	4291      	cmp	r1, r2
 80095f0:	dbf8      	blt.n	80095e4 <GUI_DEVICE_Link+0x38>
 80095f2:	d00d      	beq.n	8009610 <GUI_DEVICE_Link+0x64>
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	b1da      	cbz	r2, 8009630 <GUI_DEVICE_Link+0x84>
 80095f8:	6010      	str	r0, [r2, #0]
 80095fa:	6042      	str	r2, [r0, #4]
 80095fc:	4298      	cmp	r0, r3
 80095fe:	bf14      	ite	ne
 8009600:	461a      	movne	r2, r3
 8009602:	2200      	moveq	r2, #0
 8009604:	6058      	str	r0, [r3, #4]
 8009606:	2300      	movs	r3, #0
 8009608:	6002      	str	r2, [r0, #0]
 800960a:	bc70      	pop	{r4, r5, r6}
 800960c:	4618      	mov	r0, r3
 800960e:	4770      	bx	lr
 8009610:	8a82      	ldrh	r2, [r0, #20]
 8009612:	2a01      	cmp	r2, #1
 8009614:	d1ee      	bne.n	80095f4 <GUI_DEVICE_Link+0x48>
 8009616:	e004      	b.n	8009622 <GUI_DEVICE_Link+0x76>
 8009618:	68d3      	ldr	r3, [r2, #12]
 800961a:	681e      	ldr	r6, [r3, #0]
 800961c:	42b1      	cmp	r1, r6
 800961e:	4613      	mov	r3, r2
 8009620:	dce8      	bgt.n	80095f4 <GUI_DEVICE_Link+0x48>
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	2a00      	cmp	r2, #0
 8009626:	d1f7      	bne.n	8009618 <GUI_DEVICE_Link+0x6c>
 8009628:	e7e4      	b.n	80095f4 <GUI_DEVICE_Link+0x48>
 800962a:	2301      	movs	r3, #1
 800962c:	4618      	mov	r0, r3
 800962e:	4770      	bx	lr
 8009630:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8009634:	e7e2      	b.n	80095fc <GUI_DEVICE_Link+0x50>
 8009636:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 800963a:	e7be      	b.n	80095ba <GUI_DEVICE_Link+0xe>
 800963c:	200357fc 	.word	0x200357fc
 8009640:	200357f4 	.word	0x200357f4

08009644 <GUI_DEVICE_CreateAndLink>:
 8009644:	2b01      	cmp	r3, #1
 8009646:	dc3b      	bgt.n	80096c0 <GUI_DEVICE_CreateAndLink+0x7c>
 8009648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800964c:	4681      	mov	r9, r0
 800964e:	201c      	movs	r0, #28
 8009650:	4690      	mov	r8, r2
 8009652:	460f      	mov	r7, r1
 8009654:	461e      	mov	r6, r3
 8009656:	f7fe ffe1 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800965a:	4605      	mov	r5, r0
 800965c:	2800      	cmp	r0, #0
 800965e:	d07f      	beq.n	8009760 <GUI_DEVICE_CreateAndLink+0x11c>
 8009660:	4a41      	ldr	r2, [pc, #260]	; (8009768 <GUI_DEVICE_CreateAndLink+0x124>)
 8009662:	2f00      	cmp	r7, #0
 8009664:	d031      	beq.n	80096ca <GUI_DEVICE_CreateAndLink+0x86>
 8009666:	2300      	movs	r3, #0
 8009668:	f8df e104 	ldr.w	lr, [pc, #260]	; 8009770 <GUI_DEVICE_CreateAndLink+0x12c>
 800966c:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	f89e 1000 	ldrb.w	r1, [lr]
 8009676:	6107      	str	r7, [r0, #16]
 8009678:	428e      	cmp	r6, r1
 800967a:	6186      	str	r6, [r0, #24]
 800967c:	f8a0 8014 	strh.w	r8, [r0, #20]
 8009680:	f8c0 900c 	str.w	r9, [r0, #12]
 8009684:	6043      	str	r3, [r0, #4]
 8009686:	6083      	str	r3, [r0, #8]
 8009688:	db02      	blt.n	8009690 <GUI_DEVICE_CreateAndLink+0x4c>
 800968a:	1c73      	adds	r3, r6, #1
 800968c:	f88e 3000 	strb.w	r3, [lr]
 8009690:	2c00      	cmp	r4, #0
 8009692:	d05d      	beq.n	8009750 <GUI_DEVICE_CreateAndLink+0x10c>
 8009694:	4621      	mov	r1, r4
 8009696:	684c      	ldr	r4, [r1, #4]
 8009698:	2c00      	cmp	r4, #0
 800969a:	d1fb      	bne.n	8009694 <GUI_DEVICE_CreateAndLink+0x50>
 800969c:	f8d9 0000 	ldr.w	r0, [r9]
 80096a0:	68cb      	ldr	r3, [r1, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4283      	cmp	r3, r0
 80096a6:	dd2c      	ble.n	8009702 <GUI_DEVICE_CreateAndLink+0xbe>
 80096a8:	6809      	ldr	r1, [r1, #0]
 80096aa:	2900      	cmp	r1, #0
 80096ac:	d1f8      	bne.n	80096a0 <GUI_DEVICE_CreateAndLink+0x5c>
 80096ae:	b948      	cbnz	r0, 80096c4 <GUI_DEVICE_CreateAndLink+0x80>
 80096b0:	4b2e      	ldr	r3, [pc, #184]	; (800976c <GUI_DEVICE_CreateAndLink+0x128>)
 80096b2:	3616      	adds	r6, #22
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	4628      	mov	r0, r5
 80096b8:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 80096bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c0:	2000      	movs	r0, #0
 80096c2:	4770      	bx	lr
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ca:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 80096ce:	2900      	cmp	r1, #0
 80096d0:	d030      	beq.n	8009734 <GUI_DEVICE_CreateAndLink+0xf0>
 80096d2:	4608      	mov	r0, r1
 80096d4:	e000      	b.n	80096d8 <GUI_DEVICE_CreateAndLink+0x94>
 80096d6:	4618      	mov	r0, r3
 80096d8:	6803      	ldr	r3, [r0, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1fb      	bne.n	80096d6 <GUI_DEVICE_CreateAndLink+0x92>
 80096de:	f8df e090 	ldr.w	lr, [pc, #144]	; 8009770 <GUI_DEVICE_CreateAndLink+0x12c>
 80096e2:	6900      	ldr	r0, [r0, #16]
 80096e4:	602b      	str	r3, [r5, #0]
 80096e6:	6128      	str	r0, [r5, #16]
 80096e8:	f89e 0000 	ldrb.w	r0, [lr]
 80096ec:	61ae      	str	r6, [r5, #24]
 80096ee:	4286      	cmp	r6, r0
 80096f0:	f8a5 8014 	strh.w	r8, [r5, #20]
 80096f4:	f8c5 900c 	str.w	r9, [r5, #12]
 80096f8:	606b      	str	r3, [r5, #4]
 80096fa:	60ab      	str	r3, [r5, #8]
 80096fc:	dbcb      	blt.n	8009696 <GUI_DEVICE_CreateAndLink+0x52>
 80096fe:	460c      	mov	r4, r1
 8009700:	e7c3      	b.n	800968a <GUI_DEVICE_CreateAndLink+0x46>
 8009702:	d00a      	beq.n	800971a <GUI_DEVICE_CreateAndLink+0xd6>
 8009704:	684b      	ldr	r3, [r1, #4]
 8009706:	b343      	cbz	r3, 800975a <GUI_DEVICE_CreateAndLink+0x116>
 8009708:	601d      	str	r5, [r3, #0]
 800970a:	606b      	str	r3, [r5, #4]
 800970c:	428d      	cmp	r5, r1
 800970e:	bf14      	ite	ne
 8009710:	460b      	movne	r3, r1
 8009712:	2300      	moveq	r3, #0
 8009714:	604d      	str	r5, [r1, #4]
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	e7c9      	b.n	80096ae <GUI_DEVICE_CreateAndLink+0x6a>
 800971a:	f1b8 0f01 	cmp.w	r8, #1
 800971e:	d1f1      	bne.n	8009704 <GUI_DEVICE_CreateAndLink+0xc0>
 8009720:	e004      	b.n	800972c <GUI_DEVICE_CreateAndLink+0xe8>
 8009722:	68d9      	ldr	r1, [r3, #12]
 8009724:	680c      	ldr	r4, [r1, #0]
 8009726:	4284      	cmp	r4, r0
 8009728:	4619      	mov	r1, r3
 800972a:	dbeb      	blt.n	8009704 <GUI_DEVICE_CreateAndLink+0xc0>
 800972c:	680b      	ldr	r3, [r1, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f7      	bne.n	8009722 <GUI_DEVICE_CreateAndLink+0xde>
 8009732:	e7e7      	b.n	8009704 <GUI_DEVICE_CreateAndLink+0xc0>
 8009734:	f8df e038 	ldr.w	lr, [pc, #56]	; 8009770 <GUI_DEVICE_CreateAndLink+0x12c>
 8009738:	6001      	str	r1, [r0, #0]
 800973a:	f89e 3000 	ldrb.w	r3, [lr]
 800973e:	6186      	str	r6, [r0, #24]
 8009740:	429e      	cmp	r6, r3
 8009742:	f8a0 8014 	strh.w	r8, [r0, #20]
 8009746:	f8c0 900c 	str.w	r9, [r0, #12]
 800974a:	6041      	str	r1, [r0, #4]
 800974c:	6081      	str	r1, [r0, #8]
 800974e:	dad6      	bge.n	80096fe <GUI_DEVICE_CreateAndLink+0xba>
 8009750:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8009754:	f8d9 0000 	ldr.w	r0, [r9]
 8009758:	e7a9      	b.n	80096ae <GUI_DEVICE_CreateAndLink+0x6a>
 800975a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 800975e:	e7d5      	b.n	800970c <GUI_DEVICE_CreateAndLink+0xc8>
 8009760:	2000      	movs	r0, #0
 8009762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009766:	bf00      	nop
 8009768:	200357f4 	.word	0x200357f4
 800976c:	2000007c 	.word	0x2000007c
 8009770:	200357fc 	.word	0x200357fc

08009774 <GUI_DEVICE_UnlinkTaskDevices>:
 8009774:	2000      	movs	r0, #0
 8009776:	4770      	bx	lr

08009778 <GUI_DEVICE_LinkDevices>:
 8009778:	2800      	cmp	r0, #0
 800977a:	d04d      	beq.n	8009818 <GUI_DEVICE_LinkDevices+0xa0>
 800977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009780:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8009820 <GUI_DEVICE_LinkDevices+0xa8>
 8009784:	4f25      	ldr	r7, [pc, #148]	; (800981c <GUI_DEVICE_LinkDevices+0xa4>)
 8009786:	f89e 6000 	ldrb.w	r6, [lr]
 800978a:	46bc      	mov	ip, r7
 800978c:	e002      	b.n	8009794 <GUI_DEVICE_LinkDevices+0x1c>
 800978e:	4628      	mov	r0, r5
 8009790:	2d00      	cmp	r5, #0
 8009792:	d027      	beq.n	80097e4 <GUI_DEVICE_LinkDevices+0x6c>
 8009794:	6984      	ldr	r4, [r0, #24]
 8009796:	6805      	ldr	r5, [r0, #0]
 8009798:	2c01      	cmp	r4, #1
 800979a:	dcf8      	bgt.n	800978e <GUI_DEVICE_LinkDevices+0x16>
 800979c:	42b4      	cmp	r4, r6
 800979e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80097a2:	bfa4      	itt	ge
 80097a4:	1c66      	addge	r6, r4, #1
 80097a6:	b2f6      	uxtbge	r6, r6
 80097a8:	b90b      	cbnz	r3, 80097ae <GUI_DEVICE_LinkDevices+0x36>
 80097aa:	e032      	b.n	8009812 <GUI_DEVICE_LinkDevices+0x9a>
 80097ac:	4613      	mov	r3, r2
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	d1fb      	bne.n	80097ac <GUI_DEVICE_LinkDevices+0x34>
 80097b4:	68c2      	ldr	r2, [r0, #12]
 80097b6:	6811      	ldr	r1, [r2, #0]
 80097b8:	e002      	b.n	80097c0 <GUI_DEVICE_LinkDevices+0x48>
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0e6      	beq.n	800978e <GUI_DEVICE_LinkDevices+0x16>
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	428a      	cmp	r2, r1
 80097c6:	dcf8      	bgt.n	80097ba <GUI_DEVICE_LinkDevices+0x42>
 80097c8:	d010      	beq.n	80097ec <GUI_DEVICE_LinkDevices+0x74>
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	b1a2      	cbz	r2, 80097f8 <GUI_DEVICE_LinkDevices+0x80>
 80097ce:	6010      	str	r0, [r2, #0]
 80097d0:	6042      	str	r2, [r0, #4]
 80097d2:	4298      	cmp	r0, r3
 80097d4:	bf14      	ite	ne
 80097d6:	461a      	movne	r2, r3
 80097d8:	2200      	moveq	r2, #0
 80097da:	6058      	str	r0, [r3, #4]
 80097dc:	6002      	str	r2, [r0, #0]
 80097de:	4628      	mov	r0, r5
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	d1d7      	bne.n	8009794 <GUI_DEVICE_LinkDevices+0x1c>
 80097e4:	f88e 6000 	strb.w	r6, [lr]
 80097e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ec:	8a82      	ldrh	r2, [r0, #20]
 80097ee:	2a01      	cmp	r2, #1
 80097f0:	d00b      	beq.n	800980a <GUI_DEVICE_LinkDevices+0x92>
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	2a00      	cmp	r2, #0
 80097f6:	d1ea      	bne.n	80097ce <GUI_DEVICE_LinkDevices+0x56>
 80097f8:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80097fc:	e7e9      	b.n	80097d2 <GUI_DEVICE_LinkDevices+0x5a>
 80097fe:	68d3      	ldr	r3, [r2, #12]
 8009800:	f8d3 8000 	ldr.w	r8, [r3]
 8009804:	4588      	cmp	r8, r1
 8009806:	4613      	mov	r3, r2
 8009808:	dbdf      	blt.n	80097ca <GUI_DEVICE_LinkDevices+0x52>
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	2a00      	cmp	r2, #0
 800980e:	d1f6      	bne.n	80097fe <GUI_DEVICE_LinkDevices+0x86>
 8009810:	e7db      	b.n	80097ca <GUI_DEVICE_LinkDevices+0x52>
 8009812:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009816:	e7ba      	b.n	800978e <GUI_DEVICE_LinkDevices+0x16>
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	200357f4 	.word	0x200357f4
 8009820:	200357fc 	.word	0x200357fc

08009824 <CL_DispChar>:
 8009824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009826:	4f27      	ldr	r7, [pc, #156]	; (80098c4 <CL_DispChar+0xa0>)
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800982c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 800982e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8009830:	6d15      	ldr	r5, [r2, #80]	; 0x50
 8009832:	441c      	add	r4, r3
 8009834:	b2a4      	uxth	r4, r4
 8009836:	b083      	sub	sp, #12
 8009838:	186b      	adds	r3, r5, r1
 800983a:	b221      	sxth	r1, r4
 800983c:	8493      	strh	r3, [r2, #36]	; 0x24
 800983e:	8451      	strh	r1, [r2, #34]	; 0x22
 8009840:	f8ad 1000 	strh.w	r1, [sp]
 8009844:	4605      	mov	r5, r0
 8009846:	f7ff fa63 	bl	8008d10 <GUI_GetCharDistX>
 800984a:	4606      	mov	r6, r0
 800984c:	4628      	mov	r0, r5
 800984e:	f007 fc79 	bl	8011144 <GUI__GetOverlap>
 8009852:	3c01      	subs	r4, #1
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	4434      	add	r4, r6
 8009858:	4420      	add	r0, r4
 800985a:	f9b3 6024 	ldrsh.w	r6, [r3, #36]	; 0x24
 800985e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009862:	f8ad 0004 	strh.w	r0, [sp, #4]
 8009866:	f7ff fac5 	bl	8008df4 <GUI_GetFontSizeY>
 800986a:	3e01      	subs	r6, #1
 800986c:	4406      	add	r6, r0
 800986e:	4668      	mov	r0, sp
 8009870:	f8ad 6006 	strh.w	r6, [sp, #6]
 8009874:	f006 f826 	bl	800f8c4 <WM__InitIVRSearch>
 8009878:	b980      	cbnz	r0, 800989c <CL_DispChar+0x78>
 800987a:	2d0a      	cmp	r5, #10
 800987c:	d01d      	beq.n	80098ba <CL_DispChar+0x96>
 800987e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	b21b      	sxth	r3, r3
 8009888:	8453      	strh	r3, [r2, #34]	; 0x22
 800988a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800988c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 800988e:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8009890:	1b1b      	subs	r3, r3, r4
 8009892:	1a09      	subs	r1, r1, r0
 8009894:	8453      	strh	r3, [r2, #34]	; 0x22
 8009896:	8491      	strh	r1, [r2, #36]	; 0x24
 8009898:	b003      	add	sp, #12
 800989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989c:	4628      	mov	r0, r5
 800989e:	f7ff f9d5 	bl	8008c4c <GL_DispChar>
 80098a2:	f005 fee9 	bl	800f678 <WM__GetNextIVR>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0e7      	beq.n	800987a <CL_DispChar+0x56>
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7ff f9ce 	bl	8008c4c <GL_DispChar>
 80098b0:	f005 fee2 	bl	800f678 <WM__GetNextIVR>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1f1      	bne.n	800989c <CL_DispChar+0x78>
 80098b8:	e7df      	b.n	800987a <CL_DispChar+0x56>
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	f9b2 3022 	ldrsh.w	r3, [r2, #34]	; 0x22
 80098c0:	e7e3      	b.n	800988a <CL_DispChar+0x66>
 80098c2:	bf00      	nop
 80098c4:	2000007c 	.word	0x2000007c

080098c8 <GUI_DispCharAt>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	460d      	mov	r5, r1
 80098cc:	4614      	mov	r4, r2
 80098ce:	4606      	mov	r6, r0
 80098d0:	f000 fb00 	bl	8009ed4 <GUI_Lock>
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <GUI_DispCharAt+0x24>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4630      	mov	r0, r6
 80098da:	845d      	strh	r5, [r3, #34]	; 0x22
 80098dc:	849c      	strh	r4, [r3, #36]	; 0x24
 80098de:	f7ff ffa1 	bl	8009824 <CL_DispChar>
 80098e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098e6:	f000 baeb 	b.w	8009ec0 <GUI_Unlock>
 80098ea:	bf00      	nop
 80098ec:	2000007c 	.word	0x2000007c

080098f0 <GUI_DispString.part.0>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4e47      	ldr	r6, [pc, #284]	; (8009a14 <GUI_DispString.part.0+0x124>)
 80098f6:	b083      	sub	sp, #12
 80098f8:	4604      	mov	r4, r0
 80098fa:	f000 faeb 	bl	8009ed4 <GUI_Lock>
 80098fe:	f7ff f9f9 	bl	8008cf4 <GUI_GetFontDistY>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	4607      	mov	r7, r0
 8009906:	f9b3 9022 	ldrsh.w	r9, [r3, #34]	; 0x22
 800990a:	f7ff f9cf 	bl	8008cac <GUI_GetYAdjust>
 800990e:	6832      	ldr	r2, [r6, #0]
 8009910:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8009912:	fa1f fa80 	uxth.w	sl, r0
 8009916:	ebca 0303 	rsb	r3, sl, r3
 800991a:	b21b      	sxth	r3, r3
 800991c:	8493      	strh	r3, [r2, #36]	; 0x24
 800991e:	7821      	ldrb	r1, [r4, #0]
 8009920:	2900      	cmp	r1, #0
 8009922:	d04d      	beq.n	80099c0 <GUI_DispString.part.0+0xd0>
 8009924:	b2bf      	uxth	r7, r7
 8009926:	46b0      	mov	r8, r6
 8009928:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800992c:	4620      	mov	r0, r4
 800992e:	f007 fbdf 	bl	80110f0 <GUI__GetLineNumChars>
 8009932:	4601      	mov	r1, r0
 8009934:	4683      	mov	fp, r0
 8009936:	4620      	mov	r0, r4
 8009938:	f007 fc14 	bl	8011164 <GUI__GetLineDistX>
 800993c:	6831      	ldr	r1, [r6, #0]
 800993e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	2b01      	cmp	r3, #1
 8009946:	d05a      	beq.n	80099fe <GUI_DispString.part.0+0x10e>
 8009948:	2b02      	cmp	r3, #2
 800994a:	d05c      	beq.n	8009a06 <GUI_DispString.part.0+0x116>
 800994c:	b285      	uxth	r5, r0
 800994e:	f04f 0e00 	mov.w	lr, #0
 8009952:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8009954:	f9b1 3024 	ldrsh.w	r3, [r1, #36]	; 0x24
 8009958:	f8ad 3002 	strh.w	r3, [sp, #2]
 800995c:	ebce 0202 	rsb	r2, lr, r2
 8009960:	b292      	uxth	r2, r2
 8009962:	b210      	sxth	r0, r2
 8009964:	3b01      	subs	r3, #1
 8009966:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 800996a:	4496      	add	lr, r2
 800996c:	8448      	strh	r0, [r1, #34]	; 0x22
 800996e:	443b      	add	r3, r7
 8009970:	466a      	mov	r2, sp
 8009972:	4659      	mov	r1, fp
 8009974:	f8ad 0000 	strh.w	r0, [sp]
 8009978:	4620      	mov	r0, r4
 800997a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800997e:	f8ad e004 	strh.w	lr, [sp, #4]
 8009982:	f007 fc31 	bl	80111e8 <GUI__DispLine>
 8009986:	6833      	ldr	r3, [r6, #0]
 8009988:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800998c:	849a      	strh	r2, [r3, #36]	; 0x24
 800998e:	4659      	mov	r1, fp
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fb8f 	bl	800a0b4 <GUI_UC__NumChars2NumBytes>
 8009996:	5c22      	ldrb	r2, [r4, r0]
 8009998:	2a0a      	cmp	r2, #10
 800999a:	eb04 0300 	add.w	r3, r4, r0
 800999e:	d01b      	beq.n	80099d8 <GUI_DispString.part.0+0xe8>
 80099a0:	2a0d      	cmp	r2, #13
 80099a2:	d019      	beq.n	80099d8 <GUI_DispString.part.0+0xe8>
 80099a4:	f8bd 0000 	ldrh.w	r0, [sp]
 80099a8:	f8d8 2000 	ldr.w	r2, [r8]
 80099ac:	4405      	add	r5, r0
 80099ae:	8455      	strh	r5, [r2, #34]	; 0x22
 80099b0:	7819      	ldrb	r1, [r3, #0]
 80099b2:	b119      	cbz	r1, 80099bc <GUI_DispString.part.0+0xcc>
 80099b4:	7859      	ldrb	r1, [r3, #1]
 80099b6:	1c5c      	adds	r4, r3, #1
 80099b8:	2900      	cmp	r1, #0
 80099ba:	d1b5      	bne.n	8009928 <GUI_DispString.part.0+0x38>
 80099bc:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 80099c0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80099c2:	449a      	add	sl, r3
 80099c4:	f021 0303 	bic.w	r3, r1, #3
 80099c8:	f8a2 a024 	strh.w	sl, [r2, #36]	; 0x24
 80099cc:	8593      	strh	r3, [r2, #44]	; 0x2c
 80099ce:	f000 fa77 	bl	8009ec0 <GUI_Unlock>
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	6832      	ldr	r2, [r6, #0]
 80099da:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80099dc:	f001 0103 	and.w	r1, r1, #3
 80099e0:	3901      	subs	r1, #1
 80099e2:	2901      	cmp	r1, #1
 80099e4:	bf8a      	itet	hi
 80099e6:	8c11      	ldrhhi	r1, [r2, #32]
 80099e8:	f8a2 9022 	strhls.w	r9, [r2, #34]	; 0x22
 80099ec:	8451      	strhhi	r1, [r2, #34]	; 0x22
 80099ee:	7819      	ldrb	r1, [r3, #0]
 80099f0:	290a      	cmp	r1, #10
 80099f2:	d1de      	bne.n	80099b2 <GUI_DispString.part.0+0xc2>
 80099f4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80099f6:	4439      	add	r1, r7
 80099f8:	8491      	strh	r1, [r2, #36]	; 0x24
 80099fa:	7819      	ldrb	r1, [r3, #0]
 80099fc:	e7d9      	b.n	80099b2 <GUI_DispString.part.0+0xc2>
 80099fe:	fa1f fe80 	uxth.w	lr, r0
 8009a02:	4675      	mov	r5, lr
 8009a04:	e7a5      	b.n	8009952 <GUI_DispString.part.0+0x62>
 8009a06:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8009a0a:	f3c2 0e4f 	ubfx	lr, r2, #1, #16
 8009a0e:	b285      	uxth	r5, r0
 8009a10:	e79f      	b.n	8009952 <GUI_DispString.part.0+0x62>
 8009a12:	bf00      	nop
 8009a14:	2000007c 	.word	0x2000007c

08009a18 <GUI_DispStringAt>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	4615      	mov	r5, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	f000 fa58 	bl	8009ed4 <GUI_Lock>
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <GUI_DispStringAt+0x24>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	845e      	strh	r6, [r3, #34]	; 0x22
 8009a2a:	849d      	strh	r5, [r3, #36]	; 0x24
 8009a2c:	b114      	cbz	r4, 8009a34 <GUI_DispStringAt+0x1c>
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7ff ff5e 	bl	80098f0 <GUI_DispString.part.0>
 8009a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a38:	f000 ba42 	b.w	8009ec0 <GUI_Unlock>
 8009a3c:	2000007c 	.word	0x2000007c

08009a40 <GUI_DrawRoundedRect>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	b091      	sub	sp, #68	; 0x44
 8009a46:	4681      	mov	r9, r0
 8009a48:	461e      	mov	r6, r3
 8009a4a:	460f      	mov	r7, r1
 8009a4c:	4690      	mov	r8, r2
 8009a4e:	f000 fa41 	bl	8009ed4 <GUI_Lock>
 8009a52:	4b5c      	ldr	r3, [pc, #368]	; (8009bc4 <GUI_DrawRoundedRect+0x184>)
 8009a54:	681c      	ldr	r4, [r3, #0]
 8009a56:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009a58:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8009a5a:	19a0      	adds	r0, r4, r6
 8009a5c:	19e1      	adds	r1, r4, r7
 8009a5e:	eb05 0309 	add.w	r3, r5, r9
 8009a62:	eb05 0208 	add.w	r2, r5, r8
 8009a66:	4604      	mov	r4, r0
 8009a68:	9009      	str	r0, [sp, #36]	; 0x24
 8009a6a:	a80e      	add	r0, sp, #56	; 0x38
 8009a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a6e:	920c      	str	r2, [sp, #48]	; 0x30
 8009a70:	9106      	str	r1, [sp, #24]
 8009a72:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8009a76:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8009a7a:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 8009a7e:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8009a82:	f005 ff1f 	bl	800f8c4 <WM__InitIVRSearch>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f000 8097 	beq.w	8009bba <GUI_DrawRoundedRect+0x17a>
 8009a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a90:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009a92:	9906      	ldr	r1, [sp, #24]
 8009a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a96:	1b03      	subs	r3, r0, r4
 8009a98:	1a52      	subs	r2, r2, r1
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	4429      	add	r1, r5
 8009a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa0:	1c4b      	adds	r3, r1, #1
 8009aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8009aa4:	006b      	lsls	r3, r5, #1
 8009aa6:	9308      	str	r3, [sp, #32]
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	fb03 f305 	mul.w	r3, r3, r5
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	1963      	adds	r3, r4, r5
 8009ab2:	3201      	adds	r2, #1
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	1b43      	subs	r3, r0, r5
 8009ab8:	9102      	str	r1, [sp, #8]
 8009aba:	9207      	str	r2, [sp, #28]
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	9b07      	ldr	r3, [sp, #28]
 8009ac0:	9a08      	ldr	r2, [sp, #32]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4291      	cmp	r1, r2
 8009ac6:	db74      	blt.n	8009bb2 <GUI_DrawRoundedRect+0x172>
 8009ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aca:	4619      	mov	r1, r3
 8009acc:	4291      	cmp	r1, r2
 8009ace:	db70      	blt.n	8009bb2 <GUI_DrawRoundedRect+0x172>
 8009ad0:	9b06      	ldr	r3, [sp, #24]
 8009ad2:	9a02      	ldr	r2, [sp, #8]
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	dc4c      	bgt.n	8009b72 <GUI_DrawRoundedRect+0x132>
 8009ad8:	461d      	mov	r5, r3
 8009ada:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ade:	1b9b      	subs	r3, r3, r6
 8009ae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	e01a      	b.n	8009b1e <GUI_DrawRoundedRect+0xde>
 8009ae8:	ebc4 0409 	rsb	r4, r4, r9
 8009aec:	3401      	adds	r4, #1
 8009aee:	f000 fcfb 	bl	800a4e8 <LCD_DrawHLine>
 8009af2:	4620      	mov	r0, r4
 8009af4:	464a      	mov	r2, r9
 8009af6:	4629      	mov	r1, r5
 8009af8:	f000 fcf6 	bl	800a4e8 <LCD_DrawHLine>
 8009afc:	4642      	mov	r2, r8
 8009afe:	4651      	mov	r1, sl
 8009b00:	4658      	mov	r0, fp
 8009b02:	f000 fcf1 	bl	800a4e8 <LCD_DrawHLine>
 8009b06:	464a      	mov	r2, r9
 8009b08:	4651      	mov	r1, sl
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 fcec 	bl	800a4e8 <LCD_DrawHLine>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	3501      	adds	r5, #1
 8009b14:	429d      	cmp	r5, r3
 8009b16:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8009b1a:	463c      	mov	r4, r7
 8009b1c:	dc2d      	bgt.n	8009b7a <GUI_DrawRoundedRect+0x13a>
 8009b1e:	9b05      	ldr	r3, [sp, #20]
 8009b20:	fb06 3016 	mls	r0, r6, r6, r3
 8009b24:	f000 fbac 	bl	800a280 <GUI__sqrt32>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	ebc0 0b03 	rsb	fp, r0, r3
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	1b04      	subs	r4, r0, r4
 8009b32:	4607      	mov	r7, r0
 8009b34:	eb0b 0804 	add.w	r8, fp, r4
 8009b38:	eb07 0903 	add.w	r9, r7, r3
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009b42:	2c01      	cmp	r4, #1
 8009b44:	4629      	mov	r1, r5
 8009b46:	4642      	mov	r2, r8
 8009b48:	4658      	mov	r0, fp
 8009b4a:	eb03 0a06 	add.w	sl, r3, r6
 8009b4e:	dccb      	bgt.n	8009ae8 <GUI_DrawRoundedRect+0xa8>
 8009b50:	4629      	mov	r1, r5
 8009b52:	4658      	mov	r0, fp
 8009b54:	f000 fc92 	bl	800a47c <LCD_DrawPixel>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4648      	mov	r0, r9
 8009b5c:	f000 fc8e 	bl	800a47c <LCD_DrawPixel>
 8009b60:	4651      	mov	r1, sl
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fc8a 	bl	800a47c <LCD_DrawPixel>
 8009b68:	4651      	mov	r1, sl
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	f000 fc86 	bl	800a47c <LCD_DrawPixel>
 8009b70:	e7ce      	b.n	8009b10 <GUI_DrawRoundedRect+0xd0>
 8009b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	9906      	ldr	r1, [sp, #24]
 8009b7e:	1c5c      	adds	r4, r3, #1
 8009b80:	9b04      	ldr	r3, [sp, #16]
 8009b82:	1e5d      	subs	r5, r3, #1
 8009b84:	9b01      	ldr	r3, [sp, #4]
 8009b86:	4620      	mov	r0, r4
 8009b88:	462a      	mov	r2, r5
 8009b8a:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009b8e:	f000 fcab 	bl	800a4e8 <LCD_DrawHLine>
 8009b92:	4620      	mov	r0, r4
 8009b94:	462a      	mov	r2, r5
 8009b96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b98:	f000 fca6 	bl	800a4e8 <LCD_DrawHLine>
 8009b9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009b9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009ba0:	465a      	mov	r2, fp
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	f000 fcca 	bl	800a53c <LCD_DrawVLine>
 8009ba8:	465a      	mov	r2, fp
 8009baa:	4621      	mov	r1, r4
 8009bac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009bae:	f000 fcc5 	bl	800a53c <LCD_DrawVLine>
 8009bb2:	f005 fd61 	bl	800f678 <WM__GetNextIVR>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d181      	bne.n	8009abe <GUI_DrawRoundedRect+0x7e>
 8009bba:	f000 f981 	bl	8009ec0 <GUI_Unlock>
 8009bbe:	b011      	add	sp, #68	; 0x44
 8009bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	2000007c 	.word	0x2000007c

08009bc8 <_OnExit>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4c0e      	ldr	r4, [pc, #56]	; (8009c04 <_OnExit+0x3c>)
 8009bcc:	4d0e      	ldr	r5, [pc, #56]	; (8009c08 <_OnExit+0x40>)
 8009bce:	2208      	movs	r2, #8
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	4798      	blx	r3
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	2208      	movs	r2, #8
 8009bdc:	2100      	movs	r1, #0
 8009bde:	f104 0008 	add.w	r0, r4, #8
 8009be2:	4798      	blx	r3
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	2208      	movs	r2, #8
 8009be8:	2100      	movs	r1, #0
 8009bea:	f104 0010 	add.w	r0, r4, #16
 8009bee:	4798      	blx	r3
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	2208      	movs	r2, #8
 8009bf4:	f104 0018 	add.w	r0, r4, #24
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4798      	blx	r3
 8009bfc:	4b03      	ldr	r3, [pc, #12]	; (8009c0c <_OnExit+0x44>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	20000670 	.word	0x20000670
 8009c08:	20000094 	.word	0x20000094
 8009c0c:	20035814 	.word	0x20035814

08009c10 <GUI_MULTIBUF_BeginEx>:
 8009c10:	4b18      	ldr	r3, [pc, #96]	; (8009c74 <GUI_MULTIBUF_BeginEx+0x64>)
 8009c12:	4a19      	ldr	r2, [pc, #100]	; (8009c78 <GUI_MULTIBUF_BeginEx+0x68>)
 8009c14:	6a19      	ldr	r1, [r3, #32]
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	bf0c      	ite	eq
 8009c1c:	4606      	moveq	r6, r0
 8009c1e:	2600      	movne	r6, #0
 8009c20:	b082      	sub	sp, #8
 8009c22:	5791      	ldrsb	r1, [r2, r6]
 8009c24:	2901      	cmp	r1, #1
 8009c26:	dd23      	ble.n	8009c70 <GUI_MULTIBUF_BeginEx+0x60>
 8009c28:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8009c2c:	6914      	ldr	r4, [r2, #16]
 8009c2e:	1c65      	adds	r5, r4, #1
 8009c30:	6115      	str	r5, [r2, #16]
 8009c32:	b9ec      	cbnz	r4, 8009c70 <GUI_MULTIBUF_BeginEx+0x60>
 8009c34:	6895      	ldr	r5, [r2, #8]
 8009c36:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009c3a:	4626      	mov	r6, r4
 8009c3c:	462c      	mov	r4, r5
 8009c3e:	e000      	b.n	8009c42 <GUI_MULTIBUF_BeginEx+0x32>
 8009c40:	461c      	mov	r4, r3
 8009c42:	3401      	adds	r4, #1
 8009c44:	428c      	cmp	r4, r1
 8009c46:	bf0a      	itet	eq
 8009c48:	2400      	moveq	r4, #0
 8009c4a:	6094      	strne	r4, [r2, #8]
 8009c4c:	6096      	streq	r6, [r2, #8]
 8009c4e:	42a3      	cmp	r3, r4
 8009c50:	d0f6      	beq.n	8009c40 <GUI_MULTIBUF_BeginEx+0x30>
 8009c52:	f7ff fc49 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 8009c56:	9001      	str	r0, [sp, #4]
 8009c58:	b150      	cbz	r0, 8009c70 <GUI_MULTIBUF_BeginEx+0x60>
 8009c5a:	68c3      	ldr	r3, [r0, #12]
 8009c5c:	2121      	movs	r1, #33	; 0x21
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	a801      	add	r0, sp, #4
 8009c62:	4798      	blx	r3
 8009c64:	4603      	mov	r3, r0
 8009c66:	b118      	cbz	r0, 8009c70 <GUI_MULTIBUF_BeginEx+0x60>
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	9801      	ldr	r0, [sp, #4]
 8009c6e:	4798      	blx	r3
 8009c70:	b002      	add	sp, #8
 8009c72:	bd70      	pop	{r4, r5, r6, pc}
 8009c74:	20000670 	.word	0x20000670
 8009c78:	20035810 	.word	0x20035810

08009c7c <GUI_MULTIBUF_EndEx>:
 8009c7c:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <GUI_MULTIBUF_EndEx+0x5c>)
 8009c7e:	4a17      	ldr	r2, [pc, #92]	; (8009cdc <GUI_MULTIBUF_EndEx+0x60>)
 8009c80:	6a19      	ldr	r1, [r3, #32]
 8009c82:	b530      	push	{r4, r5, lr}
 8009c84:	2900      	cmp	r1, #0
 8009c86:	bf0c      	ite	eq
 8009c88:	4604      	moveq	r4, r0
 8009c8a:	2400      	movne	r4, #0
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	5712      	ldrsb	r2, [r2, r4]
 8009c90:	2a01      	cmp	r2, #1
 8009c92:	dd05      	ble.n	8009ca0 <GUI_MULTIBUF_EndEx+0x24>
 8009c94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	b10b      	cbz	r3, 8009ca4 <GUI_MULTIBUF_EndEx+0x28>
 8009ca0:	b003      	add	sp, #12
 8009ca2:	bd30      	pop	{r4, r5, pc}
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	40a8      	lsls	r0, r5
 8009caa:	f7ff fc0b 	bl	80094c4 <GUI_DCACHE_Clear>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	68a5      	ldr	r5, [r4, #8]
 8009cb2:	61a5      	str	r5, [r4, #24]
 8009cb4:	f7ff fc18 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 8009cb8:	9001      	str	r0, [sp, #4]
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d0f0      	beq.n	8009ca0 <GUI_MULTIBUF_EndEx+0x24>
 8009cbe:	68c3      	ldr	r3, [r0, #12]
 8009cc0:	2122      	movs	r1, #34	; 0x22
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	a801      	add	r0, sp, #4
 8009cc6:	4798      	blx	r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0e8      	beq.n	8009ca0 <GUI_MULTIBUF_EndEx+0x24>
 8009cce:	4629      	mov	r1, r5
 8009cd0:	9801      	ldr	r0, [sp, #4]
 8009cd2:	4798      	blx	r3
 8009cd4:	b003      	add	sp, #12
 8009cd6:	bd30      	pop	{r4, r5, pc}
 8009cd8:	20000670 	.word	0x20000670
 8009cdc:	20035810 	.word	0x20035810

08009ce0 <GUI_MULTIBUF_ConfirmEx>:
 8009ce0:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <GUI_MULTIBUF_ConfirmEx+0x28>)
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	bf18      	it	ne
 8009ce8:	2000      	movne	r0, #0
 8009cea:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8009cee:	b410      	push	{r4}
 8009cf0:	6994      	ldr	r4, [r2, #24]
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	db04      	blt.n	8009d00 <GUI_MULTIBUF_ConfirmEx+0x20>
 8009cf6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8009cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cfe:	6193      	str	r3, [r2, #24]
 8009d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	20000670 	.word	0x20000670

08009d0c <GUI_MULTIBUF_ConfigEx>:
 8009d0c:	b530      	push	{r4, r5, lr}
 8009d0e:	4d0c      	ldr	r5, [pc, #48]	; (8009d40 <GUI_MULTIBUF_ConfigEx+0x34>)
 8009d10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d12:	b083      	sub	sp, #12
 8009d14:	4604      	mov	r4, r0
 8009d16:	b153      	cbz	r3, 8009d2e <GUI_MULTIBUF_ConfigEx+0x22>
 8009d18:	6a2a      	ldr	r2, [r5, #32]
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <GUI_MULTIBUF_ConfigEx+0x38>)
 8009d1c:	2a00      	cmp	r2, #0
 8009d1e:	bf18      	it	ne
 8009d20:	2400      	movne	r4, #0
 8009d22:	2901      	cmp	r1, #1
 8009d24:	bfb8      	it	lt
 8009d26:	2101      	movlt	r1, #1
 8009d28:	5519      	strb	r1, [r3, r4]
 8009d2a:	b003      	add	sp, #12
 8009d2c:	bd30      	pop	{r4, r5, pc}
 8009d2e:	4628      	mov	r0, r5
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <GUI_MULTIBUF_ConfigEx+0x3c>)
 8009d32:	f840 3f24 	str.w	r3, [r0, #36]!
 8009d36:	9101      	str	r1, [sp, #4]
 8009d38:	f7ff fbb0 	bl	800949c <GUI__RegisterExit>
 8009d3c:	9901      	ldr	r1, [sp, #4]
 8009d3e:	e7eb      	b.n	8009d18 <GUI_MULTIBUF_ConfigEx+0xc>
 8009d40:	20000670 	.word	0x20000670
 8009d44:	20035810 	.word	0x20035810
 8009d48:	08009bc9 	.word	0x08009bc9

08009d4c <GUI_StoreKey>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <GUI_StoreKey+0xc>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	b902      	cbnz	r2, 8009d54 <GUI_StoreKey+0x8>
 8009d52:	6018      	str	r0, [r3, #0]
 8009d54:	f000 b9cc 	b.w	800a0f0 <GUI_SignalEvent>
 8009d58:	2000069c 	.word	0x2000069c

08009d5c <GUI_PollKeyMsg>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	f000 f8b9 	bl	8009ed4 <GUI_Lock>
 8009d62:	4a0d      	ldr	r2, [pc, #52]	; (8009d98 <GUI_PollKeyMsg+0x3c>)
 8009d64:	6813      	ldr	r3, [r2, #0]
 8009d66:	6851      	ldr	r1, [r2, #4]
 8009d68:	428b      	cmp	r3, r1
 8009d6a:	d00f      	beq.n	8009d8c <GUI_PollKeyMsg+0x30>
 8009d6c:	4c0b      	ldr	r4, [pc, #44]	; (8009d9c <GUI_PollKeyMsg+0x40>)
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d74:	f04f 0401 	mov.w	r4, #1
 8009d78:	bf14      	ite	ne
 8009d7a:	3308      	addne	r3, #8
 8009d7c:	3b50      	subeq	r3, #80	; 0x50
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	f006 fa4e 	bl	8010220 <WM_OnKey>
 8009d84:	f000 f89c 	bl	8009ec0 <GUI_Unlock>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	bd10      	pop	{r4, pc}
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	f000 f897 	bl	8009ec0 <GUI_Unlock>
 8009d92:	4620      	mov	r0, r4
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	bf00      	nop
 8009d98:	20000080 	.word	0x20000080
 8009d9c:	200006f0 	.word	0x200006f0

08009da0 <GUI_GetCursorLayer>:
 8009da0:	2801      	cmp	r0, #1
 8009da2:	bf9a      	itte	ls
 8009da4:	4b02      	ldrls	r3, [pc, #8]	; (8009db0 <GUI_GetCursorLayer+0x10>)
 8009da6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8009daa:	2000      	movhi	r0, #0
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	200006fc 	.word	0x200006fc

08009db4 <GUI_GetLayerPosEx>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	4604      	mov	r4, r0
 8009db8:	460e      	mov	r6, r1
 8009dba:	4615      	mov	r5, r2
 8009dbc:	f000 f88a 	bl	8009ed4 <GUI_Lock>
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	f001 fa23 	bl	800b210 <LCD_GetPosEx>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	b110      	cbz	r0, 8009dd4 <GUI_GetLayerPosEx+0x20>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6033      	str	r3, [r6, #0]
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	f000 f874 	bl	8009ec0 <GUI_Unlock>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bd70      	pop	{r4, r5, r6, pc}

08009ddc <GUI_SelectLayer>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4d0d      	ldr	r5, [pc, #52]	; (8009e14 <GUI_SelectLayer+0x38>)
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	4604      	mov	r4, r0
 8009de4:	7c5e      	ldrb	r6, [r3, #17]
 8009de6:	f000 f875 	bl	8009ed4 <GUI_Lock>
 8009dea:	2c01      	cmp	r4, #1
 8009dec:	d903      	bls.n	8009df6 <GUI_SelectLayer+0x1a>
 8009dee:	f000 f867 	bl	8009ec0 <GUI_Unlock>
 8009df2:	4630      	mov	r0, r6
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
 8009df6:	4620      	mov	r0, r4
 8009df8:	f7ff fb76 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d0f6      	beq.n	8009dee <GUI_SelectLayer+0x12>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	745c      	strb	r4, [r3, #17]
 8009e04:	f7ff f93a 	bl	800907c <GUI_SelectLCD>
 8009e08:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <GUI_SelectLayer+0x3c>)
 8009e0a:	601c      	str	r4, [r3, #0]
 8009e0c:	f000 f858 	bl	8009ec0 <GUI_Unlock>
 8009e10:	4630      	mov	r0, r6
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	2000007c 	.word	0x2000007c
 8009e18:	20035848 	.word	0x20035848

08009e1c <GUI_SetLayerPosEx>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	4604      	mov	r4, r0
 8009e20:	460d      	mov	r5, r1
 8009e22:	4616      	mov	r6, r2
 8009e24:	f000 f856 	bl	8009ed4 <GUI_Lock>
 8009e28:	4632      	mov	r2, r6
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f001 fa3d 	bl	800b2ac <LCD_SetPosEx>
 8009e32:	4604      	mov	r4, r0
 8009e34:	f000 f844 	bl	8009ec0 <GUI_Unlock>
 8009e38:	4620      	mov	r0, r4
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}

08009e3c <GUI_SetLayerVisEx>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	f000 f847 	bl	8009ed4 <GUI_Lock>
 8009e46:	4629      	mov	r1, r5
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f001 fa63 	bl	800b314 <LCD_SetVisEx>
 8009e4e:	4604      	mov	r4, r0
 8009e50:	f000 f836 	bl	8009ec0 <GUI_Unlock>
 8009e54:	4620      	mov	r0, r4
 8009e56:	bd38      	pop	{r3, r4, r5, pc}

08009e58 <GUI_TOUCH_StoreStateEx>:
 8009e58:	b530      	push	{r4, r5, lr}
 8009e5a:	4c13      	ldr	r4, [pc, #76]	; (8009ea8 <GUI_TOUCH_StoreStateEx+0x50>)
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	220c      	movs	r2, #12
 8009e60:	4621      	mov	r1, r4
 8009e62:	4605      	mov	r5, r0
 8009e64:	f00b f804 	bl	8014e70 <memcmp>
 8009e68:	b178      	cbz	r0, 8009e8a <GUI_TOUCH_StoreStateEx+0x32>
 8009e6a:	68e3      	ldr	r3, [r4, #12]
 8009e6c:	b1a3      	cbz	r3, 8009e98 <GUI_TOUCH_StoreStateEx+0x40>
 8009e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e72:	ad01      	add	r5, sp, #4
 8009e74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009e78:	a902      	add	r1, sp, #8
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	4798      	blx	r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e88:	b10b      	cbz	r3, 8009e8e <GUI_TOUCH_StoreStateEx+0x36>
 8009e8a:	b005      	add	sp, #20
 8009e8c:	bd30      	pop	{r4, r5, pc}
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f007 fc08 	bl	80116a4 <GUI_PID_StoreState>
 8009e94:	b005      	add	sp, #20
 8009e96:	bd30      	pop	{r4, r5, pc}
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f007 fc03 	bl	80116a4 <GUI_PID_StoreState>
 8009e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ea6:	e7f0      	b.n	8009e8a <GUI_TOUCH_StoreStateEx+0x32>
 8009ea8:	20000704 	.word	0x20000704

08009eac <_OnExit>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	4c03      	ldr	r4, [pc, #12]	; (8009ebc <_OnExit+0x10>)
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	f7fe fba9 	bl	8008608 <GUI_ALLOC_FreeFixedBlock>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	20000714 	.word	0x20000714

08009ec0 <GUI_Unlock>:
 8009ec0:	4a03      	ldr	r2, [pc, #12]	; (8009ed0 <GUI_Unlock+0x10>)
 8009ec2:	6853      	ldr	r3, [r2, #4]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	6053      	str	r3, [r2, #4]
 8009ec8:	b103      	cbz	r3, 8009ecc <GUI_Unlock+0xc>
 8009eca:	4770      	bx	lr
 8009ecc:	f7fd bd2e 	b.w	800792c <GUI_X_Unlock>
 8009ed0:	20000714 	.word	0x20000714

08009ed4 <GUI_Lock>:
 8009ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	4d23      	ldr	r5, [pc, #140]	; (8009f68 <GUI_Lock+0x94>)
 8009eda:	686b      	ldr	r3, [r5, #4]
 8009edc:	b123      	cbz	r3, 8009ee8 <GUI_Lock+0x14>
 8009ede:	f7fd fd33 	bl	8007948 <GUI_X_GetTaskId>
 8009ee2:	68ab      	ldr	r3, [r5, #8]
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	d004      	beq.n	8009ef2 <GUI_Lock+0x1e>
 8009ee8:	f7fd fd26 	bl	8007938 <GUI_X_Lock>
 8009eec:	f7fd fd2c 	bl	8007948 <GUI_X_GetTaskId>
 8009ef0:	60a8      	str	r0, [r5, #8]
 8009ef2:	686b      	ldr	r3, [r5, #4]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	606b      	str	r3, [r5, #4]
 8009efa:	d001      	beq.n	8009f00 <GUI_Lock+0x2c>
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	4f1a      	ldr	r7, [pc, #104]	; (8009f6c <GUI_Lock+0x98>)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dd29      	ble.n	8009f5c <GUI_Lock+0x88>
 8009f08:	2400      	movs	r4, #0
 8009f0a:	4626      	mov	r6, r4
 8009f0c:	e006      	b.n	8009f1c <GUI_Lock+0x48>
 8009f0e:	b342      	cbz	r2, 8009f62 <GUI_Lock+0x8e>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	3601      	adds	r6, #1
 8009f14:	429e      	cmp	r6, r3
 8009f16:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8009f1a:	da1f      	bge.n	8009f5c <GUI_Lock+0x88>
 8009f1c:	f7fd fd14 	bl	8007948 <GUI_X_GetTaskId>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	591a      	ldr	r2, [r3, r4]
 8009f24:	4290      	cmp	r0, r2
 8009f26:	4423      	add	r3, r4
 8009f28:	d1f1      	bne.n	8009f0e <GUI_Lock+0x3a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	42b3      	cmp	r3, r6
 8009f2e:	d0e5      	beq.n	8009efc <GUI_Lock+0x28>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	db10      	blt.n	8009f56 <GUI_Lock+0x82>
 8009f34:	682a      	ldr	r2, [r5, #0]
 8009f36:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8009f3a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8009f3e:	f7ff fc19 	bl	8009774 <GUI_DEVICE_UnlinkTaskDevices>
 8009f42:	682b      	ldr	r3, [r5, #0]
 8009f44:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 8009f48:	441c      	add	r4, r3
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <GUI_Lock+0x9c>)
 8009f4c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009f4e:	3404      	adds	r4, #4
 8009f50:	601c      	str	r4, [r3, #0]
 8009f52:	f7ff fc11 	bl	8009778 <GUI_DEVICE_LinkDevices>
 8009f56:	607e      	str	r6, [r7, #4]
 8009f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5c:	2400      	movs	r4, #0
 8009f5e:	4626      	mov	r6, r4
 8009f60:	e7e3      	b.n	8009f2a <GUI_Lock+0x56>
 8009f62:	6018      	str	r0, [r3, #0]
 8009f64:	e7e1      	b.n	8009f2a <GUI_Lock+0x56>
 8009f66:	bf00      	nop
 8009f68:	20000714 	.word	0x20000714
 8009f6c:	20000088 	.word	0x20000088
 8009f70:	2000007c 	.word	0x2000007c

08009f74 <GUITASK_Init>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	4f19      	ldr	r7, [pc, #100]	; (8009fdc <GUITASK_Init+0x68>)
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <GUITASK_Init+0x6c>)
 8009f7a:	4e1a      	ldr	r6, [pc, #104]	; (8009fe4 <GUITASK_Init+0x70>)
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f840 3f0c 	str.w	r3, [r0, #12]!
 8009f82:	f7ff fa8b 	bl	800949c <GUI__RegisterExit>
 8009f86:	6834      	ldr	r4, [r6, #0]
 8009f88:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8009f8c:	00a4      	lsls	r4, r4, #2
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7fe fb44 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 8009f94:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <GUITASK_Init+0x74>)
 8009f96:	6038      	str	r0, [r7, #0]
 8009f98:	4622      	mov	r2, r4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4798      	blx	r3
 8009fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fa4:	6073      	str	r3, [r6, #4]
 8009fa6:	f7fd fcad 	bl	8007904 <GUI_X_InitOS>
 8009faa:	6833      	ldr	r3, [r6, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dd11      	ble.n	8009fd4 <GUITASK_Init+0x60>
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	4625      	mov	r5, r4
 8009fb4:	e003      	b.n	8009fbe <GUITASK_Init+0x4a>
 8009fb6:	b172      	cbz	r2, 8009fd6 <GUITASK_Init+0x62>
 8009fb8:	6833      	ldr	r3, [r6, #0]
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	da0a      	bge.n	8009fd4 <GUITASK_Init+0x60>
 8009fbe:	f7fd fcc3 	bl	8007948 <GUI_X_GetTaskId>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	591a      	ldr	r2, [r3, r4]
 8009fc6:	4290      	cmp	r0, r2
 8009fc8:	4423      	add	r3, r4
 8009fca:	f105 0501 	add.w	r5, r5, #1
 8009fce:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8009fd2:	d1f0      	bne.n	8009fb6 <GUITASK_Init+0x42>
 8009fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd6:	6018      	str	r0, [r3, #0]
 8009fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000714 	.word	0x20000714
 8009fe0:	08009ead 	.word	0x08009ead
 8009fe4:	20000088 	.word	0x20000088
 8009fe8:	20000094 	.word	0x20000094

08009fec <GUITASK_CopyContext>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	4e23      	ldr	r6, [pc, #140]	; (800a080 <GUITASK_CopyContext+0x94>)
 8009ff2:	6833      	ldr	r3, [r6, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd3f      	ble.n	800a078 <GUITASK_CopyContext+0x8c>
 8009ff8:	4d22      	ldr	r5, [pc, #136]	; (800a084 <GUITASK_CopyContext+0x98>)
 8009ffa:	4f23      	ldr	r7, [pc, #140]	; (800a088 <GUITASK_CopyContext+0x9c>)
 8009ffc:	682c      	ldr	r4, [r5, #0]
 8009ffe:	f8d7 9000 	ldr.w	r9, [r7]
 800a002:	ebc3 1843 	rsb	r8, r3, r3, lsl #5
 800a006:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800a00a:	f108 080c 	add.w	r8, r8, #12
 800a00e:	340c      	adds	r4, #12
 800a010:	f04f 0a00 	mov.w	sl, #0
 800a014:	f1a4 0308 	sub.w	r3, r4, #8
 800a018:	2274      	movs	r2, #116	; 0x74
 800a01a:	4618      	mov	r0, r3
 800a01c:	4649      	mov	r1, r9
 800a01e:	f00a ff36 	bl	8014e8e <memcpy>
 800a022:	1f22      	subs	r2, r4, #4
 800a024:	6320      	str	r0, [r4, #48]	; 0x30
 800a026:	63a0      	str	r0, [r4, #56]	; 0x38
 800a028:	f844 ac0c 	str.w	sl, [r4, #-12]
 800a02c:	6362      	str	r2, [r4, #52]	; 0x34
 800a02e:	60e4      	str	r4, [r4, #12]
 800a030:	347c      	adds	r4, #124	; 0x7c
 800a032:	45a0      	cmp	r8, r4
 800a034:	d1ee      	bne.n	800a014 <GUITASK_CopyContext+0x28>
 800a036:	2400      	movs	r4, #0
 800a038:	46a0      	mov	r8, r4
 800a03a:	e003      	b.n	800a044 <GUITASK_CopyContext+0x58>
 800a03c:	b192      	cbz	r2, 800a064 <GUITASK_CopyContext+0x78>
 800a03e:	6832      	ldr	r2, [r6, #0]
 800a040:	4590      	cmp	r8, r2
 800a042:	da14      	bge.n	800a06e <GUITASK_CopyContext+0x82>
 800a044:	f7fd fc80 	bl	8007948 <GUI_X_GetTaskId>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	591a      	ldr	r2, [r3, r4]
 800a04c:	4290      	cmp	r0, r2
 800a04e:	eb03 0104 	add.w	r1, r3, r4
 800a052:	f108 0801 	add.w	r8, r8, #1
 800a056:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 800a05a:	d1ef      	bne.n	800a03c <GUITASK_CopyContext+0x50>
 800a05c:	3104      	adds	r1, #4
 800a05e:	6039      	str	r1, [r7, #0]
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	6008      	str	r0, [r1, #0]
 800a066:	3104      	adds	r1, #4
 800a068:	6039      	str	r1, [r7, #0]
 800a06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a06e:	4619      	mov	r1, r3
 800a070:	3104      	adds	r1, #4
 800a072:	6039      	str	r1, [r7, #0]
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <GUITASK_CopyContext+0x98>)
 800a07a:	4f03      	ldr	r7, [pc, #12]	; (800a088 <GUITASK_CopyContext+0x9c>)
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	e7ed      	b.n	800a05c <GUITASK_CopyContext+0x70>
 800a080:	20000088 	.word	0x20000088
 800a084:	20000714 	.word	0x20000714
 800a088:	2000007c 	.word	0x2000007c

0800a08c <GUI_UC__GetCharCodeInc>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	4e08      	ldr	r6, [pc, #32]	; (800a0b0 <GUI_UC__GetCharCodeInc+0x24>)
 800a090:	6804      	ldr	r4, [r0, #0]
 800a092:	6833      	ldr	r3, [r6, #0]
 800a094:	4605      	mov	r5, r0
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4620      	mov	r0, r4
 800a09a:	4798      	blx	r3
 800a09c:	6833      	ldr	r3, [r6, #0]
 800a09e:	4607      	mov	r7, r0
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4798      	blx	r3
 800a0a6:	4420      	add	r0, r4
 800a0a8:	6028      	str	r0, [r5, #0]
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20035818 	.word	0x20035818

0800a0b4 <GUI_UC__NumChars2NumBytes>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	b169      	cbz	r1, 800a0d4 <GUI_UC__NumChars2NumBytes+0x20>
 800a0b8:	4f07      	ldr	r7, [pc, #28]	; (800a0d8 <GUI_UC__NumChars2NumBytes+0x24>)
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	460c      	mov	r4, r1
 800a0be:	2600      	movs	r6, #0
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4798      	blx	r3
 800a0c8:	3c01      	subs	r4, #1
 800a0ca:	4405      	add	r5, r0
 800a0cc:	4406      	add	r6, r0
 800a0ce:	d1f7      	bne.n	800a0c0 <GUI_UC__NumChars2NumBytes+0xc>
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	460e      	mov	r6, r1
 800a0d6:	e7fb      	b.n	800a0d0 <GUI_UC__NumChars2NumBytes+0x1c>
 800a0d8:	20035818 	.word	0x20035818

0800a0dc <_GetCharCode>:
 800a0dc:	7800      	ldrb	r0, [r0, #0]
 800a0de:	4770      	bx	lr

0800a0e0 <_GetCharSize>:
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	4770      	bx	lr

0800a0e4 <_CalcSizeOfChar>:
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	4770      	bx	lr

0800a0e8 <_Encode>:
 800a0e8:	7001      	strb	r1, [r0, #0]
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop

0800a0f0 <GUI_SignalEvent>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <GUI_SignalEvent+0xc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	b103      	cbz	r3, 800a0f8 <GUI_SignalEvent+0x8>
 800a0f6:	4718      	bx	r3
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000728 	.word	0x20000728

0800a100 <GUI__IntersectRect>:
 800a100:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a104:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	bfb8      	it	lt
 800a10c:	8003      	strhlt	r3, [r0, #0]
 800a10e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a112:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800a116:	429a      	cmp	r2, r3
 800a118:	bfb8      	it	lt
 800a11a:	8043      	strhlt	r3, [r0, #2]
 800a11c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a120:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	bfc8      	it	gt
 800a128:	8083      	strhgt	r3, [r0, #4]
 800a12a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800a12e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800a132:	429a      	cmp	r2, r3
 800a134:	bfc8      	it	gt
 800a136:	80c3      	strhgt	r3, [r0, #6]
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop

0800a13c <GUI__IntersectRects>:
 800a13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a13e:	f9b2 c000 	ldrsh.w	ip, [r2]
 800a142:	f9b1 5000 	ldrsh.w	r5, [r1]
 800a146:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800a14a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800a14e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800a152:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800a156:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 800a15a:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
 800a15e:	45ac      	cmp	ip, r5
 800a160:	4661      	mov	r1, ip
 800a162:	bfb8      	it	lt
 800a164:	4629      	movlt	r1, r5
 800a166:	42a3      	cmp	r3, r4
 800a168:	bfb8      	it	lt
 800a16a:	4623      	movlt	r3, r4
 800a16c:	4572      	cmp	r2, lr
 800a16e:	bfa8      	it	ge
 800a170:	4672      	movge	r2, lr
 800a172:	42b7      	cmp	r7, r6
 800a174:	463c      	mov	r4, r7
 800a176:	bfa8      	it	ge
 800a178:	4634      	movge	r4, r6
 800a17a:	4291      	cmp	r1, r2
 800a17c:	8001      	strh	r1, [r0, #0]
 800a17e:	8043      	strh	r3, [r0, #2]
 800a180:	8082      	strh	r2, [r0, #4]
 800a182:	80c4      	strh	r4, [r0, #6]
 800a184:	dc04      	bgt.n	800a190 <GUI__IntersectRects+0x54>
 800a186:	42a3      	cmp	r3, r4
 800a188:	bfcc      	ite	gt
 800a18a:	2000      	movgt	r0, #0
 800a18c:	2001      	movle	r0, #1
 800a18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a190:	2000      	movs	r0, #0
 800a192:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a194 <GUI__memset>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	4606      	mov	r6, r0
 800a198:	b14a      	cbz	r2, 800a1ae <GUI__memset+0x1a>
 800a19a:	0784      	lsls	r4, r0, #30
 800a19c:	b2c9      	uxtb	r1, r1
 800a19e:	d008      	beq.n	800a1b2 <GUI__memset+0x1e>
 800a1a0:	e001      	b.n	800a1a6 <GUI__memset+0x12>
 800a1a2:	0783      	lsls	r3, r0, #30
 800a1a4:	d005      	beq.n	800a1b2 <GUI__memset+0x1e>
 800a1a6:	3a01      	subs	r2, #1
 800a1a8:	f800 1b01 	strb.w	r1, [r0], #1
 800a1ac:	d1f9      	bne.n	800a1a2 <GUI__memset+0xe>
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b2:	0897      	lsrs	r7, r2, #2
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	b357      	cbz	r7, 800a20e <GUI__memset+0x7a>
 800a1b8:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 800a1bc:	2f03      	cmp	r7, #3
 800a1be:	f002 0203 	and.w	r2, r2, #3
 800a1c2:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 800a1c6:	d916      	bls.n	800a1f6 <GUI__memset+0x62>
 800a1c8:	f100 0310 	add.w	r3, r0, #16
 800a1cc:	463d      	mov	r5, r7
 800a1ce:	3d04      	subs	r5, #4
 800a1d0:	2d03      	cmp	r5, #3
 800a1d2:	f843 4c10 	str.w	r4, [r3, #-16]
 800a1d6:	f843 4c0c 	str.w	r4, [r3, #-12]
 800a1da:	f843 4c08 	str.w	r4, [r3, #-8]
 800a1de:	f843 4c04 	str.w	r4, [r3, #-4]
 800a1e2:	f103 0310 	add.w	r3, r3, #16
 800a1e6:	dcf2      	bgt.n	800a1ce <GUI__memset+0x3a>
 800a1e8:	3f04      	subs	r7, #4
 800a1ea:	08bb      	lsrs	r3, r7, #2
 800a1ec:	1c5d      	adds	r5, r3, #1
 800a1ee:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a1f2:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 800a1f6:	b143      	cbz	r3, 800a20a <GUI__memset+0x76>
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	6004      	str	r4, [r0, #0]
 800a1fc:	d003      	beq.n	800a206 <GUI__memset+0x72>
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	6044      	str	r4, [r0, #4]
 800a202:	bf18      	it	ne
 800a204:	6084      	strne	r4, [r0, #8]
 800a206:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	d0cf      	beq.n	800a1ae <GUI__memset+0x1a>
 800a20e:	f00a fe62 	bl	8014ed6 <memset>
 800a212:	4630      	mov	r0, r6
 800a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a216:	bf00      	nop

0800a218 <GUI__memset16>:
 800a218:	b470      	push	{r4, r5, r6}
 800a21a:	0784      	lsls	r4, r0, #30
 800a21c:	d502      	bpl.n	800a224 <GUI__memset16+0xc>
 800a21e:	8001      	strh	r1, [r0, #0]
 800a220:	3a01      	subs	r2, #1
 800a222:	3002      	adds	r0, #2
 800a224:	0856      	lsrs	r6, r2, #1
 800a226:	d00d      	beq.n	800a244 <GUI__memset16+0x2c>
 800a228:	2e03      	cmp	r6, #3
 800a22a:	4633      	mov	r3, r6
 800a22c:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800a230:	d80d      	bhi.n	800a24e <GUI__memset16+0x36>
 800a232:	2b01      	cmp	r3, #1
 800a234:	6004      	str	r4, [r0, #0]
 800a236:	d003      	beq.n	800a240 <GUI__memset16+0x28>
 800a238:	2b02      	cmp	r3, #2
 800a23a:	6044      	str	r4, [r0, #4]
 800a23c:	bf18      	it	ne
 800a23e:	6084      	strne	r4, [r0, #8]
 800a240:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a244:	07d3      	lsls	r3, r2, #31
 800a246:	bf48      	it	mi
 800a248:	8001      	strhmi	r1, [r0, #0]
 800a24a:	bc70      	pop	{r4, r5, r6}
 800a24c:	4770      	bx	lr
 800a24e:	f100 0310 	add.w	r3, r0, #16
 800a252:	4635      	mov	r5, r6
 800a254:	3d04      	subs	r5, #4
 800a256:	2d03      	cmp	r5, #3
 800a258:	f843 4c10 	str.w	r4, [r3, #-16]
 800a25c:	f843 4c0c 	str.w	r4, [r3, #-12]
 800a260:	f843 4c08 	str.w	r4, [r3, #-8]
 800a264:	f843 4c04 	str.w	r4, [r3, #-4]
 800a268:	f103 0310 	add.w	r3, r3, #16
 800a26c:	dcf2      	bgt.n	800a254 <GUI__memset16+0x3c>
 800a26e:	3e04      	subs	r6, #4
 800a270:	08b3      	lsrs	r3, r6, #2
 800a272:	1c5d      	adds	r5, r3, #1
 800a274:	ebb6 0383 	subs.w	r3, r6, r3, lsl #2
 800a278:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a27c:	d1d9      	bne.n	800a232 <GUI__memset16+0x1a>
 800a27e:	e7e1      	b.n	800a244 <GUI__memset16+0x2c>

0800a280 <GUI__sqrt32>:
 800a280:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a284:	bf2b      	itete	cs
 800a286:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 800a28a:	2300      	movcc	r3, #0
 800a28c:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 800a290:	2200      	movcc	r2, #0
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	1a80      	subs	r0, r0, r2
 800a296:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 800a29a:	4290      	cmp	r0, r2
 800a29c:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 800a2a0:	bf28      	it	cs
 800a2a2:	460b      	movcs	r3, r1
 800a2a4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a2a8:	bf38      	it	cc
 800a2aa:	2200      	movcc	r2, #0
 800a2ac:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 800a2b0:	1a82      	subs	r2, r0, r2
 800a2b2:	428a      	cmp	r2, r1
 800a2b4:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 800a2b8:	bf2c      	ite	cs
 800a2ba:	4603      	movcs	r3, r0
 800a2bc:	2100      	movcc	r1, #0
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	1a50      	subs	r0, r2, r1
 800a2c2:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 800a2c6:	4290      	cmp	r0, r2
 800a2c8:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 800a2cc:	bf2c      	ite	cs
 800a2ce:	460b      	movcs	r3, r1
 800a2d0:	2200      	movcc	r2, #0
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	1a81      	subs	r1, r0, r2
 800a2d6:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 800a2da:	4291      	cmp	r1, r2
 800a2dc:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 800a2e0:	bf28      	it	cs
 800a2e2:	4603      	movcs	r3, r0
 800a2e4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a2e8:	bf38      	it	cc
 800a2ea:	2200      	movcc	r2, #0
 800a2ec:	1a8a      	subs	r2, r1, r2
 800a2ee:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 800a2f2:	428a      	cmp	r2, r1
 800a2f4:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 800a2f8:	bf2c      	ite	cs
 800a2fa:	4603      	movcs	r3, r0
 800a2fc:	2100      	movcc	r1, #0
 800a2fe:	085b      	lsrs	r3, r3, #1
 800a300:	1a50      	subs	r0, r2, r1
 800a302:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 800a306:	4290      	cmp	r0, r2
 800a308:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 800a30c:	bf2c      	ite	cs
 800a30e:	460b      	movcs	r3, r1
 800a310:	2200      	movcc	r2, #0
 800a312:	085b      	lsrs	r3, r3, #1
 800a314:	1a81      	subs	r1, r0, r2
 800a316:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a31a:	4291      	cmp	r1, r2
 800a31c:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 800a320:	bf28      	it	cs
 800a322:	4603      	movcs	r3, r0
 800a324:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a328:	bf38      	it	cc
 800a32a:	2200      	movcc	r2, #0
 800a32c:	1a8a      	subs	r2, r1, r2
 800a32e:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 800a332:	428a      	cmp	r2, r1
 800a334:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 800a338:	bf2c      	ite	cs
 800a33a:	4603      	movcs	r3, r0
 800a33c:	2100      	movcc	r1, #0
 800a33e:	085b      	lsrs	r3, r3, #1
 800a340:	1a50      	subs	r0, r2, r1
 800a342:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a346:	4290      	cmp	r0, r2
 800a348:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 800a34c:	bf2c      	ite	cs
 800a34e:	460b      	movcs	r3, r1
 800a350:	2200      	movcc	r2, #0
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	1a81      	subs	r1, r0, r2
 800a356:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800a35a:	4291      	cmp	r1, r2
 800a35c:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 800a360:	bf28      	it	cs
 800a362:	4603      	movcs	r3, r0
 800a364:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a368:	bf38      	it	cc
 800a36a:	2200      	movcc	r2, #0
 800a36c:	1a8a      	subs	r2, r1, r2
 800a36e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800a372:	428a      	cmp	r2, r1
 800a374:	f503 7000 	add.w	r0, r3, #512	; 0x200
 800a378:	bf2c      	ite	cs
 800a37a:	4603      	movcs	r3, r0
 800a37c:	2100      	movcc	r1, #0
 800a37e:	085b      	lsrs	r3, r3, #1
 800a380:	1a50      	subs	r0, r2, r1
 800a382:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a386:	4290      	cmp	r0, r2
 800a388:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800a38c:	bf2c      	ite	cs
 800a38e:	460b      	movcs	r3, r1
 800a390:	2200      	movcc	r2, #0
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	1a81      	subs	r1, r0, r2
 800a396:	f103 0210 	add.w	r2, r3, #16
 800a39a:	4291      	cmp	r1, r2
 800a39c:	f103 0020 	add.w	r0, r3, #32
 800a3a0:	bf28      	it	cs
 800a3a2:	4603      	movcs	r3, r0
 800a3a4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a3a8:	bf38      	it	cc
 800a3aa:	2200      	movcc	r2, #0
 800a3ac:	1a8a      	subs	r2, r1, r2
 800a3ae:	1d19      	adds	r1, r3, #4
 800a3b0:	428a      	cmp	r2, r1
 800a3b2:	f103 0008 	add.w	r0, r3, #8
 800a3b6:	bf2c      	ite	cs
 800a3b8:	4603      	movcs	r3, r0
 800a3ba:	2100      	movcc	r1, #0
 800a3bc:	085b      	lsrs	r3, r3, #1
 800a3be:	1a52      	subs	r2, r2, r1
 800a3c0:	1c58      	adds	r0, r3, #1
 800a3c2:	1c99      	adds	r1, r3, #2
 800a3c4:	4290      	cmp	r0, r2
 800a3c6:	bf94      	ite	ls
 800a3c8:	4608      	movls	r0, r1
 800a3ca:	4618      	movhi	r0, r3
 800a3cc:	0840      	lsrs	r0, r0, #1
 800a3ce:	4770      	bx	lr

0800a3d0 <_SetBkColor>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4c0b      	ldr	r4, [pc, #44]	; (800a400 <_SetBkColor+0x30>)
 800a3d4:	6822      	ldr	r2, [r4, #0]
 800a3d6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a3d8:	4281      	cmp	r1, r0
 800a3da:	d00d      	beq.n	800a3f8 <_SetBkColor+0x28>
 800a3dc:	7c55      	ldrb	r5, [r2, #17]
 800a3de:	4909      	ldr	r1, [pc, #36]	; (800a404 <_SetBkColor+0x34>)
 800a3e0:	6350      	str	r0, [r2, #52]	; 0x34
 800a3e2:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4798      	blx	r3
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	7c1a      	ldrb	r2, [r3, #16]
 800a3f0:	0752      	lsls	r2, r2, #29
 800a3f2:	d402      	bmi.n	800a3fa <_SetBkColor+0x2a>
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	6018      	str	r0, [r3, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fc:	6018      	str	r0, [r3, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	2000007c 	.word	0x2000007c
 800a404:	200357f4 	.word	0x200357f4

0800a408 <_SetColor>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4c0b      	ldr	r4, [pc, #44]	; (800a438 <_SetColor+0x30>)
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a410:	4281      	cmp	r1, r0
 800a412:	d00d      	beq.n	800a430 <_SetColor+0x28>
 800a414:	7c55      	ldrb	r5, [r2, #17]
 800a416:	4909      	ldr	r1, [pc, #36]	; (800a43c <_SetColor+0x34>)
 800a418:	6310      	str	r0, [r2, #48]	; 0x30
 800a41a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4798      	blx	r3
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	7c1a      	ldrb	r2, [r3, #16]
 800a428:	0752      	lsls	r2, r2, #29
 800a42a:	d402      	bmi.n	800a432 <_SetColor+0x2a>
 800a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42e:	6018      	str	r0, [r3, #0]
 800a430:	bd38      	pop	{r3, r4, r5, pc}
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a434:	6018      	str	r0, [r3, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	2000007c 	.word	0x2000007c
 800a43c:	200357f4 	.word	0x200357f4

0800a440 <_SetDrawMode>:
 800a440:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <_SetDrawMode+0x2c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	7c1a      	ldrb	r2, [r3, #16]
 800a446:	ea82 0100 	eor.w	r1, r2, r0
 800a44a:	0749      	lsls	r1, r1, #29
 800a44c:	d50a      	bpl.n	800a464 <_SetDrawMode+0x24>
 800a44e:	b470      	push	{r4, r5, r6}
 800a450:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a452:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a454:	680e      	ldr	r6, [r1, #0]
 800a456:	6825      	ldr	r5, [r4, #0]
 800a458:	6026      	str	r6, [r4, #0]
 800a45a:	600d      	str	r5, [r1, #0]
 800a45c:	7418      	strb	r0, [r3, #16]
 800a45e:	bc70      	pop	{r4, r5, r6}
 800a460:	4610      	mov	r0, r2
 800a462:	4770      	bx	lr
 800a464:	7418      	strb	r0, [r3, #16]
 800a466:	4610      	mov	r0, r2
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	2000007c 	.word	0x2000007c

0800a470 <LCD_SetDrawMode>:
 800a470:	4b01      	ldr	r3, [pc, #4]	; (800a478 <LCD_SetDrawMode+0x8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	4718      	bx	r3
 800a478:	20000098 	.word	0x20000098

0800a47c <LCD_DrawPixel>:
 800a47c:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <LCD_DrawPixel+0x64>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800a484:	428a      	cmp	r2, r1
 800a486:	dc1d      	bgt.n	800a4c4 <LCD_DrawPixel+0x48>
 800a488:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800a48c:	4291      	cmp	r1, r2
 800a48e:	dc19      	bgt.n	800a4c4 <LCD_DrawPixel+0x48>
 800a490:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800a494:	4282      	cmp	r2, r0
 800a496:	dc15      	bgt.n	800a4c4 <LCD_DrawPixel+0x48>
 800a498:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800a49c:	4290      	cmp	r0, r2
 800a49e:	dc11      	bgt.n	800a4c4 <LCD_DrawPixel+0x48>
 800a4a0:	b430      	push	{r4, r5}
 800a4a2:	7c1a      	ldrb	r2, [r3, #16]
 800a4a4:	07d2      	lsls	r2, r2, #31
 800a4a6:	d40e      	bmi.n	800a4c6 <LCD_DrawPixel+0x4a>
 800a4a8:	4a0e      	ldr	r2, [pc, #56]	; (800a4e4 <LCD_DrawPixel+0x68>)
 800a4aa:	7c5c      	ldrb	r4, [r3, #17]
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68e5      	ldr	r5, [r4, #12]
 800a4b6:	69ad      	ldr	r5, [r5, #24]
 800a4b8:	460a      	mov	r2, r1
 800a4ba:	46ac      	mov	ip, r5
 800a4bc:	4601      	mov	r1, r0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	bc30      	pop	{r4, r5}
 800a4c2:	4760      	bx	ip
 800a4c4:	4770      	bx	lr
 800a4c6:	7c5a      	ldrb	r2, [r3, #17]
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <LCD_DrawPixel+0x68>)
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	68dc      	ldr	r4, [r3, #12]
 800a4d0:	69e4      	ldr	r4, [r4, #28]
 800a4d2:	460a      	mov	r2, r1
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	4623      	mov	r3, r4
 800a4da:	bc30      	pop	{r4, r5}
 800a4dc:	4718      	bx	r3
 800a4de:	bf00      	nop
 800a4e0:	2000007c 	.word	0x2000007c
 800a4e4:	200357f4 	.word	0x200357f4

0800a4e8 <LCD_DrawHLine>:
 800a4e8:	4b12      	ldr	r3, [pc, #72]	; (800a534 <LCD_DrawHLine+0x4c>)
 800a4ea:	b430      	push	{r4, r5}
 800a4ec:	681c      	ldr	r4, [r3, #0]
 800a4ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a4f2:	428b      	cmp	r3, r1
 800a4f4:	dc0f      	bgt.n	800a516 <LCD_DrawHLine+0x2e>
 800a4f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a4fa:	4299      	cmp	r1, r3
 800a4fc:	dc0b      	bgt.n	800a516 <LCD_DrawHLine+0x2e>
 800a4fe:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 800a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a506:	42a8      	cmp	r0, r5
 800a508:	bfb8      	it	lt
 800a50a:	4628      	movlt	r0, r5
 800a50c:	429a      	cmp	r2, r3
 800a50e:	bfa8      	it	ge
 800a510:	461a      	movge	r2, r3
 800a512:	4290      	cmp	r0, r2
 800a514:	dd01      	ble.n	800a51a <LCD_DrawHLine+0x32>
 800a516:	bc30      	pop	{r4, r5}
 800a518:	4770      	bx	lr
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <LCD_DrawHLine+0x50>)
 800a51c:	7c64      	ldrb	r4, [r4, #17]
 800a51e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800a522:	68e5      	ldr	r5, [r4, #12]
 800a524:	68ad      	ldr	r5, [r5, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	46ac      	mov	ip, r5
 800a52a:	460a      	mov	r2, r1
 800a52c:	4601      	mov	r1, r0
 800a52e:	4620      	mov	r0, r4
 800a530:	bc30      	pop	{r4, r5}
 800a532:	4760      	bx	ip
 800a534:	2000007c 	.word	0x2000007c
 800a538:	200357f4 	.word	0x200357f4

0800a53c <LCD_DrawVLine>:
 800a53c:	4b12      	ldr	r3, [pc, #72]	; (800a588 <LCD_DrawVLine+0x4c>)
 800a53e:	b430      	push	{r4, r5}
 800a540:	681c      	ldr	r4, [r3, #0]
 800a542:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800a546:	4283      	cmp	r3, r0
 800a548:	dc0f      	bgt.n	800a56a <LCD_DrawVLine+0x2e>
 800a54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54e:	4298      	cmp	r0, r3
 800a550:	dc0b      	bgt.n	800a56a <LCD_DrawVLine+0x2e>
 800a552:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800a556:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a55a:	42a9      	cmp	r1, r5
 800a55c:	bfb8      	it	lt
 800a55e:	4629      	movlt	r1, r5
 800a560:	429a      	cmp	r2, r3
 800a562:	bfa8      	it	ge
 800a564:	461a      	movge	r2, r3
 800a566:	4291      	cmp	r1, r2
 800a568:	dd01      	ble.n	800a56e <LCD_DrawVLine+0x32>
 800a56a:	bc30      	pop	{r4, r5}
 800a56c:	4770      	bx	lr
 800a56e:	4b07      	ldr	r3, [pc, #28]	; (800a58c <LCD_DrawVLine+0x50>)
 800a570:	7c64      	ldrb	r4, [r4, #17]
 800a572:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800a576:	68e5      	ldr	r5, [r4, #12]
 800a578:	68ed      	ldr	r5, [r5, #12]
 800a57a:	4613      	mov	r3, r2
 800a57c:	46ac      	mov	ip, r5
 800a57e:	460a      	mov	r2, r1
 800a580:	4601      	mov	r1, r0
 800a582:	4620      	mov	r0, r4
 800a584:	bc30      	pop	{r4, r5}
 800a586:	4760      	bx	ip
 800a588:	2000007c 	.word	0x2000007c
 800a58c:	200357f4 	.word	0x200357f4

0800a590 <LCD_FillRect>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	4c15      	ldr	r4, [pc, #84]	; (800a5e8 <LCD_FillRect+0x58>)
 800a594:	6824      	ldr	r4, [r4, #0]
 800a596:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800a59a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a59e:	42b0      	cmp	r0, r6
 800a5a0:	bfb8      	it	lt
 800a5a2:	4630      	movlt	r0, r6
 800a5a4:	42aa      	cmp	r2, r5
 800a5a6:	bfa8      	it	ge
 800a5a8:	462a      	movge	r2, r5
 800a5aa:	4282      	cmp	r2, r0
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	db0b      	blt.n	800a5c8 <LCD_FillRect+0x38>
 800a5b0:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 800a5b4:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800a5b8:	42b1      	cmp	r1, r6
 800a5ba:	bfb8      	it	lt
 800a5bc:	4631      	movlt	r1, r6
 800a5be:	42ab      	cmp	r3, r5
 800a5c0:	bfa8      	it	ge
 800a5c2:	462b      	movge	r3, r5
 800a5c4:	4299      	cmp	r1, r3
 800a5c6:	dd01      	ble.n	800a5cc <LCD_FillRect+0x3c>
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	7c65      	ldrb	r5, [r4, #17]
 800a5ce:	4c07      	ldr	r4, [pc, #28]	; (800a5ec <LCD_FillRect+0x5c>)
 800a5d0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800a5d4:	68e5      	ldr	r5, [r4, #12]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	460a      	mov	r2, r1
 800a5dc:	4601      	mov	r1, r0
 800a5de:	4620      	mov	r0, r4
 800a5e0:	692c      	ldr	r4, [r5, #16]
 800a5e2:	47a0      	blx	r4
 800a5e4:	b002      	add	sp, #8
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	2000007c 	.word	0x2000007c
 800a5ec:	200357f4 	.word	0x200357f4

0800a5f0 <LCD__DrawBitmap_1bpp>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	b091      	sub	sp, #68	; 0x44
 800a5f6:	4c82      	ldr	r4, [pc, #520]	; (800a800 <LCD__DrawBitmap_1bpp+0x210>)
 800a5f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a5fa:	950e      	str	r5, [sp, #56]	; 0x38
 800a5fc:	462e      	mov	r6, r5
 800a5fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a600:	950c      	str	r5, [sp, #48]	; 0x30
 800a602:	6824      	ldr	r4, [r4, #0]
 800a604:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800a606:	9506      	str	r5, [sp, #24]
 800a608:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800a60a:	9508      	str	r5, [sp, #32]
 800a60c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a610:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 800a614:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a616:	900f      	str	r0, [sp, #60]	; 0x3c
 800a618:	9205      	str	r2, [sp, #20]
 800a61a:	930d      	str	r3, [sp, #52]	; 0x34
 800a61c:	b12c      	cbz	r4, 800a62a <LCD__DrawBitmap_1bpp+0x3a>
 800a61e:	6824      	ldr	r4, [r4, #0]
 800a620:	46a4      	mov	ip, r4
 800a622:	b011      	add	sp, #68	; 0x44
 800a624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	4760      	bx	ip
 800a62a:	ea4a 0306 	orr.w	r3, sl, r6
 800a62e:	2b01      	cmp	r3, #1
 800a630:	4689      	mov	r9, r1
 800a632:	f000 8091 	beq.w	800a758 <LCD__DrawBitmap_1bpp+0x168>
 800a636:	f1ce 0308 	rsb	r3, lr, #8
 800a63a:	9302      	str	r3, [sp, #8]
 800a63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f340 8087 	ble.w	800a752 <LCD__DrawBitmap_1bpp+0x162>
 800a644:	4b6f      	ldr	r3, [pc, #444]	; (800a804 <LCD__DrawBitmap_1bpp+0x214>)
 800a646:	940a      	str	r4, [sp, #40]	; 0x28
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	9104      	str	r1, [sp, #16]
 800a64c:	46a0      	mov	r8, r4
 800a64e:	46f1      	mov	r9, lr
 800a650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a652:	9904      	ldr	r1, [sp, #16]
 800a654:	1853      	adds	r3, r2, r1
 800a656:	461a      	mov	r2, r3
 800a658:	930b      	str	r3, [sp, #44]	; 0x2c
 800a65a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a65e:	3a01      	subs	r2, #1
 800a660:	4293      	cmp	r3, r2
 800a662:	9209      	str	r2, [sp, #36]	; 0x24
 800a664:	dc68      	bgt.n	800a738 <LCD__DrawBitmap_1bpp+0x148>
 800a666:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800a66a:	428b      	cmp	r3, r1
 800a66c:	db64      	blt.n	800a738 <LCD__DrawBitmap_1bpp+0x148>
 800a66e:	9b05      	ldr	r3, [sp, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dd61      	ble.n	800a738 <LCD__DrawBitmap_1bpp+0x148>
 800a674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a676:	9f06      	ldr	r7, [sp, #24]
 800a678:	9707      	str	r7, [sp, #28]
 800a67a:	2600      	movs	r6, #0
 800a67c:	4635      	mov	r5, r6
 800a67e:	eb03 040a 	add.w	r4, r3, sl
 800a682:	e04c      	b.n	800a71e <LCD__DrawBitmap_1bpp+0x12e>
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	ebc9 0606 	rsb	r6, r9, r6
 800a68a:	fa48 f303 	asr.w	r3, r8, r3
 800a68e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a692:	fa08 f809 	lsl.w	r8, r8, r9
 800a696:	fa5f f888 	uxtb.w	r8, r8
 800a69a:	d102      	bne.n	800a6a2 <LCD__DrawBitmap_1bpp+0xb2>
 800a69c:	7c02      	ldrb	r2, [r0, #16]
 800a69e:	0792      	lsls	r2, r2, #30
 800a6a0:	d438      	bmi.n	800a714 <LCD__DrawBitmap_1bpp+0x124>
 800a6a2:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800a6a6:	f8de 2000 	ldr.w	r2, [lr]
 800a6aa:	9203      	str	r2, [sp, #12]
 800a6ac:	9a08      	ldr	r2, [sp, #32]
 800a6ae:	b10a      	cbz	r2, 800a6b4 <LCD__DrawBitmap_1bpp+0xc4>
 800a6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b4:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800a6b8:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800a6bc:	f8ce 3000 	str.w	r3, [lr]
 800a6c0:	1e62      	subs	r2, r4, #1
 800a6c2:	4559      	cmp	r1, fp
 800a6c4:	bfb8      	it	lt
 800a6c6:	4659      	movlt	r1, fp
 800a6c8:	4562      	cmp	r2, ip
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	bfa8      	it	ge
 800a6ce:	4663      	movge	r3, ip
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	db1c      	blt.n	800a70e <LCD__DrawBitmap_1bpp+0x11e>
 800a6d4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800a6d8:	9f04      	ldr	r7, [sp, #16]
 800a6da:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800a6de:	42ba      	cmp	r2, r7
 800a6e0:	bfb8      	it	lt
 800a6e2:	463a      	movlt	r2, r7
 800a6e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a6e6:	45bc      	cmp	ip, r7
 800a6e8:	bfa8      	it	ge
 800a6ea:	46bc      	movge	ip, r7
 800a6ec:	4562      	cmp	r2, ip
 800a6ee:	dc0e      	bgt.n	800a70e <LCD__DrawBitmap_1bpp+0x11e>
 800a6f0:	7c40      	ldrb	r0, [r0, #17]
 800a6f2:	4f45      	ldr	r7, [pc, #276]	; (800a808 <LCD__DrawBitmap_1bpp+0x218>)
 800a6f4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a6f8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800a6fc:	f8cd c000 	str.w	ip, [sp]
 800a700:	f8de b010 	ldr.w	fp, [lr, #16]
 800a704:	47d8      	blx	fp
 800a706:	4b3f      	ldr	r3, [pc, #252]	; (800a804 <LCD__DrawBitmap_1bpp+0x214>)
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	f8ce 3000 	str.w	r3, [lr]
 800a714:	9b05      	ldr	r3, [sp, #20]
 800a716:	3501      	adds	r5, #1
 800a718:	42ab      	cmp	r3, r5
 800a71a:	4454      	add	r4, sl
 800a71c:	d00c      	beq.n	800a738 <LCD__DrawBitmap_1bpp+0x148>
 800a71e:	ebca 0104 	rsb	r1, sl, r4
 800a722:	2e00      	cmp	r6, #0
 800a724:	d1ae      	bne.n	800a684 <LCD__DrawBitmap_1bpp+0x94>
 800a726:	9a07      	ldr	r2, [sp, #28]
 800a728:	9e02      	ldr	r6, [sp, #8]
 800a72a:	f892 8000 	ldrb.w	r8, [r2]
 800a72e:	4613      	mov	r3, r2
 800a730:	3301      	adds	r3, #1
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	4633      	mov	r3, r6
 800a736:	e7a8      	b.n	800a68a <LCD__DrawBitmap_1bpp+0x9a>
 800a738:	9a06      	ldr	r2, [sp, #24]
 800a73a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73e:	440a      	add	r2, r1
 800a740:	9206      	str	r2, [sp, #24]
 800a742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a744:	9204      	str	r2, [sp, #16]
 800a746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a748:	3301      	adds	r3, #1
 800a74a:	429a      	cmp	r2, r3
 800a74c:	930a      	str	r3, [sp, #40]	; 0x28
 800a74e:	f47f af7f 	bne.w	800a650 <LCD__DrawBitmap_1bpp+0x60>
 800a752:	b011      	add	sp, #68	; 0x44
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	4b2a      	ldr	r3, [pc, #168]	; (800a804 <LCD__DrawBitmap_1bpp+0x214>)
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800a760:	1a53      	subs	r3, r2, r1
 800a762:	2b00      	cmp	r3, #0
 800a764:	dd47      	ble.n	800a7f6 <LCD__DrawBitmap_1bpp+0x206>
 800a766:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a768:	1acc      	subs	r4, r1, r3
 800a76a:	2c00      	cmp	r4, #0
 800a76c:	ddf1      	ble.n	800a752 <LCD__DrawBitmap_1bpp+0x162>
 800a76e:	9e06      	ldr	r6, [sp, #24]
 800a770:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a772:	fb01 6303 	mla	r3, r1, r3, r6
 800a776:	9306      	str	r3, [sp, #24]
 800a778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a77a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800a77e:	444b      	add	r3, r9
 800a780:	3b01      	subs	r3, #1
 800a782:	1a5b      	subs	r3, r3, r1
 800a784:	2b00      	cmp	r3, #0
 800a786:	dd02      	ble.n	800a78e <LCD__DrawBitmap_1bpp+0x19e>
 800a788:	1ae4      	subs	r4, r4, r3
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	dde1      	ble.n	800a752 <LCD__DrawBitmap_1bpp+0x162>
 800a78e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a790:	9e05      	ldr	r6, [sp, #20]
 800a792:	198b      	adds	r3, r1, r6
 800a794:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800a798:	3b01      	subs	r3, #1
 800a79a:	1a5b      	subs	r3, r3, r1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd01      	ble.n	800a7a4 <LCD__DrawBitmap_1bpp+0x1b4>
 800a7a0:	1af3      	subs	r3, r6, r3
 800a7a2:	9305      	str	r3, [sp, #20]
 800a7a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a7a6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a7aa:	1b49      	subs	r1, r1, r5
 800a7ac:	4299      	cmp	r1, r3
 800a7ae:	da0d      	bge.n	800a7cc <LCD__DrawBitmap_1bpp+0x1dc>
 800a7b0:	1a5b      	subs	r3, r3, r1
 800a7b2:	9f06      	ldr	r7, [sp, #24]
 800a7b4:	441d      	add	r5, r3
 800a7b6:	eb07 07e5 	add.w	r7, r7, r5, asr #3
 800a7ba:	9706      	str	r7, [sp, #24]
 800a7bc:	9f05      	ldr	r7, [sp, #20]
 800a7be:	f023 0607 	bic.w	r6, r3, #7
 800a7c2:	1afb      	subs	r3, r7, r3
 800a7c4:	f005 0507 	and.w	r5, r5, #7
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	4431      	add	r1, r6
 800a7cc:	9b05      	ldr	r3, [sp, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	ddbf      	ble.n	800a752 <LCD__DrawBitmap_1bpp+0x162>
 800a7d2:	7c40      	ldrb	r0, [r0, #17]
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <LCD__DrawBitmap_1bpp+0x218>)
 800a7d6:	9f08      	ldr	r7, [sp, #32]
 800a7d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a7dc:	9b05      	ldr	r3, [sp, #20]
 800a7de:	68c6      	ldr	r6, [r0, #12]
 800a7e0:	951e      	str	r5, [sp, #120]	; 0x78
 800a7e2:	9d06      	ldr	r5, [sp, #24]
 800a7e4:	951d      	str	r5, [sp, #116]	; 0x74
 800a7e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7e8:	971f      	str	r7, [sp, #124]	; 0x7c
 800a7ea:	951c      	str	r5, [sp, #112]	; 0x70
 800a7ec:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 800a7f0:	941a      	str	r4, [sp, #104]	; 0x68
 800a7f2:	6874      	ldr	r4, [r6, #4]
 800a7f4:	e714      	b.n	800a620 <LCD__DrawBitmap_1bpp+0x30>
 800a7f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a7f8:	460a      	mov	r2, r1
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	e7bd      	b.n	800a77a <LCD__DrawBitmap_1bpp+0x18a>
 800a7fe:	bf00      	nop
 800a800:	20035808 	.word	0x20035808
 800a804:	2000007c 	.word	0x2000007c
 800a808:	200357f4 	.word	0x200357f4

0800a80c <LCD_DrawBitmap>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	4cb6      	ldr	r4, [pc, #728]	; (800aaec <LCD_DrawBitmap+0x2e0>)
 800a812:	b091      	sub	sp, #68	; 0x44
 800a814:	f8d4 e000 	ldr.w	lr, [r4]
 800a818:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a81a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a81c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a81e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800a820:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a824:	950d      	str	r5, [sp, #52]	; 0x34
 800a826:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800a82a:	960e      	str	r6, [sp, #56]	; 0x38
 800a82c:	9707      	str	r7, [sp, #28]
 800a82e:	9408      	str	r4, [sp, #32]
 800a830:	900f      	str	r0, [sp, #60]	; 0x3c
 800a832:	9205      	str	r2, [sp, #20]
 800a834:	930c      	str	r3, [sp, #48]	; 0x30
 800a836:	f1be 0f00 	cmp.w	lr, #0
 800a83a:	d006      	beq.n	800a84a <LCD_DrawBitmap+0x3e>
 800a83c:	f8de 4000 	ldr.w	r4, [lr]
 800a840:	46a4      	mov	ip, r4
 800a842:	b011      	add	sp, #68	; 0x44
 800a844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	4760      	bx	ip
 800a84a:	ea4a 0305 	orr.w	r3, sl, r5
 800a84e:	2b01      	cmp	r3, #1
 800a850:	4689      	mov	r9, r1
 800a852:	f000 8092 	beq.w	800a97a <LCD_DrawBitmap+0x16e>
 800a856:	f1cc 0308 	rsb	r3, ip, #8
 800a85a:	9302      	str	r3, [sp, #8]
 800a85c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f340 8088 	ble.w	800a974 <LCD_DrawBitmap+0x168>
 800a864:	4ba2      	ldr	r3, [pc, #648]	; (800aaf0 <LCD_DrawBitmap+0x2e4>)
 800a866:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	9104      	str	r1, [sp, #16]
 800a86e:	46f0      	mov	r8, lr
 800a870:	46e1      	mov	r9, ip
 800a872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a874:	9904      	ldr	r1, [sp, #16]
 800a876:	1853      	adds	r3, r2, r1
 800a878:	461a      	mov	r2, r3
 800a87a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a87c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a880:	3a01      	subs	r2, #1
 800a882:	4293      	cmp	r3, r2
 800a884:	9209      	str	r2, [sp, #36]	; 0x24
 800a886:	dc68      	bgt.n	800a95a <LCD_DrawBitmap+0x14e>
 800a888:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800a88c:	428b      	cmp	r3, r1
 800a88e:	db64      	blt.n	800a95a <LCD_DrawBitmap+0x14e>
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	dd61      	ble.n	800a95a <LCD_DrawBitmap+0x14e>
 800a896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a898:	9f07      	ldr	r7, [sp, #28]
 800a89a:	9706      	str	r7, [sp, #24]
 800a89c:	2600      	movs	r6, #0
 800a89e:	4635      	mov	r5, r6
 800a8a0:	eb03 040a 	add.w	r4, r3, sl
 800a8a4:	e04c      	b.n	800a940 <LCD_DrawBitmap+0x134>
 800a8a6:	9b02      	ldr	r3, [sp, #8]
 800a8a8:	ebc9 0606 	rsb	r6, r9, r6
 800a8ac:	fa48 f303 	asr.w	r3, r8, r3
 800a8b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a8b4:	fa08 f809 	lsl.w	r8, r8, r9
 800a8b8:	fa5f f888 	uxtb.w	r8, r8
 800a8bc:	d102      	bne.n	800a8c4 <LCD_DrawBitmap+0xb8>
 800a8be:	7c02      	ldrb	r2, [r0, #16]
 800a8c0:	0792      	lsls	r2, r2, #30
 800a8c2:	d438      	bmi.n	800a936 <LCD_DrawBitmap+0x12a>
 800a8c4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800a8c8:	f8de 2000 	ldr.w	r2, [lr]
 800a8cc:	9203      	str	r2, [sp, #12]
 800a8ce:	9a08      	ldr	r2, [sp, #32]
 800a8d0:	b10a      	cbz	r2, 800a8d6 <LCD_DrawBitmap+0xca>
 800a8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d6:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800a8da:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800a8de:	f8ce 3000 	str.w	r3, [lr]
 800a8e2:	1e62      	subs	r2, r4, #1
 800a8e4:	4559      	cmp	r1, fp
 800a8e6:	bfb8      	it	lt
 800a8e8:	4659      	movlt	r1, fp
 800a8ea:	4562      	cmp	r2, ip
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	bfa8      	it	ge
 800a8f0:	4663      	movge	r3, ip
 800a8f2:	428b      	cmp	r3, r1
 800a8f4:	db1c      	blt.n	800a930 <LCD_DrawBitmap+0x124>
 800a8f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800a8fa:	9f04      	ldr	r7, [sp, #16]
 800a8fc:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800a900:	42ba      	cmp	r2, r7
 800a902:	bfb8      	it	lt
 800a904:	463a      	movlt	r2, r7
 800a906:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a908:	45bc      	cmp	ip, r7
 800a90a:	bfa8      	it	ge
 800a90c:	46bc      	movge	ip, r7
 800a90e:	4562      	cmp	r2, ip
 800a910:	dc0e      	bgt.n	800a930 <LCD_DrawBitmap+0x124>
 800a912:	7c40      	ldrb	r0, [r0, #17]
 800a914:	4f77      	ldr	r7, [pc, #476]	; (800aaf4 <LCD_DrawBitmap+0x2e8>)
 800a916:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a91a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800a91e:	f8cd c000 	str.w	ip, [sp]
 800a922:	f8de b010 	ldr.w	fp, [lr, #16]
 800a926:	47d8      	blx	fp
 800a928:	4b71      	ldr	r3, [pc, #452]	; (800aaf0 <LCD_DrawBitmap+0x2e4>)
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	f8ce 3000 	str.w	r3, [lr]
 800a936:	9b05      	ldr	r3, [sp, #20]
 800a938:	3501      	adds	r5, #1
 800a93a:	42ab      	cmp	r3, r5
 800a93c:	4454      	add	r4, sl
 800a93e:	d00c      	beq.n	800a95a <LCD_DrawBitmap+0x14e>
 800a940:	ebca 0104 	rsb	r1, sl, r4
 800a944:	2e00      	cmp	r6, #0
 800a946:	d1ae      	bne.n	800a8a6 <LCD_DrawBitmap+0x9a>
 800a948:	9a06      	ldr	r2, [sp, #24]
 800a94a:	9e02      	ldr	r6, [sp, #8]
 800a94c:	f892 8000 	ldrb.w	r8, [r2]
 800a950:	4613      	mov	r3, r2
 800a952:	3301      	adds	r3, #1
 800a954:	9306      	str	r3, [sp, #24]
 800a956:	4633      	mov	r3, r6
 800a958:	e7a8      	b.n	800a8ac <LCD_DrawBitmap+0xa0>
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	440a      	add	r2, r1
 800a962:	9207      	str	r2, [sp, #28]
 800a964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a966:	9204      	str	r2, [sp, #16]
 800a968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a96a:	3301      	adds	r3, #1
 800a96c:	429a      	cmp	r2, r3
 800a96e:	930a      	str	r3, [sp, #40]	; 0x28
 800a970:	f47f af7f 	bne.w	800a872 <LCD_DrawBitmap+0x66>
 800a974:	b011      	add	sp, #68	; 0x44
 800a976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97a:	4b5d      	ldr	r3, [pc, #372]	; (800aaf0 <LCD_DrawBitmap+0x2e4>)
 800a97c:	6819      	ldr	r1, [r3, #0]
 800a97e:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 800a982:	ebc9 0302 	rsb	r3, r9, r2
 800a986:	2b00      	cmp	r3, #0
 800a988:	f340 80c2 	ble.w	800ab10 <LCD_DrawBitmap+0x304>
 800a98c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a98e:	1ac4      	subs	r4, r0, r3
 800a990:	2c00      	cmp	r4, #0
 800a992:	ddef      	ble.n	800a974 <LCD_DrawBitmap+0x168>
 800a994:	fb06 7303 	mla	r3, r6, r3, r7
 800a998:	9307      	str	r3, [sp, #28]
 800a99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a99c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800a9a0:	444b      	add	r3, r9
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	1a1b      	subs	r3, r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	dd02      	ble.n	800a9b0 <LCD_DrawBitmap+0x1a4>
 800a9aa:	1ae4      	subs	r4, r4, r3
 800a9ac:	2c00      	cmp	r4, #0
 800a9ae:	dde1      	ble.n	800a974 <LCD_DrawBitmap+0x168>
 800a9b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a9b2:	9d05      	ldr	r5, [sp, #20]
 800a9b4:	1943      	adds	r3, r0, r5
 800a9b6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	1a1b      	subs	r3, r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dd01      	ble.n	800a9c6 <LCD_DrawBitmap+0x1ba>
 800a9c2:	1aeb      	subs	r3, r5, r3
 800a9c4:	9305      	str	r3, [sp, #20]
 800a9c6:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 800a9ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9cc:	4285      	cmp	r5, r0
 800a9ce:	db16      	blt.n	800a9fe <LCD_DrawBitmap+0x1f2>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9e05      	ldr	r6, [sp, #20]
 800a9d4:	2e00      	cmp	r6, #0
 800a9d6:	ddcd      	ble.n	800a974 <LCD_DrawBitmap+0x168>
 800a9d8:	7c48      	ldrb	r0, [r1, #17]
 800a9da:	4946      	ldr	r1, [pc, #280]	; (800aaf4 <LCD_DrawBitmap+0x2e8>)
 800a9dc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a9e0:	9908      	ldr	r1, [sp, #32]
 800a9e2:	68c5      	ldr	r5, [r0, #12]
 800a9e4:	931e      	str	r3, [sp, #120]	; 0x78
 800a9e6:	9b07      	ldr	r3, [sp, #28]
 800a9e8:	931d      	str	r3, [sp, #116]	; 0x74
 800a9ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ec:	911f      	str	r1, [sp, #124]	; 0x7c
 800a9ee:	931c      	str	r3, [sp, #112]	; 0x70
 800a9f0:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800a9f4:	941a      	str	r4, [sp, #104]	; 0x68
 800a9f6:	4633      	mov	r3, r6
 800a9f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9fa:	686c      	ldr	r4, [r5, #4]
 800a9fc:	e720      	b.n	800a840 <LCD_DrawBitmap+0x34>
 800a9fe:	9e05      	ldr	r6, [sp, #20]
 800aa00:	1b43      	subs	r3, r0, r5
 800aa02:	1af6      	subs	r6, r6, r3
 800aa04:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800aa08:	9605      	str	r6, [sp, #20]
 800aa0a:	2d1f      	cmp	r5, #31
 800aa0c:	d8e1      	bhi.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800aa0e:	a601      	add	r6, pc, #4	; (adr r6, 800aa14 <LCD_DrawBitmap+0x208>)
 800aa10:	f856 f025 	ldr.w	pc, [r6, r5, lsl #2]
 800aa14:	0800aaf9 	.word	0x0800aaf9
 800aa18:	0800aad5 	.word	0x0800aad5
 800aa1c:	0800a9d3 	.word	0x0800a9d3
 800aa20:	0800aabd 	.word	0x0800aabd
 800aa24:	0800a9d3 	.word	0x0800a9d3
 800aa28:	0800a9d3 	.word	0x0800a9d3
 800aa2c:	0800a9d3 	.word	0x0800a9d3
 800aa30:	0800aab1 	.word	0x0800aab1
 800aa34:	0800a9d3 	.word	0x0800a9d3
 800aa38:	0800a9d3 	.word	0x0800a9d3
 800aa3c:	0800a9d3 	.word	0x0800a9d3
 800aa40:	0800a9d3 	.word	0x0800a9d3
 800aa44:	0800a9d3 	.word	0x0800a9d3
 800aa48:	0800a9d3 	.word	0x0800a9d3
 800aa4c:	0800a9d3 	.word	0x0800a9d3
 800aa50:	0800aaa3 	.word	0x0800aaa3
 800aa54:	0800a9d3 	.word	0x0800a9d3
 800aa58:	0800a9d3 	.word	0x0800a9d3
 800aa5c:	0800a9d3 	.word	0x0800a9d3
 800aa60:	0800a9d3 	.word	0x0800a9d3
 800aa64:	0800a9d3 	.word	0x0800a9d3
 800aa68:	0800a9d3 	.word	0x0800a9d3
 800aa6c:	0800a9d3 	.word	0x0800a9d3
 800aa70:	0800aa95 	.word	0x0800aa95
 800aa74:	0800a9d3 	.word	0x0800a9d3
 800aa78:	0800a9d3 	.word	0x0800a9d3
 800aa7c:	0800a9d3 	.word	0x0800a9d3
 800aa80:	0800a9d3 	.word	0x0800a9d3
 800aa84:	0800a9d3 	.word	0x0800a9d3
 800aa88:	0800a9d3 	.word	0x0800a9d3
 800aa8c:	0800a9d3 	.word	0x0800a9d3
 800aa90:	0800aa95 	.word	0x0800aa95
 800aa94:	9d07      	ldr	r5, [sp, #28]
 800aa96:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa9c:	9307      	str	r3, [sp, #28]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e797      	b.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800aaa2:	9d07      	ldr	r5, [sp, #28]
 800aaa4:	900f      	str	r0, [sp, #60]	; 0x3c
 800aaa6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aaaa:	9307      	str	r3, [sp, #28]
 800aaac:	2300      	movs	r3, #0
 800aaae:	e790      	b.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800aab0:	9d07      	ldr	r5, [sp, #28]
 800aab2:	900f      	str	r0, [sp, #60]	; 0x3c
 800aab4:	441d      	add	r5, r3
 800aab6:	9507      	str	r5, [sp, #28]
 800aab8:	2300      	movs	r3, #0
 800aaba:	e78a      	b.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800aabc:	9d07      	ldr	r5, [sp, #28]
 800aabe:	eb05 0563 	add.w	r5, r5, r3, asr #1
 800aac2:	9507      	str	r5, [sp, #28]
 800aac4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aac6:	f023 0001 	bic.w	r0, r3, #1
 800aaca:	4405      	add	r5, r0
 800aacc:	950f      	str	r5, [sp, #60]	; 0x3c
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	e77e      	b.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800aad4:	9d07      	ldr	r5, [sp, #28]
 800aad6:	eb05 05a3 	add.w	r5, r5, r3, asr #2
 800aada:	9507      	str	r5, [sp, #28]
 800aadc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aade:	f023 0003 	bic.w	r0, r3, #3
 800aae2:	4405      	add	r5, r0
 800aae4:	950f      	str	r5, [sp, #60]	; 0x3c
 800aae6:	f003 0303 	and.w	r3, r3, #3
 800aaea:	e772      	b.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800aaec:	20035808 	.word	0x20035808
 800aaf0:	2000007c 	.word	0x2000007c
 800aaf4:	200357f4 	.word	0x200357f4
 800aaf8:	9d07      	ldr	r5, [sp, #28]
 800aafa:	eb05 05e3 	add.w	r5, r5, r3, asr #3
 800aafe:	9507      	str	r5, [sp, #28]
 800ab00:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab02:	f023 0007 	bic.w	r0, r3, #7
 800ab06:	4405      	add	r5, r0
 800ab08:	950f      	str	r5, [sp, #60]	; 0x3c
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	e760      	b.n	800a9d2 <LCD_DrawBitmap+0x1c6>
 800ab10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ab12:	464a      	mov	r2, r9
 800ab14:	4623      	mov	r3, r4
 800ab16:	e741      	b.n	800a99c <LCD_DrawBitmap+0x190>

0800ab18 <LCD_SetClipRectMax>:
 800ab18:	4a04      	ldr	r2, [pc, #16]	; (800ab2c <LCD_SetClipRectMax+0x14>)
 800ab1a:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <LCD_SetClipRectMax+0x18>)
 800ab1c:	6811      	ldr	r1, [r2, #0]
 800ab1e:	7c4a      	ldrb	r2, [r1, #17]
 800ab20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ab24:	68c3      	ldr	r3, [r0, #12]
 800ab26:	3108      	adds	r1, #8
 800ab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2a:	4718      	bx	r3
 800ab2c:	2000007c 	.word	0x2000007c
 800ab30:	200357f4 	.word	0x200357f4

0800ab34 <emWin_LCD_Init>:
 800ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab38:	4e3e      	ldr	r6, [pc, #248]	; (800ac34 <emWin_LCD_Init+0x100>)
 800ab3a:	4f3f      	ldr	r7, [pc, #252]	; (800ac38 <emWin_LCD_Init+0x104>)
 800ab3c:	6831      	ldr	r1, [r6, #0]
 800ab3e:	7c4b      	ldrb	r3, [r1, #17]
 800ab40:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800ab44:	68c3      	ldr	r3, [r0, #12]
 800ab46:	b084      	sub	sp, #16
 800ab48:	3108      	adds	r1, #8
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	4798      	blx	r3
 800ab4e:	f000 f8f5 	bl	800ad3c <LCD_InitColors>
 800ab52:	4604      	mov	r4, r0
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d15c      	bne.n	800ac12 <emWin_LCD_Init+0xde>
 800ab58:	4605      	mov	r5, r0
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f7fe fcc4 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800ab60:	210c      	movs	r1, #12
 800ab62:	4603      	mov	r3, r0
 800ab64:	3501      	adds	r5, #1
 800ab66:	eb0d 0001 	add.w	r0, sp, r1
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	b143      	cbz	r3, 800ab80 <emWin_LCD_Init+0x4c>
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab72:	4798      	blx	r3
 800ab74:	4603      	mov	r3, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d05a      	beq.n	800ac30 <emWin_LCD_Init+0xfc>
 800ab7a:	9803      	ldr	r0, [sp, #12]
 800ab7c:	4798      	blx	r3
 800ab7e:	4304      	orrs	r4, r0
 800ab80:	2d02      	cmp	r5, #2
 800ab82:	d1ea      	bne.n	800ab5a <emWin_LCD_Init+0x26>
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	d144      	bne.n	800ac12 <emWin_LCD_Init+0xde>
 800ab88:	f000 f932 	bl	800adf0 <LCD_InitLUT>
 800ab8c:	4b2b      	ldr	r3, [pc, #172]	; (800ac3c <emWin_LCD_Init+0x108>)
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d038      	beq.n	800ac0a <emWin_LCD_Init+0xd6>
 800ab98:	4d29      	ldr	r5, [pc, #164]	; (800ac40 <emWin_LCD_Init+0x10c>)
 800ab9a:	2401      	movs	r4, #1
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7fe fca3 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800aba2:	4603      	mov	r3, r0
 800aba4:	9303      	str	r3, [sp, #12]
 800aba6:	4620      	mov	r0, r4
 800aba8:	3c01      	subs	r4, #1
 800abaa:	b363      	cbz	r3, 800ac06 <emWin_LCD_Init+0xd2>
 800abac:	f7ff f916 	bl	8009ddc <GUI_SelectLayer>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	2004      	movs	r0, #4
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	4798      	blx	r3
 800abb8:	6830      	ldr	r0, [r6, #0]
 800abba:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800abbe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800abc2:	f643 7cff 	movw	ip, #16383	; 0x3fff
 800abc6:	4563      	cmp	r3, ip
 800abc8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800abcc:	bfa8      	it	ge
 800abce:	4663      	movge	r3, ip
 800abd0:	428b      	cmp	r3, r1
 800abd2:	db0a      	blt.n	800abea <emWin_LCD_Init+0xb6>
 800abd4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 800abd8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800abdc:	45e6      	cmp	lr, ip
 800abde:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800abe2:	bfa8      	it	ge
 800abe4:	46e6      	movge	lr, ip
 800abe6:	4596      	cmp	lr, r2
 800abe8:	da17      	bge.n	800ac1a <emWin_LCD_Init+0xe6>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	2000      	movs	r0, #0
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	4798      	blx	r3
 800abf2:	9b03      	ldr	r3, [sp, #12]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	210e      	movs	r1, #14
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	a803      	add	r0, sp, #12
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	b108      	cbz	r0, 800ac06 <emWin_LCD_Init+0xd2>
 800ac02:	9803      	ldr	r0, [sp, #12]
 800ac04:	4798      	blx	r3
 800ac06:	1c63      	adds	r3, r4, #1
 800ac08:	d1c8      	bne.n	800ab9c <emWin_LCD_Init+0x68>
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	b004      	add	sp, #16
 800ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac12:	4620      	mov	r0, r4
 800ac14:	b004      	add	sp, #16
 800ac16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1a:	7c40      	ldrb	r0, [r0, #17]
 800ac1c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800ac20:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800ac24:	f8cd e000 	str.w	lr, [sp]
 800ac28:	f8dc 8010 	ldr.w	r8, [ip, #16]
 800ac2c:	47c0      	blx	r8
 800ac2e:	e7dc      	b.n	800abea <emWin_LCD_Init+0xb6>
 800ac30:	2001      	movs	r0, #1
 800ac32:	e7ef      	b.n	800ac14 <emWin_LCD_Init+0xe0>
 800ac34:	2000007c 	.word	0x2000007c
 800ac38:	200357f4 	.word	0x200357f4
 800ac3c:	200005d0 	.word	0x200005d0
 800ac40:	20000098 	.word	0x20000098

0800ac44 <LCD_Color2Index>:
 800ac44:	4a04      	ldr	r2, [pc, #16]	; (800ac58 <LCD_Color2Index+0x14>)
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <LCD_Color2Index+0x18>)
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	7c52      	ldrb	r2, [r2, #17]
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4718      	bx	r3
 800ac56:	bf00      	nop
 800ac58:	2000007c 	.word	0x2000007c
 800ac5c:	200357f4 	.word	0x200357f4

0800ac60 <LCD_Index2Color>:
 800ac60:	4a04      	ldr	r2, [pc, #16]	; (800ac74 <LCD_Index2Color+0x14>)
 800ac62:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <LCD_Index2Color+0x18>)
 800ac64:	6812      	ldr	r2, [r2, #0]
 800ac66:	7c52      	ldrb	r2, [r2, #17]
 800ac68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	4718      	bx	r3
 800ac72:	bf00      	nop
 800ac74:	2000007c 	.word	0x2000007c
 800ac78:	200357f4 	.word	0x200357f4

0800ac7c <LCD_SetColorIndex>:
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <LCD_SetColorIndex+0x14>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	7c1a      	ldrb	r2, [r3, #16]
 800ac82:	0752      	lsls	r2, r2, #29
 800ac84:	bf4c      	ite	mi
 800ac86:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800ac88:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800ac8a:	6018      	str	r0, [r3, #0]
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	2000007c 	.word	0x2000007c

0800ac94 <LCD_SetBkColorIndex>:
 800ac94:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <LCD_SetBkColorIndex+0x14>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	7c1a      	ldrb	r2, [r3, #16]
 800ac9a:	0752      	lsls	r2, r2, #29
 800ac9c:	bf4c      	ite	mi
 800ac9e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800aca0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800aca2:	6018      	str	r0, [r3, #0]
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	2000007c 	.word	0x2000007c

0800acac <LCD_SetBkColor>:
 800acac:	4b01      	ldr	r3, [pc, #4]	; (800acb4 <LCD_SetBkColor+0x8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	4718      	bx	r3
 800acb4:	20000098 	.word	0x20000098

0800acb8 <LCD_SetColor>:
 800acb8:	4b01      	ldr	r3, [pc, #4]	; (800acc0 <LCD_SetColor+0x8>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4718      	bx	r3
 800acc0:	20000098 	.word	0x20000098

0800acc4 <LCD_AA_MixColors16>:
 800acc4:	b508      	push	{r3, lr}
 800acc6:	0e0b      	lsrs	r3, r1, #24
 800acc8:	2bff      	cmp	r3, #255	; 0xff
 800acca:	d009      	beq.n	800ace0 <LCD_AA_MixColors16+0x1c>
 800accc:	4b0e      	ldr	r3, [pc, #56]	; (800ad08 <LCD_AA_MixColors16+0x44>)
 800acce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4798      	blx	r3
 800acd8:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <LCD_AA_MixColors16+0x48>)
 800acda:	6859      	ldr	r1, [r3, #4]
 800acdc:	4008      	ands	r0, r1
 800acde:	bd08      	pop	{r3, pc}
 800ace0:	0e03      	lsrs	r3, r0, #24
 800ace2:	d005      	beq.n	800acf0 <LCD_AA_MixColors16+0x2c>
 800ace4:	2bff      	cmp	r3, #255	; 0xff
 800ace6:	d1f1      	bne.n	800accc <LCD_AA_MixColors16+0x8>
 800ace8:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <LCD_AA_MixColors16+0x48>)
 800acea:	6858      	ldr	r0, [r3, #4]
 800acec:	4008      	ands	r0, r1
 800acee:	bd08      	pop	{r3, pc}
 800acf0:	ebc2 7102 	rsb	r1, r2, r2, lsl #28
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <LCD_AA_MixColors16+0x48>)
 800acf6:	ebc2 1201 	rsb	r2, r2, r1, lsl #4
 800acfa:	32ff      	adds	r2, #255	; 0xff
 800acfc:	6859      	ldr	r1, [r3, #4]
 800acfe:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800ad02:	4008      	ands	r0, r1
 800ad04:	bd08      	pop	{r3, pc}
 800ad06:	bf00      	nop
 800ad08:	200000c8 	.word	0x200000c8
 800ad0c:	2000009c 	.word	0x2000009c

0800ad10 <LCD_AA_SetAndMask>:
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <LCD_AA_SetAndMask+0xc>)
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	6058      	str	r0, [r3, #4]
 800ad16:	4610      	mov	r0, r2
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	2000009c 	.word	0x2000009c

0800ad20 <_OnExit>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	4c04      	ldr	r4, [pc, #16]	; (800ad34 <_OnExit+0x14>)
 800ad24:	6820      	ldr	r0, [r4, #0]
 800ad26:	f7fd fc6f 	bl	8008608 <GUI_ALLOC_FreeFixedBlock>
 800ad2a:	4a03      	ldr	r2, [pc, #12]	; (800ad38 <_OnExit+0x18>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	bd10      	pop	{r4, pc}
 800ad34:	20035824 	.word	0x20035824
 800ad38:	20000730 	.word	0x20000730

0800ad3c <LCD_InitColors>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d0b      	ldr	r5, [pc, #44]	; (800ad6c <LCD_InitColors+0x30>)
 800ad40:	682c      	ldr	r4, [r5, #0]
 800ad42:	b10c      	cbz	r4, 800ad48 <LCD_InitColors+0xc>
 800ad44:	2000      	movs	r0, #0
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <LCD_InitColors+0x34>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	0080      	lsls	r0, r0, #2
 800ad4e:	f7fd fc65 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800ad52:	6028      	str	r0, [r5, #0]
 800ad54:	b138      	cbz	r0, 800ad66 <LCD_InitColors+0x2a>
 800ad56:	4807      	ldr	r0, [pc, #28]	; (800ad74 <LCD_InitColors+0x38>)
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <LCD_InitColors+0x3c>)
 800ad5a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad5e:	f7fe fb9d 	bl	800949c <GUI__RegisterExit>
 800ad62:	4620      	mov	r0, r4
 800ad64:	bd38      	pop	{r3, r4, r5, pc}
 800ad66:	2001      	movs	r0, #1
 800ad68:	bd38      	pop	{r3, r4, r5, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20035824 	.word	0x20035824
 800ad70:	200000b4 	.word	0x200000b4
 800ad74:	20000730 	.word	0x20000730
 800ad78:	0800ad21 	.word	0x0800ad21

0800ad7c <LCD_GetpPalConvTableBM>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	b360      	cbz	r0, 800addc <LCD_GetpPalConvTableBM+0x60>
 800ad82:	6885      	ldr	r5, [r0, #8]
 800ad84:	b365      	cbz	r5, 800ade0 <LCD_GetpPalConvTableBM+0x64>
 800ad86:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800adec <LCD_GetpPalConvTableBM+0x70>
 800ad8a:	f8d8 6000 	ldr.w	r6, [r8]
 800ad8e:	b306      	cbz	r6, 800add2 <LCD_GetpPalConvTableBM+0x56>
 800ad90:	6807      	ldr	r7, [r0, #0]
 800ad92:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800ad96:	dc1f      	bgt.n	800add8 <LCD_GetpPalConvTableBM+0x5c>
 800ad98:	4b12      	ldr	r3, [pc, #72]	; (800ade4 <LCD_GetpPalConvTableBM+0x68>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	429f      	cmp	r7, r3
 800ad9e:	bfa8      	it	ge
 800ada0:	461f      	movge	r7, r3
 800ada2:	2f00      	cmp	r7, #0
 800ada4:	4681      	mov	r9, r0
 800ada6:	dd0d      	ble.n	800adc4 <LCD_GetpPalConvTableBM+0x48>
 800ada8:	3d04      	subs	r5, #4
 800adaa:	2400      	movs	r4, #0
 800adac:	e001      	b.n	800adb2 <LCD_GetpPalConvTableBM+0x36>
 800adae:	f8d8 6000 	ldr.w	r6, [r8]
 800adb2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800adb6:	f7ff ff45 	bl	800ac44 <LCD_Color2Index>
 800adba:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800adbe:	3401      	adds	r4, #1
 800adc0:	42bc      	cmp	r4, r7
 800adc2:	d1f4      	bne.n	800adae <LCD_GetpPalConvTableBM+0x32>
 800adc4:	4b08      	ldr	r3, [pc, #32]	; (800ade8 <LCD_GetpPalConvTableBM+0x6c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	b10b      	cbz	r3, 800adce <LCD_GetpPalConvTableBM+0x52>
 800adca:	4648      	mov	r0, r9
 800adcc:	4798      	blx	r3
 800adce:	f8d8 6000 	ldr.w	r6, [r8]
 800add2:	4630      	mov	r0, r6
 800add4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add8:	2600      	movs	r6, #0
 800adda:	e7fa      	b.n	800add2 <LCD_GetpPalConvTableBM+0x56>
 800addc:	4606      	mov	r6, r0
 800adde:	e7f8      	b.n	800add2 <LCD_GetpPalConvTableBM+0x56>
 800ade0:	462e      	mov	r6, r5
 800ade2:	e7f6      	b.n	800add2 <LCD_GetpPalConvTableBM+0x56>
 800ade4:	200000b4 	.word	0x200000b4
 800ade8:	20000730 	.word	0x20000730
 800adec:	20035824 	.word	0x20035824

0800adf0 <LCD_InitLUT>:
 800adf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	f000 f9da 	bl	800b1ac <LCD_GetNumLayers>
 800adf8:	f1b0 0900 	subs.w	r9, r0, #0
 800adfc:	dd2f      	ble.n	800ae5e <LCD_InitLUT+0x6e>
 800adfe:	4f19      	ldr	r7, [pc, #100]	; (800ae64 <LCD_InitLUT+0x74>)
 800ae00:	f8df b068 	ldr.w	fp, [pc, #104]	; 800ae6c <LCD_InitLUT+0x7c>
 800ae04:	2500      	movs	r5, #0
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7fe fb6e 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800ae0c:	b320      	cbz	r0, 800ae58 <LCD_InitLUT+0x68>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	4628      	mov	r0, r5
 800ae12:	f893 8011 	ldrb.w	r8, [r3, #17]
 800ae16:	745d      	strb	r5, [r3, #17]
 800ae18:	f000 f87a 	bl	800af10 <LCD_GetBitsPerPixelEx>
 800ae1c:	2808      	cmp	r0, #8
 800ae1e:	dc18      	bgt.n	800ae52 <LCD_InitLUT+0x62>
 800ae20:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800ae24:	4a10      	ldr	r2, [pc, #64]	; (800ae68 <LCD_InitLUT+0x78>)
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d012      	beq.n	800ae52 <LCD_InitLUT+0x62>
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 f87f 	bl	800af30 <LCD_GetNumColorsEx>
 800ae32:	1e06      	subs	r6, r0, #0
 800ae34:	dd0d      	ble.n	800ae52 <LCD_InitLUT+0x62>
 800ae36:	2400      	movs	r4, #0
 800ae38:	fa5f fa84 	uxtb.w	sl, r4
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	f7ff ff0f 	bl	800ac60 <LCD_Index2Color>
 800ae42:	3401      	adds	r4, #1
 800ae44:	4602      	mov	r2, r0
 800ae46:	4651      	mov	r1, sl
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f000 fa15 	bl	800b278 <LCD_SetLUTEntryEx>
 800ae4e:	42a6      	cmp	r6, r4
 800ae50:	d1f2      	bne.n	800ae38 <LCD_InitLUT+0x48>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	f883 8011 	strb.w	r8, [r3, #17]
 800ae58:	3501      	adds	r5, #1
 800ae5a:	45a9      	cmp	r9, r5
 800ae5c:	d1d3      	bne.n	800ae06 <LCD_InitLUT+0x16>
 800ae5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae62:	bf00      	nop
 800ae64:	2000007c 	.word	0x2000007c
 800ae68:	0801a410 	.word	0x0801a410
 800ae6c:	200357f4 	.word	0x200357f4

0800ae70 <LCD_GetBkColorIndex>:
 800ae70:	4b02      	ldr	r3, [pc, #8]	; (800ae7c <LCD_GetBkColorIndex+0xc>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	6818      	ldr	r0, [r3, #0]
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	2000007c 	.word	0x2000007c

0800ae80 <LCD_GetColorIndex>:
 800ae80:	4b02      	ldr	r3, [pc, #8]	; (800ae8c <LCD_GetColorIndex+0xc>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	2000007c 	.word	0x2000007c

0800ae90 <LCD_GetXSizeEx>:
 800ae90:	2801      	cmp	r0, #1
 800ae92:	dd01      	ble.n	800ae98 <LCD_GetXSizeEx+0x8>
 800ae94:	2000      	movs	r0, #0
 800ae96:	4770      	bx	lr
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	f7fe fb25 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800ae9e:	b128      	cbz	r0, 800aeac <LCD_GetXSizeEx+0x1c>
 800aea0:	68c3      	ldr	r3, [r0, #12]
 800aea2:	2101      	movs	r1, #1
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeaa:	4718      	bx	r3
 800aeac:	2000      	movs	r0, #0
 800aeae:	bd10      	pop	{r4, pc}

0800aeb0 <LCD_GetYSizeEx>:
 800aeb0:	2801      	cmp	r0, #1
 800aeb2:	dd01      	ble.n	800aeb8 <LCD_GetYSizeEx+0x8>
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	4770      	bx	lr
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	f7fe fb15 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800aebe:	b128      	cbz	r0, 800aecc <LCD_GetYSizeEx+0x1c>
 800aec0:	68c3      	ldr	r3, [r0, #12]
 800aec2:	2102      	movs	r1, #2
 800aec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeca:	4718      	bx	r3
 800aecc:	2000      	movs	r0, #0
 800aece:	bd10      	pop	{r4, pc}

0800aed0 <LCD_GetVXSizeEx>:
 800aed0:	2801      	cmp	r0, #1
 800aed2:	dd01      	ble.n	800aed8 <LCD_GetVXSizeEx+0x8>
 800aed4:	2000      	movs	r0, #0
 800aed6:	4770      	bx	lr
 800aed8:	b510      	push	{r4, lr}
 800aeda:	f7fe fb05 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800aede:	b128      	cbz	r0, 800aeec <LCD_GetVXSizeEx+0x1c>
 800aee0:	68c3      	ldr	r3, [r0, #12]
 800aee2:	2103      	movs	r1, #3
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeea:	4718      	bx	r3
 800aeec:	2000      	movs	r0, #0
 800aeee:	bd10      	pop	{r4, pc}

0800aef0 <LCD_GetVYSizeEx>:
 800aef0:	2801      	cmp	r0, #1
 800aef2:	dd01      	ble.n	800aef8 <LCD_GetVYSizeEx+0x8>
 800aef4:	2000      	movs	r0, #0
 800aef6:	4770      	bx	lr
 800aef8:	b510      	push	{r4, lr}
 800aefa:	f7fe faf5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800aefe:	b128      	cbz	r0, 800af0c <LCD_GetVYSizeEx+0x1c>
 800af00:	68c3      	ldr	r3, [r0, #12]
 800af02:	2104      	movs	r1, #4
 800af04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af0a:	4718      	bx	r3
 800af0c:	2000      	movs	r0, #0
 800af0e:	bd10      	pop	{r4, pc}

0800af10 <LCD_GetBitsPerPixelEx>:
 800af10:	2801      	cmp	r0, #1
 800af12:	dd01      	ble.n	800af18 <LCD_GetBitsPerPixelEx+0x8>
 800af14:	2000      	movs	r0, #0
 800af16:	4770      	bx	lr
 800af18:	b510      	push	{r4, lr}
 800af1a:	f7fe fae5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800af1e:	b128      	cbz	r0, 800af2c <LCD_GetBitsPerPixelEx+0x1c>
 800af20:	68c3      	ldr	r3, [r0, #12]
 800af22:	2108      	movs	r1, #8
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af2a:	4718      	bx	r3
 800af2c:	2000      	movs	r0, #0
 800af2e:	bd10      	pop	{r4, pc}

0800af30 <LCD_GetNumColorsEx>:
 800af30:	2801      	cmp	r0, #1
 800af32:	dd01      	ble.n	800af38 <LCD_GetNumColorsEx+0x8>
 800af34:	2000      	movs	r0, #0
 800af36:	4770      	bx	lr
 800af38:	b510      	push	{r4, lr}
 800af3a:	f7fe fad5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800af3e:	b128      	cbz	r0, 800af4c <LCD_GetNumColorsEx+0x1c>
 800af40:	68c3      	ldr	r3, [r0, #12]
 800af42:	2109      	movs	r1, #9
 800af44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af4a:	4718      	bx	r3
 800af4c:	2000      	movs	r0, #0
 800af4e:	bd10      	pop	{r4, pc}

0800af50 <LCD_GetMirrorXEx>:
 800af50:	2801      	cmp	r0, #1
 800af52:	dd01      	ble.n	800af58 <LCD_GetMirrorXEx+0x8>
 800af54:	2000      	movs	r0, #0
 800af56:	4770      	bx	lr
 800af58:	b510      	push	{r4, lr}
 800af5a:	f7fe fac5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800af5e:	b128      	cbz	r0, 800af6c <LCD_GetMirrorXEx+0x1c>
 800af60:	68c3      	ldr	r3, [r0, #12]
 800af62:	210c      	movs	r1, #12
 800af64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6a:	4718      	bx	r3
 800af6c:	2000      	movs	r0, #0
 800af6e:	bd10      	pop	{r4, pc}

0800af70 <LCD_GetMirrorYEx>:
 800af70:	2801      	cmp	r0, #1
 800af72:	dd01      	ble.n	800af78 <LCD_GetMirrorYEx+0x8>
 800af74:	2000      	movs	r0, #0
 800af76:	4770      	bx	lr
 800af78:	b510      	push	{r4, lr}
 800af7a:	f7fe fab5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800af7e:	b128      	cbz	r0, 800af8c <LCD_GetMirrorYEx+0x1c>
 800af80:	68c3      	ldr	r3, [r0, #12]
 800af82:	210d      	movs	r1, #13
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af8a:	4718      	bx	r3
 800af8c:	2000      	movs	r0, #0
 800af8e:	bd10      	pop	{r4, pc}

0800af90 <LCD_GetSwapXYEx>:
 800af90:	2801      	cmp	r0, #1
 800af92:	dd01      	ble.n	800af98 <LCD_GetSwapXYEx+0x8>
 800af94:	2000      	movs	r0, #0
 800af96:	4770      	bx	lr
 800af98:	b510      	push	{r4, lr}
 800af9a:	f7fe faa5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800af9e:	b128      	cbz	r0, 800afac <LCD_GetSwapXYEx+0x1c>
 800afa0:	68c3      	ldr	r3, [r0, #12]
 800afa2:	210e      	movs	r1, #14
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afaa:	4718      	bx	r3
 800afac:	2000      	movs	r0, #0
 800afae:	bd10      	pop	{r4, pc}

0800afb0 <LCD_GetXSize>:
 800afb0:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <LCD_GetXSize+0x28>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	7c58      	ldrb	r0, [r3, #17]
 800afb6:	2801      	cmp	r0, #1
 800afb8:	dd01      	ble.n	800afbe <LCD_GetXSize+0xe>
 800afba:	2000      	movs	r0, #0
 800afbc:	4770      	bx	lr
 800afbe:	b510      	push	{r4, lr}
 800afc0:	f7fe fa92 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800afc4:	b128      	cbz	r0, 800afd2 <LCD_GetXSize+0x22>
 800afc6:	68c3      	ldr	r3, [r0, #12]
 800afc8:	2101      	movs	r1, #1
 800afca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd0:	4718      	bx	r3
 800afd2:	2000      	movs	r0, #0
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	bf00      	nop
 800afd8:	2000007c 	.word	0x2000007c

0800afdc <LCD_GetYSize>:
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <LCD_GetYSize+0x28>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	7c58      	ldrb	r0, [r3, #17]
 800afe2:	2801      	cmp	r0, #1
 800afe4:	dd01      	ble.n	800afea <LCD_GetYSize+0xe>
 800afe6:	2000      	movs	r0, #0
 800afe8:	4770      	bx	lr
 800afea:	b510      	push	{r4, lr}
 800afec:	f7fe fa7c 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800aff0:	b128      	cbz	r0, 800affe <LCD_GetYSize+0x22>
 800aff2:	68c3      	ldr	r3, [r0, #12]
 800aff4:	2102      	movs	r1, #2
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affc:	4718      	bx	r3
 800affe:	2000      	movs	r0, #0
 800b000:	bd10      	pop	{r4, pc}
 800b002:	bf00      	nop
 800b004:	2000007c 	.word	0x2000007c

0800b008 <LCD_GetNumColors>:
 800b008:	4b09      	ldr	r3, [pc, #36]	; (800b030 <LCD_GetNumColors+0x28>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	7c58      	ldrb	r0, [r3, #17]
 800b00e:	2801      	cmp	r0, #1
 800b010:	dd01      	ble.n	800b016 <LCD_GetNumColors+0xe>
 800b012:	2000      	movs	r0, #0
 800b014:	4770      	bx	lr
 800b016:	b510      	push	{r4, lr}
 800b018:	f7fe fa66 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b01c:	b128      	cbz	r0, 800b02a <LCD_GetNumColors+0x22>
 800b01e:	68c3      	ldr	r3, [r0, #12]
 800b020:	2109      	movs	r1, #9
 800b022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b028:	4718      	bx	r3
 800b02a:	2000      	movs	r0, #0
 800b02c:	bd10      	pop	{r4, pc}
 800b02e:	bf00      	nop
 800b030:	2000007c 	.word	0x2000007c

0800b034 <GUI_GetBitsPerPixelEx>:
 800b034:	4b03      	ldr	r3, [pc, #12]	; (800b044 <GUI_GetBitsPerPixelEx+0x10>)
 800b036:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b03a:	68c3      	ldr	r3, [r0, #12]
 800b03c:	2108      	movs	r1, #8
 800b03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b040:	4718      	bx	r3
 800b042:	bf00      	nop
 800b044:	200357f4 	.word	0x200357f4

0800b048 <LCD_GetPalette>:
 800b048:	b510      	push	{r4, lr}
 800b04a:	4b06      	ldr	r3, [pc, #24]	; (800b064 <LCD_GetPalette+0x1c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	7c58      	ldrb	r0, [r3, #17]
 800b050:	f7fe fa4a 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b054:	b128      	cbz	r0, 800b062 <LCD_GetPalette+0x1a>
 800b056:	68c3      	ldr	r3, [r0, #12]
 800b058:	2102      	movs	r1, #2
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b060:	4718      	bx	r3
 800b062:	bd10      	pop	{r4, pc}
 800b064:	2000007c 	.word	0x2000007c

0800b068 <GUI_GetpfIndex2ColorEx>:
 800b068:	4b02      	ldr	r3, [pc, #8]	; (800b074 <GUI_GetpfIndex2ColorEx+0xc>)
 800b06a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	6858      	ldr	r0, [r3, #4]
 800b072:	4770      	bx	lr
 800b074:	200357f4 	.word	0x200357f4

0800b078 <GUI_GetpfColor2IndexEx>:
 800b078:	4b02      	ldr	r3, [pc, #8]	; (800b084 <GUI_GetpfColor2IndexEx+0xc>)
 800b07a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	4770      	bx	lr
 800b084:	200357f4 	.word	0x200357f4

0800b088 <LCD_GetXSizeMax>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	2501      	movs	r5, #1
 800b08c:	4628      	mov	r0, r5
 800b08e:	f7fe fa2b 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b092:	2400      	movs	r4, #0
 800b094:	2101      	movs	r1, #1
 800b096:	b178      	cbz	r0, 800b0b8 <LCD_GetXSizeMax+0x30>
 800b098:	68c3      	ldr	r3, [r0, #12]
 800b09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09c:	4798      	blx	r3
 800b09e:	4284      	cmp	r4, r0
 800b0a0:	bfb8      	it	lt
 800b0a2:	4604      	movlt	r4, r0
 800b0a4:	b90d      	cbnz	r5, 800b0aa <LCD_GetXSizeMax+0x22>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	bd38      	pop	{r3, r4, r5, pc}
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f7fe fa1b 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d1ef      	bne.n	800b098 <LCD_GetXSizeMax+0x10>
 800b0b8:	e7f1      	b.n	800b09e <LCD_GetXSizeMax+0x16>
 800b0ba:	bf00      	nop

0800b0bc <LCD_GetYSizeMax>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	2501      	movs	r5, #1
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f7fe fa11 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b0c6:	2400      	movs	r4, #0
 800b0c8:	2102      	movs	r1, #2
 800b0ca:	b178      	cbz	r0, 800b0ec <LCD_GetYSizeMax+0x30>
 800b0cc:	68c3      	ldr	r3, [r0, #12]
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	4798      	blx	r3
 800b0d2:	4284      	cmp	r4, r0
 800b0d4:	bfb8      	it	lt
 800b0d6:	4604      	movlt	r4, r0
 800b0d8:	b90d      	cbnz	r5, 800b0de <LCD_GetYSizeMax+0x22>
 800b0da:	4620      	mov	r0, r4
 800b0dc:	bd38      	pop	{r3, r4, r5, pc}
 800b0de:	2500      	movs	r5, #0
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f7fe fa01 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b0e6:	2102      	movs	r1, #2
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d1ef      	bne.n	800b0cc <LCD_GetYSizeMax+0x10>
 800b0ec:	e7f1      	b.n	800b0d2 <LCD_GetYSizeMax+0x16>
 800b0ee:	bf00      	nop

0800b0f0 <LCD_GetVXSizeMax>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	2501      	movs	r5, #1
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7fe f9f7 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	2103      	movs	r1, #3
 800b0fe:	b178      	cbz	r0, 800b120 <LCD_GetVXSizeMax+0x30>
 800b100:	68c3      	ldr	r3, [r0, #12]
 800b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b104:	4798      	blx	r3
 800b106:	4284      	cmp	r4, r0
 800b108:	bfb8      	it	lt
 800b10a:	4604      	movlt	r4, r0
 800b10c:	b90d      	cbnz	r5, 800b112 <LCD_GetVXSizeMax+0x22>
 800b10e:	4620      	mov	r0, r4
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	2500      	movs	r5, #0
 800b114:	4628      	mov	r0, r5
 800b116:	f7fe f9e7 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b11a:	2103      	movs	r1, #3
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1ef      	bne.n	800b100 <LCD_GetVXSizeMax+0x10>
 800b120:	e7f1      	b.n	800b106 <LCD_GetVXSizeMax+0x16>
 800b122:	bf00      	nop

0800b124 <LCD_SetDisplaySize>:
 800b124:	4b01      	ldr	r3, [pc, #4]	; (800b12c <LCD_SetDisplaySize+0x8>)
 800b126:	e883 0003 	stmia.w	r3, {r0, r1}
 800b12a:	4770      	bx	lr
 800b12c:	2000073c 	.word	0x2000073c

0800b130 <LCD_GetXSizeDisplay>:
 800b130:	4b01      	ldr	r3, [pc, #4]	; (800b138 <LCD_GetXSizeDisplay+0x8>)
 800b132:	6818      	ldr	r0, [r3, #0]
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	2000073c 	.word	0x2000073c

0800b13c <LCD_GetYSizeDisplay>:
 800b13c:	4b01      	ldr	r3, [pc, #4]	; (800b144 <LCD_GetYSizeDisplay+0x8>)
 800b13e:	6858      	ldr	r0, [r3, #4]
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	2000073c 	.word	0x2000073c

0800b148 <LCD__GetBPPDevice>:
 800b148:	b1c8      	cbz	r0, 800b17e <LCD__GetBPPDevice+0x36>
 800b14a:	f030 0301 	bics.w	r3, r0, #1
 800b14e:	d017      	beq.n	800b180 <LCD__GetBPPDevice+0x38>
 800b150:	f030 0303 	bics.w	r3, r0, #3
 800b154:	d101      	bne.n	800b15a <LCD__GetBPPDevice+0x12>
 800b156:	2008      	movs	r0, #8
 800b158:	4770      	bx	lr
 800b15a:	f030 0307 	bics.w	r3, r0, #7
 800b15e:	d0fa      	beq.n	800b156 <LCD__GetBPPDevice+0xe>
 800b160:	f030 030f 	bics.w	r3, r0, #15
 800b164:	d0f7      	beq.n	800b156 <LCD__GetBPPDevice+0xe>
 800b166:	f030 031f 	bics.w	r3, r0, #31
 800b16a:	d0f4      	beq.n	800b156 <LCD__GetBPPDevice+0xe>
 800b16c:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b170:	d0f1      	beq.n	800b156 <LCD__GetBPPDevice+0xe>
 800b172:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b176:	f023 0301 	bic.w	r3, r3, #1
 800b17a:	b91b      	cbnz	r3, 800b184 <LCD__GetBPPDevice+0x3c>
 800b17c:	2010      	movs	r0, #16
 800b17e:	4770      	bx	lr
 800b180:	2001      	movs	r0, #1
 800b182:	4770      	bx	lr
 800b184:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800b188:	f023 030f 	bic.w	r3, r3, #15
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0f5      	beq.n	800b17c <LCD__GetBPPDevice+0x34>
 800b190:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800b194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0ef      	beq.n	800b17c <LCD__GetBPPDevice+0x34>
 800b19c:	0c00      	lsrs	r0, r0, #16
 800b19e:	0400      	lsls	r0, r0, #16
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	bf0c      	ite	eq
 800b1a4:	2010      	moveq	r0, #16
 800b1a6:	2020      	movne	r0, #32
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop

0800b1ac <LCD_GetNumLayers>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f7fe f99a 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b1b4:	1c04      	adds	r4, r0, #0
 800b1b6:	f04f 0001 	mov.w	r0, #1
 800b1ba:	bf18      	it	ne
 800b1bc:	2401      	movne	r4, #1
 800b1be:	f7fe f993 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b1c2:	b100      	cbz	r0, 800b1c6 <LCD_GetNumLayers+0x1a>
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	bf00      	nop

0800b1cc <LCD_SelectLCD>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4c0e      	ldr	r4, [pc, #56]	; (800b208 <LCD_SelectLCD+0x3c>)
 800b1d0:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <LCD_SelectLCD+0x40>)
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	7c51      	ldrb	r1, [r2, #17]
 800b1d6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800b1da:	b138      	cbz	r0, 800b1ec <LCD_SelectLCD+0x20>
 800b1dc:	68c3      	ldr	r3, [r0, #12]
 800b1de:	b113      	cbz	r3, 800b1e6 <LCD_SelectLCD+0x1a>
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d00b      	beq.n	800b1fe <LCD_SelectLCD+0x32>
 800b1e6:	6800      	ldr	r0, [r0, #0]
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d1f7      	bne.n	800b1dc <LCD_SelectLCD+0x10>
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f102 0308 	add.w	r3, r2, #8
 800b1f2:	6611      	str	r1, [r2, #96]	; 0x60
 800b1f4:	6153      	str	r3, [r2, #20]
 800b1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1fa:	f7ff bc8d 	b.w	800ab18 <LCD_SetClipRectMax>
 800b1fe:	f7fe f9b3 	bl	8009568 <GUI_DEVICE_Unlink>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	e7f2      	b.n	800b1ec <LCD_SelectLCD+0x20>
 800b206:	bf00      	nop
 800b208:	2000007c 	.word	0x2000007c
 800b20c:	200357f4 	.word	0x200357f4

0800b210 <LCD_GetPosEx>:
 800b210:	b530      	push	{r4, r5, lr}
 800b212:	b083      	sub	sp, #12
 800b214:	460c      	mov	r4, r1
 800b216:	4615      	mov	r5, r2
 800b218:	f7fe f966 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b21c:	9001      	str	r0, [sp, #4]
 800b21e:	b170      	cbz	r0, 800b23e <LCD_GetPosEx+0x2e>
 800b220:	68c3      	ldr	r3, [r0, #12]
 800b222:	2104      	movs	r1, #4
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	eb0d 0001 	add.w	r0, sp, r1
 800b22a:	4798      	blx	r3
 800b22c:	4603      	mov	r3, r0
 800b22e:	b130      	cbz	r0, 800b23e <LCD_GetPosEx+0x2e>
 800b230:	9801      	ldr	r0, [sp, #4]
 800b232:	462a      	mov	r2, r5
 800b234:	4621      	mov	r1, r4
 800b236:	4798      	blx	r3
 800b238:	2000      	movs	r0, #0
 800b23a:	b003      	add	sp, #12
 800b23c:	bd30      	pop	{r4, r5, pc}
 800b23e:	2001      	movs	r0, #1
 800b240:	b003      	add	sp, #12
 800b242:	bd30      	pop	{r4, r5, pc}

0800b244 <LCD_SetDevFunc>:
 800b244:	b530      	push	{r4, r5, lr}
 800b246:	b083      	sub	sp, #12
 800b248:	460c      	mov	r4, r1
 800b24a:	4615      	mov	r5, r2
 800b24c:	f7fe f94c 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b250:	9001      	str	r0, [sp, #4]
 800b252:	b168      	cbz	r0, 800b270 <LCD_SetDevFunc+0x2c>
 800b254:	68c3      	ldr	r3, [r0, #12]
 800b256:	2116      	movs	r1, #22
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	a801      	add	r0, sp, #4
 800b25c:	4798      	blx	r3
 800b25e:	4603      	mov	r3, r0
 800b260:	b130      	cbz	r0, 800b270 <LCD_SetDevFunc+0x2c>
 800b262:	9801      	ldr	r0, [sp, #4]
 800b264:	462a      	mov	r2, r5
 800b266:	4621      	mov	r1, r4
 800b268:	4798      	blx	r3
 800b26a:	2000      	movs	r0, #0
 800b26c:	b003      	add	sp, #12
 800b26e:	bd30      	pop	{r4, r5, pc}
 800b270:	2001      	movs	r0, #1
 800b272:	b003      	add	sp, #12
 800b274:	bd30      	pop	{r4, r5, pc}
 800b276:	bf00      	nop

0800b278 <LCD_SetLUTEntryEx>:
 800b278:	b530      	push	{r4, r5, lr}
 800b27a:	b083      	sub	sp, #12
 800b27c:	460c      	mov	r4, r1
 800b27e:	4615      	mov	r5, r2
 800b280:	f7fe f932 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b284:	9001      	str	r0, [sp, #4]
 800b286:	b168      	cbz	r0, 800b2a4 <LCD_SetLUTEntryEx+0x2c>
 800b288:	68c3      	ldr	r3, [r0, #12]
 800b28a:	2110      	movs	r1, #16
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	a801      	add	r0, sp, #4
 800b290:	4798      	blx	r3
 800b292:	4603      	mov	r3, r0
 800b294:	b130      	cbz	r0, 800b2a4 <LCD_SetLUTEntryEx+0x2c>
 800b296:	9801      	ldr	r0, [sp, #4]
 800b298:	462a      	mov	r2, r5
 800b29a:	4621      	mov	r1, r4
 800b29c:	4798      	blx	r3
 800b29e:	2000      	movs	r0, #0
 800b2a0:	b003      	add	sp, #12
 800b2a2:	bd30      	pop	{r4, r5, pc}
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	b003      	add	sp, #12
 800b2a8:	bd30      	pop	{r4, r5, pc}
 800b2aa:	bf00      	nop

0800b2ac <LCD_SetPosEx>:
 800b2ac:	b530      	push	{r4, r5, lr}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	4615      	mov	r5, r2
 800b2b4:	f7fe f918 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b2b8:	9001      	str	r0, [sp, #4]
 800b2ba:	b168      	cbz	r0, 800b2d8 <LCD_SetPosEx+0x2c>
 800b2bc:	68c3      	ldr	r3, [r0, #12]
 800b2be:	2103      	movs	r1, #3
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	a801      	add	r0, sp, #4
 800b2c4:	4798      	blx	r3
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	b130      	cbz	r0, 800b2d8 <LCD_SetPosEx+0x2c>
 800b2ca:	9801      	ldr	r0, [sp, #4]
 800b2cc:	462a      	mov	r2, r5
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4798      	blx	r3
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	b003      	add	sp, #12
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	2001      	movs	r0, #1
 800b2da:	b003      	add	sp, #12
 800b2dc:	bd30      	pop	{r4, r5, pc}
 800b2de:	bf00      	nop

0800b2e0 <LCD_SetSizeEx>:
 800b2e0:	b530      	push	{r4, r5, lr}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	4615      	mov	r5, r2
 800b2e8:	f7fe f8fe 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b2ec:	9001      	str	r0, [sp, #4]
 800b2ee:	b168      	cbz	r0, 800b30c <LCD_SetSizeEx+0x2c>
 800b2f0:	68c3      	ldr	r3, [r0, #12]
 800b2f2:	210b      	movs	r1, #11
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	a801      	add	r0, sp, #4
 800b2f8:	4798      	blx	r3
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	b130      	cbz	r0, 800b30c <LCD_SetSizeEx+0x2c>
 800b2fe:	9801      	ldr	r0, [sp, #4]
 800b300:	462a      	mov	r2, r5
 800b302:	4621      	mov	r1, r4
 800b304:	4798      	blx	r3
 800b306:	2000      	movs	r0, #0
 800b308:	b003      	add	sp, #12
 800b30a:	bd30      	pop	{r4, r5, pc}
 800b30c:	2001      	movs	r0, #1
 800b30e:	b003      	add	sp, #12
 800b310:	bd30      	pop	{r4, r5, pc}
 800b312:	bf00      	nop

0800b314 <LCD_SetVisEx>:
 800b314:	b510      	push	{r4, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	460c      	mov	r4, r1
 800b31a:	f7fe f8e5 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b31e:	9001      	str	r0, [sp, #4]
 800b320:	b160      	cbz	r0, 800b33c <LCD_SetVisEx+0x28>
 800b322:	68c3      	ldr	r3, [r0, #12]
 800b324:	2106      	movs	r1, #6
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	a801      	add	r0, sp, #4
 800b32a:	4798      	blx	r3
 800b32c:	4603      	mov	r3, r0
 800b32e:	b128      	cbz	r0, 800b33c <LCD_SetVisEx+0x28>
 800b330:	9801      	ldr	r0, [sp, #4]
 800b332:	4621      	mov	r1, r4
 800b334:	4798      	blx	r3
 800b336:	2000      	movs	r0, #0
 800b338:	b002      	add	sp, #8
 800b33a:	bd10      	pop	{r4, pc}
 800b33c:	2001      	movs	r0, #1
 800b33e:	b002      	add	sp, #8
 800b340:	bd10      	pop	{r4, pc}
 800b342:	bf00      	nop

0800b344 <LCD_SetVRAMAddrEx>:
 800b344:	b510      	push	{r4, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	460c      	mov	r4, r1
 800b34a:	f7fe f8cd 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b34e:	9001      	str	r0, [sp, #4]
 800b350:	b160      	cbz	r0, 800b36c <LCD_SetVRAMAddrEx+0x28>
 800b352:	68c3      	ldr	r3, [r0, #12]
 800b354:	2109      	movs	r1, #9
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	a801      	add	r0, sp, #4
 800b35a:	4798      	blx	r3
 800b35c:	4603      	mov	r3, r0
 800b35e:	b128      	cbz	r0, 800b36c <LCD_SetVRAMAddrEx+0x28>
 800b360:	9801      	ldr	r0, [sp, #4]
 800b362:	4621      	mov	r1, r4
 800b364:	4798      	blx	r3
 800b366:	2000      	movs	r0, #0
 800b368:	b002      	add	sp, #8
 800b36a:	bd10      	pop	{r4, pc}
 800b36c:	2001      	movs	r0, #1
 800b36e:	b002      	add	sp, #8
 800b370:	bd10      	pop	{r4, pc}
 800b372:	bf00      	nop

0800b374 <LCD_SetVSizeEx>:
 800b374:	b530      	push	{r4, r5, lr}
 800b376:	b083      	sub	sp, #12
 800b378:	460c      	mov	r4, r1
 800b37a:	4615      	mov	r5, r2
 800b37c:	f7fe f8b4 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800b380:	9001      	str	r0, [sp, #4]
 800b382:	b168      	cbz	r0, 800b3a0 <LCD_SetVSizeEx+0x2c>
 800b384:	68c3      	ldr	r3, [r0, #12]
 800b386:	210a      	movs	r1, #10
 800b388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38a:	a801      	add	r0, sp, #4
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	b130      	cbz	r0, 800b3a0 <LCD_SetVSizeEx+0x2c>
 800b392:	9801      	ldr	r0, [sp, #4]
 800b394:	462a      	mov	r2, r5
 800b396:	4621      	mov	r1, r4
 800b398:	4798      	blx	r3
 800b39a:	2000      	movs	r0, #0
 800b39c:	b003      	add	sp, #12
 800b39e:	bd30      	pop	{r4, r5, pc}
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	b003      	add	sp, #12
 800b3a4:	bd30      	pop	{r4, r5, pc}
 800b3a6:	bf00      	nop

0800b3a8 <LCD_UpdateColorIndices>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	4c07      	ldr	r4, [pc, #28]	; (800b3c8 <LCD_UpdateColorIndices+0x20>)
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3b0:	f7ff fc48 	bl	800ac44 <LCD_Color2Index>
 800b3b4:	f7ff fc62 	bl	800ac7c <LCD_SetColorIndex>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b3bc:	f7ff fc42 	bl	800ac44 <LCD_Color2Index>
 800b3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c4:	f7ff bc66 	b.w	800ac94 <LCD_SetBkColorIndex>
 800b3c8:	2000007c 	.word	0x2000007c

0800b3cc <_GetRect>:
 800b3cc:	6883      	ldr	r3, [r0, #8]
 800b3ce:	699a      	ldr	r2, [r3, #24]
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	3a01      	subs	r2, #1
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	808a      	strh	r2, [r1, #4]
 800b3da:	80cb      	strh	r3, [r1, #6]
 800b3dc:	8008      	strh	r0, [r1, #0]
 800b3de:	8048      	strh	r0, [r1, #2]
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop

0800b3e4 <_SetPixelIndex>:
 800b3e4:	b410      	push	{r4}
 800b3e6:	6884      	ldr	r4, [r0, #8]
 800b3e8:	6a20      	ldr	r0, [r4, #32]
 800b3ea:	6824      	ldr	r4, [r4, #0]
 800b3ec:	fb00 1202 	mla	r2, r0, r2, r1
 800b3f0:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 800b3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop

0800b3fc <_GetPixelIndex>:
 800b3fc:	6880      	ldr	r0, [r0, #8]
 800b3fe:	6a03      	ldr	r3, [r0, #32]
 800b400:	6800      	ldr	r0, [r0, #0]
 800b402:	fb03 1202 	mla	r2, r3, r2, r1
 800b406:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 800b40a:	4770      	bx	lr

0800b40c <_XorPixel>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	460f      	mov	r7, r1
 800b410:	6881      	ldr	r1, [r0, #8]
 800b412:	6904      	ldr	r4, [r0, #16]
 800b414:	6a0b      	ldr	r3, [r1, #32]
 800b416:	4606      	mov	r6, r0
 800b418:	fb03 7302 	mla	r3, r3, r2, r7
 800b41c:	6808      	ldr	r0, [r1, #0]
 800b41e:	68a1      	ldr	r1, [r4, #8]
 800b420:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
 800b424:	4614      	mov	r4, r2
 800b426:	4788      	blx	r1
 800b428:	68b3      	ldr	r3, [r6, #8]
 800b42a:	6a19      	ldr	r1, [r3, #32]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	fb01 7404 	mla	r4, r1, r4, r7
 800b432:	4068      	eors	r0, r5
 800b434:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 800b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b43a:	bf00      	nop

0800b43c <_GetDevProp>:
 800b43c:	3901      	subs	r1, #1
 800b43e:	6883      	ldr	r3, [r0, #8]
 800b440:	290d      	cmp	r1, #13
 800b442:	d816      	bhi.n	800b472 <_GetDevProp+0x36>
 800b444:	e8df f001 	tbb	[pc, r1]
 800b448:	0d13110f 	.word	0x0d13110f
 800b44c:	0b151515 	.word	0x0b151515
 800b450:	07090907 	.word	0x07090907
 800b454:	0707      	.short	0x0707
 800b456:	2000      	movs	r0, #0
 800b458:	4770      	bx	lr
 800b45a:	2001      	movs	r0, #1
 800b45c:	4770      	bx	lr
 800b45e:	2010      	movs	r0, #16
 800b460:	4770      	bx	lr
 800b462:	69d8      	ldr	r0, [r3, #28]
 800b464:	4770      	bx	lr
 800b466:	6918      	ldr	r0, [r3, #16]
 800b468:	4770      	bx	lr
 800b46a:	6958      	ldr	r0, [r3, #20]
 800b46c:	4770      	bx	lr
 800b46e:	6998      	ldr	r0, [r3, #24]
 800b470:	4770      	bx	lr
 800b472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b476:	4770      	bx	lr

0800b478 <_GetDevData>:
 800b478:	2901      	cmp	r1, #1
 800b47a:	4802      	ldr	r0, [pc, #8]	; (800b484 <_GetDevData+0xc>)
 800b47c:	bf18      	it	ne
 800b47e:	2000      	movne	r0, #0
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	0801a394 	.word	0x0801a394

0800b488 <_ReadRect>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	6880      	ldr	r0, [r0, #8]
 800b48e:	b085      	sub	sp, #20
 800b490:	1a5b      	subs	r3, r3, r1
 800b492:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800b496:	f8d0 c000 	ldr.w	ip, [r0]
 800b49a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b49c:	1e5c      	subs	r4, r3, #1
 800b49e:	f103 0e01 	add.w	lr, r3, #1
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	0864      	lsrs	r4, r4, #1
 800b4a6:	9303      	str	r3, [sp, #12]
 800b4a8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800b4ac:	1c66      	adds	r6, r4, #1
 800b4ae:	fb08 1702 	mla	r7, r8, r2, r1
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800b4b8:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800b4bc:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800b4c0:	eb0c 0547 	add.w	r5, ip, r7, lsl #1
 800b4c4:	9302      	str	r3, [sp, #8]
 800b4c6:	1d03      	adds	r3, r0, #4
 800b4c8:	42ab      	cmp	r3, r5
 800b4ca:	bf8c      	ite	hi
 800b4cc:	2300      	movhi	r3, #0
 800b4ce:	2301      	movls	r3, #1
 800b4d0:	1d29      	adds	r1, r5, #4
 800b4d2:	4288      	cmp	r0, r1
 800b4d4:	bf28      	it	cs
 800b4d6:	f043 0301 	orrcs.w	r3, r3, #1
 800b4da:	b36b      	cbz	r3, 800b538 <_ReadRect+0xb0>
 800b4dc:	ea40 0305 	orr.w	r3, r0, r5
 800b4e0:	f1be 0f0c 	cmp.w	lr, #12
 800b4e4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b4e8:	bf94      	ite	ls
 800b4ea:	2100      	movls	r1, #0
 800b4ec:	2101      	movhi	r1, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bf18      	it	ne
 800b4f2:	2100      	movne	r1, #0
 800b4f4:	b301      	cbz	r1, 800b538 <_ReadRect+0xb0>
 800b4f6:	1f2c      	subs	r4, r5, #4
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	4693      	mov	fp, r2
 800b4fe:	3301      	adds	r3, #1
 800b500:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800b504:	f841 2b04 	str.w	r2, [r1], #4
 800b508:	429e      	cmp	r6, r3
 800b50a:	d8f8      	bhi.n	800b4fe <_ReadRect+0x76>
 800b50c:	45d6      	cmp	lr, sl
 800b50e:	465a      	mov	r2, fp
 800b510:	eb07 030a 	add.w	r3, r7, sl
 800b514:	d003      	beq.n	800b51e <_ReadRect+0x96>
 800b516:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 800b51a:	f820 3009 	strh.w	r3, [r0, r9]
 800b51e:	9901      	ldr	r1, [sp, #4]
 800b520:	4408      	add	r0, r1
 800b522:	9902      	ldr	r1, [sp, #8]
 800b524:	3201      	adds	r2, #1
 800b526:	440d      	add	r5, r1
 800b528:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b52a:	1e53      	subs	r3, r2, #1
 800b52c:	4299      	cmp	r1, r3
 800b52e:	4447      	add	r7, r8
 800b530:	dcc9      	bgt.n	800b4c6 <_ReadRect+0x3e>
 800b532:	b005      	add	sp, #20
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	9903      	ldr	r1, [sp, #12]
 800b53a:	1e83      	subs	r3, r0, #2
 800b53c:	eb00 0b01 	add.w	fp, r0, r1
 800b540:	4629      	mov	r1, r5
 800b542:	f831 4b02 	ldrh.w	r4, [r1], #2
 800b546:	f823 4f02 	strh.w	r4, [r3, #2]!
 800b54a:	455b      	cmp	r3, fp
 800b54c:	d1f9      	bne.n	800b542 <_ReadRect+0xba>
 800b54e:	e7e6      	b.n	800b51e <_ReadRect+0x96>

0800b550 <_GetDevFunc>:
 800b550:	3901      	subs	r1, #1
 800b552:	2928      	cmp	r1, #40	; 0x28
 800b554:	d84a      	bhi.n	800b5ec <_GetDevFunc+0x9c>
 800b556:	e8df f001 	tbb	[pc, r1]
 800b55a:	1d1f      	.short	0x1d1f
 800b55c:	1749191b 	.word	0x1749191b
 800b560:	47154949 	.word	0x47154949
 800b564:	41494345 	.word	0x41494345
 800b568:	4949493f 	.word	0x4949493f
 800b56c:	37393b3d 	.word	0x37393b3d
 800b570:	49334949 	.word	0x49334949
 800b574:	49494949 	.word	0x49494949
 800b578:	2b2d2f49 	.word	0x2b2d2f49
 800b57c:	49234927 	.word	0x49234927
 800b580:	4949      	.short	0x4949
 800b582:	21          	.byte	0x21
 800b583:	00          	.byte	0x00
 800b584:	481a      	ldr	r0, [pc, #104]	; (800b5f0 <_GetDevFunc+0xa0>)
 800b586:	4770      	bx	lr
 800b588:	481a      	ldr	r0, [pc, #104]	; (800b5f4 <_GetDevFunc+0xa4>)
 800b58a:	4770      	bx	lr
 800b58c:	481a      	ldr	r0, [pc, #104]	; (800b5f8 <_GetDevFunc+0xa8>)
 800b58e:	4770      	bx	lr
 800b590:	481a      	ldr	r0, [pc, #104]	; (800b5fc <_GetDevFunc+0xac>)
 800b592:	4770      	bx	lr
 800b594:	481a      	ldr	r0, [pc, #104]	; (800b600 <_GetDevFunc+0xb0>)
 800b596:	4770      	bx	lr
 800b598:	481a      	ldr	r0, [pc, #104]	; (800b604 <_GetDevFunc+0xb4>)
 800b59a:	4770      	bx	lr
 800b59c:	481a      	ldr	r0, [pc, #104]	; (800b608 <_GetDevFunc+0xb8>)
 800b59e:	4770      	bx	lr
 800b5a0:	6803      	ldr	r3, [r0, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b5a6:	4770      	bx	lr
 800b5a8:	6803      	ldr	r3, [r0, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800b5ae:	4770      	bx	lr
 800b5b0:	4816      	ldr	r0, [pc, #88]	; (800b60c <_GetDevFunc+0xbc>)
 800b5b2:	4770      	bx	lr
 800b5b4:	4816      	ldr	r0, [pc, #88]	; (800b610 <_GetDevFunc+0xc0>)
 800b5b6:	4770      	bx	lr
 800b5b8:	6803      	ldr	r3, [r0, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b5be:	4770      	bx	lr
 800b5c0:	6803      	ldr	r3, [r0, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5c6:	4770      	bx	lr
 800b5c8:	4812      	ldr	r0, [pc, #72]	; (800b614 <_GetDevFunc+0xc4>)
 800b5ca:	4770      	bx	lr
 800b5cc:	4812      	ldr	r0, [pc, #72]	; (800b618 <_GetDevFunc+0xc8>)
 800b5ce:	4770      	bx	lr
 800b5d0:	4812      	ldr	r0, [pc, #72]	; (800b61c <_GetDevFunc+0xcc>)
 800b5d2:	4770      	bx	lr
 800b5d4:	4812      	ldr	r0, [pc, #72]	; (800b620 <_GetDevFunc+0xd0>)
 800b5d6:	4770      	bx	lr
 800b5d8:	4812      	ldr	r0, [pc, #72]	; (800b624 <_GetDevFunc+0xd4>)
 800b5da:	4770      	bx	lr
 800b5dc:	4812      	ldr	r0, [pc, #72]	; (800b628 <_GetDevFunc+0xd8>)
 800b5de:	4770      	bx	lr
 800b5e0:	4812      	ldr	r0, [pc, #72]	; (800b62c <_GetDevFunc+0xdc>)
 800b5e2:	4770      	bx	lr
 800b5e4:	4812      	ldr	r0, [pc, #72]	; (800b630 <_GetDevFunc+0xe0>)
 800b5e6:	4770      	bx	lr
 800b5e8:	4812      	ldr	r0, [pc, #72]	; (800b634 <_GetDevFunc+0xe4>)
 800b5ea:	4770      	bx	lr
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	4770      	bx	lr
 800b5f0:	0800c279 	.word	0x0800c279
 800b5f4:	0800c239 	.word	0x0800c239
 800b5f8:	0800c18d 	.word	0x0800c18d
 800b5fc:	0800c445 	.word	0x0800c445
 800b600:	0800c1f9 	.word	0x0800c1f9
 800b604:	0800b489 	.word	0x0800b489
 800b608:	0800c161 	.word	0x0800c161
 800b60c:	0800c1bd 	.word	0x0800c1bd
 800b610:	0800c3bd 	.word	0x0800c3bd
 800b614:	0800c34d 	.word	0x0800c34d
 800b618:	0800b639 	.word	0x0800b639
 800b61c:	0800b651 	.word	0x0800b651
 800b620:	0800b669 	.word	0x0800b669
 800b624:	0800b681 	.word	0x0800b681
 800b628:	0800b68d 	.word	0x0800b68d
 800b62c:	0800c131 	.word	0x0800c131
 800b630:	0800c2f1 	.word	0x0800c2f1
 800b634:	0800c2b9 	.word	0x0800c2b9

0800b638 <_SetChroma>:
 800b638:	b500      	push	{lr}
 800b63a:	b083      	sub	sp, #12
 800b63c:	e88d 0006 	stmia.w	sp, {r1, r2}
 800b640:	6980      	ldr	r0, [r0, #24]
 800b642:	466a      	mov	r2, sp
 800b644:	210d      	movs	r1, #13
 800b646:	f7fc f87f 	bl	8007748 <LCD_X_DisplayDriver>
 800b64a:	b003      	add	sp, #12
 800b64c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b650 <_SetChromaMode>:
 800b650:	b500      	push	{lr}
 800b652:	b083      	sub	sp, #12
 800b654:	aa02      	add	r2, sp, #8
 800b656:	6980      	ldr	r0, [r0, #24]
 800b658:	f842 1d04 	str.w	r1, [r2, #-4]!
 800b65c:	210c      	movs	r1, #12
 800b65e:	f7fc f873 	bl	8007748 <LCD_X_DisplayDriver>
 800b662:	b003      	add	sp, #12
 800b664:	f85d fb04 	ldr.w	pc, [sp], #4

0800b668 <_SetAlphaMode>:
 800b668:	b500      	push	{lr}
 800b66a:	b083      	sub	sp, #12
 800b66c:	aa02      	add	r2, sp, #8
 800b66e:	6980      	ldr	r0, [r0, #24]
 800b670:	f842 1d04 	str.w	r1, [r2, #-4]!
 800b674:	210b      	movs	r1, #11
 800b676:	f7fc f867 	bl	8007748 <LCD_X_DisplayDriver>
 800b67a:	b003      	add	sp, #12
 800b67c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b680 <_Off>:
 800b680:	6980      	ldr	r0, [r0, #24]
 800b682:	2200      	movs	r2, #0
 800b684:	2106      	movs	r1, #6
 800b686:	f7fc b85f 	b.w	8007748 <LCD_X_DisplayDriver>
 800b68a:	bf00      	nop

0800b68c <_On>:
 800b68c:	6980      	ldr	r0, [r0, #24]
 800b68e:	2200      	movs	r2, #0
 800b690:	2105      	movs	r1, #5
 800b692:	f7fc b859 	b.w	8007748 <LCD_X_DisplayDriver>
 800b696:	bf00      	nop

0800b698 <_SetOrg>:
 800b698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b69c:	4604      	mov	r4, r0
 800b69e:	b083      	sub	sp, #12
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6980      	ldr	r0, [r0, #24]
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	4690      	mov	r8, r2
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	68a6      	ldr	r6, [r4, #8]
 800b6ae:	f7ff fc4f 	bl	800af50 <LCD_GetMirrorXEx>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	69a0      	ldr	r0, [r4, #24]
 800b6b6:	f7ff fc5b 	bl	800af70 <LCD_GetMirrorYEx>
 800b6ba:	4681      	mov	r9, r0
 800b6bc:	69a0      	ldr	r0, [r4, #24]
 800b6be:	f7ff fc67 	bl	800af90 <LCD_GetSwapXYEx>
 800b6c2:	0080      	lsls	r0, r0, #2
 800b6c4:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800b6c8:	4328      	orrs	r0, r5
 800b6ca:	2807      	cmp	r0, #7
 800b6cc:	d810      	bhi.n	800b6f0 <_SetOrg+0x58>
 800b6ce:	e8df f000 	tbb	[pc, r0]
 800b6d2:	1a17      	.short	0x1a17
 800b6d4:	3a362a22 	.word	0x3a362a22
 800b6d8:	0442      	.short	0x0442
 800b6da:	69f2      	ldr	r2, [r6, #28]
 800b6dc:	6970      	ldr	r0, [r6, #20]
 800b6de:	69b3      	ldr	r3, [r6, #24]
 800b6e0:	6931      	ldr	r1, [r6, #16]
 800b6e2:	1a12      	subs	r2, r2, r0
 800b6e4:	1a59      	subs	r1, r3, r1
 800b6e6:	ebc8 0202 	rsb	r2, r8, r2
 800b6ea:	1bcf      	subs	r7, r1, r7
 800b6ec:	e88d 0084 	stmia.w	sp, {r2, r7}
 800b6f0:	466a      	mov	r2, sp
 800b6f2:	69a0      	ldr	r0, [r4, #24]
 800b6f4:	2103      	movs	r1, #3
 800b6f6:	f7fc f827 	bl	8007748 <LCD_X_DisplayDriver>
 800b6fa:	b003      	add	sp, #12
 800b6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b700:	e88d 0180 	stmia.w	sp, {r7, r8}
 800b704:	e7f4      	b.n	800b6f0 <_SetOrg+0x58>
 800b706:	69b3      	ldr	r3, [r6, #24]
 800b708:	6931      	ldr	r1, [r6, #16]
 800b70a:	f8cd 8004 	str.w	r8, [sp, #4]
 800b70e:	1a59      	subs	r1, r3, r1
 800b710:	1bcf      	subs	r7, r1, r7
 800b712:	9700      	str	r7, [sp, #0]
 800b714:	e7ec      	b.n	800b6f0 <_SetOrg+0x58>
 800b716:	69f3      	ldr	r3, [r6, #28]
 800b718:	6972      	ldr	r2, [r6, #20]
 800b71a:	9700      	str	r7, [sp, #0]
 800b71c:	1a9a      	subs	r2, r3, r2
 800b71e:	ebc8 0202 	rsb	r2, r8, r2
 800b722:	9201      	str	r2, [sp, #4]
 800b724:	e7e4      	b.n	800b6f0 <_SetOrg+0x58>
 800b726:	69b1      	ldr	r1, [r6, #24]
 800b728:	6930      	ldr	r0, [r6, #16]
 800b72a:	69f3      	ldr	r3, [r6, #28]
 800b72c:	6972      	ldr	r2, [r6, #20]
 800b72e:	1a09      	subs	r1, r1, r0
 800b730:	1a9a      	subs	r2, r3, r2
 800b732:	1bcf      	subs	r7, r1, r7
 800b734:	ebc8 0202 	rsb	r2, r8, r2
 800b738:	9700      	str	r7, [sp, #0]
 800b73a:	9201      	str	r2, [sp, #4]
 800b73c:	e7d8      	b.n	800b6f0 <_SetOrg+0x58>
 800b73e:	f8cd 8000 	str.w	r8, [sp]
 800b742:	9701      	str	r7, [sp, #4]
 800b744:	e7d4      	b.n	800b6f0 <_SetOrg+0x58>
 800b746:	69f3      	ldr	r3, [r6, #28]
 800b748:	6972      	ldr	r2, [r6, #20]
 800b74a:	9701      	str	r7, [sp, #4]
 800b74c:	1a9a      	subs	r2, r3, r2
 800b74e:	ebc8 0202 	rsb	r2, r8, r2
 800b752:	9200      	str	r2, [sp, #0]
 800b754:	e7cc      	b.n	800b6f0 <_SetOrg+0x58>
 800b756:	69b3      	ldr	r3, [r6, #24]
 800b758:	6931      	ldr	r1, [r6, #16]
 800b75a:	f8cd 8000 	str.w	r8, [sp]
 800b75e:	1a59      	subs	r1, r3, r1
 800b760:	1bcf      	subs	r7, r1, r7
 800b762:	9701      	str	r7, [sp, #4]
 800b764:	e7c4      	b.n	800b6f0 <_SetOrg+0x58>
 800b766:	bf00      	nop

0800b768 <_FillRect>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	6887      	ldr	r7, [r0, #8]
 800b76e:	b087      	sub	sp, #28
 800b770:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800b772:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b774:	b156      	cbz	r6, 800b78c <_FillRect+0x24>
 800b776:	4d98      	ldr	r5, [pc, #608]	; (800b9d8 <_FillRect+0x270>)
 800b778:	6980      	ldr	r0, [r0, #24]
 800b77a:	682d      	ldr	r5, [r5, #0]
 800b77c:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800b77e:	682d      	ldr	r5, [r5, #0]
 800b780:	e88d 0030 	stmia.w	sp, {r4, r5}
 800b784:	47b0      	blx	r6
 800b786:	b007      	add	sp, #28
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	469c      	mov	ip, r3
 800b78e:	4b92      	ldr	r3, [pc, #584]	; (800b9d8 <_FillRect+0x270>)
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4696      	mov	lr, r2
 800b796:	6a3a      	ldr	r2, [r7, #32]
 800b798:	ebce 0404 	rsb	r4, lr, r4
 800b79c:	460d      	mov	r5, r1
 800b79e:	1052      	asrs	r2, r2, #1
 800b7a0:	7c19      	ldrb	r1, [r3, #16]
 800b7a2:	9403      	str	r4, [sp, #12]
 800b7a4:	4626      	mov	r6, r4
 800b7a6:	4614      	mov	r4, r2
 800b7a8:	086a      	lsrs	r2, r5, #1
 800b7aa:	fb04 2e0e 	mla	lr, r4, lr, r2
 800b7ae:	ebc5 070c 	rsb	r7, r5, ip
 800b7b2:	3601      	adds	r6, #1
 800b7b4:	07c9      	lsls	r1, r1, #31
 800b7b6:	9402      	str	r4, [sp, #8]
 800b7b8:	eb00 028e 	add.w	r2, r0, lr, lsl #2
 800b7bc:	f107 0401 	add.w	r4, r7, #1
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	d54f      	bpl.n	800b864 <_FillRect+0xfc>
 800b7c4:	f015 0501 	ands.w	r5, r5, #1
 800b7c8:	d013      	beq.n	800b7f2 <_FillRect+0x8a>
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	f000 80ff 	beq.w	800b9ce <_FillRect+0x266>
 800b7d0:	9c02      	ldr	r4, [sp, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	00a5      	lsls	r5, r4, #2
 800b7d6:	4634      	mov	r4, r6
 800b7d8:	6819      	ldr	r1, [r3, #0]
 800b7da:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800b7de:	f481 017f 	eor.w	r1, r1, #16711680	; 0xff0000
 800b7e2:	3c01      	subs	r4, #1
 800b7e4:	6019      	str	r1, [r3, #0]
 800b7e6:	442b      	add	r3, r5
 800b7e8:	d1f6      	bne.n	800b7d8 <_FillRect+0x70>
 800b7ea:	fb05 2506 	mla	r5, r5, r6, r2
 800b7ee:	3204      	adds	r2, #4
 800b7f0:	463c      	mov	r4, r7
 800b7f2:	2c01      	cmp	r4, #1
 800b7f4:	dd26      	ble.n	800b844 <_FillRect+0xdc>
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	f000 80e1 	beq.w	800b9be <_FillRect+0x256>
 800b7fc:	9b02      	ldr	r3, [sp, #8]
 800b7fe:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	fb0c f903 	mul.w	r9, ip, r3
 800b808:	eb02 0e09 	add.w	lr, r2, r9
 800b80c:	f1cc 0800 	rsb	r8, ip, #0
 800b810:	4637      	mov	r7, r6
 800b812:	3f01      	subs	r7, #1
 800b814:	4675      	mov	r5, lr
 800b816:	4621      	mov	r1, r4
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	3902      	subs	r1, #2
 800b81c:	43db      	mvns	r3, r3
 800b81e:	2901      	cmp	r1, #1
 800b820:	f845 3b04 	str.w	r3, [r5], #4
 800b824:	dcf8      	bgt.n	800b818 <_FillRect+0xb0>
 800b826:	ebcc 0e0e 	rsb	lr, ip, lr
 800b82a:	2f00      	cmp	r7, #0
 800b82c:	d1f1      	bne.n	800b812 <_FillRect+0xaa>
 800b82e:	1ea3      	subs	r3, r4, #2
 800b830:	9903      	ldr	r1, [sp, #12]
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	fb08 9801 	mla	r8, r8, r1, r9
 800b838:	3301      	adds	r3, #1
 800b83a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800b83e:	441a      	add	r2, r3
 800b840:	f004 0401 	and.w	r4, r4, #1
 800b844:	2c01      	cmp	r4, #1
 800b846:	d19e      	bne.n	800b786 <_FillRect+0x1e>
 800b848:	2e00      	cmp	r6, #0
 800b84a:	d09c      	beq.n	800b786 <_FillRect+0x1e>
 800b84c:	9b02      	ldr	r3, [sp, #8]
 800b84e:	0099      	lsls	r1, r3, #2
 800b850:	6813      	ldr	r3, [r2, #0]
 800b852:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800b856:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800b85a:	3801      	subs	r0, #1
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	440a      	add	r2, r1
 800b860:	d1f6      	bne.n	800b850 <_FillRect+0xe8>
 800b862:	e790      	b.n	800b786 <_FillRect+0x1e>
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	f015 0501 	ands.w	r5, r5, #1
 800b86a:	f8d3 e000 	ldr.w	lr, [r3]
 800b86e:	d015      	beq.n	800b89c <_FillRect+0x134>
 800b870:	2e00      	cmp	r6, #0
 800b872:	f000 80a8 	beq.w	800b9c6 <_FillRect+0x25e>
 800b876:	9b02      	ldr	r3, [sp, #8]
 800b878:	46b4      	mov	ip, r6
 800b87a:	0099      	lsls	r1, r3, #2
 800b87c:	4614      	mov	r4, r2
 800b87e:	ea4f 430e 	mov.w	r3, lr, lsl #16
 800b882:	8825      	ldrh	r5, [r4, #0]
 800b884:	f1bc 0c01 	subs.w	ip, ip, #1
 800b888:	ea45 0503 	orr.w	r5, r5, r3
 800b88c:	6025      	str	r5, [r4, #0]
 800b88e:	440c      	add	r4, r1
 800b890:	d1f7      	bne.n	800b882 <_FillRect+0x11a>
 800b892:	fb01 2506 	mla	r5, r1, r6, r2
 800b896:	3204      	adds	r2, #4
 800b898:	463c      	mov	r4, r7
 800b89a:	e001      	b.n	800b8a0 <_FillRect+0x138>
 800b89c:	ea4f 430e 	mov.w	r3, lr, lsl #16
 800b8a0:	2c0f      	cmp	r4, #15
 800b8a2:	4473      	add	r3, lr
 800b8a4:	dd39      	ble.n	800b91a <_FillRect+0x1b2>
 800b8a6:	f1a4 0810 	sub.w	r8, r4, #16
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	f000 8091 	beq.w	800b9d2 <_FillRect+0x26a>
 800b8b0:	9902      	ldr	r1, [sp, #8]
 800b8b2:	ea4f 0981 	mov.w	r9, r1, lsl #2
 800b8b6:	9903      	ldr	r1, [sp, #12]
 800b8b8:	fb01 fa09 	mul.w	sl, r1, r9
 800b8bc:	f10a 0720 	add.w	r7, sl, #32
 800b8c0:	4417      	add	r7, r2
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	f1c9 0b00 	rsb	fp, r9, #0
 800b8c8:	4637      	mov	r7, r6
 800b8ca:	468c      	mov	ip, r1
 800b8cc:	3f01      	subs	r7, #1
 800b8ce:	4661      	mov	r1, ip
 800b8d0:	4645      	mov	r5, r8
 800b8d2:	3d10      	subs	r5, #16
 800b8d4:	f841 3c20 	str.w	r3, [r1, #-32]
 800b8d8:	f841 3c1c 	str.w	r3, [r1, #-28]
 800b8dc:	f841 3c18 	str.w	r3, [r1, #-24]
 800b8e0:	f841 3c14 	str.w	r3, [r1, #-20]
 800b8e4:	f841 3c10 	str.w	r3, [r1, #-16]
 800b8e8:	f841 3c0c 	str.w	r3, [r1, #-12]
 800b8ec:	f841 3c08 	str.w	r3, [r1, #-8]
 800b8f0:	f841 3c04 	str.w	r3, [r1, #-4]
 800b8f4:	f101 0120 	add.w	r1, r1, #32
 800b8f8:	d5eb      	bpl.n	800b8d2 <_FillRect+0x16a>
 800b8fa:	ebc9 0c0c 	rsb	ip, r9, ip
 800b8fe:	2f00      	cmp	r7, #0
 800b900:	d1e4      	bne.n	800b8cc <_FillRect+0x164>
 800b902:	9d03      	ldr	r5, [sp, #12]
 800b904:	ea4f 1118 	mov.w	r1, r8, lsr #4
 800b908:	3101      	adds	r1, #1
 800b90a:	fb05 aa0b 	mla	sl, r5, fp, sl
 800b90e:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 800b912:	440a      	add	r2, r1
 800b914:	f004 040f 	and.w	r4, r4, #15
 800b918:	4615      	mov	r5, r2
 800b91a:	2c01      	cmp	r4, #1
 800b91c:	dd3f      	ble.n	800b99e <_FillRect+0x236>
 800b91e:	2e00      	cmp	r6, #0
 800b920:	d04f      	beq.n	800b9c2 <_FillRect+0x25a>
 800b922:	9902      	ldr	r1, [sp, #8]
 800b924:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800b928:	9903      	ldr	r1, [sp, #12]
 800b92a:	f1cc 0500 	rsb	r5, ip, #0
 800b92e:	fb01 f10c 	mul.w	r1, r1, ip
 800b932:	9105      	str	r1, [sp, #20]
 800b934:	9504      	str	r5, [sp, #16]
 800b936:	1851      	adds	r1, r2, r1
 800b938:	1ea7      	subs	r7, r4, #2
 800b93a:	4635      	mov	r5, r6
 800b93c:	f1a4 0b04 	sub.w	fp, r4, #4
 800b940:	f1a4 0a06 	sub.w	sl, r4, #6
 800b944:	f1a4 0908 	sub.w	r9, r4, #8
 800b948:	f1a4 080a 	sub.w	r8, r4, #10
 800b94c:	2f01      	cmp	r7, #1
 800b94e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800b952:	600b      	str	r3, [r1, #0]
 800b954:	dd13      	ble.n	800b97e <_FillRect+0x216>
 800b956:	f1bb 0f01 	cmp.w	fp, #1
 800b95a:	604b      	str	r3, [r1, #4]
 800b95c:	dd0f      	ble.n	800b97e <_FillRect+0x216>
 800b95e:	f1ba 0f01 	cmp.w	sl, #1
 800b962:	608b      	str	r3, [r1, #8]
 800b964:	dd0b      	ble.n	800b97e <_FillRect+0x216>
 800b966:	f1b9 0f01 	cmp.w	r9, #1
 800b96a:	60cb      	str	r3, [r1, #12]
 800b96c:	dd07      	ble.n	800b97e <_FillRect+0x216>
 800b96e:	f1b8 0f01 	cmp.w	r8, #1
 800b972:	610b      	str	r3, [r1, #16]
 800b974:	dd03      	ble.n	800b97e <_FillRect+0x216>
 800b976:	2c0d      	cmp	r4, #13
 800b978:	614b      	str	r3, [r1, #20]
 800b97a:	dd00      	ble.n	800b97e <_FillRect+0x216>
 800b97c:	618b      	str	r3, [r1, #24]
 800b97e:	ebcc 0101 	rsb	r1, ip, r1
 800b982:	2d00      	cmp	r5, #0
 800b984:	d1e2      	bne.n	800b94c <_FillRect+0x1e4>
 800b986:	087b      	lsrs	r3, r7, #1
 800b988:	9904      	ldr	r1, [sp, #16]
 800b98a:	9d03      	ldr	r5, [sp, #12]
 800b98c:	9f05      	ldr	r7, [sp, #20]
 800b98e:	3301      	adds	r3, #1
 800b990:	fb05 7101 	mla	r1, r5, r1, r7
 800b994:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b998:	441a      	add	r2, r3
 800b99a:	f004 0401 	and.w	r4, r4, #1
 800b99e:	2c01      	cmp	r4, #1
 800b9a0:	f47f aef1 	bne.w	800b786 <_FillRect+0x1e>
 800b9a4:	2e00      	cmp	r6, #0
 800b9a6:	f43f aeee 	beq.w	800b786 <_FillRect+0x1e>
 800b9aa:	9b02      	ldr	r3, [sp, #8]
 800b9ac:	0099      	lsls	r1, r3, #2
 800b9ae:	8853      	ldrh	r3, [r2, #2]
 800b9b0:	3801      	subs	r0, #1
 800b9b2:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	440a      	add	r2, r1
 800b9ba:	d1f8      	bne.n	800b9ae <_FillRect+0x246>
 800b9bc:	e6e3      	b.n	800b786 <_FillRect+0x1e>
 800b9be:	462a      	mov	r2, r5
 800b9c0:	e73e      	b.n	800b840 <_FillRect+0xd8>
 800b9c2:	462a      	mov	r2, r5
 800b9c4:	e7e9      	b.n	800b99a <_FillRect+0x232>
 800b9c6:	4615      	mov	r5, r2
 800b9c8:	ea4f 430e 	mov.w	r3, lr, lsl #16
 800b9cc:	e763      	b.n	800b896 <_FillRect+0x12e>
 800b9ce:	4615      	mov	r5, r2
 800b9d0:	e70d      	b.n	800b7ee <_FillRect+0x86>
 800b9d2:	462a      	mov	r2, r5
 800b9d4:	e79e      	b.n	800b914 <_FillRect+0x1ac>
 800b9d6:	bf00      	nop
 800b9d8:	2000007c 	.word	0x2000007c

0800b9dc <_DrawHLine>:
 800b9dc:	b500      	push	{lr}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	9200      	str	r2, [sp, #0]
 800b9e2:	f7ff fec1 	bl	800b768 <_FillRect>
 800b9e6:	b003      	add	sp, #12
 800b9e8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b9ec <_DrawVLine>:
 800b9ec:	b500      	push	{lr}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	f7ff feb8 	bl	800b768 <_FillRect>
 800b9f8:	b003      	add	sp, #12
 800b9fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9fe:	bf00      	nop

0800ba00 <_DrawBitmap>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	b08b      	sub	sp, #44	; 0x2c
 800ba06:	460e      	mov	r6, r1
 800ba08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ba0a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ba0c:	9500      	str	r5, [sp, #0]
 800ba0e:	3c01      	subs	r4, #1
 800ba10:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ba12:	9501      	str	r5, [sp, #4]
 800ba14:	9302      	str	r3, [sp, #8]
 800ba16:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800ba1a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ba1c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ba1e:	9003      	str	r0, [sp, #12]
 800ba20:	6883      	ldr	r3, [r0, #8]
 800ba22:	2c0f      	cmp	r4, #15
 800ba24:	d83a      	bhi.n	800ba9c <_DrawBitmap+0x9c>
 800ba26:	e8df f014 	tbh	[pc, r4, lsl #1]
 800ba2a:	003c      	.short	0x003c
 800ba2c:	003900ad 	.word	0x003900ad
 800ba30:	003900fa 	.word	0x003900fa
 800ba34:	00390039 	.word	0x00390039
 800ba38:	00390148 	.word	0x00390148
 800ba3c:	00390039 	.word	0x00390039
 800ba40:	00390039 	.word	0x00390039
 800ba44:	00390039 	.word	0x00390039
 800ba48:	0010      	.short	0x0010
 800ba4a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ba4c:	b12c      	cbz	r4, 800ba5a <_DrawBitmap+0x5a>
 800ba4e:	49a6      	ldr	r1, [pc, #664]	; (800bce8 <_DrawBitmap+0x2e8>)
 800ba50:	6809      	ldr	r1, [r1, #0]
 800ba52:	7c09      	ldrb	r1, [r1, #16]
 800ba54:	07c9      	lsls	r1, r1, #31
 800ba56:	f140 835c 	bpl.w	800c112 <_DrawBitmap+0x712>
 800ba5a:	f1be 0f00 	cmp.w	lr, #0
 800ba5e:	dd1d      	ble.n	800ba9c <_DrawBitmap+0x9c>
 800ba60:	4614      	mov	r4, r2
 800ba62:	eb0e 0502 	add.w	r5, lr, r2
 800ba66:	9a02      	ldr	r2, [sp, #8]
 800ba68:	f8df a280 	ldr.w	sl, [pc, #640]	; 800bcec <_DrawBitmap+0x2ec>
 800ba6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ba70:	f8dd 8000 	ldr.w	r8, [sp]
 800ba74:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800ba78:	e001      	b.n	800ba7e <_DrawBitmap+0x7e>
 800ba7a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ba7e:	6a1a      	ldr	r2, [r3, #32]
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	f8da 3000 	ldr.w	r3, [sl]
 800ba86:	fb02 6204 	mla	r2, r2, r4, r6
 800ba8a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800ba8e:	4639      	mov	r1, r7
 800ba90:	3401      	adds	r4, #1
 800ba92:	464a      	mov	r2, r9
 800ba94:	4798      	blx	r3
 800ba96:	42ac      	cmp	r4, r5
 800ba98:	4447      	add	r7, r8
 800ba9a:	d1ee      	bne.n	800ba7a <_DrawBitmap+0x7a>
 800ba9c:	b00b      	add	sp, #44	; 0x2c
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800baa4:	b12c      	cbz	r4, 800bab2 <_DrawBitmap+0xb2>
 800baa6:	4990      	ldr	r1, [pc, #576]	; (800bce8 <_DrawBitmap+0x2e8>)
 800baa8:	6809      	ldr	r1, [r1, #0]
 800baaa:	7c09      	ldrb	r1, [r1, #16]
 800baac:	07c9      	lsls	r1, r1, #31
 800baae:	f140 831f 	bpl.w	800c0f0 <_DrawBitmap+0x6f0>
 800bab2:	f1be 0f00 	cmp.w	lr, #0
 800bab6:	ddf1      	ble.n	800ba9c <_DrawBitmap+0x9c>
 800bab8:	4611      	mov	r1, r2
 800baba:	4472      	add	r2, lr
 800babc:	9204      	str	r2, [sp, #16]
 800babe:	9a01      	ldr	r2, [sp, #4]
 800bac0:	4889      	ldr	r0, [pc, #548]	; (800bce8 <_DrawBitmap+0x2e8>)
 800bac2:	9006      	str	r0, [sp, #24]
 800bac4:	4698      	mov	r8, r3
 800bac6:	18b0      	adds	r0, r6, r2
 800bac8:	f1c2 0308 	rsb	r3, r2, #8
 800bacc:	f8df b220 	ldr.w	fp, [pc, #544]	; 800bcf0 <_DrawBitmap+0x2f0>
 800bad0:	9005      	str	r0, [sp, #20]
 800bad2:	468a      	mov	sl, r1
 800bad4:	9308      	str	r3, [sp, #32]
 800bad6:	4646      	mov	r6, r8
 800bad8:	9507      	str	r5, [sp, #28]
 800bada:	4629      	mov	r1, r5
 800badc:	9b06      	ldr	r3, [sp, #24]
 800bade:	783a      	ldrb	r2, [r7, #0]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f81b 4002 	ldrb.w	r4, [fp, r2]
 800bae6:	7c1b      	ldrb	r3, [r3, #16]
 800bae8:	9a01      	ldr	r2, [sp, #4]
 800baea:	6a35      	ldr	r5, [r6, #32]
 800baec:	6848      	ldr	r0, [r1, #4]
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	4114      	asrs	r4, r2
 800baf4:	9a05      	ldr	r2, [sp, #20]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	fb05 250a 	mla	r5, r5, sl, r2
 800bafc:	f000 8287 	beq.w	800c00e <_DrawBitmap+0x60e>
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	f000 8262 	beq.w	800bfca <_DrawBitmap+0x5ca>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	f000 825f 	beq.w	800bfca <_DrawBitmap+0x5ca>
 800bb0c:	6833      	ldr	r3, [r6, #0]
 800bb0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bb12:	680e      	ldr	r6, [r1, #0]
 800bb14:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bb18:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	46b9      	mov	r9, r7
 800bb20:	4645      	mov	r5, r8
 800bb22:	469a      	mov	sl, r3
 800bb24:	4690      	mov	r8, r2
 800bb26:	4565      	cmp	r5, ip
 800bb28:	46ae      	mov	lr, r5
 800bb2a:	bf28      	it	cs
 800bb2c:	46e6      	movcs	lr, ip
 800bb2e:	4673      	mov	r3, lr
 800bb30:	eb0a 0248 	add.w	r2, sl, r8, lsl #1
 800bb34:	f014 0f01 	tst.w	r4, #1
 800bb38:	bf0c      	ite	eq
 800bb3a:	4631      	moveq	r1, r6
 800bb3c:	4601      	movne	r1, r0
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bb44:	f822 1b02 	strh.w	r1, [r2], #2
 800bb48:	d1f4      	bne.n	800bb34 <_DrawBitmap+0x134>
 800bb4a:	ebbc 0c0e 	subs.w	ip, ip, lr
 800bb4e:	44f0      	add	r8, lr
 800bb50:	ebce 0505 	rsb	r5, lr, r5
 800bb54:	d107      	bne.n	800bb66 <_DrawBitmap+0x166>
 800bb56:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bb5a:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800bb5e:	f109 0901 	add.w	r9, r9, #1
 800bb62:	f04f 0c08 	mov.w	ip, #8
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	d1dd      	bne.n	800bb26 <_DrawBitmap+0x126>
 800bb6a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800bb6e:	9b00      	ldr	r3, [sp, #0]
 800bb70:	441f      	add	r7, r3
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	f10a 0a01 	add.w	sl, sl, #1
 800bb78:	459a      	cmp	sl, r3
 800bb7a:	d08f      	beq.n	800ba9c <_DrawBitmap+0x9c>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	9907      	ldr	r1, [sp, #28]
 800bb80:	689e      	ldr	r6, [r3, #8]
 800bb82:	e7ab      	b.n	800badc <_DrawBitmap+0xdc>
 800bb84:	f1be 0f00 	cmp.w	lr, #0
 800bb88:	dd88      	ble.n	800ba9c <_DrawBitmap+0x9c>
 800bb8a:	4957      	ldr	r1, [pc, #348]	; (800bce8 <_DrawBitmap+0x2e8>)
 800bb8c:	9801      	ldr	r0, [sp, #4]
 800bb8e:	6809      	ldr	r1, [r1, #0]
 800bb90:	9103      	str	r1, [sp, #12]
 800bb92:	9902      	ldr	r1, [sp, #8]
 800bb94:	1830      	adds	r0, r6, r0
 800bb96:	4401      	add	r1, r0
 800bb98:	eb0e 0b02 	add.w	fp, lr, r2
 800bb9c:	9004      	str	r0, [sp, #16]
 800bb9e:	460e      	mov	r6, r1
 800bba0:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 800bba4:	9903      	ldr	r1, [sp, #12]
 800bba6:	7838      	ldrb	r0, [r7, #0]
 800bba8:	7c09      	ldrb	r1, [r1, #16]
 800bbaa:	f011 0103 	ands.w	r1, r1, #3
 800bbae:	f000 80eb 	beq.w	800bd88 <_DrawBitmap+0x388>
 800bbb2:	2902      	cmp	r1, #2
 800bbb4:	d12d      	bne.n	800bc12 <_DrawBitmap+0x212>
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	f000 8243 	beq.w	800c042 <_DrawBitmap+0x642>
 800bbbc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bbc0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bbc4:	46b9      	mov	r9, r7
 800bbc6:	46ba      	mov	sl, r7
 800bbc8:	e001      	b.n	800bbce <_DrawBitmap+0x1ce>
 800bbca:	4546      	cmp	r6, r8
 800bbcc:	d020      	beq.n	800bc10 <_DrawBitmap+0x210>
 800bbce:	f1cc 0403 	rsb	r4, ip, #3
 800bbd2:	0064      	lsls	r4, r4, #1
 800bbd4:	f1c4 0106 	rsb	r1, r4, #6
 800bbd8:	fa4e f101 	asr.w	r1, lr, r1
 800bbdc:	4001      	ands	r1, r0
 800bbde:	40e1      	lsrs	r1, r4
 800bbe0:	f10c 0c01 	add.w	ip, ip, #1
 800bbe4:	d007      	beq.n	800bbf6 <_DrawBitmap+0x1f6>
 800bbe6:	6a1c      	ldr	r4, [r3, #32]
 800bbe8:	681f      	ldr	r7, [r3, #0]
 800bbea:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bbee:	fb04 8402 	mla	r4, r4, r2, r8
 800bbf2:	f827 1014 	strh.w	r1, [r7, r4, lsl #1]
 800bbf6:	f1bc 0f04 	cmp.w	ip, #4
 800bbfa:	f108 0801 	add.w	r8, r8, #1
 800bbfe:	d1e4      	bne.n	800bbca <_DrawBitmap+0x1ca>
 800bc00:	4546      	cmp	r6, r8
 800bc02:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc06:	f04f 0c00 	mov.w	ip, #0
 800bc0a:	f109 0901 	add.w	r9, r9, #1
 800bc0e:	d1de      	bne.n	800bbce <_DrawBitmap+0x1ce>
 800bc10:	4657      	mov	r7, sl
 800bc12:	3201      	adds	r2, #1
 800bc14:	9900      	ldr	r1, [sp, #0]
 800bc16:	455a      	cmp	r2, fp
 800bc18:	440f      	add	r7, r1
 800bc1a:	d1c3      	bne.n	800bba4 <_DrawBitmap+0x1a4>
 800bc1c:	e73e      	b.n	800ba9c <_DrawBitmap+0x9c>
 800bc1e:	f1be 0f00 	cmp.w	lr, #0
 800bc22:	f77f af3b 	ble.w	800ba9c <_DrawBitmap+0x9c>
 800bc26:	4930      	ldr	r1, [pc, #192]	; (800bce8 <_DrawBitmap+0x2e8>)
 800bc28:	9801      	ldr	r0, [sp, #4]
 800bc2a:	6809      	ldr	r1, [r1, #0]
 800bc2c:	9103      	str	r1, [sp, #12]
 800bc2e:	9902      	ldr	r1, [sp, #8]
 800bc30:	1830      	adds	r0, r6, r0
 800bc32:	4401      	add	r1, r0
 800bc34:	eb0e 0b02 	add.w	fp, lr, r2
 800bc38:	9004      	str	r0, [sp, #16]
 800bc3a:	460e      	mov	r6, r1
 800bc3c:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
 800bc40:	9903      	ldr	r1, [sp, #12]
 800bc42:	7838      	ldrb	r0, [r7, #0]
 800bc44:	7c09      	ldrb	r1, [r1, #16]
 800bc46:	f011 0103 	ands.w	r1, r1, #3
 800bc4a:	f000 80e4 	beq.w	800be16 <_DrawBitmap+0x416>
 800bc4e:	2902      	cmp	r1, #2
 800bc50:	d12d      	bne.n	800bcae <_DrawBitmap+0x2ae>
 800bc52:	2d00      	cmp	r5, #0
 800bc54:	f000 821e 	beq.w	800c094 <_DrawBitmap+0x694>
 800bc58:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bc5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bc60:	46b9      	mov	r9, r7
 800bc62:	46ba      	mov	sl, r7
 800bc64:	e001      	b.n	800bc6a <_DrawBitmap+0x26a>
 800bc66:	4546      	cmp	r6, r8
 800bc68:	d020      	beq.n	800bcac <_DrawBitmap+0x2ac>
 800bc6a:	f1cc 0401 	rsb	r4, ip, #1
 800bc6e:	00a4      	lsls	r4, r4, #2
 800bc70:	f1c4 0104 	rsb	r1, r4, #4
 800bc74:	fa4e f101 	asr.w	r1, lr, r1
 800bc78:	4001      	ands	r1, r0
 800bc7a:	40e1      	lsrs	r1, r4
 800bc7c:	f10c 0c01 	add.w	ip, ip, #1
 800bc80:	d007      	beq.n	800bc92 <_DrawBitmap+0x292>
 800bc82:	6a1c      	ldr	r4, [r3, #32]
 800bc84:	681f      	ldr	r7, [r3, #0]
 800bc86:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bc8a:	fb04 8402 	mla	r4, r4, r2, r8
 800bc8e:	f827 1014 	strh.w	r1, [r7, r4, lsl #1]
 800bc92:	f1bc 0f02 	cmp.w	ip, #2
 800bc96:	f108 0801 	add.w	r8, r8, #1
 800bc9a:	d1e4      	bne.n	800bc66 <_DrawBitmap+0x266>
 800bc9c:	4546      	cmp	r6, r8
 800bc9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bca2:	f04f 0c00 	mov.w	ip, #0
 800bca6:	f109 0901 	add.w	r9, r9, #1
 800bcaa:	d1de      	bne.n	800bc6a <_DrawBitmap+0x26a>
 800bcac:	4657      	mov	r7, sl
 800bcae:	3201      	adds	r2, #1
 800bcb0:	9900      	ldr	r1, [sp, #0]
 800bcb2:	455a      	cmp	r2, fp
 800bcb4:	440f      	add	r7, r1
 800bcb6:	d1c3      	bne.n	800bc40 <_DrawBitmap+0x240>
 800bcb8:	e6f0      	b.n	800ba9c <_DrawBitmap+0x9c>
 800bcba:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800bcbc:	b1d4      	cbz	r4, 800bcf4 <_DrawBitmap+0x2f4>
 800bcbe:	490a      	ldr	r1, [pc, #40]	; (800bce8 <_DrawBitmap+0x2e8>)
 800bcc0:	6809      	ldr	r1, [r1, #0]
 800bcc2:	7c09      	ldrb	r1, [r1, #16]
 800bcc4:	0789      	lsls	r1, r1, #30
 800bcc6:	d415      	bmi.n	800bcf4 <_DrawBitmap+0x2f4>
 800bcc8:	b1a5      	cbz	r5, 800bcf4 <_DrawBitmap+0x2f4>
 800bcca:	9b00      	ldr	r3, [sp, #0]
 800bccc:	6980      	ldr	r0, [r0, #24]
 800bcce:	9316      	str	r3, [sp, #88]	; 0x58
 800bcd0:	9b02      	ldr	r3, [sp, #8]
 800bcd2:	9314      	str	r3, [sp, #80]	; 0x50
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	463b      	mov	r3, r7
 800bcd8:	46a4      	mov	ip, r4
 800bcda:	9517      	str	r5, [sp, #92]	; 0x5c
 800bcdc:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 800bce0:	b00b      	add	sp, #44	; 0x2c
 800bce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce6:	4760      	bx	ip
 800bce8:	2000007c 	.word	0x2000007c
 800bcec:	20000090 	.word	0x20000090
 800bcf0:	0801a428 	.word	0x0801a428
 800bcf4:	f1be 0f00 	cmp.w	lr, #0
 800bcf8:	f77f aed0 	ble.w	800ba9c <_DrawBitmap+0x9c>
 800bcfc:	9902      	ldr	r1, [sp, #8]
 800bcfe:	4cd4      	ldr	r4, [pc, #848]	; (800c050 <_DrawBitmap+0x650>)
 800bd00:	3908      	subs	r1, #8
 800bd02:	08c8      	lsrs	r0, r1, #3
 800bd04:	f100 0c01 	add.w	ip, r0, #1
 800bd08:	ea4f 1800 	mov.w	r8, r0, lsl #4
 800bd0c:	eba1 0ac0 	sub.w	sl, r1, r0, lsl #3
 800bd10:	9902      	ldr	r1, [sp, #8]
 800bd12:	6824      	ldr	r4, [r4, #0]
 800bd14:	f8cd a008 	str.w	sl, [sp, #8]
 800bd18:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800bd1c:	9003      	str	r0, [sp, #12]
 800bd1e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 800bd22:	f108 0b20 	add.w	fp, r8, #32
 800bd26:	9004      	str	r0, [sp, #16]
 800bd28:	f8dd 8000 	ldr.w	r8, [sp]
 800bd2c:	f8cd b014 	str.w	fp, [sp, #20]
 800bd30:	0048      	lsls	r0, r1, #1
 800bd32:	4496      	add	lr, r2
 800bd34:	9001      	str	r0, [sp, #4]
 800bd36:	468b      	mov	fp, r1
 800bd38:	b1fd      	cbz	r5, 800bd7a <_DrawBitmap+0x37a>
 800bd3a:	6a18      	ldr	r0, [r3, #32]
 800bd3c:	f894 c010 	ldrb.w	ip, [r4, #16]
 800bd40:	fb00 6102 	mla	r1, r0, r2, r6
 800bd44:	6818      	ldr	r0, [r3, #0]
 800bd46:	f01c 0c03 	ands.w	ip, ip, #3
 800bd4a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800bd4e:	f000 80a9 	beq.w	800bea4 <_DrawBitmap+0x4a4>
 800bd52:	f1bc 0f02 	cmp.w	ip, #2
 800bd56:	d110      	bne.n	800bd7a <_DrawBitmap+0x37a>
 800bd58:	f1bb 0f00 	cmp.w	fp, #0
 800bd5c:	dd0d      	ble.n	800bd7a <_DrawBitmap+0x37a>
 800bd5e:	9801      	ldr	r0, [sp, #4]
 800bd60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800bd64:	eb01 0900 	add.w	r9, r1, r0
 800bd68:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800bd6c:	b110      	cbz	r0, 800bd74 <_DrawBitmap+0x374>
 800bd6e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800bd72:	8008      	strh	r0, [r1, #0]
 800bd74:	3102      	adds	r1, #2
 800bd76:	4549      	cmp	r1, r9
 800bd78:	d1f6      	bne.n	800bd68 <_DrawBitmap+0x368>
 800bd7a:	3201      	adds	r2, #1
 800bd7c:	4572      	cmp	r2, lr
 800bd7e:	4447      	add	r7, r8
 800bd80:	d1da      	bne.n	800bd38 <_DrawBitmap+0x338>
 800bd82:	b00b      	add	sp, #44	; 0x2c
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd88:	6a19      	ldr	r1, [r3, #32]
 800bd8a:	681c      	ldr	r4, [r3, #0]
 800bd8c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bd90:	fb01 f902 	mul.w	r9, r1, r2
 800bd94:	9904      	ldr	r1, [sp, #16]
 800bd96:	eb01 0809 	add.w	r8, r1, r9
 800bd9a:	44b1      	add	r9, r6
 800bd9c:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 800bda0:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 800bda4:	46ba      	mov	sl, r7
 800bda6:	b91d      	cbnz	r5, 800bdb0 <_DrawBitmap+0x3b0>
 800bda8:	e024      	b.n	800bdf4 <_DrawBitmap+0x3f4>
 800bdaa:	45c8      	cmp	r8, r9
 800bdac:	f43f af31 	beq.w	800bc12 <_DrawBitmap+0x212>
 800bdb0:	f1cc 0103 	rsb	r1, ip, #3
 800bdb4:	004c      	lsls	r4, r1, #1
 800bdb6:	f1c4 0106 	rsb	r1, r4, #6
 800bdba:	fa4e f101 	asr.w	r1, lr, r1
 800bdbe:	4001      	ands	r1, r0
 800bdc0:	40e1      	lsrs	r1, r4
 800bdc2:	f10c 0c01 	add.w	ip, ip, #1
 800bdc6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bdca:	f828 1b02 	strh.w	r1, [r8], #2
 800bdce:	f1bc 0f04 	cmp.w	ip, #4
 800bdd2:	d1ea      	bne.n	800bdaa <_DrawBitmap+0x3aa>
 800bdd4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800bdd8:	f04f 0c00 	mov.w	ip, #0
 800bddc:	f10a 0a01 	add.w	sl, sl, #1
 800bde0:	e7e3      	b.n	800bdaa <_DrawBitmap+0x3aa>
 800bde2:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800bde6:	f04f 0c00 	mov.w	ip, #0
 800bdea:	f10a 0a01 	add.w	sl, sl, #1
 800bdee:	45c8      	cmp	r8, r9
 800bdf0:	f43f af0f 	beq.w	800bc12 <_DrawBitmap+0x212>
 800bdf4:	f1cc 0103 	rsb	r1, ip, #3
 800bdf8:	004c      	lsls	r4, r1, #1
 800bdfa:	f1c4 0106 	rsb	r1, r4, #6
 800bdfe:	fa4e f101 	asr.w	r1, lr, r1
 800be02:	4001      	ands	r1, r0
 800be04:	f10c 0c01 	add.w	ip, ip, #1
 800be08:	40e1      	lsrs	r1, r4
 800be0a:	f1bc 0f04 	cmp.w	ip, #4
 800be0e:	f828 1b02 	strh.w	r1, [r8], #2
 800be12:	d1ec      	bne.n	800bdee <_DrawBitmap+0x3ee>
 800be14:	e7e5      	b.n	800bde2 <_DrawBitmap+0x3e2>
 800be16:	6a19      	ldr	r1, [r3, #32]
 800be18:	681c      	ldr	r4, [r3, #0]
 800be1a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800be1e:	fb01 f902 	mul.w	r9, r1, r2
 800be22:	9904      	ldr	r1, [sp, #16]
 800be24:	eb01 0809 	add.w	r8, r1, r9
 800be28:	44b1      	add	r9, r6
 800be2a:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 800be2e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 800be32:	46ba      	mov	sl, r7
 800be34:	b91d      	cbnz	r5, 800be3e <_DrawBitmap+0x43e>
 800be36:	e024      	b.n	800be82 <_DrawBitmap+0x482>
 800be38:	45c8      	cmp	r8, r9
 800be3a:	f43f af38 	beq.w	800bcae <_DrawBitmap+0x2ae>
 800be3e:	f1cc 0101 	rsb	r1, ip, #1
 800be42:	008c      	lsls	r4, r1, #2
 800be44:	f1c4 0104 	rsb	r1, r4, #4
 800be48:	fa4e f101 	asr.w	r1, lr, r1
 800be4c:	4001      	ands	r1, r0
 800be4e:	40e1      	lsrs	r1, r4
 800be50:	f10c 0c01 	add.w	ip, ip, #1
 800be54:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800be58:	f828 1b02 	strh.w	r1, [r8], #2
 800be5c:	f1bc 0f02 	cmp.w	ip, #2
 800be60:	d1ea      	bne.n	800be38 <_DrawBitmap+0x438>
 800be62:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800be66:	f04f 0c00 	mov.w	ip, #0
 800be6a:	f10a 0a01 	add.w	sl, sl, #1
 800be6e:	e7e3      	b.n	800be38 <_DrawBitmap+0x438>
 800be70:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800be74:	f04f 0c00 	mov.w	ip, #0
 800be78:	f10a 0a01 	add.w	sl, sl, #1
 800be7c:	45c8      	cmp	r8, r9
 800be7e:	f43f af16 	beq.w	800bcae <_DrawBitmap+0x2ae>
 800be82:	f1cc 0101 	rsb	r1, ip, #1
 800be86:	008c      	lsls	r4, r1, #2
 800be88:	f1c4 0104 	rsb	r1, r4, #4
 800be8c:	fa4e f101 	asr.w	r1, lr, r1
 800be90:	4001      	ands	r1, r0
 800be92:	f10c 0c01 	add.w	ip, ip, #1
 800be96:	40e1      	lsrs	r1, r4
 800be98:	f1bc 0f02 	cmp.w	ip, #2
 800be9c:	f828 1b02 	strh.w	r1, [r8], #2
 800bea0:	d1ec      	bne.n	800be7c <_DrawBitmap+0x47c>
 800bea2:	e7e5      	b.n	800be70 <_DrawBitmap+0x470>
 800bea4:	f1bb 0f07 	cmp.w	fp, #7
 800bea8:	f340 811f 	ble.w	800c0ea <_DrawBitmap+0x6ea>
 800beac:	f101 0010 	add.w	r0, r1, #16
 800beb0:	9000      	str	r0, [sp, #0]
 800beb2:	9805      	ldr	r0, [sp, #20]
 800beb4:	eb00 0a01 	add.w	sl, r0, r1
 800beb8:	9800      	ldr	r0, [sp, #0]
 800beba:	f107 0c08 	add.w	ip, r7, #8
 800bebe:	4699      	mov	r9, r3
 800bec0:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
 800bec4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bec8:	f820 3c10 	strh.w	r3, [r0, #-16]
 800becc:	f81c 3c07 	ldrb.w	r3, [ip, #-7]
 800bed0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bed4:	f820 3c0e 	strh.w	r3, [r0, #-14]
 800bed8:	f81c 3c06 	ldrb.w	r3, [ip, #-6]
 800bedc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bee0:	f820 3c0c 	strh.w	r3, [r0, #-12]
 800bee4:	f81c 3c05 	ldrb.w	r3, [ip, #-5]
 800bee8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800beec:	f820 3c0a 	strh.w	r3, [r0, #-10]
 800bef0:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 800bef4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bef8:	f820 3c08 	strh.w	r3, [r0, #-8]
 800befc:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 800bf00:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bf04:	f820 3c06 	strh.w	r3, [r0, #-6]
 800bf08:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
 800bf0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bf10:	f820 3c04 	strh.w	r3, [r0, #-4]
 800bf14:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 800bf18:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bf1c:	f820 3c02 	strh.w	r3, [r0, #-2]
 800bf20:	3010      	adds	r0, #16
 800bf22:	4582      	cmp	sl, r0
 800bf24:	f10c 0c08 	add.w	ip, ip, #8
 800bf28:	d1ca      	bne.n	800bec0 <_DrawBitmap+0x4c0>
 800bf2a:	9804      	ldr	r0, [sp, #16]
 800bf2c:	f8dd a008 	ldr.w	sl, [sp, #8]
 800bf30:	4401      	add	r1, r0
 800bf32:	9803      	ldr	r0, [sp, #12]
 800bf34:	464b      	mov	r3, r9
 800bf36:	1838      	adds	r0, r7, r0
 800bf38:	f1ba 0f03 	cmp.w	sl, #3
 800bf3c:	dd23      	ble.n	800bf86 <_DrawBitmap+0x586>
 800bf3e:	f890 c000 	ldrb.w	ip, [r0]
 800bf42:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bf46:	f8a1 c000 	strh.w	ip, [r1]
 800bf4a:	f890 c001 	ldrb.w	ip, [r0, #1]
 800bf4e:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bf52:	f8a1 c002 	strh.w	ip, [r1, #2]
 800bf56:	f890 c002 	ldrb.w	ip, [r0, #2]
 800bf5a:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bf5e:	f8a1 c004 	strh.w	ip, [r1, #4]
 800bf62:	f890 9003 	ldrb.w	r9, [r0, #3]
 800bf66:	f1aa 0a04 	sub.w	sl, sl, #4
 800bf6a:	ea4f 0c9a 	mov.w	ip, sl, lsr #2
 800bf6e:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800bf72:	f8a1 9006 	strh.w	r9, [r1, #6]
 800bf76:	f10c 0901 	add.w	r9, ip, #1
 800bf7a:	ebaa 0a8c 	sub.w	sl, sl, ip, lsl #2
 800bf7e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800bf82:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 800bf86:	f1ba 0f00 	cmp.w	sl, #0
 800bf8a:	f43f aef6 	beq.w	800bd7a <_DrawBitmap+0x37a>
 800bf8e:	f890 c000 	ldrb.w	ip, [r0]
 800bf92:	f1ba 0f01 	cmp.w	sl, #1
 800bf96:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bf9a:	f8a1 c000 	strh.w	ip, [r1]
 800bf9e:	f43f aeec 	beq.w	800bd7a <_DrawBitmap+0x37a>
 800bfa2:	f890 c001 	ldrb.w	ip, [r0, #1]
 800bfa6:	f1ba 0f02 	cmp.w	sl, #2
 800bfaa:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bfae:	f8a1 c002 	strh.w	ip, [r1, #2]
 800bfb2:	f43f aee2 	beq.w	800bd7a <_DrawBitmap+0x37a>
 800bfb6:	7880      	ldrb	r0, [r0, #2]
 800bfb8:	3201      	adds	r2, #1
 800bfba:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800bfbe:	8088      	strh	r0, [r1, #4]
 800bfc0:	4572      	cmp	r2, lr
 800bfc2:	4447      	add	r7, r8
 800bfc4:	f47f aeb8 	bne.w	800bd38 <_DrawBitmap+0x338>
 800bfc8:	e6db      	b.n	800bd82 <_DrawBitmap+0x382>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	4798      	blx	r3
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	eb03 0e05 	add.w	lr, r3, r5
 800bfd8:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800bfdc:	006d      	lsls	r5, r5, #1
 800bfde:	9b08      	ldr	r3, [sp, #32]
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	4684      	mov	ip, r0
 800bfe4:	e004      	b.n	800bff0 <_DrawBitmap+0x5f0>
 800bfe6:	0864      	lsrs	r4, r4, #1
 800bfe8:	3502      	adds	r5, #2
 800bfea:	4575      	cmp	r5, lr
 800bfec:	f43f adbf 	beq.w	800bb6e <_DrawBitmap+0x16e>
 800bff0:	07e0      	lsls	r0, r4, #31
 800bff2:	d504      	bpl.n	800bffe <_DrawBitmap+0x5fe>
 800bff4:	6830      	ldr	r0, [r6, #0]
 800bff6:	5a2a      	ldrh	r2, [r5, r0]
 800bff8:	ea8c 0202 	eor.w	r2, ip, r2
 800bffc:	522a      	strh	r2, [r5, r0]
 800bffe:	3b01      	subs	r3, #1
 800c000:	d1f1      	bne.n	800bfe6 <_DrawBitmap+0x5e6>
 800c002:	784a      	ldrb	r2, [r1, #1]
 800c004:	2308      	movs	r3, #8
 800c006:	f81b 4002 	ldrb.w	r4, [fp, r2]
 800c00a:	3101      	adds	r1, #1
 800c00c:	e7ec      	b.n	800bfe8 <_DrawBitmap+0x5e8>
 800c00e:	9b02      	ldr	r3, [sp, #8]
 800c010:	9a08      	ldr	r2, [sp, #32]
 800c012:	1959      	adds	r1, r3, r5
 800c014:	0049      	lsls	r1, r1, #1
 800c016:	006d      	lsls	r5, r5, #1
 800c018:	46be      	mov	lr, r7
 800c01a:	e004      	b.n	800c026 <_DrawBitmap+0x626>
 800c01c:	0864      	lsrs	r4, r4, #1
 800c01e:	3502      	adds	r5, #2
 800c020:	42a9      	cmp	r1, r5
 800c022:	f43f ada4 	beq.w	800bb6e <_DrawBitmap+0x16e>
 800c026:	07e3      	lsls	r3, r4, #31
 800c028:	bf44      	itt	mi
 800c02a:	6833      	ldrmi	r3, [r6, #0]
 800c02c:	5358      	strhmi	r0, [r3, r5]
 800c02e:	3a01      	subs	r2, #1
 800c030:	d1f4      	bne.n	800c01c <_DrawBitmap+0x61c>
 800c032:	f89e 3001 	ldrb.w	r3, [lr, #1]
 800c036:	2208      	movs	r2, #8
 800c038:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800c03c:	f10e 0e01 	add.w	lr, lr, #1
 800c040:	e7ed      	b.n	800c01e <_DrawBitmap+0x61e>
 800c042:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c046:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800c04a:	46ba      	mov	sl, r7
 800c04c:	46ac      	mov	ip, r5
 800c04e:	e003      	b.n	800c058 <_DrawBitmap+0x658>
 800c050:	2000007c 	.word	0x2000007c
 800c054:	454e      	cmp	r6, r9
 800c056:	d044      	beq.n	800c0e2 <_DrawBitmap+0x6e2>
 800c058:	f1c8 0403 	rsb	r4, r8, #3
 800c05c:	0064      	lsls	r4, r4, #1
 800c05e:	f1c4 0106 	rsb	r1, r4, #6
 800c062:	fa4e f101 	asr.w	r1, lr, r1
 800c066:	4001      	ands	r1, r0
 800c068:	40e1      	lsrs	r1, r4
 800c06a:	f108 0801 	add.w	r8, r8, #1
 800c06e:	d005      	beq.n	800c07c <_DrawBitmap+0x67c>
 800c070:	6a1c      	ldr	r4, [r3, #32]
 800c072:	681d      	ldr	r5, [r3, #0]
 800c074:	fb04 9402 	mla	r4, r4, r2, r9
 800c078:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
 800c07c:	f1b8 0f04 	cmp.w	r8, #4
 800c080:	f109 0901 	add.w	r9, r9, #1
 800c084:	d1e6      	bne.n	800c054 <_DrawBitmap+0x654>
 800c086:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	f10a 0a01 	add.w	sl, sl, #1
 800c092:	e7df      	b.n	800c054 <_DrawBitmap+0x654>
 800c094:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c098:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800c09c:	46ba      	mov	sl, r7
 800c09e:	46ac      	mov	ip, r5
 800c0a0:	e001      	b.n	800c0a6 <_DrawBitmap+0x6a6>
 800c0a2:	454e      	cmp	r6, r9
 800c0a4:	d01f      	beq.n	800c0e6 <_DrawBitmap+0x6e6>
 800c0a6:	f1c8 0401 	rsb	r4, r8, #1
 800c0aa:	00a4      	lsls	r4, r4, #2
 800c0ac:	f1c4 0104 	rsb	r1, r4, #4
 800c0b0:	fa4e f101 	asr.w	r1, lr, r1
 800c0b4:	4001      	ands	r1, r0
 800c0b6:	40e1      	lsrs	r1, r4
 800c0b8:	f108 0801 	add.w	r8, r8, #1
 800c0bc:	d005      	beq.n	800c0ca <_DrawBitmap+0x6ca>
 800c0be:	6a1c      	ldr	r4, [r3, #32]
 800c0c0:	681d      	ldr	r5, [r3, #0]
 800c0c2:	fb04 9402 	mla	r4, r4, r2, r9
 800c0c6:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
 800c0ca:	f1b8 0f02 	cmp.w	r8, #2
 800c0ce:	f109 0901 	add.w	r9, r9, #1
 800c0d2:	d1e6      	bne.n	800c0a2 <_DrawBitmap+0x6a2>
 800c0d4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c0d8:	f04f 0800 	mov.w	r8, #0
 800c0dc:	f10a 0a01 	add.w	sl, sl, #1
 800c0e0:	e7df      	b.n	800c0a2 <_DrawBitmap+0x6a2>
 800c0e2:	4665      	mov	r5, ip
 800c0e4:	e595      	b.n	800bc12 <_DrawBitmap+0x212>
 800c0e6:	4665      	mov	r5, ip
 800c0e8:	e5e1      	b.n	800bcae <_DrawBitmap+0x2ae>
 800c0ea:	46da      	mov	sl, fp
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	e723      	b.n	800bf38 <_DrawBitmap+0x538>
 800c0f0:	9b00      	ldr	r3, [sp, #0]
 800c0f2:	6980      	ldr	r0, [r0, #24]
 800c0f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0f6:	9b02      	ldr	r3, [sp, #8]
 800c0f8:	9315      	str	r3, [sp, #84]	; 0x54
 800c0fa:	9b01      	ldr	r3, [sp, #4]
 800c0fc:	9314      	str	r3, [sp, #80]	; 0x50
 800c0fe:	4631      	mov	r1, r6
 800c100:	463b      	mov	r3, r7
 800c102:	46a4      	mov	ip, r4
 800c104:	9518      	str	r5, [sp, #96]	; 0x60
 800c106:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800c10a:	b00b      	add	sp, #44	; 0x2c
 800c10c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4760      	bx	ip
 800c112:	9b00      	ldr	r3, [sp, #0]
 800c114:	6980      	ldr	r0, [r0, #24]
 800c116:	9316      	str	r3, [sp, #88]	; 0x58
 800c118:	9b02      	ldr	r3, [sp, #8]
 800c11a:	9314      	str	r3, [sp, #80]	; 0x50
 800c11c:	4631      	mov	r1, r6
 800c11e:	463b      	mov	r3, r7
 800c120:	46a4      	mov	ip, r4
 800c122:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 800c126:	b00b      	add	sp, #44	; 0x2c
 800c128:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	4760      	bx	ip
 800c12e:	bf00      	nop

0800c130 <_Init>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	6884      	ldr	r4, [r0, #8]
 800c134:	4605      	mov	r5, r0
 800c136:	b14c      	cbz	r4, 800c14c <_Init+0x1c>
 800c138:	69a8      	ldr	r0, [r5, #24]
 800c13a:	2200      	movs	r2, #0
 800c13c:	2101      	movs	r1, #1
 800c13e:	f7fb fb03 	bl	8007748 <LCD_X_DisplayDriver>
 800c142:	2c00      	cmp	r4, #0
 800c144:	bf08      	it	eq
 800c146:	f040 0001 	orreq.w	r0, r0, #1
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	2050      	movs	r0, #80	; 0x50
 800c14e:	f7fc fa65 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c152:	4621      	mov	r1, r4
 800c154:	60a8      	str	r0, [r5, #8]
 800c156:	2250      	movs	r2, #80	; 0x50
 800c158:	f7fe f81c 	bl	800a194 <GUI__memset>
 800c15c:	68ac      	ldr	r4, [r5, #8]
 800c15e:	e7eb      	b.n	800c138 <_Init+0x8>

0800c160 <_SetVRAM_BufferPTR>:
 800c160:	b570      	push	{r4, r5, r6, lr}
 800c162:	6884      	ldr	r4, [r0, #8]
 800c164:	460d      	mov	r5, r1
 800c166:	b11c      	cbz	r4, 800c170 <_SetVRAM_BufferPTR+0x10>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	60a5      	str	r5, [r4, #8]
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	4606      	mov	r6, r0
 800c172:	2050      	movs	r0, #80	; 0x50
 800c174:	f7fc fa52 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c178:	4621      	mov	r1, r4
 800c17a:	60b0      	str	r0, [r6, #8]
 800c17c:	2250      	movs	r2, #80	; 0x50
 800c17e:	f7fe f809 	bl	800a194 <GUI__memset>
 800c182:	68b4      	ldr	r4, [r6, #8]
 800c184:	2c00      	cmp	r4, #0
 800c186:	d1ef      	bne.n	800c168 <_SetVRAM_BufferPTR+0x8>
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	bf00      	nop

0800c18c <_GetPos>:
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18e:	6884      	ldr	r4, [r0, #8]
 800c190:	460f      	mov	r7, r1
 800c192:	4616      	mov	r6, r2
 800c194:	b124      	cbz	r4, 800c1a0 <_GetPos+0x14>
 800c196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c198:	603b      	str	r3, [r7, #0]
 800c19a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c19c:	6033      	str	r3, [r6, #0]
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	2050      	movs	r0, #80	; 0x50
 800c1a4:	f7fc fa3a 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	60a8      	str	r0, [r5, #8]
 800c1ac:	2250      	movs	r2, #80	; 0x50
 800c1ae:	f7fd fff1 	bl	800a194 <GUI__memset>
 800c1b2:	68ac      	ldr	r4, [r5, #8]
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	d1ee      	bne.n	800c196 <_GetPos+0xa>
 800c1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ba:	bf00      	nop

0800c1bc <_ShowBuffer>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	6885      	ldr	r5, [r0, #8]
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	460e      	mov	r6, r1
 800c1ca:	b145      	cbz	r5, 800c1de <_ShowBuffer+0x22>
 800c1cc:	aa02      	add	r2, sp, #8
 800c1ce:	69a0      	ldr	r0, [r4, #24]
 800c1d0:	f842 6d04 	str.w	r6, [r2, #-4]!
 800c1d4:	210e      	movs	r1, #14
 800c1d6:	f7fb fab7 	bl	8007748 <LCD_X_DisplayDriver>
 800c1da:	b002      	add	sp, #8
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
 800c1de:	2050      	movs	r0, #80	; 0x50
 800c1e0:	f7fc fa1c 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	60a0      	str	r0, [r4, #8]
 800c1e8:	2250      	movs	r2, #80	; 0x50
 800c1ea:	f7fd ffd3 	bl	800a194 <GUI__memset>
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1eb      	bne.n	800c1cc <_ShowBuffer+0x10>
 800c1f4:	b002      	add	sp, #8
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}

0800c1f8 <_SetAlpha>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	6884      	ldr	r4, [r0, #8]
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	2300      	movs	r3, #0
 800c200:	4605      	mov	r5, r0
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	460e      	mov	r6, r1
 800c206:	b14c      	cbz	r4, 800c21c <_SetAlpha+0x24>
 800c208:	aa02      	add	r2, sp, #8
 800c20a:	62e6      	str	r6, [r4, #44]	; 0x2c
 800c20c:	f842 6d04 	str.w	r6, [r2, #-4]!
 800c210:	69a8      	ldr	r0, [r5, #24]
 800c212:	210a      	movs	r1, #10
 800c214:	f7fb fa98 	bl	8007748 <LCD_X_DisplayDriver>
 800c218:	b002      	add	sp, #8
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	2050      	movs	r0, #80	; 0x50
 800c21e:	f7fc f9fd 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c222:	4621      	mov	r1, r4
 800c224:	60a8      	str	r0, [r5, #8]
 800c226:	2250      	movs	r2, #80	; 0x50
 800c228:	f7fd ffb4 	bl	800a194 <GUI__memset>
 800c22c:	68ac      	ldr	r4, [r5, #8]
 800c22e:	2c00      	cmp	r4, #0
 800c230:	d1ea      	bne.n	800c208 <_SetAlpha+0x10>
 800c232:	b002      	add	sp, #8
 800c234:	bd70      	pop	{r4, r5, r6, pc}
 800c236:	bf00      	nop

0800c238 <_SetVis>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	6884      	ldr	r4, [r0, #8]
 800c23c:	b082      	sub	sp, #8
 800c23e:	2300      	movs	r3, #0
 800c240:	4605      	mov	r5, r0
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	460e      	mov	r6, r1
 800c246:	b14c      	cbz	r4, 800c25c <_SetVis+0x24>
 800c248:	aa02      	add	r2, sp, #8
 800c24a:	6326      	str	r6, [r4, #48]	; 0x30
 800c24c:	f842 6d04 	str.w	r6, [r2, #-4]!
 800c250:	69a8      	ldr	r0, [r5, #24]
 800c252:	2109      	movs	r1, #9
 800c254:	f7fb fa78 	bl	8007748 <LCD_X_DisplayDriver>
 800c258:	b002      	add	sp, #8
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	2050      	movs	r0, #80	; 0x50
 800c25e:	f7fc f9dd 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c262:	4621      	mov	r1, r4
 800c264:	60a8      	str	r0, [r5, #8]
 800c266:	2250      	movs	r2, #80	; 0x50
 800c268:	f7fd ff94 	bl	800a194 <GUI__memset>
 800c26c:	68ac      	ldr	r4, [r5, #8]
 800c26e:	2c00      	cmp	r4, #0
 800c270:	d1ea      	bne.n	800c248 <_SetVis+0x10>
 800c272:	b002      	add	sp, #8
 800c274:	bd70      	pop	{r4, r5, r6, pc}
 800c276:	bf00      	nop

0800c278 <_SetVRAMAddr>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	6884      	ldr	r4, [r0, #8]
 800c27c:	b082      	sub	sp, #8
 800c27e:	2300      	movs	r3, #0
 800c280:	4606      	mov	r6, r0
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	460d      	mov	r5, r1
 800c286:	b154      	cbz	r4, 800c29e <_SetVRAMAddr+0x26>
 800c288:	aa02      	add	r2, sp, #8
 800c28a:	6025      	str	r5, [r4, #0]
 800c28c:	6065      	str	r5, [r4, #4]
 800c28e:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c292:	69b0      	ldr	r0, [r6, #24]
 800c294:	2102      	movs	r1, #2
 800c296:	f7fb fa57 	bl	8007748 <LCD_X_DisplayDriver>
 800c29a:	b002      	add	sp, #8
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	2050      	movs	r0, #80	; 0x50
 800c2a0:	f7fc f9bc 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	60b0      	str	r0, [r6, #8]
 800c2a8:	2250      	movs	r2, #80	; 0x50
 800c2aa:	f7fd ff73 	bl	800a194 <GUI__memset>
 800c2ae:	68b4      	ldr	r4, [r6, #8]
 800c2b0:	2c00      	cmp	r4, #0
 800c2b2:	d1e9      	bne.n	800c288 <_SetVRAMAddr+0x10>
 800c2b4:	b002      	add	sp, #8
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}

0800c2b8 <_SetVSize>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	6884      	ldr	r4, [r0, #8]
 800c2bc:	4605      	mov	r5, r0
 800c2be:	460e      	mov	r6, r1
 800c2c0:	4617      	mov	r7, r2
 800c2c2:	b14c      	cbz	r4, 800c2d8 <_SetVSize+0x20>
 800c2c4:	69a8      	ldr	r0, [r5, #24]
 800c2c6:	f7fe fe63 	bl	800af90 <LCD_GetSwapXYEx>
 800c2ca:	61a6      	str	r6, [r4, #24]
 800c2cc:	61e7      	str	r7, [r4, #28]
 800c2ce:	b908      	cbnz	r0, 800c2d4 <_SetVSize+0x1c>
 800c2d0:	6226      	str	r6, [r4, #32]
 800c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d4:	6227      	str	r7, [r4, #32]
 800c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d8:	2050      	movs	r0, #80	; 0x50
 800c2da:	f7fc f99f 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	60a8      	str	r0, [r5, #8]
 800c2e2:	2250      	movs	r2, #80	; 0x50
 800c2e4:	f7fd ff56 	bl	800a194 <GUI__memset>
 800c2e8:	68ac      	ldr	r4, [r5, #8]
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d1ea      	bne.n	800c2c4 <_SetVSize+0xc>
 800c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2f0 <_SetSize>:
 800c2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f2:	6884      	ldr	r4, [r0, #8]
 800c2f4:	b083      	sub	sp, #12
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	b1ac      	cbz	r4, 800c330 <_SetSize+0x40>
 800c304:	6a23      	ldr	r3, [r4, #32]
 800c306:	b153      	cbz	r3, 800c31e <_SetSize+0x2e>
 800c308:	6127      	str	r7, [r4, #16]
 800c30a:	6166      	str	r6, [r4, #20]
 800c30c:	466a      	mov	r2, sp
 800c30e:	69a8      	ldr	r0, [r5, #24]
 800c310:	9700      	str	r7, [sp, #0]
 800c312:	2107      	movs	r1, #7
 800c314:	9601      	str	r6, [sp, #4]
 800c316:	f7fb fa17 	bl	8007748 <LCD_X_DisplayDriver>
 800c31a:	b003      	add	sp, #12
 800c31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31e:	69a8      	ldr	r0, [r5, #24]
 800c320:	f7fe fe36 	bl	800af90 <LCD_GetSwapXYEx>
 800c324:	2800      	cmp	r0, #0
 800c326:	bf0c      	ite	eq
 800c328:	4638      	moveq	r0, r7
 800c32a:	4630      	movne	r0, r6
 800c32c:	6220      	str	r0, [r4, #32]
 800c32e:	e7eb      	b.n	800c308 <_SetSize+0x18>
 800c330:	2050      	movs	r0, #80	; 0x50
 800c332:	f7fc f973 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c336:	4621      	mov	r1, r4
 800c338:	60a8      	str	r0, [r5, #8]
 800c33a:	2250      	movs	r2, #80	; 0x50
 800c33c:	f7fd ff2a 	bl	800a194 <GUI__memset>
 800c340:	68ac      	ldr	r4, [r5, #8]
 800c342:	2c00      	cmp	r4, #0
 800c344:	d1de      	bne.n	800c304 <_SetSize+0x14>
 800c346:	b003      	add	sp, #12
 800c348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c34a:	bf00      	nop

0800c34c <_SetDevFunc>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	6885      	ldr	r5, [r0, #8]
 800c350:	460c      	mov	r4, r1
 800c352:	4617      	mov	r7, r2
 800c354:	b325      	cbz	r5, 800c3a0 <_SetDevFunc+0x54>
 800c356:	1ee3      	subs	r3, r4, #3
 800c358:	2b22      	cmp	r3, #34	; 0x22
 800c35a:	d814      	bhi.n	800c386 <_SetDevFunc+0x3a>
 800c35c:	e8df f003 	tbb	[pc, r3]
 800c360:	13131316 	.word	0x13131316
 800c364:	13131313 	.word	0x13131313
 800c368:	13131313 	.word	0x13131313
 800c36c:	13131313 	.word	0x13131313
 800c370:	13131313 	.word	0x13131313
 800c374:	13181313 	.word	0x13181313
 800c378:	13131313 	.word	0x13131313
 800c37c:	131c1a13 	.word	0x131c1a13
 800c380:	121e      	.short	0x121e
 800c382:	14          	.byte	0x14
 800c383:	00          	.byte	0x00
 800c384:	64ef      	str	r7, [r5, #76]	; 0x4c
 800c386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c388:	642f      	str	r7, [r5, #64]	; 0x40
 800c38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38c:	64af      	str	r7, [r5, #72]	; 0x48
 800c38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c390:	636f      	str	r7, [r5, #52]	; 0x34
 800c392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c394:	63ef      	str	r7, [r5, #60]	; 0x3c
 800c396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c398:	63af      	str	r7, [r5, #56]	; 0x38
 800c39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39c:	646f      	str	r7, [r5, #68]	; 0x44
 800c39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	2050      	movs	r0, #80	; 0x50
 800c3a4:	f7fc f93a 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	60b0      	str	r0, [r6, #8]
 800c3ac:	2250      	movs	r2, #80	; 0x50
 800c3ae:	f7fd fef1 	bl	800a194 <GUI__memset>
 800c3b2:	68b5      	ldr	r5, [r6, #8]
 800c3b4:	2d00      	cmp	r5, #0
 800c3b6:	d1ce      	bne.n	800c356 <_SetDevFunc+0xa>
 800c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ba:	bf00      	nop

0800c3bc <_CopyBuffer>:
 800c3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	6884      	ldr	r4, [r0, #8]
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	460e      	mov	r6, r1
 800c3c6:	4617      	mov	r7, r2
 800c3c8:	b334      	cbz	r4, 800c418 <_CopyBuffer+0x5c>
 800c3ca:	42be      	cmp	r6, r7
 800c3cc:	d01c      	beq.n	800c408 <_CopyBuffer+0x4c>
 800c3ce:	68eb      	ldr	r3, [r5, #12]
 800c3d0:	2108      	movs	r1, #8
 800c3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	4798      	blx	r3
 800c3d8:	69a1      	ldr	r1, [r4, #24]
 800c3da:	6963      	ldr	r3, [r4, #20]
 800c3dc:	68a2      	ldr	r2, [r4, #8]
 800c3de:	fb03 f301 	mul.w	r3, r3, r1
 800c3e2:	fb00 f003 	mul.w	r0, r0, r3
 800c3e6:	08c3      	lsrs	r3, r0, #3
 800c3e8:	b182      	cbz	r2, 800c40c <_CopyBuffer+0x50>
 800c3ea:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 800c3ee:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 800c3f2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800c3f6:	f1b8 0f00 	cmp.w	r8, #0
 800c3fa:	d01a      	beq.n	800c432 <_CopyBuffer+0x76>
 800c3fc:	463a      	mov	r2, r7
 800c3fe:	4631      	mov	r1, r6
 800c400:	69a8      	ldr	r0, [r5, #24]
 800c402:	47c0      	blx	r8
 800c404:	f8c4 9000 	str.w	r9, [r4]
 800c408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40c:	6862      	ldr	r2, [r4, #4]
 800c40e:	fb03 2106 	mla	r1, r3, r6, r2
 800c412:	fb03 2907 	mla	r9, r3, r7, r2
 800c416:	e7ec      	b.n	800c3f2 <_CopyBuffer+0x36>
 800c418:	2050      	movs	r0, #80	; 0x50
 800c41a:	f7fc f8ff 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c41e:	4621      	mov	r1, r4
 800c420:	60a8      	str	r0, [r5, #8]
 800c422:	2250      	movs	r2, #80	; 0x50
 800c424:	f7fd feb6 	bl	800a194 <GUI__memset>
 800c428:	68ac      	ldr	r4, [r5, #8]
 800c42a:	2c00      	cmp	r4, #0
 800c42c:	d1cd      	bne.n	800c3ca <_CopyBuffer+0xe>
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c432:	4803      	ldr	r0, [pc, #12]	; (800c440 <_CopyBuffer+0x84>)
 800c434:	461a      	mov	r2, r3
 800c436:	6803      	ldr	r3, [r0, #0]
 800c438:	4648      	mov	r0, r9
 800c43a:	4798      	blx	r3
 800c43c:	e7e2      	b.n	800c404 <_CopyBuffer+0x48>
 800c43e:	bf00      	nop
 800c440:	20000090 	.word	0x20000090

0800c444 <_SetPos>:
 800c444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c448:	6884      	ldr	r4, [r0, #8]
 800c44a:	b089      	sub	sp, #36	; 0x24
 800c44c:	2300      	movs	r3, #0
 800c44e:	4605      	mov	r5, r0
 800c450:	460f      	mov	r7, r1
 800c452:	4616      	mov	r6, r2
 800c454:	9303      	str	r3, [sp, #12]
 800c456:	9302      	str	r3, [sp, #8]
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	9306      	str	r3, [sp, #24]
 800c45e:	9307      	str	r3, [sp, #28]
 800c460:	2c00      	cmp	r4, #0
 800c462:	d05e      	beq.n	800c522 <_SetPos+0xde>
 800c464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c466:	b133      	cbz	r3, 800c476 <_SetPos+0x32>
 800c468:	4632      	mov	r2, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	69a8      	ldr	r0, [r5, #24]
 800c46e:	4798      	blx	r3
 800c470:	b009      	add	sp, #36	; 0x24
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c476:	6267      	str	r7, [r4, #36]	; 0x24
 800c478:	62a6      	str	r6, [r4, #40]	; 0x28
 800c47a:	f7fe fe59 	bl	800b130 <LCD_GetXSizeDisplay>
 800c47e:	4681      	mov	r9, r0
 800c480:	f7fe fe5c 	bl	800b13c <LCD_GetYSizeDisplay>
 800c484:	68eb      	ldr	r3, [r5, #12]
 800c486:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800c490:	4682      	mov	sl, r0
 800c492:	2108      	movs	r1, #8
 800c494:	4628      	mov	r0, r5
 800c496:	4798      	blx	r3
 800c498:	1dc2      	adds	r2, r0, #7
 800c49a:	bf48      	it	mi
 800c49c:	f100 020e 	addmi.w	r2, r0, #14
 800c4a0:	10d2      	asrs	r2, r2, #3
 800c4a2:	2f00      	cmp	r7, #0
 800c4a4:	9206      	str	r2, [sp, #24]
 800c4a6:	db56      	blt.n	800c556 <_SetPos+0x112>
 800c4a8:	eb07 030b 	add.w	r3, r7, fp
 800c4ac:	4599      	cmp	r9, r3
 800c4ae:	9702      	str	r7, [sp, #8]
 800c4b0:	bfb6      	itet	lt
 800c4b2:	ebc7 0709 	rsblt	r7, r7, r9
 800c4b6:	f8cd b010 	strge.w	fp, [sp, #16]
 800c4ba:	9704      	strlt	r7, [sp, #16]
 800c4bc:	2e00      	cmp	r6, #0
 800c4be:	db3e      	blt.n	800c53e <_SetPos+0xfa>
 800c4c0:	eb06 0308 	add.w	r3, r6, r8
 800c4c4:	459a      	cmp	sl, r3
 800c4c6:	bfb8      	it	lt
 800c4c8:	ebc6 010a 	rsblt	r1, r6, sl
 800c4cc:	9603      	str	r6, [sp, #12]
 800c4ce:	bfa6      	itte	ge
 800c4d0:	f8cd 8014 	strge.w	r8, [sp, #20]
 800c4d4:	4641      	movge	r1, r8
 800c4d6:	9105      	strlt	r1, [sp, #20]
 800c4d8:	9b04      	ldr	r3, [sp, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dd0f      	ble.n	800c4fe <_SetPos+0xba>
 800c4de:	2900      	cmp	r1, #0
 800c4e0:	dd0d      	ble.n	800c4fe <_SetPos+0xba>
 800c4e2:	9b02      	ldr	r3, [sp, #8]
 800c4e4:	4599      	cmp	r9, r3
 800c4e6:	dd0a      	ble.n	800c4fe <_SetPos+0xba>
 800c4e8:	45b2      	cmp	sl, r6
 800c4ea:	dd08      	ble.n	800c4fe <_SetPos+0xba>
 800c4ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d03a      	beq.n	800c568 <_SetPos+0x124>
 800c4f2:	aa02      	add	r2, sp, #8
 800c4f4:	69a8      	ldr	r0, [r5, #24]
 800c4f6:	2108      	movs	r1, #8
 800c4f8:	f7fb f926 	bl	8007748 <LCD_X_DisplayDriver>
 800c4fc:	e7b8      	b.n	800c470 <_SetPos+0x2c>
 800c4fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c500:	2b01      	cmp	r3, #1
 800c502:	d1b5      	bne.n	800c470 <_SetPos+0x2c>
 800c504:	68ac      	ldr	r4, [r5, #8]
 800c506:	2300      	movs	r3, #0
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	2c00      	cmp	r4, #0
 800c50c:	d039      	beq.n	800c582 <_SetPos+0x13e>
 800c50e:	aa08      	add	r2, sp, #32
 800c510:	2300      	movs	r3, #0
 800c512:	6323      	str	r3, [r4, #48]	; 0x30
 800c514:	69a8      	ldr	r0, [r5, #24]
 800c516:	f842 3d1c 	str.w	r3, [r2, #-28]!
 800c51a:	2109      	movs	r1, #9
 800c51c:	f7fb f914 	bl	8007748 <LCD_X_DisplayDriver>
 800c520:	e7a6      	b.n	800c470 <_SetPos+0x2c>
 800c522:	2050      	movs	r0, #80	; 0x50
 800c524:	f7fc f87a 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c528:	4621      	mov	r1, r4
 800c52a:	60a8      	str	r0, [r5, #8]
 800c52c:	2250      	movs	r2, #80	; 0x50
 800c52e:	f7fd fe31 	bl	800a194 <GUI__memset>
 800c532:	68ac      	ldr	r4, [r5, #8]
 800c534:	2c00      	cmp	r4, #0
 800c536:	d195      	bne.n	800c464 <_SetPos+0x20>
 800c538:	b009      	add	sp, #36	; 0x24
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	9b07      	ldr	r3, [sp, #28]
 800c540:	fb02 f206 	mul.w	r2, r2, r6
 800c544:	eb06 0108 	add.w	r1, r6, r8
 800c548:	fb0b 3312 	mls	r3, fp, r2, r3
 800c54c:	2600      	movs	r6, #0
 800c54e:	9105      	str	r1, [sp, #20]
 800c550:	9307      	str	r3, [sp, #28]
 800c552:	9603      	str	r6, [sp, #12]
 800c554:	e7c0      	b.n	800c4d8 <_SetPos+0x94>
 800c556:	9b07      	ldr	r3, [sp, #28]
 800c558:	2100      	movs	r1, #0
 800c55a:	fb02 3317 	mls	r3, r2, r7, r3
 800c55e:	445f      	add	r7, fp
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	9704      	str	r7, [sp, #16]
 800c564:	9102      	str	r1, [sp, #8]
 800c566:	e7a9      	b.n	800c4bc <_SetPos+0x78>
 800c568:	68ac      	ldr	r4, [r5, #8]
 800c56a:	9301      	str	r3, [sp, #4]
 800c56c:	b1b4      	cbz	r4, 800c59c <_SetPos+0x158>
 800c56e:	aa08      	add	r2, sp, #32
 800c570:	2301      	movs	r3, #1
 800c572:	6323      	str	r3, [r4, #48]	; 0x30
 800c574:	2109      	movs	r1, #9
 800c576:	f842 3d1c 	str.w	r3, [r2, #-28]!
 800c57a:	69a8      	ldr	r0, [r5, #24]
 800c57c:	f7fb f8e4 	bl	8007748 <LCD_X_DisplayDriver>
 800c580:	e7b7      	b.n	800c4f2 <_SetPos+0xae>
 800c582:	2050      	movs	r0, #80	; 0x50
 800c584:	f7fc f84a 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c588:	4621      	mov	r1, r4
 800c58a:	60a8      	str	r0, [r5, #8]
 800c58c:	2250      	movs	r2, #80	; 0x50
 800c58e:	f7fd fe01 	bl	800a194 <GUI__memset>
 800c592:	68ac      	ldr	r4, [r5, #8]
 800c594:	2c00      	cmp	r4, #0
 800c596:	f43f af6b 	beq.w	800c470 <_SetPos+0x2c>
 800c59a:	e7b8      	b.n	800c50e <_SetPos+0xca>
 800c59c:	2050      	movs	r0, #80	; 0x50
 800c59e:	f7fc f83d 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	60a8      	str	r0, [r5, #8]
 800c5a6:	2250      	movs	r2, #80	; 0x50
 800c5a8:	f7fd fdf4 	bl	800a194 <GUI__memset>
 800c5ac:	68ac      	ldr	r4, [r5, #8]
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	d09f      	beq.n	800c4f2 <_SetPos+0xae>
 800c5b2:	e7dc      	b.n	800c56e <_SetPos+0x12a>

0800c5b4 <_GetDevData>:
 800c5b4:	2901      	cmp	r1, #1
 800c5b6:	4802      	ldr	r0, [pc, #8]	; (800c5c0 <_GetDevData+0xc>)
 800c5b8:	bf18      	it	ne
 800c5ba:	2000      	movne	r0, #0
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	0801a394 	.word	0x0801a394

0800c5c4 <_GetDevFunc>:
 800c5c4:	2916      	cmp	r1, #22
 800c5c6:	4802      	ldr	r0, [pc, #8]	; (800c5d0 <_GetDevFunc+0xc>)
 800c5c8:	bf18      	it	ne
 800c5ca:	2000      	movne	r0, #0
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	0800d459 	.word	0x0800d459

0800c5d4 <_SetOrg>:
 800c5d4:	6800      	ldr	r0, [r0, #0]
 800c5d6:	b110      	cbz	r0, 800c5de <_SetOrg+0xa>
 800c5d8:	68c3      	ldr	r3, [r0, #12]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	4718      	bx	r3
 800c5de:	4770      	bx	lr

0800c5e0 <_GetRect>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	6880      	ldr	r0, [r0, #8]
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	f7fc f948 	bl	800887c <GUI_ALLOC_LockH>
 800c5ec:	a902      	add	r1, sp, #8
 800c5ee:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800c5f2:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 800c5f6:	8902      	ldrh	r2, [r0, #8]
 800c5f8:	8943      	ldrh	r3, [r0, #10]
 800c5fa:	f841 0d04 	str.w	r0, [r1, #-4]!
 800c5fe:	4432      	add	r2, r6
 800c600:	442b      	add	r3, r5
 800c602:	3a01      	subs	r2, #1
 800c604:	3b01      	subs	r3, #1
 800c606:	8026      	strh	r6, [r4, #0]
 800c608:	80a2      	strh	r2, [r4, #4]
 800c60a:	8065      	strh	r5, [r4, #2]
 800c60c:	80e3      	strh	r3, [r4, #6]
 800c60e:	4608      	mov	r0, r1
 800c610:	f7fc f946 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800c614:	b002      	add	sp, #8
 800c616:	bd70      	pop	{r4, r5, r6, pc}

0800c618 <_DrawBitmap>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	4ca7      	ldr	r4, [pc, #668]	; (800c8bc <_DrawBitmap+0x2a4>)
 800c61e:	6824      	ldr	r4, [r4, #0]
 800c620:	b095      	sub	sp, #84	; 0x54
 800c622:	4683      	mov	fp, r0
 800c624:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800c626:	920a      	str	r2, [sp, #40]	; 0x28
 800c628:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800c62a:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800c62e:	9309      	str	r3, [sp, #36]	; 0x24
 800c630:	460c      	mov	r4, r1
 800c632:	f7fc f923 	bl	800887c <GUI_ALLOC_LockH>
 800c636:	6942      	ldr	r2, [r0, #20]
 800c638:	9011      	str	r0, [sp, #68]	; 0x44
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	f040 80ae 	bne.w	800c79c <_DrawBitmap+0x184>
 800c640:	4603      	mov	r3, r0
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	9306      	str	r3, [sp, #24]
 800c646:	a811      	add	r0, sp, #68	; 0x44
 800c648:	9212      	str	r2, [sp, #72]	; 0x48
 800c64a:	f7fc f929 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800c64e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c650:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c652:	18e3      	adds	r3, r4, r3
 800c654:	9308      	str	r3, [sp, #32]
 800c656:	4b99      	ldr	r3, [pc, #612]	; (800c8bc <_DrawBitmap+0x2a4>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	b120      	cbz	r0, 800c666 <_DrawBitmap+0x4e>
 800c65c:	7c1a      	ldrb	r2, [r3, #16]
 800c65e:	4c97      	ldr	r4, [pc, #604]	; (800c8bc <_DrawBitmap+0x2a4>)
 800c660:	0791      	lsls	r1, r2, #30
 800c662:	f000 80cf 	beq.w	800c804 <_DrawBitmap+0x1ec>
 800c666:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c668:	f7fc f908 	bl	800887c <GUI_ALLOC_LockH>
 800c66c:	4604      	mov	r4, r0
 800c66e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c670:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c674:	68e3      	ldr	r3, [r4, #12]
 800c676:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 800c67a:	1a8a      	subs	r2, r1, r2
 800c67c:	fb03 f302 	mul.w	r3, r3, r2
 800c680:	9a08      	ldr	r2, [sp, #32]
 800c682:	a814      	add	r0, sp, #80	; 0x50
 800c684:	ebc9 0902 	rsb	r9, r9, r2
 800c688:	3318      	adds	r3, #24
 800c68a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 800c68e:	18e3      	adds	r3, r4, r3
 800c690:	f840 4d04 	str.w	r4, [r0, #-4]!
 800c694:	9302      	str	r3, [sp, #8]
 800c696:	f7fc f903 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800c69a:	2d10      	cmp	r5, #16
 800c69c:	f000 8084 	beq.w	800c7a8 <_DrawBitmap+0x190>
 800c6a0:	2d17      	cmp	r5, #23
 800c6a2:	dd41      	ble.n	800c728 <_DrawBitmap+0x110>
 800c6a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f340 84b9 	ble.w	800d01e <_DrawBitmap+0xa06>
 800c6ac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800c6b0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c6b2:	444b      	add	r3, r9
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6b8:	f1a3 0a04 	sub.w	sl, r3, #4
 800c6bc:	f11a 0f04 	cmn.w	sl, #4
 800c6c0:	d020      	beq.n	800c704 <_DrawBitmap+0xec>
 800c6c2:	9f02      	ldr	r7, [sp, #8]
 800c6c4:	b1f7      	cbz	r7, 800c704 <_DrawBitmap+0xec>
 800c6c6:	2e00      	cmp	r6, #0
 800c6c8:	d05a      	beq.n	800c780 <_DrawBitmap+0x168>
 800c6ca:	68b2      	ldr	r2, [r6, #8]
 800c6cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6ce:	6854      	ldr	r4, [r2, #4]
 800c6d0:	9908      	ldr	r1, [sp, #32]
 800c6d2:	462b      	mov	r3, r5
 800c6d4:	464a      	mov	r2, r9
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	47a0      	blx	r4
 800c6da:	9c08      	ldr	r4, [sp, #32]
 800c6dc:	46d0      	mov	r8, sl
 800c6de:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c6e2:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4798      	blx	r3
 800c6ea:	68b3      	ldr	r3, [r6, #8]
 800c6ec:	f827 0b02 	strh.w	r0, [r7], #2
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	464a      	mov	r2, r9
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4798      	blx	r3
 800c6fa:	3d01      	subs	r5, #1
 800c6fc:	f104 0401 	add.w	r4, r4, #1
 800c700:	d1ed      	bne.n	800c6de <_DrawBitmap+0xc6>
 800c702:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	9a06      	ldr	r2, [sp, #24]
 800c708:	4413      	add	r3, r2
 800c70a:	9302      	str	r3, [sp, #8]
 800c70c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c70e:	449a      	add	sl, r3
 800c710:	9b03      	ldr	r3, [sp, #12]
 800c712:	f109 0901 	add.w	r9, r9, #1
 800c716:	4599      	cmp	r9, r3
 800c718:	d1d0      	bne.n	800c6bc <_DrawBitmap+0xa4>
 800c71a:	b116      	cbz	r6, 800c722 <_DrawBitmap+0x10a>
 800c71c:	a812      	add	r0, sp, #72	; 0x48
 800c71e:	f7fc f8bf 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800c722:	b015      	add	sp, #84	; 0x54
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	2d08      	cmp	r5, #8
 800c72a:	d074      	beq.n	800c816 <_DrawBitmap+0x1fe>
 800c72c:	4b64      	ldr	r3, [pc, #400]	; (800c8c0 <_DrawBitmap+0x2a8>)
 800c72e:	f1ba 0f00 	cmp.w	sl, #0
 800c732:	bf08      	it	eq
 800c734:	469a      	moveq	sl, r3
 800c736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f340 812b 	ble.w	800c994 <_DrawBitmap+0x37c>
 800c73e:	461c      	mov	r4, r3
 800c740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c742:	9806      	ldr	r0, [sp, #24]
 800c744:	9a02      	ldr	r2, [sp, #8]
 800c746:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c748:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	9307      	str	r3, [sp, #28]
 800c754:	2300      	movs	r3, #0
 800c756:	2d02      	cmp	r5, #2
 800c758:	f000 8123 	beq.w	800c9a2 <_DrawBitmap+0x38a>
 800c75c:	2d04      	cmp	r5, #4
 800c75e:	f000 81f8 	beq.w	800cb52 <_DrawBitmap+0x53a>
 800c762:	2d01      	cmp	r5, #1
 800c764:	f000 8337 	beq.w	800cdd6 <_DrawBitmap+0x7be>
 800c768:	3301      	adds	r3, #1
 800c76a:	429c      	cmp	r4, r3
 800c76c:	4431      	add	r1, r6
 800c76e:	4402      	add	r2, r0
 800c770:	dcf1      	bgt.n	800c756 <_DrawBitmap+0x13e>
 800c772:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800c776:	46de      	mov	lr, fp
 800c778:	f1be 0f00 	cmp.w	lr, #0
 800c77c:	d1ce      	bne.n	800c71c <_DrawBitmap+0x104>
 800c77e:	e7d0      	b.n	800c722 <_DrawBitmap+0x10a>
 800c780:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c782:	463d      	mov	r5, r7
 800c784:	4656      	mov	r6, sl
 800c786:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c78a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4798      	blx	r3
 800c792:	3c01      	subs	r4, #1
 800c794:	f825 0b02 	strh.w	r0, [r5], #2
 800c798:	d1f5      	bne.n	800c786 <_DrawBitmap+0x16e>
 800c79a:	e7b2      	b.n	800c702 <_DrawBitmap+0xea>
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fc f86d 	bl	800887c <GUI_ALLOC_LockH>
 800c7a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	e74c      	b.n	800c642 <_DrawBitmap+0x2a>
 800c7a8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c7aa:	2f00      	cmp	r7, #0
 800c7ac:	f000 8429 	beq.w	800d002 <_DrawBitmap+0x9ea>
 800c7b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	ddb2      	ble.n	800c71c <_DrawBitmap+0x104>
 800c7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b8:	4e42      	ldr	r6, [pc, #264]	; (800c8c4 <_DrawBitmap+0x2ac>)
 800c7ba:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c7be:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
 800c7c2:	005d      	lsls	r5, r3, #1
 800c7c4:	2400      	movs	r4, #0
 800c7c6:	46a0      	mov	r8, r4
 800c7c8:	46a9      	mov	r9, r5
 800c7ca:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800c7cc:	9d02      	ldr	r5, [sp, #8]
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	464a      	mov	r2, r9
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	b164      	cbz	r4, 800c7f0 <_DrawBitmap+0x1d8>
 800c7d6:	b15d      	cbz	r5, 800c7f0 <_DrawBitmap+0x1d8>
 800c7d8:	6833      	ldr	r3, [r6, #0]
 800c7da:	4798      	blx	r3
 800c7dc:	b13f      	cbz	r7, 800c7ee <_DrawBitmap+0x1d6>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7e2:	9908      	ldr	r1, [sp, #32]
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	4442      	add	r2, r8
 800c7e8:	685f      	ldr	r7, [r3, #4]
 800c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ec:	47b8      	blx	r7
 800c7ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c7f0:	9b06      	ldr	r3, [sp, #24]
 800c7f2:	f108 0801 	add.w	r8, r8, #1
 800c7f6:	45c2      	cmp	sl, r8
 800c7f8:	445c      	add	r4, fp
 800c7fa:	441d      	add	r5, r3
 800c7fc:	dce7      	bgt.n	800c7ce <_DrawBitmap+0x1b6>
 800c7fe:	2f00      	cmp	r7, #0
 800c800:	d18c      	bne.n	800c71c <_DrawBitmap+0x104>
 800c802:	e78e      	b.n	800c722 <_DrawBitmap+0x10a>
 800c804:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80c:	9908      	ldr	r1, [sp, #32]
 800c80e:	f000 fe11 	bl	800d434 <GUI_USAGE_AddRect>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	e727      	b.n	800c666 <_DrawBitmap+0x4e>
 800c816:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f340 8409 	ble.w	800d030 <_DrawBitmap+0xa18>
 800c81e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800c822:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800c826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c828:	444b      	add	r3, r9
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c82e:	3b01      	subs	r3, #1
 800c830:	9303      	str	r3, [sp, #12]
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	4658      	mov	r0, fp
 800c836:	eb03 0642 	add.w	r6, r3, r2, lsl #1
 800c83a:	4657      	mov	r7, sl
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	1c59      	adds	r1, r3, #1
 800c840:	4b1e      	ldr	r3, [pc, #120]	; (800c8bc <_DrawBitmap+0x2a4>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	7c1b      	ldrb	r3, [r3, #16]
 800c846:	2f00      	cmp	r7, #0
 800c848:	d049      	beq.n	800c8de <_DrawBitmap+0x2c6>
 800c84a:	f013 0303 	ands.w	r3, r3, #3
 800c84e:	d03b      	beq.n	800c8c8 <_DrawBitmap+0x2b0>
 800c850:	2b02      	cmp	r3, #2
 800c852:	d11f      	bne.n	800c894 <_DrawBitmap+0x27c>
 800c854:	f1bb 0f00 	cmp.w	fp, #0
 800c858:	d064      	beq.n	800c924 <_DrawBitmap+0x30c>
 800c85a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800c85e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c862:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c864:	9c08      	ldr	r4, [sp, #32]
 800c866:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c86a:	4621      	mov	r1, r4
 800c86c:	464a      	mov	r2, r9
 800c86e:	3401      	adds	r4, #1
 800c870:	4658      	mov	r0, fp
 800c872:	b143      	cbz	r3, 800c886 <_DrawBitmap+0x26e>
 800c874:	f8db e008 	ldr.w	lr, [fp, #8]
 800c878:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c87c:	f8a8 3000 	strh.w	r3, [r8]
 800c880:	f8de 3000 	ldr.w	r3, [lr]
 800c884:	4798      	blx	r3
 800c886:	3d01      	subs	r5, #1
 800c888:	f108 0802 	add.w	r8, r8, #2
 800c88c:	d1eb      	bne.n	800c866 <_DrawBitmap+0x24e>
 800c88e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800c892:	4658      	mov	r0, fp
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	9a06      	ldr	r2, [sp, #24]
 800c898:	4619      	mov	r1, r3
 800c89a:	4411      	add	r1, r2
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	9102      	str	r1, [sp, #8]
 800c8a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c8a2:	440b      	add	r3, r1
 800c8a4:	9303      	str	r3, [sp, #12]
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	f109 0901 	add.w	r9, r9, #1
 800c8ac:	454b      	cmp	r3, r9
 800c8ae:	4416      	add	r6, r2
 800c8b0:	d1c4      	bne.n	800c83c <_DrawBitmap+0x224>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	f47f af32 	bne.w	800c71c <_DrawBitmap+0x104>
 800c8b8:	e733      	b.n	800c722 <_DrawBitmap+0x10a>
 800c8ba:	bf00      	nop
 800c8bc:	2000007c 	.word	0x2000007c
 800c8c0:	0801a3c8 	.word	0x0801a3c8
 800c8c4:	20000090 	.word	0x20000090
 800c8c8:	9a03      	ldr	r2, [sp, #12]
 800c8ca:	9b02      	ldr	r3, [sp, #8]
 800c8cc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800c8d0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800c8d4:	f823 1b02 	strh.w	r1, [r3], #2
 800c8d8:	42b3      	cmp	r3, r6
 800c8da:	d1f7      	bne.n	800c8cc <_DrawBitmap+0x2b4>
 800c8dc:	e7da      	b.n	800c894 <_DrawBitmap+0x27c>
 800c8de:	f013 0303 	ands.w	r3, r3, #3
 800c8e2:	f000 836a 	beq.w	800cfba <_DrawBitmap+0x9a2>
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d1d4      	bne.n	800c894 <_DrawBitmap+0x27c>
 800c8ea:	f1bb 0f00 	cmp.w	fp, #0
 800c8ee:	f000 837e 	beq.w	800cfee <_DrawBitmap+0x9d6>
 800c8f2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800c8f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c8fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c8fc:	9c08      	ldr	r4, [sp, #32]
 800c8fe:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c902:	4621      	mov	r1, r4
 800c904:	464a      	mov	r2, r9
 800c906:	3401      	adds	r4, #1
 800c908:	4658      	mov	r0, fp
 800c90a:	b133      	cbz	r3, 800c91a <_DrawBitmap+0x302>
 800c90c:	f8db e008 	ldr.w	lr, [fp, #8]
 800c910:	f8a8 3000 	strh.w	r3, [r8]
 800c914:	f8de 3000 	ldr.w	r3, [lr]
 800c918:	4798      	blx	r3
 800c91a:	3d01      	subs	r5, #1
 800c91c:	f108 0802 	add.w	r8, r8, #2
 800c920:	d1ed      	bne.n	800c8fe <_DrawBitmap+0x2e6>
 800c922:	e7b4      	b.n	800c88e <_DrawBitmap+0x276>
 800c924:	9903      	ldr	r1, [sp, #12]
 800c926:	9b02      	ldr	r3, [sp, #8]
 800c928:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c92c:	b112      	cbz	r2, 800c934 <_DrawBitmap+0x31c>
 800c92e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c932:	801a      	strh	r2, [r3, #0]
 800c934:	3302      	adds	r3, #2
 800c936:	429e      	cmp	r6, r3
 800c938:	d1f6      	bne.n	800c928 <_DrawBitmap+0x310>
 800c93a:	e7aa      	b.n	800c892 <_DrawBitmap+0x27a>
 800c93c:	9b03      	ldr	r3, [sp, #12]
 800c93e:	464a      	mov	r2, r9
 800c940:	f014 0f01 	tst.w	r4, #1
 800c944:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c948:	d003      	beq.n	800c952 <_DrawBitmap+0x33a>
 800c94a:	8819      	ldrh	r1, [r3, #0]
 800c94c:	ea8a 0101 	eor.w	r1, sl, r1
 800c950:	8019      	strh	r1, [r3, #0]
 800c952:	3a01      	subs	r2, #1
 800c954:	f103 0302 	add.w	r3, r3, #2
 800c958:	d1f2      	bne.n	800c940 <_DrawBitmap+0x328>
 800c95a:	9b03      	ldr	r3, [sp, #12]
 800c95c:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 800c960:	9303      	str	r3, [sp, #12]
 800c962:	f1bb 0f00 	cmp.w	fp, #0
 800c966:	f040 82c6 	bne.w	800cef6 <_DrawBitmap+0x8de>
 800c96a:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800c96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c970:	9a06      	ldr	r2, [sp, #24]
 800c972:	3301      	adds	r3, #1
 800c974:	461c      	mov	r4, r3
 800c976:	930b      	str	r3, [sp, #44]	; 0x2c
 800c978:	9b02      	ldr	r3, [sp, #8]
 800c97a:	4413      	add	r3, r2
 800c97c:	9302      	str	r3, [sp, #8]
 800c97e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c982:	a811      	add	r0, sp, #68	; 0x44
 800c984:	4413      	add	r3, r2
 800c986:	930c      	str	r3, [sp, #48]	; 0x30
 800c988:	f7fb ff8a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800c98c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c98e:	4294      	cmp	r4, r2
 800c990:	f2c0 822d 	blt.w	800cdee <_DrawBitmap+0x7d6>
 800c994:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 800c998:	f1be 0f00 	cmp.w	lr, #0
 800c99c:	f47f aebe 	bne.w	800c71c <_DrawBitmap+0x104>
 800c9a0:	e6bf      	b.n	800c722 <_DrawBitmap+0x10a>
 800c9a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9a6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800c9aa:	9202      	str	r2, [sp, #8]
 800c9ac:	f1c3 0304 	rsb	r3, r3, #4
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c9b4:	465b      	mov	r3, fp
 800c9b6:	9121      	str	r1, [sp, #132]	; 0x84
 800c9b8:	46d3      	mov	fp, sl
 800c9ba:	469a      	mov	sl, r3
 800c9bc:	46d6      	mov	lr, sl
 800c9be:	4657      	mov	r7, sl
 800c9c0:	4ba4      	ldr	r3, [pc, #656]	; (800cc54 <_DrawBitmap+0x63c>)
 800c9c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	7814      	ldrb	r4, [r2, #0]
 800c9c8:	7c1b      	ldrb	r3, [r3, #16]
 800c9ca:	9a07      	ldr	r2, [sp, #28]
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	4094      	lsls	r4, r2
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	b2e4      	uxtb	r4, r4
 800c9d6:	f000 809d 	beq.w	800cb14 <_DrawBitmap+0x4fc>
 800c9da:	d37b      	bcc.n	800cad4 <_DrawBitmap+0x4bc>
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d166      	bne.n	800caae <_DrawBitmap+0x496>
 800c9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9e6:	9305      	str	r3, [sp, #20]
 800c9e8:	9b08      	ldr	r3, [sp, #32]
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9f0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c9f4:	9d02      	ldr	r5, [sp, #8]
 800c9f6:	eb03 0a02 	add.w	sl, r3, r2
 800c9fa:	9a03      	ldr	r2, [sp, #12]
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	4591      	cmp	r9, r2
 800ca00:	bfc8      	it	gt
 800ca02:	fa5f f982 	uxtbgt.w	r9, r2
 800ca06:	ebc9 0303 	rsb	r3, r9, r3
 800ca0a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ca0e:	9303      	str	r3, [sp, #12]
 800ca10:	fa5f f989 	uxtb.w	r9, r9
 800ca14:	b347      	cbz	r7, 800ca68 <_DrawBitmap+0x450>
 800ca16:	f109 0801 	add.w	r8, r9, #1
 800ca1a:	9e04      	ldr	r6, [sp, #16]
 800ca1c:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 800ca20:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800ca24:	4631      	mov	r1, r6
 800ca26:	ea4f 1394 	mov.w	r3, r4, lsr #6
 800ca2a:	f106 0601 	add.w	r6, r6, #1
 800ca2e:	4652      	mov	r2, sl
 800ca30:	4638      	mov	r0, r7
 800ca32:	d007      	beq.n	800ca44 <_DrawBitmap+0x42c>
 800ca34:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800ca38:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800ca3c:	802b      	strh	r3, [r5, #0]
 800ca3e:	f8de 3000 	ldr.w	r3, [lr]
 800ca42:	4798      	blx	r3
 800ca44:	3502      	adds	r5, #2
 800ca46:	00a4      	lsls	r4, r4, #2
 800ca48:	4545      	cmp	r5, r8
 800ca4a:	b2e4      	uxtb	r4, r4
 800ca4c:	d1e8      	bne.n	800ca20 <_DrawBitmap+0x408>
 800ca4e:	9b04      	ldr	r3, [sp, #16]
 800ca50:	3301      	adds	r3, #1
 800ca52:	444b      	add	r3, r9
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	9b03      	ldr	r3, [sp, #12]
 800ca58:	b1c3      	cbz	r3, 800ca8c <_DrawBitmap+0x474>
 800ca5a:	9b05      	ldr	r3, [sp, #20]
 800ca5c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800ca60:	9305      	str	r3, [sp, #20]
 800ca62:	f04f 0904 	mov.w	r9, #4
 800ca66:	e7c8      	b.n	800c9fa <_DrawBitmap+0x3e2>
 800ca68:	f109 0101 	add.w	r1, r9, #1
 800ca6c:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800ca70:	09a2      	lsrs	r2, r4, #6
 800ca72:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800ca76:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800ca7a:	b2dc      	uxtb	r4, r3
 800ca7c:	bf1c      	itt	ne
 800ca7e:	f85b 3022 	ldrne.w	r3, [fp, r2, lsl #2]
 800ca82:	802b      	strhne	r3, [r5, #0]
 800ca84:	3502      	adds	r5, #2
 800ca86:	42a9      	cmp	r1, r5
 800ca88:	d1f2      	bne.n	800ca70 <_DrawBitmap+0x458>
 800ca8a:	e7e0      	b.n	800ca4e <_DrawBitmap+0x436>
 800ca8c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ca8e:	46be      	mov	lr, r7
 800ca90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca92:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ca94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca96:	440a      	add	r2, r1
 800ca98:	9221      	str	r2, [sp, #132]	; 0x84
 800ca9a:	9906      	ldr	r1, [sp, #24]
 800ca9c:	9a02      	ldr	r2, [sp, #8]
 800ca9e:	440a      	add	r2, r1
 800caa0:	9202      	str	r2, [sp, #8]
 800caa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800caa4:	3301      	adds	r3, #1
 800caa6:	429a      	cmp	r2, r3
 800caa8:	930b      	str	r3, [sp, #44]	; 0x2c
 800caaa:	dc89      	bgt.n	800c9c0 <_DrawBitmap+0x3a8>
 800caac:	e664      	b.n	800c778 <_DrawBitmap+0x160>
 800caae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cab0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cab4:	440a      	add	r2, r1
 800cab6:	9221      	str	r2, [sp, #132]	; 0x84
 800cab8:	9906      	ldr	r1, [sp, #24]
 800caba:	9a02      	ldr	r2, [sp, #8]
 800cabc:	440a      	add	r2, r1
 800cabe:	9202      	str	r2, [sp, #8]
 800cac0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cac2:	3301      	adds	r3, #1
 800cac4:	429a      	cmp	r2, r3
 800cac6:	46ba      	mov	sl, r7
 800cac8:	930b      	str	r3, [sp, #44]	; 0x2c
 800caca:	f73f af77 	bgt.w	800c9bc <_DrawBitmap+0x3a4>
 800cace:	46d3      	mov	fp, sl
 800cad0:	46de      	mov	lr, fp
 800cad2:	e651      	b.n	800c778 <_DrawBitmap+0x160>
 800cad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cad6:	9e02      	ldr	r6, [sp, #8]
 800cad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cada:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 800cade:	42ab      	cmp	r3, r5
 800cae0:	bfc8      	it	gt
 800cae2:	b2eb      	uxtbgt	r3, r5
 800cae4:	1e58      	subs	r0, r3, #1
 800cae6:	b2c0      	uxtb	r0, r0
 800cae8:	1aed      	subs	r5, r5, r3
 800caea:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 800caee:	1eb3      	subs	r3, r6, #2
 800caf0:	09a2      	lsrs	r2, r4, #6
 800caf2:	00a4      	lsls	r4, r4, #2
 800caf4:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800caf8:	f823 2f02 	strh.w	r2, [r3, #2]!
 800cafc:	428b      	cmp	r3, r1
 800cafe:	b2e4      	uxtb	r4, r4
 800cb00:	d1f6      	bne.n	800caf0 <_DrawBitmap+0x4d8>
 800cb02:	3001      	adds	r0, #1
 800cb04:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	d0c1      	beq.n	800ca90 <_DrawBitmap+0x478>
 800cb0c:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 800cb10:	2304      	movs	r3, #4
 800cb12:	e7e4      	b.n	800cade <_DrawBitmap+0x4c6>
 800cb14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb16:	9b02      	ldr	r3, [sp, #8]
 800cb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb1a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800cb1c:	4282      	cmp	r2, r0
 800cb1e:	bfc8      	it	gt
 800cb20:	b2c2      	uxtbgt	r2, r0
 800cb22:	1e51      	subs	r1, r2, #1
 800cb24:	b2c9      	uxtb	r1, r1
 800cb26:	3101      	adds	r1, #1
 800cb28:	1a80      	subs	r0, r0, r2
 800cb2a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800cb2e:	00a2      	lsls	r2, r4, #2
 800cb30:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800cb34:	b2d4      	uxtb	r4, r2
 800cb36:	d003      	beq.n	800cb40 <_DrawBitmap+0x528>
 800cb38:	881a      	ldrh	r2, [r3, #0]
 800cb3a:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 800cb3e:	801a      	strh	r2, [r3, #0]
 800cb40:	3302      	adds	r3, #2
 800cb42:	428b      	cmp	r3, r1
 800cb44:	d1f3      	bne.n	800cb2e <_DrawBitmap+0x516>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d0a2      	beq.n	800ca90 <_DrawBitmap+0x478>
 800cb4a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800cb4e:	2204      	movs	r2, #4
 800cb50:	e7e4      	b.n	800cb1c <_DrawBitmap+0x504>
 800cb52:	9121      	str	r1, [sp, #132]	; 0x84
 800cb54:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cb56:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800cb5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb5c:	f1c1 0302 	rsb	r3, r1, #2
 800cb60:	b2d9      	uxtb	r1, r3
 800cb62:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 800cb66:	9107      	str	r1, [sp, #28]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	465a      	mov	r2, fp
 800cb6c:	46d3      	mov	fp, sl
 800cb6e:	4692      	mov	sl, r2
 800cb70:	3302      	adds	r3, #2
 800cb72:	9302      	str	r3, [sp, #8]
 800cb74:	46d6      	mov	lr, sl
 800cb76:	4b37      	ldr	r3, [pc, #220]	; (800cc54 <_DrawBitmap+0x63c>)
 800cb78:	9903      	ldr	r1, [sp, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f899 2000 	ldrb.w	r2, [r9]
 800cb80:	7c1b      	ldrb	r3, [r3, #16]
 800cb82:	408a      	lsls	r2, r1
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	9902      	ldr	r1, [sp, #8]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	b2d4      	uxtb	r4, r2
 800cb8e:	f1a1 0802 	sub.w	r8, r1, #2
 800cb92:	f000 80d2 	beq.w	800cd3a <_DrawBitmap+0x722>
 800cb96:	f0c0 809d 	bcc.w	800ccd4 <_DrawBitmap+0x6bc>
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	f040 808c 	bne.w	800ccb8 <_DrawBitmap+0x6a0>
 800cba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba4:	440b      	add	r3, r1
 800cba6:	4619      	mov	r1, r3
 800cba8:	9305      	str	r3, [sp, #20]
 800cbaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 80e8 	beq.w	800cd82 <_DrawBitmap+0x76a>
 800cbb2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800cbb6:	f040 8209 	bne.w	800cfcc <_DrawBitmap+0x9b4>
 800cbba:	9b08      	ldr	r3, [sp, #32]
 800cbbc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cbc0:	f899 4001 	ldrb.w	r4, [r9, #1]
 800cbc4:	1c59      	adds	r1, r3, #1
 800cbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc8:	f109 0601 	add.w	r6, r9, #1
 800cbcc:	1e5f      	subs	r7, r3, #1
 800cbce:	2f01      	cmp	r7, #1
 800cbd0:	dd51      	ble.n	800cc76 <_DrawBitmap+0x65e>
 800cbd2:	1ebb      	subs	r3, r7, #2
 800cbd4:	9304      	str	r3, [sp, #16]
 800cbd6:	f1ba 0f00 	cmp.w	sl, #0
 800cbda:	f000 80d6 	beq.w	800cd8a <_DrawBitmap+0x772>
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	1c8a      	adds	r2, r1, #2
 800cbe2:	930c      	str	r3, [sp, #48]	; 0x30
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	930d      	str	r3, [sp, #52]	; 0x34
 800cbe8:	18d3      	adds	r3, r2, r3
 800cbea:	f108 0704 	add.w	r7, r8, #4
 800cbee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800cbf2:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 800cbf6:	920e      	str	r2, [sp, #56]	; 0x38
 800cbf8:	460d      	mov	r5, r1
 800cbfa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cbfe:	4699      	mov	r9, r3
 800cc00:	e01d      	b.n	800cc3e <_DrawBitmap+0x626>
 800cc02:	f8da e008 	ldr.w	lr, [sl, #8]
 800cc06:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cc0a:	f827 3c04 	strh.w	r3, [r7, #-4]
 800cc0e:	f8de 3000 	ldr.w	r3, [lr]
 800cc12:	4798      	blx	r3
 800cc14:	f014 040f 	ands.w	r4, r4, #15
 800cc18:	d00a      	beq.n	800cc30 <_DrawBitmap+0x618>
 800cc1a:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800cc1e:	f827 3c02 	strh.w	r3, [r7, #-2]
 800cc22:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cc26:	4642      	mov	r2, r8
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	1c69      	adds	r1, r5, #1
 800cc2c:	4650      	mov	r0, sl
 800cc2e:	4798      	blx	r3
 800cc30:	3502      	adds	r5, #2
 800cc32:	45a9      	cmp	r9, r5
 800cc34:	f107 0704 	add.w	r7, r7, #4
 800cc38:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800cc3c:	d00c      	beq.n	800cc58 <_DrawBitmap+0x640>
 800cc3e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 800cc42:	ea4f 1314 	mov.w	r3, r4, lsr #4
 800cc46:	4629      	mov	r1, r5
 800cc48:	4642      	mov	r2, r8
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	d1d9      	bne.n	800cc02 <_DrawBitmap+0x5ea>
 800cc4e:	2c00      	cmp	r4, #0
 800cc50:	d0ee      	beq.n	800cc30 <_DrawBitmap+0x618>
 800cc52:	e7e2      	b.n	800cc1a <_DrawBitmap+0x602>
 800cc54:	2000007c 	.word	0x2000007c
 800cc58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cc5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cc5e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800cc62:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 800cc66:	4613      	mov	r3, r2
 800cc68:	4401      	add	r1, r0
 800cc6a:	9804      	ldr	r0, [sp, #16]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	eba0 0742 	sub.w	r7, r0, r2, lsl #1
 800cc72:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800cc76:	b177      	cbz	r7, 800cc96 <_DrawBitmap+0x67e>
 800cc78:	0924      	lsrs	r4, r4, #4
 800cc7a:	d00c      	beq.n	800cc96 <_DrawBitmap+0x67e>
 800cc7c:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800cc80:	f8a8 3000 	strh.w	r3, [r8]
 800cc84:	f1ba 0f00 	cmp.w	sl, #0
 800cc88:	d005      	beq.n	800cc96 <_DrawBitmap+0x67e>
 800cc8a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cc8e:	9a05      	ldr	r2, [sp, #20]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4650      	mov	r0, sl
 800cc94:	4798      	blx	r3
 800cc96:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800cc9a:	46d6      	mov	lr, sl
 800cc9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc9e:	9906      	ldr	r1, [sp, #24]
 800cca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca2:	4491      	add	r9, r2
 800cca4:	9a02      	ldr	r2, [sp, #8]
 800cca6:	440a      	add	r2, r1
 800cca8:	9202      	str	r2, [sp, #8]
 800ccaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ccac:	3301      	adds	r3, #1
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccb2:	f73f af60 	bgt.w	800cb76 <_DrawBitmap+0x55e>
 800ccb6:	e55f      	b.n	800c778 <_DrawBitmap+0x160>
 800ccb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccc4:	4499      	add	r9, r3
 800ccc6:	9b06      	ldr	r3, [sp, #24]
 800ccc8:	4291      	cmp	r1, r2
 800ccca:	4443      	add	r3, r8
 800cccc:	f73f af50 	bgt.w	800cb70 <_DrawBitmap+0x558>
 800ccd0:	46d3      	mov	fp, sl
 800ccd2:	e6fd      	b.n	800cad0 <_DrawBitmap+0x4b8>
 800ccd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d050      	beq.n	800cd7c <_DrawBitmap+0x764>
 800ccda:	0924      	lsrs	r4, r4, #4
 800ccdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccde:	1e5d      	subs	r5, r3, #1
 800cce0:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800cce4:	f8a8 3000 	strh.w	r3, [r8]
 800cce8:	f899 4001 	ldrb.w	r4, [r9, #1]
 800ccec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ccf0:	f109 0201 	add.w	r2, r9, #1
 800ccf4:	2d01      	cmp	r5, #1
 800ccf6:	dd18      	ble.n	800cd2a <_DrawBitmap+0x712>
 800ccf8:	106e      	asrs	r6, r5, #1
 800ccfa:	1990      	adds	r0, r2, r6
 800ccfc:	f005 0501 	and.w	r5, r5, #1
 800cd00:	f108 0304 	add.w	r3, r8, #4
 800cd04:	0921      	lsrs	r1, r4, #4
 800cd06:	f004 040f 	and.w	r4, r4, #15
 800cd0a:	f85b 7021 	ldr.w	r7, [fp, r1, lsl #2]
 800cd0e:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800cd12:	f823 1c02 	strh.w	r1, [r3, #-2]
 800cd16:	f823 7c04 	strh.w	r7, [r3, #-4]
 800cd1a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800cd1e:	4282      	cmp	r2, r0
 800cd20:	f103 0304 	add.w	r3, r3, #4
 800cd24:	d1ee      	bne.n	800cd04 <_DrawBitmap+0x6ec>
 800cd26:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 800cd2a:	2d00      	cmp	r5, #0
 800cd2c:	d0b6      	beq.n	800cc9c <_DrawBitmap+0x684>
 800cd2e:	0924      	lsrs	r4, r4, #4
 800cd30:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800cd34:	f8a8 3000 	strh.w	r3, [r8]
 800cd38:	e7b0      	b.n	800cc9c <_DrawBitmap+0x684>
 800cd3a:	9b07      	ldr	r3, [sp, #28]
 800cd3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd3e:	4648      	mov	r0, r9
 800cd40:	428b      	cmp	r3, r1
 800cd42:	bfc8      	it	gt
 800cd44:	b2cb      	uxtbgt	r3, r1
 800cd46:	1e5a      	subs	r2, r3, #1
 800cd48:	b2d2      	uxtb	r2, r2
 800cd4a:	3201      	adds	r2, #1
 800cd4c:	1ac9      	subs	r1, r1, r3
 800cd4e:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 800cd52:	0123      	lsls	r3, r4, #4
 800cd54:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800cd58:	b2dc      	uxtb	r4, r3
 800cd5a:	d005      	beq.n	800cd68 <_DrawBitmap+0x750>
 800cd5c:	f8b8 3000 	ldrh.w	r3, [r8]
 800cd60:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800cd64:	f8a8 3000 	strh.w	r3, [r8]
 800cd68:	f108 0802 	add.w	r8, r8, #2
 800cd6c:	4590      	cmp	r8, r2
 800cd6e:	d1f0      	bne.n	800cd52 <_DrawBitmap+0x73a>
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d093      	beq.n	800cc9c <_DrawBitmap+0x684>
 800cd74:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e7e1      	b.n	800cd40 <_DrawBitmap+0x728>
 800cd7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cd7e:	464a      	mov	r2, r9
 800cd80:	e7b8      	b.n	800ccf4 <_DrawBitmap+0x6dc>
 800cd82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd84:	9908      	ldr	r1, [sp, #32]
 800cd86:	464e      	mov	r6, r9
 800cd88:	e721      	b.n	800cbce <_DrawBitmap+0x5b6>
 800cd8a:	085f      	lsrs	r7, r3, #1
 800cd8c:	f107 0e01 	add.w	lr, r7, #1
 800cd90:	eb06 000e 	add.w	r0, r6, lr
 800cd94:	f108 0304 	add.w	r3, r8, #4
 800cd98:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 800cd9c:	ea4f 1214 	mov.w	r2, r4, lsr #4
 800cda0:	d003      	beq.n	800cdaa <_DrawBitmap+0x792>
 800cda2:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800cda6:	f823 2c04 	strh.w	r2, [r3, #-4]
 800cdaa:	f014 040f 	ands.w	r4, r4, #15
 800cdae:	d003      	beq.n	800cdb8 <_DrawBitmap+0x7a0>
 800cdb0:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 800cdb4:	f823 2c02 	strh.w	r2, [r3, #-2]
 800cdb8:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800cdbc:	42b0      	cmp	r0, r6
 800cdbe:	f103 0304 	add.w	r3, r3, #4
 800cdc2:	d1e9      	bne.n	800cd98 <_DrawBitmap+0x780>
 800cdc4:	9b04      	ldr	r3, [sp, #16]
 800cdc6:	3102      	adds	r1, #2
 800cdc8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800cdcc:	eb08 088e 	add.w	r8, r8, lr, lsl #2
 800cdd0:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 800cdd4:	e74f      	b.n	800cc76 <_DrawBitmap+0x65e>
 800cdd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdd8:	460b      	mov	r3, r1
 800cdda:	3301      	adds	r3, #1
 800cddc:	930c      	str	r3, [sp, #48]	; 0x30
 800cdde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cde0:	9202      	str	r2, [sp, #8]
 800cde2:	f1c3 0308 	rsb	r3, r3, #8
 800cde6:	9121      	str	r1, [sp, #132]	; 0x84
 800cde8:	930d      	str	r3, [sp, #52]	; 0x34
 800cdea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800cdee:	4b93      	ldr	r3, [pc, #588]	; (800d03c <_DrawBitmap+0xa24>)
 800cdf0:	4c93      	ldr	r4, [pc, #588]	; (800d040 <_DrawBitmap+0xa28>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cdf6:	f7fb fd41 	bl	800887c <GUI_ALLOC_LockH>
 800cdfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cdfc:	4b8f      	ldr	r3, [pc, #572]	; (800d03c <_DrawBitmap+0xa24>)
 800cdfe:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	5ca4      	ldrb	r4, [r4, r2]
 800ce06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce08:	7c1b      	ldrb	r3, [r3, #16]
 800ce0a:	9011      	str	r0, [sp, #68]	; 0x44
 800ce0c:	4114      	asrs	r4, r2
 800ce0e:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800ce12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce16:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800ce1a:	f003 0303 	and.w	r3, r3, #3
 800ce1e:	440a      	add	r2, r1
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	9204      	str	r2, [sp, #16]
 800ce24:	d071      	beq.n	800cf0a <_DrawBitmap+0x8f2>
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d01f      	beq.n	800ce6a <_DrawBitmap+0x852>
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d01d      	beq.n	800ce6a <_DrawBitmap+0x852>
 800ce2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ce30:	9e02      	ldr	r6, [sp, #8]
 800ce32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ce34:	42a8      	cmp	r0, r5
 800ce36:	bf28      	it	cs
 800ce38:	4628      	movcs	r0, r5
 800ce3a:	1a2d      	subs	r5, r5, r0
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	4631      	mov	r1, r6
 800ce40:	f004 0301 	and.w	r3, r4, #1
 800ce44:	3a01      	subs	r2, #1
 800ce46:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800ce4a:	f821 3b02 	strh.w	r3, [r1], #2
 800ce4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce52:	d1f5      	bne.n	800ce40 <_DrawBitmap+0x828>
 800ce54:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800ce58:	2d00      	cmp	r5, #0
 800ce5a:	f43f ad88 	beq.w	800c96e <_DrawBitmap+0x356>
 800ce5e:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800ce62:	4a77      	ldr	r2, [pc, #476]	; (800d040 <_DrawBitmap+0xa28>)
 800ce64:	2008      	movs	r0, #8
 800ce66:	5cd4      	ldrb	r4, [r2, r3]
 800ce68:	e7e4      	b.n	800ce34 <_DrawBitmap+0x81c>
 800ce6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	4798      	blx	r3
 800ce72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce74:	9a02      	ldr	r2, [sp, #8]
 800ce76:	9305      	str	r3, [sp, #20]
 800ce78:	9203      	str	r2, [sp, #12]
 800ce7a:	b283      	uxth	r3, r0
 800ce7c:	9a08      	ldr	r2, [sp, #32]
 800ce7e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800ce82:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800ce86:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 800ce8a:	9207      	str	r2, [sp, #28]
 800ce8c:	469a      	mov	sl, r3
 800ce8e:	45d9      	cmp	r9, fp
 800ce90:	bf28      	it	cs
 800ce92:	46d9      	movcs	r9, fp
 800ce94:	ebc9 0b0b 	rsb	fp, r9, fp
 800ce98:	f1b8 0f00 	cmp.w	r8, #0
 800ce9c:	f43f ad4e 	beq.w	800c93c <_DrawBitmap+0x324>
 800cea0:	464d      	mov	r5, r9
 800cea2:	9e03      	ldr	r6, [sp, #12]
 800cea4:	9f07      	ldr	r7, [sp, #28]
 800cea6:	e005      	b.n	800ceb4 <_DrawBitmap+0x89c>
 800cea8:	3d01      	subs	r5, #1
 800ceaa:	f106 0602 	add.w	r6, r6, #2
 800ceae:	f107 0701 	add.w	r7, r7, #1
 800ceb2:	d015      	beq.n	800cee0 <_DrawBitmap+0x8c8>
 800ceb4:	f014 0f01 	tst.w	r4, #1
 800ceb8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cebc:	d0f4      	beq.n	800cea8 <_DrawBitmap+0x890>
 800cebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cec2:	9a04      	ldr	r2, [sp, #16]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4639      	mov	r1, r7
 800cec8:	4640      	mov	r0, r8
 800ceca:	4798      	blx	r3
 800cecc:	8833      	ldrh	r3, [r6, #0]
 800cece:	3d01      	subs	r5, #1
 800ced0:	ea8a 0303 	eor.w	r3, sl, r3
 800ced4:	8033      	strh	r3, [r6, #0]
 800ced6:	f107 0701 	add.w	r7, r7, #1
 800ceda:	f106 0602 	add.w	r6, r6, #2
 800cede:	d1e9      	bne.n	800ceb4 <_DrawBitmap+0x89c>
 800cee0:	9b03      	ldr	r3, [sp, #12]
 800cee2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 800cee6:	9303      	str	r3, [sp, #12]
 800cee8:	9b07      	ldr	r3, [sp, #28]
 800ceea:	444b      	add	r3, r9
 800ceec:	9307      	str	r3, [sp, #28]
 800ceee:	f1bb 0f00 	cmp.w	fp, #0
 800cef2:	f43f ad3a 	beq.w	800c96a <_DrawBitmap+0x352>
 800cef6:	9b05      	ldr	r3, [sp, #20]
 800cef8:	4a51      	ldr	r2, [pc, #324]	; (800d040 <_DrawBitmap+0xa28>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	5cd4      	ldrb	r4, [r2, r3]
 800cefe:	9b05      	ldr	r3, [sp, #20]
 800cf00:	3301      	adds	r3, #1
 800cf02:	9305      	str	r3, [sp, #20]
 800cf04:	f04f 0908 	mov.w	r9, #8
 800cf08:	e7c1      	b.n	800ce8e <_DrawBitmap+0x876>
 800cf0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cf0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cf10:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800cf14:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf18:	454d      	cmp	r5, r9
 800cf1a:	bf28      	it	cs
 800cf1c:	464d      	movcs	r5, r9
 800cf1e:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 800cf22:	9e02      	ldr	r6, [sp, #8]
 800cf24:	9f08      	ldr	r7, [sp, #32]
 800cf26:	f8dd b010 	ldr.w	fp, [sp, #16]
 800cf2a:	469a      	mov	sl, r3
 800cf2c:	ebc5 0909 	rsb	r9, r5, r9
 800cf30:	f1b8 0f00 	cmp.w	r8, #0
 800cf34:	d02d      	beq.n	800cf92 <_DrawBitmap+0x97a>
 800cf36:	b944      	cbnz	r4, 800cf4a <_DrawBitmap+0x932>
 800cf38:	e038      	b.n	800cfac <_DrawBitmap+0x994>
 800cf3a:	3d01      	subs	r5, #1
 800cf3c:	f107 0701 	add.w	r7, r7, #1
 800cf40:	f106 0602 	add.w	r6, r6, #2
 800cf44:	d012      	beq.n	800cf6c <_DrawBitmap+0x954>
 800cf46:	0864      	lsrs	r4, r4, #1
 800cf48:	d030      	beq.n	800cfac <_DrawBitmap+0x994>
 800cf4a:	07e2      	lsls	r2, r4, #31
 800cf4c:	d5f5      	bpl.n	800cf3a <_DrawBitmap+0x922>
 800cf4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf52:	4639      	mov	r1, r7
 800cf54:	465a      	mov	r2, fp
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4640      	mov	r0, r8
 800cf5a:	4798      	blx	r3
 800cf5c:	3d01      	subs	r5, #1
 800cf5e:	f8a6 a000 	strh.w	sl, [r6]
 800cf62:	f107 0701 	add.w	r7, r7, #1
 800cf66:	f106 0602 	add.w	r6, r6, #2
 800cf6a:	d1ec      	bne.n	800cf46 <_DrawBitmap+0x92e>
 800cf6c:	f1b9 0f00 	cmp.w	r9, #0
 800cf70:	f43f acfb 	beq.w	800c96a <_DrawBitmap+0x352>
 800cf74:	9a03      	ldr	r2, [sp, #12]
 800cf76:	2508      	movs	r5, #8
 800cf78:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800cf7c:	9203      	str	r2, [sp, #12]
 800cf7e:	454d      	cmp	r5, r9
 800cf80:	4a2f      	ldr	r2, [pc, #188]	; (800d040 <_DrawBitmap+0xa28>)
 800cf82:	bf28      	it	cs
 800cf84:	464d      	movcs	r5, r9
 800cf86:	5cd4      	ldrb	r4, [r2, r3]
 800cf88:	ebc5 0909 	rsb	r9, r5, r9
 800cf8c:	f1b8 0f00 	cmp.w	r8, #0
 800cf90:	d1d1      	bne.n	800cf36 <_DrawBitmap+0x91e>
 800cf92:	b914      	cbnz	r4, 800cf9a <_DrawBitmap+0x982>
 800cf94:	e00e      	b.n	800cfb4 <_DrawBitmap+0x99c>
 800cf96:	0864      	lsrs	r4, r4, #1
 800cf98:	d00c      	beq.n	800cfb4 <_DrawBitmap+0x99c>
 800cf9a:	07e3      	lsls	r3, r4, #31
 800cf9c:	bf48      	it	mi
 800cf9e:	f8a6 a000 	strhmi.w	sl, [r6]
 800cfa2:	3d01      	subs	r5, #1
 800cfa4:	f106 0602 	add.w	r6, r6, #2
 800cfa8:	d1f5      	bne.n	800cf96 <_DrawBitmap+0x97e>
 800cfaa:	e7df      	b.n	800cf6c <_DrawBitmap+0x954>
 800cfac:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 800cfb0:	442f      	add	r7, r5
 800cfb2:	e7db      	b.n	800cf6c <_DrawBitmap+0x954>
 800cfb4:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 800cfb8:	e7d8      	b.n	800cf6c <_DrawBitmap+0x954>
 800cfba:	4b22      	ldr	r3, [pc, #136]	; (800d044 <_DrawBitmap+0xa2c>)
 800cfbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	9802      	ldr	r0, [sp, #8]
 800cfc2:	4798      	blx	r3
 800cfc4:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800cfc8:	4658      	mov	r0, fp
 800cfca:	e463      	b.n	800c894 <_DrawBitmap+0x27c>
 800cfcc:	0924      	lsrs	r4, r4, #4
 800cfce:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800cfd2:	f8a8 3000 	strh.w	r3, [r8]
 800cfd6:	f1ba 0f00 	cmp.w	sl, #0
 800cfda:	f43f adee 	beq.w	800cbba <_DrawBitmap+0x5a2>
 800cfde:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	9908      	ldr	r1, [sp, #32]
 800cfe8:	4650      	mov	r0, sl
 800cfea:	4798      	blx	r3
 800cfec:	e5e5      	b.n	800cbba <_DrawBitmap+0x5a2>
 800cfee:	9903      	ldr	r1, [sp, #12]
 800cff0:	9b02      	ldr	r3, [sp, #8]
 800cff2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cff6:	b102      	cbz	r2, 800cffa <_DrawBitmap+0x9e2>
 800cff8:	801a      	strh	r2, [r3, #0]
 800cffa:	3302      	adds	r3, #2
 800cffc:	42b3      	cmp	r3, r6
 800cffe:	d1f8      	bne.n	800cff2 <_DrawBitmap+0x9da>
 800d000:	e447      	b.n	800c892 <_DrawBitmap+0x27a>
 800d002:	4b11      	ldr	r3, [pc, #68]	; (800d048 <_DrawBitmap+0xa30>)
 800d004:	681c      	ldr	r4, [r3, #0]
 800d006:	b16c      	cbz	r4, 800d024 <_DrawBitmap+0xa0c>
 800d008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	9b06      	ldr	r3, [sp, #24]
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d012:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d014:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d016:	9802      	ldr	r0, [sp, #8]
 800d018:	47a0      	blx	r4
 800d01a:	f7ff bb82 	b.w	800c722 <_DrawBitmap+0x10a>
 800d01e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d020:	f7ff bb7b 	b.w	800c71a <_DrawBitmap+0x102>
 800d024:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d026:	2b00      	cmp	r3, #0
 800d028:	f77f ab7b 	ble.w	800c722 <_DrawBitmap+0x10a>
 800d02c:	f7ff bbc3 	b.w	800c7b6 <_DrawBitmap+0x19e>
 800d030:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d032:	2800      	cmp	r0, #0
 800d034:	f47f ab72 	bne.w	800c71c <_DrawBitmap+0x104>
 800d038:	f7ff bb73 	b.w	800c722 <_DrawBitmap+0x10a>
 800d03c:	2000007c 	.word	0x2000007c
 800d040:	0801a428 	.word	0x0801a428
 800d044:	20000090 	.word	0x20000090
 800d048:	20000744 	.word	0x20000744

0800d04c <_GetDevProp>:
 800d04c:	2908      	cmp	r1, #8
 800d04e:	d101      	bne.n	800d054 <_GetDevProp+0x8>
 800d050:	2010      	movs	r0, #16
 800d052:	4770      	bx	lr
 800d054:	6800      	ldr	r0, [r0, #0]
 800d056:	b110      	cbz	r0, 800d05e <_GetDevProp+0x12>
 800d058:	68c3      	ldr	r3, [r0, #12]
 800d05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05c:	4718      	bx	r3
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d062:	4770      	bx	lr

0800d064 <_GetPixelIndex>:
 800d064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d066:	4b0e      	ldr	r3, [pc, #56]	; (800d0a0 <_GetPixelIndex+0x3c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	b083      	sub	sp, #12
 800d06c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d06e:	460e      	mov	r6, r1
 800d070:	4617      	mov	r7, r2
 800d072:	f7fb fc03 	bl	800887c <GUI_ALLOC_LockH>
 800d076:	4605      	mov	r5, r0
 800d078:	a802      	add	r0, sp, #8
 800d07a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800d07e:	68eb      	ldr	r3, [r5, #12]
 800d080:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 800d084:	f840 5d04 	str.w	r5, [r0, #-4]!
 800d088:	1abf      	subs	r7, r7, r2
 800d08a:	fb03 f307 	mul.w	r3, r3, r7
 800d08e:	3318      	adds	r3, #24
 800d090:	1b34      	subs	r4, r6, r4
 800d092:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800d096:	f7fb fc03 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d09a:	5b28      	ldrh	r0, [r5, r4]
 800d09c:	b003      	add	sp, #12
 800d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a0:	2000007c 	.word	0x2000007c

0800d0a4 <_SetPixelIndex>:
 800d0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	4c1b      	ldr	r4, [pc, #108]	; (800d118 <_SetPixelIndex+0x74>)
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	4690      	mov	r8, r2
 800d0b4:	4699      	mov	r9, r3
 800d0b6:	f7fb fbe1 	bl	800887c <GUI_ALLOC_LockH>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	9000      	str	r0, [sp, #0]
 800d0be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d0c0:	f7fb fbdc 	bl	800887c <GUI_ALLOC_LockH>
 800d0c4:	ae02      	add	r6, sp, #8
 800d0c6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800d0ca:	68c1      	ldr	r1, [r0, #12]
 800d0cc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d0d0:	f846 0d04 	str.w	r0, [r6, #-4]!
 800d0d4:	ebc2 0208 	rsb	r2, r2, r8
 800d0d8:	fb01 f202 	mul.w	r2, r1, r2
 800d0dc:	4605      	mov	r5, r0
 800d0de:	3218      	adds	r2, #24
 800d0e0:	1b3c      	subs	r4, r7, r4
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800d0e8:	f7fb fbda 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d0ec:	9b00      	ldr	r3, [sp, #0]
 800d0ee:	f825 9004 	strh.w	r9, [r5, r4]
 800d0f2:	6958      	ldr	r0, [r3, #20]
 800d0f4:	b150      	cbz	r0, 800d10c <_SetPixelIndex+0x68>
 800d0f6:	f7fb fbc1 	bl	800887c <GUI_ALLOC_LockH>
 800d0fa:	9001      	str	r0, [sp, #4]
 800d0fc:	6883      	ldr	r3, [r0, #8]
 800d0fe:	4642      	mov	r2, r8
 800d100:	4639      	mov	r1, r7
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4798      	blx	r3
 800d106:	4630      	mov	r0, r6
 800d108:	f7fb fbca 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d10c:	4668      	mov	r0, sp
 800d10e:	f7fb fbc7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d112:	b003      	add	sp, #12
 800d114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d118:	2000007c 	.word	0x2000007c

0800d11c <_XorPixel>:
 800d11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d120:	4c1e      	ldr	r4, [pc, #120]	; (800d19c <_XorPixel+0x80>)
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	b083      	sub	sp, #12
 800d126:	4681      	mov	r9, r0
 800d128:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d12a:	460f      	mov	r7, r1
 800d12c:	4690      	mov	r8, r2
 800d12e:	f7fb fba5 	bl	800887c <GUI_ALLOC_LockH>
 800d132:	6823      	ldr	r3, [r4, #0]
 800d134:	9000      	str	r0, [sp, #0]
 800d136:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d138:	f7fb fba0 	bl	800887c <GUI_ALLOC_LockH>
 800d13c:	ae02      	add	r6, sp, #8
 800d13e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d142:	68c2      	ldr	r2, [r0, #12]
 800d144:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d148:	f846 0d04 	str.w	r0, [r6, #-4]!
 800d14c:	ebc3 0308 	rsb	r3, r3, r8
 800d150:	fb02 f303 	mul.w	r3, r2, r3
 800d154:	4605      	mov	r5, r0
 800d156:	3318      	adds	r3, #24
 800d158:	1b3c      	subs	r4, r7, r4
 800d15a:	4630      	mov	r0, r6
 800d15c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800d160:	f7fb fb9e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	4798      	blx	r3
 800d16c:	9a00      	ldr	r2, [sp, #0]
 800d16e:	5b2b      	ldrh	r3, [r5, r4]
 800d170:	6952      	ldr	r2, [r2, #20]
 800d172:	4058      	eors	r0, r3
 800d174:	5328      	strh	r0, [r5, r4]
 800d176:	b15a      	cbz	r2, 800d190 <_XorPixel+0x74>
 800d178:	4610      	mov	r0, r2
 800d17a:	f7fb fb7f 	bl	800887c <GUI_ALLOC_LockH>
 800d17e:	9001      	str	r0, [sp, #4]
 800d180:	6883      	ldr	r3, [r0, #8]
 800d182:	4642      	mov	r2, r8
 800d184:	4639      	mov	r1, r7
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4798      	blx	r3
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7fb fb88 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d190:	4668      	mov	r0, sp
 800d192:	f7fb fb85 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d196:	b003      	add	sp, #12
 800d198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d19c:	2000007c 	.word	0x2000007c

0800d1a0 <_FillRect>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	4f58      	ldr	r7, [pc, #352]	; (800d308 <_FillRect+0x168>)
 800d1a6:	683c      	ldr	r4, [r7, #0]
 800d1a8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800d1aa:	b089      	sub	sp, #36	; 0x24
 800d1ac:	4683      	mov	fp, r0
 800d1ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d1b0:	f8d5 a000 	ldr.w	sl, [r5]
 800d1b4:	4689      	mov	r9, r1
 800d1b6:	4615      	mov	r5, r2
 800d1b8:	461e      	mov	r6, r3
 800d1ba:	f7fb fb5f 	bl	800887c <GUI_ALLOC_LockH>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	9006      	str	r0, [sp, #24]
 800d1c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d1c4:	f7fb fb5a 	bl	800887c <GUI_ALLOC_LockH>
 800d1c8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800d1cc:	68c3      	ldr	r3, [r0, #12]
 800d1ce:	f10d 0820 	add.w	r8, sp, #32
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	1aaa      	subs	r2, r5, r2
 800d1d6:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800d1da:	f848 4d04 	str.w	r4, [r8, #-4]!
 800d1de:	fb03 f202 	mul.w	r2, r3, r2
 800d1e2:	f102 0118 	add.w	r1, r2, #24
 800d1e6:	ebc0 0209 	rsb	r2, r0, r9
 800d1ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4414      	add	r4, r2
 800d1f2:	f7fb fb55 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d1f6:	9b06      	ldr	r3, [sp, #24]
 800d1f8:	6958      	ldr	r0, [r3, #20]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	9302      	str	r3, [sp, #8]
 800d1fe:	ebc9 0306 	rsb	r3, r9, r6
 800d202:	9305      	str	r3, [sp, #20]
 800d204:	1c5e      	adds	r6, r3, #1
 800d206:	2800      	cmp	r0, #0
 800d208:	d16e      	bne.n	800d2e8 <_FillRect+0x148>
 800d20a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d20c:	429d      	cmp	r5, r3
 800d20e:	dc5d      	bgt.n	800d2cc <_FillRect+0x12c>
 800d210:	fa1f f38a 	uxth.w	r3, sl
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	7c1b      	ldrb	r3, [r3, #16]
 800d21a:	07db      	lsls	r3, r3, #31
 800d21c:	d55c      	bpl.n	800d2d8 <_FillRect+0x138>
 800d21e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	4798      	blx	r3
 800d226:	f3c4 0340 	ubfx	r3, r4, #1, #1
 800d22a:	42b3      	cmp	r3, r6
 800d22c:	bf28      	it	cs
 800d22e:	4633      	movcs	r3, r6
 800d230:	2e03      	cmp	r6, #3
 800d232:	bf98      	it	ls
 800d234:	4633      	movls	r3, r6
 800d236:	b280      	uxth	r0, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d053      	beq.n	800d2e4 <_FillRect+0x144>
 800d23c:	8822      	ldrh	r2, [r4, #0]
 800d23e:	46a4      	mov	ip, r4
 800d240:	4042      	eors	r2, r0
 800d242:	2b01      	cmp	r3, #1
 800d244:	f82c 2b02 	strh.w	r2, [ip], #2
 800d248:	d00c      	beq.n	800d264 <_FillRect+0xc4>
 800d24a:	8862      	ldrh	r2, [r4, #2]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	ea82 0200 	eor.w	r2, r2, r0
 800d252:	8062      	strh	r2, [r4, #2]
 800d254:	f104 0c04 	add.w	ip, r4, #4
 800d258:	d104      	bne.n	800d264 <_FillRect+0xc4>
 800d25a:	88a2      	ldrh	r2, [r4, #4]
 800d25c:	4042      	eors	r2, r0
 800d25e:	80a2      	strh	r2, [r4, #4]
 800d260:	f104 0c06 	add.w	ip, r4, #6
 800d264:	42b3      	cmp	r3, r6
 800d266:	d02b      	beq.n	800d2c0 <_FillRect+0x120>
 800d268:	ebc3 0a06 	rsb	sl, r3, r6
 800d26c:	f1aa 0e02 	sub.w	lr, sl, #2
 800d270:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800d274:	f10e 0e01 	add.w	lr, lr, #1
 800d278:	ea4f 024e 	mov.w	r2, lr, lsl #1
 800d27c:	9203      	str	r2, [sp, #12]
 800d27e:	9a05      	ldr	r2, [sp, #20]
 800d280:	4293      	cmp	r3, r2
 800d282:	d018      	beq.n	800d2b6 <_FillRect+0x116>
 800d284:	f04f 0900 	mov.w	r9, #0
 800d288:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800d28c:	f360 090f 	bfi	r9, r0, #0, #16
 800d290:	f360 491f 	bfi	r9, r0, #16, #16
 800d294:	f1a3 0804 	sub.w	r8, r3, #4
 800d298:	2100      	movs	r1, #0
 800d29a:	f858 2f04 	ldr.w	r2, [r8, #4]!
 800d29e:	3101      	adds	r1, #1
 800d2a0:	ea89 0202 	eor.w	r2, r9, r2
 800d2a4:	458e      	cmp	lr, r1
 800d2a6:	f843 2b04 	str.w	r2, [r3], #4
 800d2aa:	d8f6      	bhi.n	800d29a <_FillRect+0xfa>
 800d2ac:	9a03      	ldr	r2, [sp, #12]
 800d2ae:	4592      	cmp	sl, r2
 800d2b0:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 800d2b4:	d004      	beq.n	800d2c0 <_FillRect+0x120>
 800d2b6:	f8bc 3000 	ldrh.w	r3, [ip]
 800d2ba:	4058      	eors	r0, r3
 800d2bc:	f8ac 0000 	strh.w	r0, [ip]
 800d2c0:	9b02      	ldr	r3, [sp, #8]
 800d2c2:	441c      	add	r4, r3
 800d2c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d2c6:	3501      	adds	r5, #1
 800d2c8:	42ab      	cmp	r3, r5
 800d2ca:	daa4      	bge.n	800d216 <_FillRect+0x76>
 800d2cc:	a806      	add	r0, sp, #24
 800d2ce:	f7fb fae7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d2d2:	b009      	add	sp, #36	; 0x24
 800d2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d8:	4632      	mov	r2, r6
 800d2da:	9904      	ldr	r1, [sp, #16]
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f7fc ff9b 	bl	800a218 <GUI__memset16>
 800d2e2:	e7ed      	b.n	800d2c0 <_FillRect+0x120>
 800d2e4:	46a4      	mov	ip, r4
 800d2e6:	e7bf      	b.n	800d268 <_FillRect+0xc8>
 800d2e8:	f7fb fac8 	bl	800887c <GUI_ALLOC_LockH>
 800d2ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d2ee:	9007      	str	r0, [sp, #28]
 800d2f0:	1b5b      	subs	r3, r3, r5
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	4633      	mov	r3, r6
 800d2fa:	462a      	mov	r2, r5
 800d2fc:	f000 f89a 	bl	800d434 <GUI_USAGE_AddRect>
 800d300:	4640      	mov	r0, r8
 800d302:	f7fb facd 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d306:	e780      	b.n	800d20a <_FillRect+0x6a>
 800d308:	2000007c 	.word	0x2000007c

0800d30c <_DrawHLine>:
 800d30c:	b500      	push	{lr}
 800d30e:	b083      	sub	sp, #12
 800d310:	9200      	str	r2, [sp, #0]
 800d312:	f7ff ff45 	bl	800d1a0 <_FillRect>
 800d316:	b003      	add	sp, #12
 800d318:	f85d fb04 	ldr.w	pc, [sp], #4

0800d31c <_DrawVLine>:
 800d31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d320:	4f36      	ldr	r7, [pc, #216]	; (800d3fc <_DrawVLine+0xe0>)
 800d322:	683c      	ldr	r4, [r7, #0]
 800d324:	b085      	sub	sp, #20
 800d326:	4681      	mov	r9, r0
 800d328:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d32a:	4688      	mov	r8, r1
 800d32c:	4615      	mov	r5, r2
 800d32e:	461e      	mov	r6, r3
 800d330:	f7fb faa4 	bl	800887c <GUI_ALLOC_LockH>
 800d334:	9001      	str	r0, [sp, #4]
 800d336:	6940      	ldr	r0, [r0, #20]
 800d338:	2800      	cmp	r0, #0
 800d33a:	d13d      	bne.n	800d3b8 <_DrawVLine+0x9c>
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	9002      	str	r0, [sp, #8]
 800d340:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d342:	f7fb fa9b 	bl	800887c <GUI_ALLOC_LockH>
 800d346:	4602      	mov	r2, r0
 800d348:	a804      	add	r0, sp, #16
 800d34a:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800d34e:	68d3      	ldr	r3, [r2, #12]
 800d350:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d354:	1b2c      	subs	r4, r5, r4
 800d356:	fb03 f304 	mul.w	r3, r3, r4
 800d35a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800d35e:	3318      	adds	r3, #24
 800d360:	ebc4 0408 	rsb	r4, r4, r8
 800d364:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800d368:	18d4      	adds	r4, r2, r3
 800d36a:	f7fb fa99 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	7c1a      	ldrb	r2, [r3, #16]
 800d372:	07d2      	lsls	r2, r2, #31
 800d374:	d423      	bmi.n	800d3be <_DrawVLine+0xa2>
 800d376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d378:	9802      	ldr	r0, [sp, #8]
 800d37a:	9b01      	ldr	r3, [sp, #4]
 800d37c:	6812      	ldr	r2, [r2, #0]
 800d37e:	68df      	ldr	r7, [r3, #12]
 800d380:	2800      	cmp	r0, #0
 800d382:	d033      	beq.n	800d3ec <_DrawVLine+0xd0>
 800d384:	fa1f f982 	uxth.w	r9, r2
 800d388:	e000      	b.n	800d38c <_DrawVLine+0x70>
 800d38a:	9802      	ldr	r0, [sp, #8]
 800d38c:	6883      	ldr	r3, [r0, #8]
 800d38e:	462a      	mov	r2, r5
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4641      	mov	r1, r8
 800d394:	3501      	adds	r5, #1
 800d396:	4798      	blx	r3
 800d398:	42ae      	cmp	r6, r5
 800d39a:	f8a4 9000 	strh.w	r9, [r4]
 800d39e:	443c      	add	r4, r7
 800d3a0:	daf3      	bge.n	800d38a <_DrawVLine+0x6e>
 800d3a2:	a801      	add	r0, sp, #4
 800d3a4:	f7fb fa7c 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d3a8:	9b02      	ldr	r3, [sp, #8]
 800d3aa:	b113      	cbz	r3, 800d3b2 <_DrawVLine+0x96>
 800d3ac:	a802      	add	r0, sp, #8
 800d3ae:	f7fb fa77 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d3b2:	b005      	add	sp, #20
 800d3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3b8:	f7fb fa60 	bl	800887c <GUI_ALLOC_LockH>
 800d3bc:	e7be      	b.n	800d33c <_DrawVLine+0x20>
 800d3be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	4798      	blx	r3
 800d3c6:	b287      	uxth	r7, r0
 800d3c8:	9b02      	ldr	r3, [sp, #8]
 800d3ca:	462a      	mov	r2, r5
 800d3cc:	4641      	mov	r1, r8
 800d3ce:	3501      	adds	r5, #1
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	b113      	cbz	r3, 800d3da <_DrawVLine+0xbe>
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4798      	blx	r3
 800d3da:	9a01      	ldr	r2, [sp, #4]
 800d3dc:	8823      	ldrh	r3, [r4, #0]
 800d3de:	68d2      	ldr	r2, [r2, #12]
 800d3e0:	407b      	eors	r3, r7
 800d3e2:	42b5      	cmp	r5, r6
 800d3e4:	8023      	strh	r3, [r4, #0]
 800d3e6:	4414      	add	r4, r2
 800d3e8:	ddee      	ble.n	800d3c8 <_DrawVLine+0xac>
 800d3ea:	e7da      	b.n	800d3a2 <_DrawVLine+0x86>
 800d3ec:	1b73      	subs	r3, r6, r5
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	b292      	uxth	r2, r2
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	8022      	strh	r2, [r4, #0]
 800d3f6:	443c      	add	r4, r7
 800d3f8:	d1fb      	bne.n	800d3f2 <_DrawVLine+0xd6>
 800d3fa:	e7d2      	b.n	800d3a2 <_DrawVLine+0x86>
 800d3fc:	2000007c 	.word	0x2000007c

0800d400 <GUI_USAGE_DecUseCnt>:
 800d400:	b530      	push	{r4, r5, lr}
 800d402:	4605      	mov	r5, r0
 800d404:	b083      	sub	sp, #12
 800d406:	f7fc fd65 	bl	8009ed4 <GUI_Lock>
 800d40a:	4628      	mov	r0, r5
 800d40c:	f7fb fa36 	bl	800887c <GUI_ALLOC_LockH>
 800d410:	ab02      	add	r3, sp, #8
 800d412:	8984      	ldrh	r4, [r0, #12]
 800d414:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d418:	3c01      	subs	r4, #1
 800d41a:	b224      	sxth	r4, r4
 800d41c:	8184      	strh	r4, [r0, #12]
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fb fa3e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d424:	b914      	cbnz	r4, 800d42c <GUI_USAGE_DecUseCnt+0x2c>
 800d426:	4628      	mov	r0, r5
 800d428:	f7fb fbae 	bl	8008b88 <GUI_ALLOC_Free>
 800d42c:	f7fc fd48 	bl	8009ec0 <GUI_Unlock>
 800d430:	b003      	add	sp, #12
 800d432:	bd30      	pop	{r4, r5, pc}

0800d434 <GUI_USAGE_AddRect>:
 800d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d438:	9c08      	ldr	r4, [sp, #32]
 800d43a:	4605      	mov	r5, r0
 800d43c:	4689      	mov	r9, r1
 800d43e:	4698      	mov	r8, r3
 800d440:	68ab      	ldr	r3, [r5, #8]
 800d442:	4649      	mov	r1, r9
 800d444:	685f      	ldr	r7, [r3, #4]
 800d446:	4628      	mov	r0, r5
 800d448:	4643      	mov	r3, r8
 800d44a:	1c56      	adds	r6, r2, #1
 800d44c:	47b8      	blx	r7
 800d44e:	3c01      	subs	r4, #1
 800d450:	4632      	mov	r2, r6
 800d452:	d1f5      	bne.n	800d440 <GUI_USAGE_AddRect+0xc>
 800d454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d458 <GUI_MEMDEV__WriteToActiveOpaque>:
 800d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45c:	b0a1      	sub	sp, #132	; 0x84
 800d45e:	910d      	str	r1, [sp, #52]	; 0x34
 800d460:	b910      	cbnz	r0, 800d468 <GUI_MEMDEV__WriteToActiveOpaque+0x10>
 800d462:	b021      	add	sp, #132	; 0x84
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	4692      	mov	sl, r2
 800d46a:	4607      	mov	r7, r0
 800d46c:	f7fb fa06 	bl	800887c <GUI_ALLOC_LockH>
 800d470:	ab20      	add	r3, sp, #128	; 0x80
 800d472:	6944      	ldr	r4, [r0, #20]
 800d474:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fb fa11 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d47e:	4638      	mov	r0, r7
 800d480:	f005 fe42 	bl	8013108 <GUI_MEMDEV_GetBitsPerPixel>
 800d484:	2808      	cmp	r0, #8
 800d486:	4605      	mov	r5, r0
 800d488:	dd02      	ble.n	800d490 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	f000 80d9 	beq.w	800d642 <GUI_MEMDEV__WriteToActiveOpaque+0x1ea>
 800d490:	2301      	movs	r3, #1
 800d492:	f04f 0b00 	mov.w	fp, #0
 800d496:	4638      	mov	r0, r7
 800d498:	931f      	str	r3, [sp, #124]	; 0x7c
 800d49a:	930a      	str	r3, [sp, #40]	; 0x28
 800d49c:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 800d4a0:	f7fb f9ec 	bl	800887c <GUI_ALLOC_LockH>
 800d4a4:	6801      	ldr	r1, [r0, #0]
 800d4a6:	f8df 8468 	ldr.w	r8, [pc, #1128]	; 800d910 <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>
 800d4aa:	6909      	ldr	r1, [r1, #16]
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	f8d8 0000 	ldr.w	r0, [r8]
 800d4b2:	68e3      	ldr	r3, [r4, #12]
 800d4b4:	684d      	ldr	r5, [r1, #4]
 800d4b6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d4ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4bc:	ae20      	add	r6, sp, #128	; 0x80
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	9114      	str	r1, [sp, #80]	; 0x50
 800d4c2:	7c40      	ldrb	r0, [r0, #17]
 800d4c4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 800d4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ca:	f846 4d14 	str.w	r4, [r6, #-20]!
 800d4ce:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800d4d2:	9116      	str	r1, [sp, #88]	; 0x58
 800d4d4:	f7fd fdae 	bl	800b034 <GUI_GetBitsPerPixelEx>
 800d4d8:	f8d8 1000 	ldr.w	r1, [r8]
 800d4dc:	9008      	str	r0, [sp, #32]
 800d4de:	7c48      	ldrb	r0, [r1, #17]
 800d4e0:	f7fd fdc2 	bl	800b068 <GUI_GetpfIndex2ColorEx>
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7fb f9da 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4f0:	2a08      	cmp	r2, #8
 800d4f2:	f240 80a0 	bls.w	800d636 <GUI_MEMDEV__WriteToActiveOpaque+0x1de>
 800d4f6:	2a10      	cmp	r2, #16
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	bf8c      	ite	hi
 800d4fc:	2304      	movhi	r3, #4
 800d4fe:	2302      	movls	r3, #2
 800d500:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d504:	930e      	str	r3, [sp, #56]	; 0x38
 800d506:	42a5      	cmp	r5, r4
 800d508:	f000 81ac 	beq.w	800d864 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 800d50c:	f8d8 3000 	ldr.w	r3, [r8]
 800d510:	7c58      	ldrb	r0, [r3, #17]
 800d512:	f7fd fdb1 	bl	800b078 <GUI_GetpfColor2IndexEx>
 800d516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d518:	4606      	mov	r6, r0
 800d51a:	0098      	lsls	r0, r3, #2
 800d51c:	f7fb f996 	bl	800884c <GUI_ALLOC_AllocNoInit>
 800d520:	9012      	str	r0, [sp, #72]	; 0x48
 800d522:	2800      	cmp	r0, #0
 800d524:	d09d      	beq.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d526:	4638      	mov	r0, r7
 800d528:	f005 ff9c 	bl	8013464 <GUI_MEMDEV_GetDataPtr>
 800d52c:	4607      	mov	r7, r0
 800d52e:	f1b9 0f00 	cmp.w	r9, #0
 800d532:	f000 80f5 	beq.w	800d720 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 800d536:	4648      	mov	r0, r9
 800d538:	f7fb f9a0 	bl	800887c <GUI_ALLOC_LockH>
 800d53c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d53e:	901c      	str	r0, [sp, #112]	; 0x70
 800d540:	2b00      	cmp	r3, #0
 800d542:	f340 818b 	ble.w	800d85c <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 800d546:	2300      	movs	r3, #0
 800d548:	930c      	str	r3, [sp, #48]	; 0x30
 800d54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d54c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800d550:	18fb      	adds	r3, r7, r3
 800d552:	9315      	str	r3, [sp, #84]	; 0x54
 800d554:	ab1d      	add	r3, sp, #116	; 0x74
 800d556:	9311      	str	r3, [sp, #68]	; 0x44
 800d558:	f04f 0801 	mov.w	r8, #1
 800d55c:	4619      	mov	r1, r3
 800d55e:	6883      	ldr	r3, [r0, #8]
 800d560:	2200      	movs	r2, #0
 800d562:	921d      	str	r2, [sp, #116]	; 0x74
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d568:	4798      	blx	r3
 800d56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d56c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	930b      	str	r3, [sp, #44]	; 0x2c
 800d572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d574:	4283      	cmp	r3, r0
 800d576:	4604      	mov	r4, r0
 800d578:	f000 8131 	beq.w	800d7de <GUI_MEMDEV__WriteToActiveOpaque+0x386>
 800d57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d57e:	2b01      	cmp	r3, #1
 800d580:	f000 80f2 	beq.w	800d768 <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 800d584:	2800      	cmp	r0, #0
 800d586:	d045      	beq.n	800d614 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 800d588:	ab1a      	add	r3, sp, #104	; 0x68
 800d58a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d58c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d58e:	f7fb f975 	bl	800887c <GUI_ALLOC_LockH>
 800d592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d594:	901a      	str	r0, [sp, #104]	; 0x68
 800d596:	2b08      	cmp	r3, #8
 800d598:	4607      	mov	r7, r0
 800d59a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d59c:	f240 80d4 	bls.w	800d748 <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 800d5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5a4:	46a3      	mov	fp, r4
 800d5a6:	fb02 1a03 	mla	sl, r2, r3, r1
 800d5aa:	4681      	mov	r9, r0
 800d5ac:	f83a 0b02 	ldrh.w	r0, [sl], #2
 800d5b0:	47a8      	blx	r5
 800d5b2:	47b0      	blx	r6
 800d5b4:	f1bb 0b01 	subs.w	fp, fp, #1
 800d5b8:	f849 0b04 	str.w	r0, [r9], #4
 800d5bc:	d1f6      	bne.n	800d5ac <GUI_MEMDEV__WriteToActiveOpaque+0x154>
 800d5be:	9b08      	ldr	r3, [sp, #32]
 800d5c0:	2b1f      	cmp	r3, #31
 800d5c2:	d804      	bhi.n	800d5ce <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	f005 f84b 	bl	8012664 <GUI__CompactPixelIndices>
 800d5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5d0:	9205      	str	r2, [sp, #20]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	9203      	str	r2, [sp, #12]
 800d5d6:	9a08      	ldr	r2, [sp, #32]
 800d5d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d5da:	9202      	str	r2, [sp, #8]
 800d5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d5e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d5e2:	9304      	str	r3, [sp, #16]
 800d5e4:	4410      	add	r0, r2
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	f8cd 8004 	str.w	r8, [sp, #4]
 800d5ee:	f8cd 8000 	str.w	r8, [sp]
 800d5f2:	f7fd f90b 	bl	800a80c <LCD_DrawBitmap>
 800d5f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d5f8:	f7fb f952 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d5fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d5fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d600:	6882      	ldr	r2, [r0, #8]
 800d602:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d604:	6957      	ldr	r7, [r2, #20]
 800d606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d608:	441c      	add	r4, r3
 800d60a:	941d      	str	r4, [sp, #116]	; 0x74
 800d60c:	47b8      	blx	r7
 800d60e:	4604      	mov	r4, r0
 800d610:	2800      	cmp	r0, #0
 800d612:	d1bb      	bne.n	800d58c <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 800d614:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d616:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d61a:	440a      	add	r2, r1
 800d61c:	9215      	str	r2, [sp, #84]	; 0x54
 800d61e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d620:	3201      	adds	r2, #1
 800d622:	9210      	str	r2, [sp, #64]	; 0x40
 800d624:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d626:	3301      	adds	r3, #1
 800d628:	429a      	cmp	r2, r3
 800d62a:	930c      	str	r3, [sp, #48]	; 0x30
 800d62c:	f000 8116 	beq.w	800d85c <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 800d630:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d632:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d634:	e793      	b.n	800d55e <GUI_MEMDEV__WriteToActiveOpaque+0x106>
 800d636:	2a01      	cmp	r2, #1
 800d638:	d16e      	bne.n	800d718 <GUI_MEMDEV__WriteToActiveOpaque+0x2c0>
 800d63a:	ab1e      	add	r3, sp, #120	; 0x78
 800d63c:	920e      	str	r2, [sp, #56]	; 0x38
 800d63e:	930a      	str	r3, [sp, #40]	; 0x28
 800d640:	e761      	b.n	800d506 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 800d642:	4638      	mov	r0, r7
 800d644:	f7fb f91a 	bl	800887c <GUI_ALLOC_LockH>
 800d648:	ab20      	add	r3, sp, #128	; 0x80
 800d64a:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 800d64e:	f843 0d10 	str.w	r0, [r3, #-16]!
 800d652:	4602      	mov	r2, r0
 800d654:	6801      	ldr	r1, [r0, #0]
 800d656:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800d65a:	9008      	str	r0, [sp, #32]
 800d65c:	4618      	mov	r0, r3
 800d65e:	690e      	ldr	r6, [r1, #16]
 800d660:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800d664:	9209      	str	r2, [sp, #36]	; 0x24
 800d666:	930e      	str	r3, [sp, #56]	; 0x38
 800d668:	f7fb f91a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d66c:	48a8      	ldr	r0, [pc, #672]	; (800d910 <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>)
 800d66e:	49a9      	ldr	r1, [pc, #676]	; (800d914 <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>)
 800d670:	6800      	ldr	r0, [r0, #0]
 800d672:	6873      	ldr	r3, [r6, #4]
 800d674:	7c40      	ldrb	r0, [r0, #17]
 800d676:	930c      	str	r3, [sp, #48]	; 0x30
 800d678:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d67c:	690c      	ldr	r4, [r1, #16]
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	930a      	str	r3, [sp, #40]	; 0x28
 800d682:	f7fd fcd7 	bl	800b034 <GUI_GetBitsPerPixelEx>
 800d686:	2808      	cmp	r0, #8
 800d688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d68a:	d940      	bls.n	800d70e <GUI_MEMDEV__WriteToActiveOpaque+0x2b6>
 800d68c:	2810      	cmp	r0, #16
 800d68e:	bf8c      	ite	hi
 800d690:	2320      	movhi	r3, #32
 800d692:	2310      	movls	r3, #16
 800d694:	9309      	str	r3, [sp, #36]	; 0x24
 800d696:	bf8c      	ite	hi
 800d698:	f04f 0904 	movhi.w	r9, #4
 800d69c:	f04f 0902 	movls.w	r9, #2
 800d6a0:	42a6      	cmp	r6, r4
 800d6a2:	f000 822d 	beq.w	800db00 <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 800d6a6:	2d20      	cmp	r5, #32
 800d6a8:	f000 819e 	beq.w	800d9e8 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 800d6ac:	2d10      	cmp	r5, #16
 800d6ae:	f47f aed8 	bne.w	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d6b2:	fb08 f009 	mul.w	r0, r8, r9
 800d6b6:	f7fb f8c9 	bl	800884c <GUI_ALLOC_AllocNoInit>
 800d6ba:	9010      	str	r0, [sp, #64]	; 0x40
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	f43f aed0 	beq.w	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d6c2:	f7fb f8db 	bl	800887c <GUI_ALLOC_LockH>
 800d6c6:	901e      	str	r0, [sp, #120]	; 0x78
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	f7fb f8d7 	bl	800887c <GUI_ALLOC_LockH>
 800d6ce:	901c      	str	r0, [sp, #112]	; 0x70
 800d6d0:	6923      	ldr	r3, [r4, #16]
 800d6d2:	f100 0218 	add.w	r2, r0, #24
 800d6d6:	920b      	str	r2, [sp, #44]	; 0x2c
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 8222 	beq.w	800db22 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800d6de:	6973      	ldr	r3, [r6, #20]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 821e 	beq.w	800db22 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800d6e6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800d6ea:	0080      	lsls	r0, r0, #2
 800d6ec:	f7fb f8ae 	bl	800884c <GUI_ALLOC_AllocNoInit>
 800d6f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f040 8269 	bne.w	800dbca <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 800d6f8:	901d      	str	r0, [sp, #116]	; 0x74
 800d6fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d6fc:	f7fb f8d0 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d700:	a81e      	add	r0, sp, #120	; 0x78
 800d702:	f7fb f8cd 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d706:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d708:	f7fb fa3e 	bl	8008b88 <GUI_ALLOC_Free>
 800d70c:	e6a9      	b.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d70e:	2308      	movs	r3, #8
 800d710:	9309      	str	r3, [sp, #36]	; 0x24
 800d712:	f04f 0901 	mov.w	r9, #1
 800d716:	e7c3      	b.n	800d6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800d718:	930e      	str	r3, [sp, #56]	; 0x38
 800d71a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d71e:	e6f2      	b.n	800d506 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 800d720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d722:	9305      	str	r3, [sp, #20]
 800d724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d726:	9303      	str	r3, [sp, #12]
 800d728:	2401      	movs	r4, #1
 800d72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d72c:	9004      	str	r0, [sp, #16]
 800d72e:	9302      	str	r3, [sp, #8]
 800d730:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d732:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d734:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d736:	9401      	str	r4, [sp, #4]
 800d738:	4651      	mov	r1, sl
 800d73a:	9400      	str	r4, [sp, #0]
 800d73c:	f7fd f866 	bl	800a80c <LCD_DrawBitmap>
 800d740:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d742:	f7fb fa21 	bl	8008b88 <GUI_ALLOC_Free>
 800d746:	e68c      	b.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d74a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d74c:	46a1      	mov	r9, r4
 800d74e:	fb02 1b03 	mla	fp, r2, r3, r1
 800d752:	4682      	mov	sl, r0
 800d754:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d758:	47a8      	blx	r5
 800d75a:	47b0      	blx	r6
 800d75c:	f1b9 0901 	subs.w	r9, r9, #1
 800d760:	f84a 0b04 	str.w	r0, [sl], #4
 800d764:	d1f6      	bne.n	800d754 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800d766:	e72a      	b.n	800d5be <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 800d768:	2800      	cmp	r0, #0
 800d76a:	f43f af53 	beq.w	800d614 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 800d76e:	9617      	str	r6, [sp, #92]	; 0x5c
 800d770:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d772:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d774:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800d778:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800d77c:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800d780:	9513      	str	r5, [sp, #76]	; 0x4c
 800d782:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 800d786:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d788:	9605      	str	r6, [sp, #20]
 800d78a:	f00e 0007 	and.w	r0, lr, #7
 800d78e:	9006      	str	r0, [sp, #24]
 800d790:	eb0a 000e 	add.w	r0, sl, lr
 800d794:	f1be 0f00 	cmp.w	lr, #0
 800d798:	bfb8      	it	lt
 800d79a:	f10e 0e07 	addlt.w	lr, lr, #7
 800d79e:	eb05 0eee 	add.w	lr, r5, lr, asr #3
 800d7a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d7a4:	f8cd e010 	str.w	lr, [sp, #16]
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	4649      	mov	r1, r9
 800d7ae:	9503      	str	r5, [sp, #12]
 800d7b0:	f8cd 8008 	str.w	r8, [sp, #8]
 800d7b4:	f8cd 8004 	str.w	r8, [sp, #4]
 800d7b8:	f8cd 8000 	str.w	r8, [sp]
 800d7bc:	f7fc ff18 	bl	800a5f0 <LCD__DrawBitmap_1bpp>
 800d7c0:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d7c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7c4:	6882      	ldr	r2, [r0, #8]
 800d7c6:	441c      	add	r4, r3
 800d7c8:	4659      	mov	r1, fp
 800d7ca:	6953      	ldr	r3, [r2, #20]
 800d7cc:	941d      	str	r4, [sp, #116]	; 0x74
 800d7ce:	463a      	mov	r2, r7
 800d7d0:	4798      	blx	r3
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d1d4      	bne.n	800d782 <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 800d7d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d7da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d7dc:	e71a      	b.n	800d614 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 800d7de:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d7e0:	f7fb f84c 	bl	800887c <GUI_ALLOC_LockH>
 800d7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e6:	901a      	str	r0, [sp, #104]	; 0x68
 800d7e8:	2b08      	cmp	r3, #8
 800d7ea:	4681      	mov	r9, r0
 800d7ec:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d7ee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	d929      	bls.n	800d84a <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 800d7f6:	f83a 0b02 	ldrh.w	r0, [sl], #2
 800d7fa:	47a8      	blx	r5
 800d7fc:	47b0      	blx	r6
 800d7fe:	3f01      	subs	r7, #1
 800d800:	f844 0b04 	str.w	r0, [r4], #4
 800d804:	d1f7      	bne.n	800d7f6 <GUI_MEMDEV__WriteToActiveOpaque+0x39e>
 800d806:	9b08      	ldr	r3, [sp, #32]
 800d808:	2b1f      	cmp	r3, #31
 800d80a:	d804      	bhi.n	800d816 <GUI_MEMDEV__WriteToActiveOpaque+0x3be>
 800d80c:	4648      	mov	r0, r9
 800d80e:	461a      	mov	r2, r3
 800d810:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d812:	f004 ff27 	bl	8012664 <GUI__CompactPixelIndices>
 800d816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d818:	9205      	str	r2, [sp, #20]
 800d81a:	ab20      	add	r3, sp, #128	; 0x80
 800d81c:	461a      	mov	r2, r3
 800d81e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d820:	f852 3d18 	ldr.w	r3, [r2, #-24]!
 800d824:	9304      	str	r3, [sp, #16]
 800d826:	4614      	mov	r4, r2
 800d828:	2200      	movs	r2, #0
 800d82a:	9203      	str	r2, [sp, #12]
 800d82c:	9a08      	ldr	r2, [sp, #32]
 800d82e:	9202      	str	r2, [sp, #8]
 800d830:	f8cd 8004 	str.w	r8, [sp, #4]
 800d834:	f8cd 8000 	str.w	r8, [sp]
 800d838:	2301      	movs	r3, #1
 800d83a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d83c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d83e:	f7fc ffe5 	bl	800a80c <LCD_DrawBitmap>
 800d842:	4620      	mov	r0, r4
 800d844:	f7fb f82c 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d848:	e6e4      	b.n	800d614 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 800d84a:	f81a 0b01 	ldrb.w	r0, [sl], #1
 800d84e:	47a8      	blx	r5
 800d850:	47b0      	blx	r6
 800d852:	3f01      	subs	r7, #1
 800d854:	f844 0b04 	str.w	r0, [r4], #4
 800d858:	d1f7      	bne.n	800d84a <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 800d85a:	e7d4      	b.n	800d806 <GUI_MEMDEV__WriteToActiveOpaque+0x3ae>
 800d85c:	a81c      	add	r0, sp, #112	; 0x70
 800d85e:	f7fb f81f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d862:	e76d      	b.n	800d740 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>
 800d864:	4638      	mov	r0, r7
 800d866:	f005 fdfd 	bl	8013464 <GUI_MEMDEV_GetDataPtr>
 800d86a:	4607      	mov	r7, r0
 800d86c:	f1b9 0f00 	cmp.w	r9, #0
 800d870:	f000 80a9 	beq.w	800d9c6 <GUI_MEMDEV__WriteToActiveOpaque+0x56e>
 800d874:	4648      	mov	r0, r9
 800d876:	f7fb f801 	bl	800887c <GUI_ALLOC_LockH>
 800d87a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d87c:	901c      	str	r0, [sp, #112]	; 0x70
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f340 809d 	ble.w	800d9be <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 800d884:	2600      	movs	r6, #0
 800d886:	ab1d      	add	r3, sp, #116	; 0x74
 800d888:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800d88c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800d890:	46b1      	mov	r9, r6
 800d892:	2501      	movs	r5, #1
 800d894:	4698      	mov	r8, r3
 800d896:	6883      	ldr	r3, [r0, #8]
 800d898:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	4632      	mov	r2, r6
 800d8a0:	4641      	mov	r1, r8
 800d8a2:	4798      	blx	r3
 800d8a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8a6:	4283      	cmp	r3, r0
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	d02d      	beq.n	800d908 <GUI_MEMDEV__WriteToActiveOpaque+0x4b0>
 800d8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d055      	beq.n	800d95e <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 800d8b2:	b308      	cbz	r0, 800d8f8 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 800d8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8b6:	eb03 0b06 	add.w	fp, r3, r6
 800d8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8bc:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d8be:	9305      	str	r3, [sp, #20]
 800d8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8c4:	9203      	str	r2, [sp, #12]
 800d8c6:	fb03 7300 	mla	r3, r3, r0, r7
 800d8ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8cc:	9202      	str	r2, [sp, #8]
 800d8ce:	9304      	str	r3, [sp, #16]
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	4450      	add	r0, sl
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4659      	mov	r1, fp
 800d8d8:	9501      	str	r5, [sp, #4]
 800d8da:	9500      	str	r5, [sp, #0]
 800d8dc:	f7fc ff96 	bl	800a80c <LCD_DrawBitmap>
 800d8e0:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d8e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8e4:	6882      	ldr	r2, [r0, #8]
 800d8e6:	441c      	add	r4, r3
 800d8e8:	4641      	mov	r1, r8
 800d8ea:	6953      	ldr	r3, [r2, #20]
 800d8ec:	941d      	str	r4, [sp, #116]	; 0x74
 800d8ee:	4632      	mov	r2, r6
 800d8f0:	4798      	blx	r3
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d1e0      	bne.n	800d8ba <GUI_MEMDEV__WriteToActiveOpaque+0x462>
 800d8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8fa:	3601      	adds	r6, #1
 800d8fc:	441f      	add	r7, r3
 800d8fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d900:	42b3      	cmp	r3, r6
 800d902:	dd5c      	ble.n	800d9be <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 800d904:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d906:	e7c6      	b.n	800d896 <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 800d908:	9708      	str	r7, [sp, #32]
 800d90a:	46b3      	mov	fp, r6
 800d90c:	461f      	mov	r7, r3
 800d90e:	e004      	b.n	800d91a <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 800d910:	2000007c 	.word	0x2000007c
 800d914:	200357f4 	.word	0x200357f4
 800d918:	46a3      	mov	fp, r4
 800d91a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d91c:	6883      	ldr	r3, [r0, #8]
 800d91e:	f10b 0401 	add.w	r4, fp, #1
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	4622      	mov	r2, r4
 800d926:	4641      	mov	r1, r8
 800d928:	4798      	blx	r3
 800d92a:	4287      	cmp	r7, r0
 800d92c:	d0f4      	beq.n	800d918 <GUI_MEMDEV__WriteToActiveOpaque+0x4c0>
 800d92e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d930:	9102      	str	r1, [sp, #8]
 800d932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d936:	9f08      	ldr	r7, [sp, #32]
 800d938:	9205      	str	r2, [sp, #20]
 800d93a:	ebc6 030b 	rsb	r3, r6, fp
 800d93e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d940:	9704      	str	r7, [sp, #16]
 800d942:	4431      	add	r1, r6
 800d944:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800d946:	9203      	str	r2, [sp, #12]
 800d948:	3301      	adds	r3, #1
 800d94a:	9501      	str	r5, [sp, #4]
 800d94c:	9500      	str	r5, [sp, #0]
 800d94e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d950:	4650      	mov	r0, sl
 800d952:	fb06 7703 	mla	r7, r6, r3, r7
 800d956:	4626      	mov	r6, r4
 800d958:	f7fc ff58 	bl	800a80c <LCD_DrawBitmap>
 800d95c:	e7cf      	b.n	800d8fe <GUI_MEMDEV__WriteToActiveOpaque+0x4a6>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d0ca      	beq.n	800d8f8 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 800d962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d964:	9608      	str	r6, [sp, #32]
 800d966:	eb03 0b06 	add.w	fp, r3, r6
 800d96a:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 800d96e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d970:	9005      	str	r0, [sp, #20]
 800d972:	f00e 0007 	and.w	r0, lr, #7
 800d976:	9006      	str	r0, [sp, #24]
 800d978:	eb0a 000e 	add.w	r0, sl, lr
 800d97c:	f1be 0f00 	cmp.w	lr, #0
 800d980:	bfb8      	it	lt
 800d982:	f10e 0e07 	addlt.w	lr, lr, #7
 800d986:	eb07 0eee 	add.w	lr, r7, lr, asr #3
 800d98a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800d98c:	f8cd e010 	str.w	lr, [sp, #16]
 800d990:	4622      	mov	r2, r4
 800d992:	2301      	movs	r3, #1
 800d994:	4659      	mov	r1, fp
 800d996:	9603      	str	r6, [sp, #12]
 800d998:	9502      	str	r5, [sp, #8]
 800d99a:	9501      	str	r5, [sp, #4]
 800d99c:	9500      	str	r5, [sp, #0]
 800d99e:	f7fc fe27 	bl	800a5f0 <LCD__DrawBitmap_1bpp>
 800d9a2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d9a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9a6:	6882      	ldr	r2, [r0, #8]
 800d9a8:	441c      	add	r4, r3
 800d9aa:	4641      	mov	r1, r8
 800d9ac:	6953      	ldr	r3, [r2, #20]
 800d9ae:	941d      	str	r4, [sp, #116]	; 0x74
 800d9b0:	9a08      	ldr	r2, [sp, #32]
 800d9b2:	4798      	blx	r3
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d1d7      	bne.n	800d96a <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 800d9ba:	9e08      	ldr	r6, [sp, #32]
 800d9bc:	e79c      	b.n	800d8f8 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 800d9be:	a81c      	add	r0, sp, #112	; 0x70
 800d9c0:	f7fa ff6e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800d9c4:	e54d      	b.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9c8:	9305      	str	r3, [sp, #20]
 800d9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9cc:	9303      	str	r3, [sp, #12]
 800d9ce:	2401      	movs	r4, #1
 800d9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d2:	9004      	str	r0, [sp, #16]
 800d9d4:	9302      	str	r3, [sp, #8]
 800d9d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d9da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d9dc:	9401      	str	r4, [sp, #4]
 800d9de:	4651      	mov	r1, sl
 800d9e0:	9400      	str	r4, [sp, #0]
 800d9e2:	f7fc ff13 	bl	800a80c <LCD_DrawBitmap>
 800d9e6:	e53c      	b.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d9e8:	fb09 f008 	mul.w	r0, r9, r8
 800d9ec:	f7fa ff2e 	bl	800884c <GUI_ALLOC_AllocNoInit>
 800d9f0:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	f43f ad35 	beq.w	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800d9f8:	f7fa ff40 	bl	800887c <GUI_ALLOC_LockH>
 800d9fc:	901e      	str	r0, [sp, #120]	; 0x78
 800d9fe:	4638      	mov	r0, r7
 800da00:	f7fa ff3c 	bl	800887c <GUI_ALLOC_LockH>
 800da04:	901c      	str	r0, [sp, #112]	; 0x70
 800da06:	6925      	ldr	r5, [r4, #16]
 800da08:	f100 0718 	add.w	r7, r0, #24
 800da0c:	b345      	cbz	r5, 800da60 <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 800da0e:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 800da12:	2601      	movs	r6, #1
 800da14:	e019      	b.n	800da4a <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 800da16:	f1b9 0f04 	cmp.w	r9, #4
 800da1a:	d019      	beq.n	800da50 <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 800da1c:	f1b9 0f01 	cmp.w	r9, #1
 800da20:	d016      	beq.n	800da50 <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 800da22:	2200      	movs	r2, #0
 800da24:	991e      	ldr	r1, [sp, #120]	; 0x78
 800da26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da28:	9002      	str	r0, [sp, #8]
 800da2a:	2301      	movs	r3, #1
 800da2c:	9205      	str	r2, [sp, #20]
 800da2e:	9203      	str	r2, [sp, #12]
 800da30:	9104      	str	r1, [sp, #16]
 800da32:	9601      	str	r6, [sp, #4]
 800da34:	4651      	mov	r1, sl
 800da36:	9600      	str	r6, [sp, #0]
 800da38:	4642      	mov	r2, r8
 800da3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da3c:	449a      	add	sl, r3
 800da3e:	f7fc fee5 	bl	800a80c <LCD_DrawBitmap>
 800da42:	9b08      	ldr	r3, [sp, #32]
 800da44:	3b01      	subs	r3, #1
 800da46:	9308      	str	r3, [sp, #32]
 800da48:	d050      	beq.n	800daec <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 800da4a:	f1b9 0f02 	cmp.w	r9, #2
 800da4e:	d1e2      	bne.n	800da16 <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 800da50:	4638      	mov	r0, r7
 800da52:	991e      	ldr	r1, [sp, #120]	; 0x78
 800da54:	6925      	ldr	r5, [r4, #16]
 800da56:	464b      	mov	r3, r9
 800da58:	4642      	mov	r2, r8
 800da5a:	47a8      	blx	r5
 800da5c:	445f      	add	r7, fp
 800da5e:	e7e0      	b.n	800da22 <GUI_MEMDEV__WriteToActiveOpaque+0x5ca>
 800da60:	950c      	str	r5, [sp, #48]	; 0x30
 800da62:	2601      	movs	r6, #1
 800da64:	9c08      	ldr	r4, [sp, #32]
 800da66:	e014      	b.n	800da92 <GUI_MEMDEV__WriteToActiveOpaque+0x63a>
 800da68:	f1b9 0f04 	cmp.w	r9, #4
 800da6c:	f000 818d 	beq.w	800dd8a <GUI_MEMDEV__WriteToActiveOpaque+0x932>
 800da70:	4599      	cmp	r9, r3
 800da72:	f000 8135 	beq.w	800dce0 <GUI_MEMDEV__WriteToActiveOpaque+0x888>
 800da76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da78:	9505      	str	r5, [sp, #20]
 800da7a:	9503      	str	r5, [sp, #12]
 800da7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800da7e:	9502      	str	r5, [sp, #8]
 800da80:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800da82:	9601      	str	r6, [sp, #4]
 800da84:	9600      	str	r6, [sp, #0]
 800da86:	9504      	str	r5, [sp, #16]
 800da88:	f7fc fec0 	bl	800a80c <LCD_DrawBitmap>
 800da8c:	3c01      	subs	r4, #1
 800da8e:	d02d      	beq.n	800daec <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 800da90:	46da      	mov	sl, fp
 800da92:	2301      	movs	r3, #1
 800da94:	f1b9 0f02 	cmp.w	r9, #2
 800da98:	4651      	mov	r1, sl
 800da9a:	4642      	mov	r2, r8
 800da9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da9e:	eb0a 0b03 	add.w	fp, sl, r3
 800daa2:	d1e1      	bne.n	800da68 <GUI_MEMDEV__WriteToActiveOpaque+0x610>
 800daa4:	9408      	str	r4, [sp, #32]
 800daa6:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800daaa:	2401      	movs	r4, #1
 800daac:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800dab0:	46bb      	mov	fp, r7
 800dab2:	4646      	mov	r6, r8
 800dab4:	f85b 0b04 	ldr.w	r0, [fp], #4
 800dab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daba:	4798      	blx	r3
 800dabc:	3e01      	subs	r6, #1
 800dabe:	f829 0b02 	strh.w	r0, [r9], #2
 800dac2:	d1f7      	bne.n	800dab4 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800dac4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dac8:	9202      	str	r2, [sp, #8]
 800daca:	9304      	str	r3, [sp, #16]
 800dacc:	4651      	mov	r1, sl
 800dace:	2301      	movs	r3, #1
 800dad0:	9605      	str	r6, [sp, #20]
 800dad2:	9603      	str	r6, [sp, #12]
 800dad4:	9401      	str	r4, [sp, #4]
 800dad6:	9400      	str	r4, [sp, #0]
 800dad8:	4642      	mov	r2, r8
 800dada:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dadc:	449a      	add	sl, r3
 800dade:	f7fc fe95 	bl	800a80c <LCD_DrawBitmap>
 800dae2:	9b08      	ldr	r3, [sp, #32]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	442f      	add	r7, r5
 800dae8:	9308      	str	r3, [sp, #32]
 800daea:	d1df      	bne.n	800daac <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 800daec:	980e      	ldr	r0, [sp, #56]	; 0x38
 800daee:	f7fa fed7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800daf2:	a81e      	add	r0, sp, #120	; 0x78
 800daf4:	f7fa fed4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800daf8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dafa:	f7fb f845 	bl	8008b88 <GUI_ALLOC_Free>
 800dafe:	e4b0      	b.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800db00:	2401      	movs	r4, #1
 800db02:	3218      	adds	r2, #24
 800db04:	2600      	movs	r6, #0
 800db06:	9204      	str	r2, [sp, #16]
 800db08:	f8cd b00c 	str.w	fp, [sp, #12]
 800db0c:	9502      	str	r5, [sp, #8]
 800db0e:	9b08      	ldr	r3, [sp, #32]
 800db10:	980d      	ldr	r0, [sp, #52]	; 0x34
 800db12:	9605      	str	r6, [sp, #20]
 800db14:	4642      	mov	r2, r8
 800db16:	4651      	mov	r1, sl
 800db18:	9401      	str	r4, [sp, #4]
 800db1a:	9400      	str	r4, [sp, #0]
 800db1c:	f7fc fe76 	bl	800a80c <LCD_DrawBitmap>
 800db20:	e49f      	b.n	800d462 <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 800db22:	2500      	movs	r5, #0
 800db24:	2601      	movs	r6, #1
 800db26:	9c08      	ldr	r4, [sp, #32]
 800db28:	e016      	b.n	800db58 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 800db2a:	f1b9 0f04 	cmp.w	r9, #4
 800db2e:	f000 80fc 	beq.w	800dd2a <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 800db32:	4599      	cmp	r9, r3
 800db34:	f000 80a4 	beq.w	800dc80 <GUI_MEMDEV__WriteToActiveOpaque+0x828>
 800db38:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800db3a:	9708      	str	r7, [sp, #32]
 800db3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db3e:	9702      	str	r7, [sp, #8]
 800db40:	9f08      	ldr	r7, [sp, #32]
 800db42:	9505      	str	r5, [sp, #20]
 800db44:	9503      	str	r5, [sp, #12]
 800db46:	9601      	str	r6, [sp, #4]
 800db48:	9600      	str	r6, [sp, #0]
 800db4a:	9704      	str	r7, [sp, #16]
 800db4c:	f7fc fe5e 	bl	800a80c <LCD_DrawBitmap>
 800db50:	3c01      	subs	r4, #1
 800db52:	f43f add2 	beq.w	800d6fa <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 800db56:	46da      	mov	sl, fp
 800db58:	2301      	movs	r3, #1
 800db5a:	f1b9 0f02 	cmp.w	r9, #2
 800db5e:	4651      	mov	r1, sl
 800db60:	4642      	mov	r2, r8
 800db62:	980d      	ldr	r0, [sp, #52]	; 0x34
 800db64:	eb0a 0b03 	add.w	fp, sl, r3
 800db68:	d1df      	bne.n	800db2a <GUI_MEMDEV__WriteToActiveOpaque+0x6d2>
 800db6a:	ea4f 0648 	mov.w	r6, r8, lsl #1
 800db6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db70:	9408      	str	r4, [sp, #32]
 800db72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800db74:	960a      	str	r6, [sp, #40]	; 0x28
 800db76:	2401      	movs	r4, #1
 800db78:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800db7a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800db7e:	46c1      	mov	r9, r8
 800db80:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800db84:	47a8      	blx	r5
 800db86:	47b8      	blx	r7
 800db88:	f1b9 0901 	subs.w	r9, r9, #1
 800db8c:	f826 0b02 	strh.w	r0, [r6], #2
 800db90:	d1f6      	bne.n	800db80 <GUI_MEMDEV__WriteToActiveOpaque+0x728>
 800db92:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800db94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800db96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db98:	9302      	str	r3, [sp, #8]
 800db9a:	46b6      	mov	lr, r6
 800db9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800db9e:	9204      	str	r2, [sp, #16]
 800dba0:	2301      	movs	r3, #1
 800dba2:	4651      	mov	r1, sl
 800dba4:	44b6      	add	lr, r6
 800dba6:	f8cd 9014 	str.w	r9, [sp, #20]
 800dbaa:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbae:	9401      	str	r4, [sp, #4]
 800dbb0:	9400      	str	r4, [sp, #0]
 800dbb2:	4642      	mov	r2, r8
 800dbb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dbb6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800dbba:	449a      	add	sl, r3
 800dbbc:	f7fc fe26 	bl	800a80c <LCD_DrawBitmap>
 800dbc0:	9b08      	ldr	r3, [sp, #32]
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	9308      	str	r3, [sp, #32]
 800dbc6:	d1d7      	bne.n	800db78 <GUI_MEMDEV__WriteToActiveOpaque+0x720>
 800dbc8:	e597      	b.n	800d6fa <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 800dbca:	f7fa fe57 	bl	800887c <GUI_ALLOC_LockH>
 800dbce:	901d      	str	r0, [sp, #116]	; 0x74
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	f43f ad92 	beq.w	800d6fa <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 800dbd6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800dbda:	4637      	mov	r7, r6
 800dbdc:	930a      	str	r3, [sp, #40]	; 0x28
 800dbde:	2501      	movs	r5, #1
 800dbe0:	940c      	str	r4, [sp, #48]	; 0x30
 800dbe2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dbe4:	e019      	b.n	800dc1a <GUI_MEMDEV__WriteToActiveOpaque+0x7c2>
 800dbe6:	f1b9 0f04 	cmp.w	r9, #4
 800dbea:	d030      	beq.n	800dc4e <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 800dbec:	f1b9 0f01 	cmp.w	r9, #1
 800dbf0:	d028      	beq.n	800dc44 <GUI_MEMDEV__WriteToActiveOpaque+0x7ec>
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dbf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf8:	9002      	str	r0, [sp, #8]
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	9205      	str	r2, [sp, #20]
 800dbfe:	9203      	str	r2, [sp, #12]
 800dc00:	9104      	str	r1, [sp, #16]
 800dc02:	9501      	str	r5, [sp, #4]
 800dc04:	4651      	mov	r1, sl
 800dc06:	9500      	str	r5, [sp, #0]
 800dc08:	4642      	mov	r2, r8
 800dc0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc0c:	449a      	add	sl, r3
 800dc0e:	f7fc fdfd 	bl	800a80c <LCD_DrawBitmap>
 800dc12:	9b08      	ldr	r3, [sp, #32]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	9308      	str	r3, [sp, #32]
 800dc18:	d02b      	beq.n	800dc72 <GUI_MEMDEV__WriteToActiveOpaque+0x81a>
 800dc1a:	f1b9 0f02 	cmp.w	r9, #2
 800dc1e:	d1e2      	bne.n	800dbe6 <GUI_MEMDEV__WriteToActiveOpaque+0x78e>
 800dc20:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800dc24:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dc26:	464b      	mov	r3, r9
 800dc28:	4642      	mov	r2, r8
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	697c      	ldr	r4, [r7, #20]
 800dc2e:	47a0      	blx	r4
 800dc30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dc32:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dc34:	4426      	add	r6, r4
 800dc36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dc38:	4659      	mov	r1, fp
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	4642      	mov	r2, r8
 800dc3e:	6924      	ldr	r4, [r4, #16]
 800dc40:	47a0      	blx	r4
 800dc42:	e7d6      	b.n	800dbf2 <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 800dc44:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800dc48:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	e7ec      	b.n	800dc28 <GUI_MEMDEV__WriteToActiveOpaque+0x7d0>
 800dc4e:	4630      	mov	r0, r6
 800dc50:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dc52:	697c      	ldr	r4, [r7, #20]
 800dc54:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800dc58:	2302      	movs	r3, #2
 800dc5a:	4642      	mov	r2, r8
 800dc5c:	47a0      	blx	r4
 800dc5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dc60:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dc62:	6924      	ldr	r4, [r4, #16]
 800dc64:	464b      	mov	r3, r9
 800dc66:	4659      	mov	r1, fp
 800dc68:	4642      	mov	r2, r8
 800dc6a:	47a0      	blx	r4
 800dc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc6e:	441e      	add	r6, r3
 800dc70:	e7bf      	b.n	800dbf2 <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 800dc72:	a81d      	add	r0, sp, #116	; 0x74
 800dc74:	f7fa fe14 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800dc78:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dc7a:	f7fa ff85 	bl	8008b88 <GUI_ALLOC_Free>
 800dc7e:	e53c      	b.n	800d6fa <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 800dc80:	fa08 f603 	lsl.w	r6, r8, r3
 800dc84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc86:	9408      	str	r4, [sp, #32]
 800dc88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dc8a:	960a      	str	r6, [sp, #40]	; 0x28
 800dc8c:	464c      	mov	r4, r9
 800dc8e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800dc90:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800dc94:	46c1      	mov	r9, r8
 800dc96:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800dc9a:	47a8      	blx	r5
 800dc9c:	47b8      	blx	r7
 800dc9e:	f1b9 0901 	subs.w	r9, r9, #1
 800dca2:	f806 0b01 	strb.w	r0, [r6], #1
 800dca6:	d1f6      	bne.n	800dc96 <GUI_MEMDEV__WriteToActiveOpaque+0x83e>
 800dca8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dcaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dcac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcae:	9302      	str	r3, [sp, #8]
 800dcb0:	46b6      	mov	lr, r6
 800dcb2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dcb4:	9204      	str	r2, [sp, #16]
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	4651      	mov	r1, sl
 800dcba:	44b6      	add	lr, r6
 800dcbc:	f8cd 9014 	str.w	r9, [sp, #20]
 800dcc0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dcc4:	9401      	str	r4, [sp, #4]
 800dcc6:	9400      	str	r4, [sp, #0]
 800dcc8:	4642      	mov	r2, r8
 800dcca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dccc:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800dcd0:	449a      	add	sl, r3
 800dcd2:	f7fc fd9b 	bl	800a80c <LCD_DrawBitmap>
 800dcd6:	9b08      	ldr	r3, [sp, #32]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	9308      	str	r3, [sp, #32]
 800dcdc:	d1d7      	bne.n	800dc8e <GUI_MEMDEV__WriteToActiveOpaque+0x836>
 800dcde:	e50c      	b.n	800d6fa <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 800dce0:	9408      	str	r4, [sp, #32]
 800dce2:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800dce6:	464c      	mov	r4, r9
 800dce8:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800dcec:	46bb      	mov	fp, r7
 800dcee:	4646      	mov	r6, r8
 800dcf0:	f85b 0b04 	ldr.w	r0, [fp], #4
 800dcf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf6:	4798      	blx	r3
 800dcf8:	3e01      	subs	r6, #1
 800dcfa:	f809 0b01 	strb.w	r0, [r9], #1
 800dcfe:	d1f7      	bne.n	800dcf0 <GUI_MEMDEV__WriteToActiveOpaque+0x898>
 800dd00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dd02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd04:	9202      	str	r2, [sp, #8]
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	4651      	mov	r1, sl
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	9605      	str	r6, [sp, #20]
 800dd0e:	9603      	str	r6, [sp, #12]
 800dd10:	9401      	str	r4, [sp, #4]
 800dd12:	9400      	str	r4, [sp, #0]
 800dd14:	4642      	mov	r2, r8
 800dd16:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dd18:	449a      	add	sl, r3
 800dd1a:	f7fc fd77 	bl	800a80c <LCD_DrawBitmap>
 800dd1e:	9b08      	ldr	r3, [sp, #32]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	442f      	add	r7, r5
 800dd24:	9308      	str	r3, [sp, #32]
 800dd26:	d1df      	bne.n	800dce8 <GUI_MEMDEV__WriteToActiveOpaque+0x890>
 800dd28:	e6e0      	b.n	800daec <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 800dd2a:	ea4f 0648 	mov.w	r6, r8, lsl #1
 800dd2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd30:	9408      	str	r4, [sp, #32]
 800dd32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dd34:	960a      	str	r6, [sp, #40]	; 0x28
 800dd36:	2401      	movs	r4, #1
 800dd38:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800dd3a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800dd3e:	46c1      	mov	r9, r8
 800dd40:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800dd44:	47a8      	blx	r5
 800dd46:	47b8      	blx	r7
 800dd48:	f1b9 0901 	subs.w	r9, r9, #1
 800dd4c:	f846 0b04 	str.w	r0, [r6], #4
 800dd50:	d1f6      	bne.n	800dd40 <GUI_MEMDEV__WriteToActiveOpaque+0x8e8>
 800dd52:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dd54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd58:	9302      	str	r3, [sp, #8]
 800dd5a:	46b6      	mov	lr, r6
 800dd5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dd5e:	9204      	str	r2, [sp, #16]
 800dd60:	2301      	movs	r3, #1
 800dd62:	4651      	mov	r1, sl
 800dd64:	44b6      	add	lr, r6
 800dd66:	f8cd 9014 	str.w	r9, [sp, #20]
 800dd6a:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd6e:	9401      	str	r4, [sp, #4]
 800dd70:	9400      	str	r4, [sp, #0]
 800dd72:	4642      	mov	r2, r8
 800dd74:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dd76:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800dd7a:	449a      	add	sl, r3
 800dd7c:	f7fc fd46 	bl	800a80c <LCD_DrawBitmap>
 800dd80:	9b08      	ldr	r3, [sp, #32]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	d1d7      	bne.n	800dd38 <GUI_MEMDEV__WriteToActiveOpaque+0x8e0>
 800dd88:	e4b7      	b.n	800d6fa <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 800dd8a:	9408      	str	r4, [sp, #32]
 800dd8c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800dd90:	2401      	movs	r4, #1
 800dd92:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800dd96:	46bb      	mov	fp, r7
 800dd98:	4646      	mov	r6, r8
 800dd9a:	f85b 0b04 	ldr.w	r0, [fp], #4
 800dd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda0:	4798      	blx	r3
 800dda2:	3e01      	subs	r6, #1
 800dda4:	f849 0b04 	str.w	r0, [r9], #4
 800dda8:	d1f7      	bne.n	800dd9a <GUI_MEMDEV__WriteToActiveOpaque+0x942>
 800ddaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddae:	9202      	str	r2, [sp, #8]
 800ddb0:	9304      	str	r3, [sp, #16]
 800ddb2:	4651      	mov	r1, sl
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	9605      	str	r6, [sp, #20]
 800ddb8:	9603      	str	r6, [sp, #12]
 800ddba:	9401      	str	r4, [sp, #4]
 800ddbc:	9400      	str	r4, [sp, #0]
 800ddbe:	4642      	mov	r2, r8
 800ddc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ddc2:	449a      	add	sl, r3
 800ddc4:	f7fc fd22 	bl	800a80c <LCD_DrawBitmap>
 800ddc8:	9b08      	ldr	r3, [sp, #32]
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	442f      	add	r7, r5
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	d1df      	bne.n	800dd92 <GUI_MEMDEV__WriteToActiveOpaque+0x93a>
 800ddd2:	e68b      	b.n	800daec <GUI_MEMDEV__WriteToActiveOpaque+0x694>

0800ddd4 <_OnExit>:
 800ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd8:	4d1a      	ldr	r5, [pc, #104]	; (800de44 <_OnExit+0x70>)
 800ddda:	4b1b      	ldr	r3, [pc, #108]	; (800de48 <_OnExit+0x74>)
 800dddc:	f8df e094 	ldr.w	lr, [pc, #148]	; 800de74 <_OnExit+0xa0>
 800dde0:	f8df c094 	ldr.w	ip, [pc, #148]	; 800de78 <_OnExit+0xa4>
 800dde4:	4919      	ldr	r1, [pc, #100]	; (800de4c <_OnExit+0x78>)
 800dde6:	4a1a      	ldr	r2, [pc, #104]	; (800de50 <_OnExit+0x7c>)
 800dde8:	4f1a      	ldr	r7, [pc, #104]	; (800de54 <_OnExit+0x80>)
 800ddea:	4e1b      	ldr	r6, [pc, #108]	; (800de58 <_OnExit+0x84>)
 800ddec:	2400      	movs	r4, #0
 800ddee:	602c      	str	r4, [r5, #0]
 800ddf0:	4d1a      	ldr	r5, [pc, #104]	; (800de5c <_OnExit+0x88>)
 800ddf2:	f8cc 4000 	str.w	r4, [ip]
 800ddf6:	f8ce 4000 	str.w	r4, [lr]
 800ddfa:	6034      	str	r4, [r6, #0]
 800ddfc:	600c      	str	r4, [r1, #0]
 800ddfe:	604c      	str	r4, [r1, #4]
 800de00:	6014      	str	r4, [r2, #0]
 800de02:	6054      	str	r4, [r2, #4]
 800de04:	4621      	mov	r1, r4
 800de06:	f103 000c 	add.w	r0, r3, #12
 800de0a:	603c      	str	r4, [r7, #0]
 800de0c:	682e      	ldr	r6, [r5, #0]
 800de0e:	701c      	strb	r4, [r3, #0]
 800de10:	2218      	movs	r2, #24
 800de12:	605c      	str	r4, [r3, #4]
 800de14:	609c      	str	r4, [r3, #8]
 800de16:	47b0      	blx	r6
 800de18:	4b11      	ldr	r3, [pc, #68]	; (800de60 <_OnExit+0x8c>)
 800de1a:	4a12      	ldr	r2, [pc, #72]	; (800de64 <_OnExit+0x90>)
 800de1c:	601c      	str	r4, [r3, #0]
 800de1e:	6014      	str	r4, [r2, #0]
 800de20:	605c      	str	r4, [r3, #4]
 800de22:	4621      	mov	r1, r4
 800de24:	682b      	ldr	r3, [r5, #0]
 800de26:	4810      	ldr	r0, [pc, #64]	; (800de68 <_OnExit+0x94>)
 800de28:	2210      	movs	r2, #16
 800de2a:	4798      	blx	r3
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	480f      	ldr	r0, [pc, #60]	; (800de6c <_OnExit+0x98>)
 800de30:	4621      	mov	r1, r4
 800de32:	2210      	movs	r2, #16
 800de34:	4798      	blx	r3
 800de36:	682b      	ldr	r3, [r5, #0]
 800de38:	480d      	ldr	r0, [pc, #52]	; (800de70 <_OnExit+0x9c>)
 800de3a:	4621      	mov	r1, r4
 800de3c:	2210      	movs	r2, #16
 800de3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de42:	4718      	bx	r3
 800de44:	20035844 	.word	0x20035844
 800de48:	20000748 	.word	0x20000748
 800de4c:	20035864 	.word	0x20035864
 800de50:	20035854 	.word	0x20035854
 800de54:	20035870 	.word	0x20035870
 800de58:	20035850 	.word	0x20035850
 800de5c:	20000094 	.word	0x20000094
 800de60:	2003587c 	.word	0x2003587c
 800de64:	20035860 	.word	0x20035860
 800de68:	20035894 	.word	0x20035894
 800de6c:	200358a4 	.word	0x200358a4
 800de70:	20035884 	.word	0x20035884
 800de74:	20035878 	.word	0x20035878
 800de78:	2003585c 	.word	0x2003585c

0800de7c <_Findy1>:
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d064      	beq.n	800df4a <_Findy1+0xce>
 800de80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de82:	460e      	mov	r6, r1
 800de84:	b085      	sub	sp, #20
 800de86:	4617      	mov	r7, r2
 800de88:	4604      	mov	r4, r0
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7fa fcf6 	bl	800887c <GUI_ALLOC_LockH>
 800de90:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800de92:	9001      	str	r0, [sp, #4]
 800de94:	07a2      	lsls	r2, r4, #30
 800de96:	d524      	bpl.n	800dee2 <_Findy1+0x66>
 800de98:	2f00      	cmp	r7, #0
 800de9a:	d040      	beq.n	800df1e <_Findy1+0xa2>
 800de9c:	ad02      	add	r5, sp, #8
 800de9e:	4601      	mov	r1, r0
 800dea0:	463a      	mov	r2, r7
 800dea2:	4628      	mov	r0, r5
 800dea4:	f7fc f94a 	bl	800a13c <GUI__IntersectRects>
 800dea8:	4629      	mov	r1, r5
 800deaa:	4630      	mov	r0, r6
 800deac:	f7fb f8b4 	bl	8009018 <GUI_RectsIntersect>
 800deb0:	b368      	cbz	r0, 800df0e <_Findy1+0x92>
 800deb2:	07e3      	lsls	r3, r4, #31
 800deb4:	9801      	ldr	r0, [sp, #4]
 800deb6:	d41c      	bmi.n	800def2 <_Findy1+0x76>
 800deb8:	2f00      	cmp	r7, #0
 800deba:	d043      	beq.n	800df44 <_Findy1+0xc8>
 800debc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dec0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800dec4:	4293      	cmp	r3, r2
 800dec6:	bfb8      	it	lt
 800dec8:	4613      	movlt	r3, r2
 800deca:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800dece:	4293      	cmp	r3, r2
 800ded0:	dd2a      	ble.n	800df28 <_Findy1+0xac>
 800ded2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800ded6:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800deda:	429a      	cmp	r2, r3
 800dedc:	db01      	blt.n	800dee2 <_Findy1+0x66>
 800dede:	3b01      	subs	r3, #1
 800dee0:	80f3      	strh	r3, [r6, #6]
 800dee2:	6a04      	ldr	r4, [r0, #32]
 800dee4:	a801      	add	r0, sp, #4
 800dee6:	f7fa fcdb 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800deea:	2c00      	cmp	r4, #0
 800deec:	d1cd      	bne.n	800de8a <_Findy1+0xe>
 800deee:	b005      	add	sp, #20
 800def0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800def2:	69c4      	ldr	r4, [r0, #28]
 800def4:	2c00      	cmp	r4, #0
 800def6:	d0f4      	beq.n	800dee2 <_Findy1+0x66>
 800def8:	4620      	mov	r0, r4
 800defa:	462a      	mov	r2, r5
 800defc:	4631      	mov	r1, r6
 800defe:	f7ff ffbd 	bl	800de7c <_Findy1>
 800df02:	4620      	mov	r0, r4
 800df04:	f7fa fcb0 	bl	8008868 <GUI_ALLOC_h2p>
 800df08:	6a04      	ldr	r4, [r0, #32]
 800df0a:	2c00      	cmp	r4, #0
 800df0c:	d1f4      	bne.n	800def8 <_Findy1+0x7c>
 800df0e:	9801      	ldr	r0, [sp, #4]
 800df10:	6a04      	ldr	r4, [r0, #32]
 800df12:	a801      	add	r0, sp, #4
 800df14:	f7fa fcc4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800df18:	2c00      	cmp	r4, #0
 800df1a:	d1b6      	bne.n	800de8a <_Findy1+0xe>
 800df1c:	e7e7      	b.n	800deee <_Findy1+0x72>
 800df1e:	c803      	ldmia	r0, {r0, r1}
 800df20:	ad02      	add	r5, sp, #8
 800df22:	e885 0003 	stmia.w	r5, {r0, r1}
 800df26:	e7bf      	b.n	800dea8 <_Findy1+0x2c>
 800df28:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800df2c:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800df30:	429a      	cmp	r2, r3
 800df32:	ddd6      	ble.n	800dee2 <_Findy1+0x66>
 800df34:	6a04      	ldr	r4, [r0, #32]
 800df36:	80f3      	strh	r3, [r6, #6]
 800df38:	a801      	add	r0, sp, #4
 800df3a:	f7fa fcb1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800df3e:	2c00      	cmp	r4, #0
 800df40:	d1a3      	bne.n	800de8a <_Findy1+0xe>
 800df42:	e7d4      	b.n	800deee <_Findy1+0x72>
 800df44:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800df48:	e7bf      	b.n	800deca <_Findy1+0x4e>
 800df4a:	4770      	bx	lr

0800df4c <_Findx0>:
 800df4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df50:	4604      	mov	r4, r0
 800df52:	b084      	sub	sp, #16
 800df54:	2800      	cmp	r0, #0
 800df56:	d04a      	beq.n	800dfee <_Findx0+0xa2>
 800df58:	460f      	mov	r7, r1
 800df5a:	4690      	mov	r8, r2
 800df5c:	2600      	movs	r6, #0
 800df5e:	e00c      	b.n	800df7a <_Findx0+0x2e>
 800df60:	07e3      	lsls	r3, r4, #31
 800df62:	d430      	bmi.n	800dfc6 <_Findx0+0x7a>
 800df64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800df68:	9801      	ldr	r0, [sp, #4]
 800df6a:	3301      	adds	r3, #1
 800df6c:	803b      	strh	r3, [r7, #0]
 800df6e:	2601      	movs	r6, #1
 800df70:	6a04      	ldr	r4, [r0, #32]
 800df72:	a801      	add	r0, sp, #4
 800df74:	f7fa fc94 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800df78:	b1e4      	cbz	r4, 800dfb4 <_Findx0+0x68>
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7fa fc7e 	bl	800887c <GUI_ALLOC_LockH>
 800df80:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800df82:	9001      	str	r0, [sp, #4]
 800df84:	07a2      	lsls	r2, r4, #30
 800df86:	d5f3      	bpl.n	800df70 <_Findx0+0x24>
 800df88:	f1b8 0f00 	cmp.w	r8, #0
 800df8c:	d016      	beq.n	800dfbc <_Findx0+0x70>
 800df8e:	ad02      	add	r5, sp, #8
 800df90:	4601      	mov	r1, r0
 800df92:	4642      	mov	r2, r8
 800df94:	4628      	mov	r0, r5
 800df96:	f7fc f8d1 	bl	800a13c <GUI__IntersectRects>
 800df9a:	4629      	mov	r1, r5
 800df9c:	4638      	mov	r0, r7
 800df9e:	f7fb f83b 	bl	8009018 <GUI_RectsIntersect>
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d1dc      	bne.n	800df60 <_Findx0+0x14>
 800dfa6:	9801      	ldr	r0, [sp, #4]
 800dfa8:	6a04      	ldr	r4, [r0, #32]
 800dfaa:	a801      	add	r0, sp, #4
 800dfac:	f7fa fc78 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800dfb0:	2c00      	cmp	r4, #0
 800dfb2:	d1e2      	bne.n	800df7a <_Findx0+0x2e>
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	b004      	add	sp, #16
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	c803      	ldmia	r0, {r0, r1}
 800dfbe:	ad02      	add	r5, sp, #8
 800dfc0:	e885 0003 	stmia.w	r5, {r0, r1}
 800dfc4:	e7e9      	b.n	800df9a <_Findx0+0x4e>
 800dfc6:	9801      	ldr	r0, [sp, #4]
 800dfc8:	69c4      	ldr	r4, [r0, #28]
 800dfca:	2c00      	cmp	r4, #0
 800dfcc:	d0d0      	beq.n	800df70 <_Findx0+0x24>
 800dfce:	462a      	mov	r2, r5
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7ff ffba 	bl	800df4c <_Findx0>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	4620      	mov	r0, r4
 800dfdc:	bf18      	it	ne
 800dfde:	2601      	movne	r6, #1
 800dfe0:	f7fa fc42 	bl	8008868 <GUI_ALLOC_h2p>
 800dfe4:	6a04      	ldr	r4, [r0, #32]
 800dfe6:	2c00      	cmp	r4, #0
 800dfe8:	d1f1      	bne.n	800dfce <_Findx0+0x82>
 800dfea:	9801      	ldr	r0, [sp, #4]
 800dfec:	e7dc      	b.n	800dfa8 <_Findx0+0x5c>
 800dfee:	4606      	mov	r6, r0
 800dff0:	e7e0      	b.n	800dfb4 <_Findx0+0x68>
 800dff2:	bf00      	nop

0800dff4 <_Findx1>:
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d044      	beq.n	800e082 <_Findx1+0x8e>
 800dff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dffa:	460e      	mov	r6, r1
 800dffc:	b085      	sub	sp, #20
 800dffe:	4617      	mov	r7, r2
 800e000:	4604      	mov	r4, r0
 800e002:	e00b      	b.n	800e01c <_Findx1+0x28>
 800e004:	07e3      	lsls	r3, r4, #31
 800e006:	d42b      	bmi.n	800e060 <_Findx1+0x6c>
 800e008:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e00c:	9801      	ldr	r0, [sp, #4]
 800e00e:	3b01      	subs	r3, #1
 800e010:	80b3      	strh	r3, [r6, #4]
 800e012:	6a04      	ldr	r4, [r0, #32]
 800e014:	a801      	add	r0, sp, #4
 800e016:	f7fa fc43 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e01a:	b1d4      	cbz	r4, 800e052 <_Findx1+0x5e>
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7fa fc2d 	bl	800887c <GUI_ALLOC_LockH>
 800e022:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e024:	9001      	str	r0, [sp, #4]
 800e026:	07a2      	lsls	r2, r4, #30
 800e028:	d5f3      	bpl.n	800e012 <_Findx1+0x1e>
 800e02a:	b1a7      	cbz	r7, 800e056 <_Findx1+0x62>
 800e02c:	ad02      	add	r5, sp, #8
 800e02e:	4601      	mov	r1, r0
 800e030:	463a      	mov	r2, r7
 800e032:	4628      	mov	r0, r5
 800e034:	f7fc f882 	bl	800a13c <GUI__IntersectRects>
 800e038:	4629      	mov	r1, r5
 800e03a:	4630      	mov	r0, r6
 800e03c:	f7fa ffec 	bl	8009018 <GUI_RectsIntersect>
 800e040:	2800      	cmp	r0, #0
 800e042:	d1df      	bne.n	800e004 <_Findx1+0x10>
 800e044:	9801      	ldr	r0, [sp, #4]
 800e046:	6a04      	ldr	r4, [r0, #32]
 800e048:	a801      	add	r0, sp, #4
 800e04a:	f7fa fc29 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e04e:	2c00      	cmp	r4, #0
 800e050:	d1e4      	bne.n	800e01c <_Findx1+0x28>
 800e052:	b005      	add	sp, #20
 800e054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e056:	c803      	ldmia	r0, {r0, r1}
 800e058:	ad02      	add	r5, sp, #8
 800e05a:	e885 0003 	stmia.w	r5, {r0, r1}
 800e05e:	e7eb      	b.n	800e038 <_Findx1+0x44>
 800e060:	9801      	ldr	r0, [sp, #4]
 800e062:	69c4      	ldr	r4, [r0, #28]
 800e064:	2c00      	cmp	r4, #0
 800e066:	d0d4      	beq.n	800e012 <_Findx1+0x1e>
 800e068:	4620      	mov	r0, r4
 800e06a:	462a      	mov	r2, r5
 800e06c:	4631      	mov	r1, r6
 800e06e:	f7ff ffc1 	bl	800dff4 <_Findx1>
 800e072:	4620      	mov	r0, r4
 800e074:	f7fa fbf8 	bl	8008868 <GUI_ALLOC_h2p>
 800e078:	6a04      	ldr	r4, [r0, #32]
 800e07a:	2c00      	cmp	r4, #0
 800e07c:	d1f4      	bne.n	800e068 <_Findx1+0x74>
 800e07e:	9801      	ldr	r0, [sp, #4]
 800e080:	e7e1      	b.n	800e046 <_Findx1+0x52>
 800e082:	4770      	bx	lr

0800e084 <_Paint1Trans>:
 800e084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e088:	4d29      	ldr	r5, [pc, #164]	; (800e130 <_Paint1Trans+0xac>)
 800e08a:	682b      	ldr	r3, [r5, #0]
 800e08c:	b083      	sub	sp, #12
 800e08e:	4606      	mov	r6, r0
 800e090:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e092:	f7fa fbf3 	bl	800887c <GUI_ALLOC_LockH>
 800e096:	9000      	str	r0, [sp, #0]
 800e098:	4630      	mov	r0, r6
 800e09a:	f7fa fbef 	bl	800887c <GUI_ALLOC_LockH>
 800e09e:	4601      	mov	r1, r0
 800e0a0:	9800      	ldr	r0, [sp, #0]
 800e0a2:	9101      	str	r1, [sp, #4]
 800e0a4:	3008      	adds	r0, #8
 800e0a6:	f7fa ffb7 	bl	8009018 <GUI_RectsIntersect>
 800e0aa:	b950      	cbnz	r0, 800e0c2 <_Paint1Trans+0x3e>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	4668      	mov	r0, sp
 800e0b0:	f7fa fbf6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e0b4:	a801      	add	r0, sp, #4
 800e0b6:	f7fa fbf3 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	b003      	add	sp, #12
 800e0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0c2:	ac02      	add	r4, sp, #8
 800e0c4:	9901      	ldr	r1, [sp, #4]
 800e0c6:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 800e0ca:	682b      	ldr	r3, [r5, #0]
 800e0cc:	4f19      	ldr	r7, [pc, #100]	; (800e134 <_Paint1Trans+0xb0>)
 800e0ce:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 800e0d2:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 800e0d6:	3208      	adds	r2, #8
 800e0d8:	f101 0008 	add.w	r0, r1, #8
 800e0dc:	f7fc f82e 	bl	800a13c <GUI__IntersectRects>
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f7fa fbdd 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e0e6:	a802      	add	r0, sp, #8
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800e0ee:	603e      	str	r6, [r7, #0]
 800e0f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e0f4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e0f8:	651a      	str	r2, [r3, #80]	; 0x50
 800e0fa:	64d9      	str	r1, [r3, #76]	; 0x4c
 800e0fc:	f7fa fbd0 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e100:	4630      	mov	r0, r6
 800e102:	f7fa fbb1 	bl	8008868 <GUI_ALLOC_h2p>
 800e106:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e108:	4a0b      	ldr	r2, [pc, #44]	; (800e138 <_Paint1Trans+0xb4>)
 800e10a:	4b0c      	ldr	r3, [pc, #48]	; (800e13c <_Paint1Trans+0xb8>)
 800e10c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800e110:	bf08      	it	eq
 800e112:	4613      	moveq	r3, r2
 800e114:	4630      	mov	r0, r6
 800e116:	4798      	blx	r3
 800e118:	2401      	movs	r4, #1
 800e11a:	682b      	ldr	r3, [r5, #0]
 800e11c:	2200      	movs	r2, #0
 800e11e:	4620      	mov	r0, r4
 800e120:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 800e124:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 800e128:	603a      	str	r2, [r7, #0]
 800e12a:	b003      	add	sp, #12
 800e12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e130:	2000007c 	.word	0x2000007c
 800e134:	20035844 	.word	0x20035844
 800e138:	0800fa5d 	.word	0x0800fa5d
 800e13c:	08013591 	.word	0x08013591

0800e140 <_PaintTransChildren>:
 800e140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	4605      	mov	r5, r0
 800e148:	f7fa fb98 	bl	800887c <GUI_ALLOC_LockH>
 800e14c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e14e:	9001      	str	r0, [sp, #4]
 800e150:	079b      	lsls	r3, r3, #30
 800e152:	d524      	bpl.n	800e19e <_PaintTransChildren+0x5e>
 800e154:	69c6      	ldr	r6, [r0, #28]
 800e156:	b316      	cbz	r6, 800e19e <_PaintTransChildren+0x5e>
 800e158:	ac01      	add	r4, sp, #4
 800e15a:	e004      	b.n	800e166 <_PaintTransChildren+0x26>
 800e15c:	6a1e      	ldr	r6, [r3, #32]
 800e15e:	4668      	mov	r0, sp
 800e160:	f7fa fb9e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e164:	b1ae      	cbz	r6, 800e192 <_PaintTransChildren+0x52>
 800e166:	4630      	mov	r0, r6
 800e168:	f7fa fb88 	bl	800887c <GUI_ALLOC_LockH>
 800e16c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e16e:	9000      	str	r0, [sp, #0]
 800e170:	f002 0203 	and.w	r2, r2, #3
 800e174:	2a03      	cmp	r2, #3
 800e176:	4603      	mov	r3, r0
 800e178:	d1f0      	bne.n	800e15c <_PaintTransChildren+0x1c>
 800e17a:	9901      	ldr	r1, [sp, #4]
 800e17c:	3108      	adds	r1, #8
 800e17e:	f7fa ff4b 	bl	8009018 <GUI_RectsIntersect>
 800e182:	b998      	cbnz	r0, 800e1ac <_PaintTransChildren+0x6c>
 800e184:	9b00      	ldr	r3, [sp, #0]
 800e186:	6a1e      	ldr	r6, [r3, #32]
 800e188:	4668      	mov	r0, sp
 800e18a:	f7fa fb89 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e18e:	2e00      	cmp	r6, #0
 800e190:	d1e9      	bne.n	800e166 <_PaintTransChildren+0x26>
 800e192:	4620      	mov	r0, r4
 800e194:	f7fa fb84 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e198:	b002      	add	sp, #8
 800e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e19e:	ac01      	add	r4, sp, #4
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f7fa fb7d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e1a6:	b002      	add	sp, #8
 800e1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ac:	9b01      	ldr	r3, [sp, #4]
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 800e1b4:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800e1b8:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 800e1bc:	f9b3 a00e 	ldrsh.w	sl, [r3, #14]
 800e1c0:	f7fa fb6e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e1c4:	4668      	mov	r0, sp
 800e1c6:	f7fa fb6b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f7ff ff5a 	bl	800e084 <_Paint1Trans>
 800e1d0:	b988      	cbnz	r0, 800e1f6 <_PaintTransChildren+0xb6>
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f7fa fb52 	bl	800887c <GUI_ALLOC_LockH>
 800e1d8:	9001      	str	r0, [sp, #4]
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f7fa fb4e 	bl	800887c <GUI_ALLOC_LockH>
 800e1e0:	9a01      	ldr	r2, [sp, #4]
 800e1e2:	9000      	str	r0, [sp, #0]
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f8a2 9008 	strh.w	r9, [r2, #8]
 800e1ea:	f8a2 800a 	strh.w	r8, [r2, #10]
 800e1ee:	8197      	strh	r7, [r2, #12]
 800e1f0:	f8a2 a00e 	strh.w	sl, [r2, #14]
 800e1f4:	e7b2      	b.n	800e15c <_PaintTransChildren+0x1c>
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f7fa fb36 	bl	8008868 <GUI_ALLOC_h2p>
 800e1fc:	9000      	str	r0, [sp, #0]
 800e1fe:	4630      	mov	r0, r6
 800e200:	f7ff ff9e 	bl	800e140 <_PaintTransChildren>
 800e204:	4630      	mov	r0, r6
 800e206:	f7fa fb2f 	bl	8008868 <GUI_ALLOC_h2p>
 800e20a:	9000      	str	r0, [sp, #0]
 800e20c:	4628      	mov	r0, r5
 800e20e:	f7fa fb2b 	bl	8008868 <GUI_ALLOC_h2p>
 800e212:	9001      	str	r0, [sp, #4]
 800e214:	e7dd      	b.n	800e1d2 <_PaintTransChildren+0x92>
 800e216:	bf00      	nop

0800e218 <_Findx0.constprop.10>:
 800e218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e21a:	4604      	mov	r4, r0
 800e21c:	b085      	sub	sp, #20
 800e21e:	2800      	cmp	r0, #0
 800e220:	d03e      	beq.n	800e2a0 <_Findx0.constprop.10+0x88>
 800e222:	460f      	mov	r7, r1
 800e224:	2600      	movs	r6, #0
 800e226:	ad02      	add	r5, sp, #8
 800e228:	e00c      	b.n	800e244 <_Findx0.constprop.10+0x2c>
 800e22a:	07e3      	lsls	r3, r4, #31
 800e22c:	d424      	bmi.n	800e278 <_Findx0.constprop.10+0x60>
 800e22e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e232:	9801      	ldr	r0, [sp, #4]
 800e234:	3301      	adds	r3, #1
 800e236:	803b      	strh	r3, [r7, #0]
 800e238:	2601      	movs	r6, #1
 800e23a:	6a04      	ldr	r4, [r0, #32]
 800e23c:	a801      	add	r0, sp, #4
 800e23e:	f7fa fb2f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e242:	b1b4      	cbz	r4, 800e272 <_Findx0.constprop.10+0x5a>
 800e244:	4620      	mov	r0, r4
 800e246:	f7fa fb19 	bl	800887c <GUI_ALLOC_LockH>
 800e24a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e24c:	9001      	str	r0, [sp, #4]
 800e24e:	07a2      	lsls	r2, r4, #30
 800e250:	d5f3      	bpl.n	800e23a <_Findx0.constprop.10+0x22>
 800e252:	c803      	ldmia	r0, {r0, r1}
 800e254:	e885 0003 	stmia.w	r5, {r0, r1}
 800e258:	4629      	mov	r1, r5
 800e25a:	4638      	mov	r0, r7
 800e25c:	f7fa fedc 	bl	8009018 <GUI_RectsIntersect>
 800e260:	2800      	cmp	r0, #0
 800e262:	d1e2      	bne.n	800e22a <_Findx0.constprop.10+0x12>
 800e264:	9801      	ldr	r0, [sp, #4]
 800e266:	6a04      	ldr	r4, [r0, #32]
 800e268:	a801      	add	r0, sp, #4
 800e26a:	f7fa fb19 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e26e:	2c00      	cmp	r4, #0
 800e270:	d1e8      	bne.n	800e244 <_Findx0.constprop.10+0x2c>
 800e272:	4630      	mov	r0, r6
 800e274:	b005      	add	sp, #20
 800e276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e278:	9801      	ldr	r0, [sp, #4]
 800e27a:	69c4      	ldr	r4, [r0, #28]
 800e27c:	2c00      	cmp	r4, #0
 800e27e:	d0dc      	beq.n	800e23a <_Findx0.constprop.10+0x22>
 800e280:	462a      	mov	r2, r5
 800e282:	4639      	mov	r1, r7
 800e284:	4620      	mov	r0, r4
 800e286:	f7ff fe61 	bl	800df4c <_Findx0>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	4620      	mov	r0, r4
 800e28e:	bf18      	it	ne
 800e290:	2601      	movne	r6, #1
 800e292:	f7fa fae9 	bl	8008868 <GUI_ALLOC_h2p>
 800e296:	6a04      	ldr	r4, [r0, #32]
 800e298:	2c00      	cmp	r4, #0
 800e29a:	d1f1      	bne.n	800e280 <_Findx0.constprop.10+0x68>
 800e29c:	9801      	ldr	r0, [sp, #4]
 800e29e:	e7e2      	b.n	800e266 <_Findx0.constprop.10+0x4e>
 800e2a0:	4606      	mov	r6, r0
 800e2a2:	e7e6      	b.n	800e272 <_Findx0.constprop.10+0x5a>

0800e2a4 <_Findy1.constprop.11>:
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d050      	beq.n	800e34a <_Findy1.constprop.11+0xa6>
 800e2a8:	b570      	push	{r4, r5, r6, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	460e      	mov	r6, r1
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	ad02      	add	r5, sp, #8
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f7fa fae2 	bl	800887c <GUI_ALLOC_LockH>
 800e2b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e2ba:	9001      	str	r0, [sp, #4]
 800e2bc:	07a2      	lsls	r2, r4, #30
 800e2be:	d518      	bpl.n	800e2f2 <_Findy1.constprop.11+0x4e>
 800e2c0:	c803      	ldmia	r0, {r0, r1}
 800e2c2:	e885 0003 	stmia.w	r5, {r0, r1}
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7fa fea5 	bl	8009018 <GUI_RectsIntersect>
 800e2ce:	b330      	cbz	r0, 800e31e <_Findy1.constprop.11+0x7a>
 800e2d0:	07e3      	lsls	r3, r4, #31
 800e2d2:	9801      	ldr	r0, [sp, #4]
 800e2d4:	d415      	bmi.n	800e302 <_Findy1.constprop.11+0x5e>
 800e2d6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800e2da:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	dd25      	ble.n	800e32e <_Findy1.constprop.11+0x8a>
 800e2e2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800e2e6:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	db01      	blt.n	800e2f2 <_Findy1.constprop.11+0x4e>
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	80f3      	strh	r3, [r6, #6]
 800e2f2:	6a04      	ldr	r4, [r0, #32]
 800e2f4:	a801      	add	r0, sp, #4
 800e2f6:	f7fa fad3 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e2fa:	2c00      	cmp	r4, #0
 800e2fc:	d1d9      	bne.n	800e2b2 <_Findy1.constprop.11+0xe>
 800e2fe:	b004      	add	sp, #16
 800e300:	bd70      	pop	{r4, r5, r6, pc}
 800e302:	69c4      	ldr	r4, [r0, #28]
 800e304:	2c00      	cmp	r4, #0
 800e306:	d0f4      	beq.n	800e2f2 <_Findy1.constprop.11+0x4e>
 800e308:	4620      	mov	r0, r4
 800e30a:	462a      	mov	r2, r5
 800e30c:	4631      	mov	r1, r6
 800e30e:	f7ff fdb5 	bl	800de7c <_Findy1>
 800e312:	4620      	mov	r0, r4
 800e314:	f7fa faa8 	bl	8008868 <GUI_ALLOC_h2p>
 800e318:	6a04      	ldr	r4, [r0, #32]
 800e31a:	2c00      	cmp	r4, #0
 800e31c:	d1f4      	bne.n	800e308 <_Findy1.constprop.11+0x64>
 800e31e:	9801      	ldr	r0, [sp, #4]
 800e320:	6a04      	ldr	r4, [r0, #32]
 800e322:	a801      	add	r0, sp, #4
 800e324:	f7fa fabc 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e328:	2c00      	cmp	r4, #0
 800e32a:	d1c2      	bne.n	800e2b2 <_Findy1.constprop.11+0xe>
 800e32c:	e7e7      	b.n	800e2fe <_Findy1.constprop.11+0x5a>
 800e32e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e332:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800e336:	429a      	cmp	r2, r3
 800e338:	dddb      	ble.n	800e2f2 <_Findy1.constprop.11+0x4e>
 800e33a:	6a04      	ldr	r4, [r0, #32]
 800e33c:	80f3      	strh	r3, [r6, #6]
 800e33e:	a801      	add	r0, sp, #4
 800e340:	f7fa faae 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e344:	2c00      	cmp	r4, #0
 800e346:	d1b4      	bne.n	800e2b2 <_Findy1.constprop.11+0xe>
 800e348:	e7d9      	b.n	800e2fe <_Findy1.constprop.11+0x5a>
 800e34a:	4770      	bx	lr

0800e34c <WM__PaintWinAndOverlays>:
 800e34c:	b530      	push	{r4, r5, lr}
 800e34e:	b083      	sub	sp, #12
 800e350:	4604      	mov	r4, r0
 800e352:	f7fa fa93 	bl	800887c <GUI_ALLOC_LockH>
 800e356:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e358:	9001      	str	r0, [sp, #4]
 800e35a:	f640 0301 	movw	r3, #2049	; 0x801
 800e35e:	4013      	ands	r3, r2
 800e360:	2b01      	cmp	r3, #1
 800e362:	d00e      	beq.n	800e382 <WM__PaintWinAndOverlays+0x36>
 800e364:	a801      	add	r0, sp, #4
 800e366:	f7fa fa9b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7fa fa7c 	bl	8008868 <GUI_ALLOC_h2p>
 800e370:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e372:	4a1b      	ldr	r2, [pc, #108]	; (800e3e0 <WM__PaintWinAndOverlays+0x94>)
 800e374:	4b1b      	ldr	r3, [pc, #108]	; (800e3e4 <WM__PaintWinAndOverlays+0x98>)
 800e376:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800e37a:	bf08      	it	eq
 800e37c:	4613      	moveq	r3, r2
 800e37e:	4620      	mov	r0, r4
 800e380:	4798      	blx	r3
 800e382:	4b19      	ldr	r3, [pc, #100]	; (800e3e8 <WM__PaintWinAndOverlays+0x9c>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	b90b      	cbnz	r3, 800e38c <WM__PaintWinAndOverlays+0x40>
 800e388:	b003      	add	sp, #12
 800e38a:	bd30      	pop	{r4, r5, pc}
 800e38c:	4620      	mov	r0, r4
 800e38e:	f7ff fed7 	bl	800e140 <_PaintTransChildren>
 800e392:	4620      	mov	r0, r4
 800e394:	f7fa fa68 	bl	8008868 <GUI_ALLOC_h2p>
 800e398:	6985      	ldr	r5, [r0, #24]
 800e39a:	6a04      	ldr	r4, [r0, #32]
 800e39c:	2d00      	cmp	r5, #0
 800e39e:	d0f3      	beq.n	800e388 <WM__PaintWinAndOverlays+0x3c>
 800e3a0:	b184      	cbz	r4, 800e3c4 <WM__PaintWinAndOverlays+0x78>
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7fa fa60 	bl	8008868 <GUI_ALLOC_h2p>
 800e3a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e3aa:	f003 0303 	and.w	r3, r3, #3
 800e3ae:	2b03      	cmp	r3, #3
 800e3b0:	d011      	beq.n	800e3d6 <WM__PaintWinAndOverlays+0x8a>
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7ff fec4 	bl	800e140 <_PaintTransChildren>
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f7fa fa55 	bl	8008868 <GUI_ALLOC_h2p>
 800e3be:	6a04      	ldr	r4, [r0, #32]
 800e3c0:	2c00      	cmp	r4, #0
 800e3c2:	d1ee      	bne.n	800e3a2 <WM__PaintWinAndOverlays+0x56>
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f7fa fa4f 	bl	8008868 <GUI_ALLOC_h2p>
 800e3ca:	6985      	ldr	r5, [r0, #24]
 800e3cc:	6a04      	ldr	r4, [r0, #32]
 800e3ce:	2d00      	cmp	r5, #0
 800e3d0:	d1e6      	bne.n	800e3a0 <WM__PaintWinAndOverlays+0x54>
 800e3d2:	b003      	add	sp, #12
 800e3d4:	bd30      	pop	{r4, r5, pc}
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f7ff fe54 	bl	800e084 <_Paint1Trans>
 800e3dc:	e7e9      	b.n	800e3b2 <WM__PaintWinAndOverlays+0x66>
 800e3de:	bf00      	nop
 800e3e0:	0800fa5d 	.word	0x0800fa5d
 800e3e4:	08013591 	.word	0x08013591
 800e3e8:	20035878 	.word	0x20035878

0800e3ec <_cbPaintMemDev>:
 800e3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f0:	4d19      	ldr	r5, [pc, #100]	; (800e458 <_cbPaintMemDev+0x6c>)
 800e3f2:	682b      	ldr	r3, [r5, #0]
 800e3f4:	b082      	sub	sp, #8
 800e3f6:	4681      	mov	r9, r0
 800e3f8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e3fa:	f7fa fa3f 	bl	800887c <GUI_ALLOC_LockH>
 800e3fe:	682a      	ldr	r2, [r5, #0]
 800e400:	ac02      	add	r4, sp, #8
 800e402:	3208      	adds	r2, #8
 800e404:	4603      	mov	r3, r0
 800e406:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e40a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e40e:	f103 0208 	add.w	r2, r3, #8
 800e412:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 800e416:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800e41a:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 800e41e:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 800e422:	e882 0003 	stmia.w	r2, {r0, r1}
 800e426:	4620      	mov	r0, r4
 800e428:	f7fa fa3a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e42c:	f8d9 0000 	ldr.w	r0, [r9]
 800e430:	f7ff ff8c 	bl	800e34c <WM__PaintWinAndOverlays>
 800e434:	682b      	ldr	r3, [r5, #0]
 800e436:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e438:	f7fa fa20 	bl	800887c <GUI_ALLOC_LockH>
 800e43c:	4603      	mov	r3, r0
 800e43e:	4620      	mov	r0, r4
 800e440:	f8a3 a008 	strh.w	sl, [r3, #8]
 800e444:	f8a3 800a 	strh.w	r8, [r3, #10]
 800e448:	819f      	strh	r7, [r3, #12]
 800e44a:	81de      	strh	r6, [r3, #14]
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	f7fa fa27 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e452:	b002      	add	sp, #8
 800e454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e458:	2000007c 	.word	0x2000007c

0800e45c <_Invalidate1Abs>:
 800e45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45e:	b085      	sub	sp, #20
 800e460:	4616      	mov	r6, r2
 800e462:	460c      	mov	r4, r1
 800e464:	4605      	mov	r5, r0
 800e466:	f7fa f9ff 	bl	8008868 <GUI_ALLOC_h2p>
 800e46a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e46c:	9001      	str	r0, [sp, #4]
 800e46e:	079a      	lsls	r2, r3, #30
 800e470:	d505      	bpl.n	800e47e <_Invalidate1Abs+0x22>
 800e472:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e476:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e47a:	4291      	cmp	r1, r2
 800e47c:	da01      	bge.n	800e482 <_Invalidate1Abs+0x26>
 800e47e:	b005      	add	sp, #20
 800e480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e482:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e486:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e48a:	4291      	cmp	r1, r2
 800e48c:	dcf7      	bgt.n	800e47e <_Invalidate1Abs+0x22>
 800e48e:	f640 0201 	movw	r2, #2049	; 0x801
 800e492:	401a      	ands	r2, r3
 800e494:	2a01      	cmp	r2, #1
 800e496:	d0f2      	beq.n	800e47e <_Invalidate1Abs+0x22>
 800e498:	4628      	mov	r0, r5
 800e49a:	f7fa f9ef 	bl	800887c <GUI_ALLOC_LockH>
 800e49e:	af02      	add	r7, sp, #8
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	f7fb fe47 	bl	800a13c <GUI__IntersectRects>
 800e4ae:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800e4b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	dc31      	bgt.n	800e51e <_Invalidate1Abs+0xc2>
 800e4ba:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800e4be:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	dc2b      	bgt.n	800e51e <_Invalidate1Abs+0xc2>
 800e4c6:	9a01      	ldr	r2, [sp, #4]
 800e4c8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800e4ca:	f244 0320 	movw	r3, #16416	; 0x4020
 800e4ce:	4023      	ands	r3, r4
 800e4d0:	bb53      	cbnz	r3, 800e528 <_Invalidate1Abs+0xcc>
 800e4d2:	f8df e070 	ldr.w	lr, [pc, #112]	; 800e544 <_Invalidate1Abs+0xe8>
 800e4d6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e4da:	f8be 3000 	ldrh.w	r3, [lr]
 800e4de:	4326      	orrs	r6, r4
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	f102 0408 	add.w	r4, r2, #8
 800e4e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800e4ea:	f8ae 3000 	strh.w	r3, [lr]
 800e4ee:	6296      	str	r6, [r2, #40]	; 0x28
 800e4f0:	e000      	b.n	800e4f4 <_Invalidate1Abs+0x98>
 800e4f2:	461d      	mov	r5, r3
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	f7fa f9b7 	bl	8008868 <GUI_ALLOC_h2p>
 800e4fa:	6983      	ldr	r3, [r0, #24]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f8      	bne.n	800e4f2 <_Invalidate1Abs+0x96>
 800e500:	4b0e      	ldr	r3, [pc, #56]	; (800e53c <_Invalidate1Abs+0xe0>)
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	4295      	cmp	r5, r2
 800e506:	d016      	beq.n	800e536 <_Invalidate1Abs+0xda>
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	42ab      	cmp	r3, r5
 800e50c:	bf0c      	ite	eq
 800e50e:	2302      	moveq	r3, #2
 800e510:	2300      	movne	r3, #0
 800e512:	4a0b      	ldr	r2, [pc, #44]	; (800e540 <_Invalidate1Abs+0xe4>)
 800e514:	6811      	ldr	r1, [r2, #0]
 800e516:	430b      	orrs	r3, r1
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	f7fb fde9 	bl	800a0f0 <GUI_SignalEvent>
 800e51e:	a801      	add	r0, sp, #4
 800e520:	f7fa f9be 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e524:	b005      	add	sp, #20
 800e526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e528:	f102 0108 	add.w	r1, r2, #8
 800e52c:	4608      	mov	r0, r1
 800e52e:	463a      	mov	r2, r7
 800e530:	f7fa fc92 	bl	8008e58 <GUI_MergeRect>
 800e534:	e7f3      	b.n	800e51e <_Invalidate1Abs+0xc2>
 800e536:	2301      	movs	r3, #1
 800e538:	e7eb      	b.n	800e512 <_Invalidate1Abs+0xb6>
 800e53a:	bf00      	nop
 800e53c:	2003587c 	.word	0x2003587c
 800e540:	20035840 	.word	0x20035840
 800e544:	20035874 	.word	0x20035874

0800e548 <WM__ActivateClipRect>:
 800e548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e54c:	4f45      	ldr	r7, [pc, #276]	; (800e664 <WM__ActivateClipRect+0x11c>)
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800e554:	b086      	sub	sp, #24
 800e556:	2a00      	cmp	r2, #0
 800e558:	d139      	bne.n	800e5ce <WM__ActivateClipRect+0x86>
 800e55a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e55c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800e668 <WM__ActivateClipRect+0x120>
 800e560:	f7fa f98c 	bl	800887c <GUI_ALLOC_LockH>
 800e564:	4603      	mov	r3, r0
 800e566:	c803      	ldmia	r0, {r0, r1}
 800e568:	ae02      	add	r6, sp, #8
 800e56a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e56e:	4668      	mov	r0, sp
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	f7fa f995 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e576:	f8d8 4000 	ldr.w	r4, [r8]
 800e57a:	2c00      	cmp	r4, #0
 800e57c:	d14e      	bne.n	800e61c <WM__ActivateClipRect+0xd4>
 800e57e:	683c      	ldr	r4, [r7, #0]
 800e580:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e582:	2b00      	cmp	r3, #0
 800e584:	d065      	beq.n	800e652 <WM__ActivateClipRect+0x10a>
 800e586:	6818      	ldr	r0, [r3, #0]
 800e588:	6859      	ldr	r1, [r3, #4]
 800e58a:	f8d8 2000 	ldr.w	r2, [r8]
 800e58e:	ad04      	add	r5, sp, #16
 800e590:	462b      	mov	r3, r5
 800e592:	c303      	stmia	r3!, {r0, r1}
 800e594:	b1ca      	cbz	r2, 800e5ca <WM__ActivateClipRect+0x82>
 800e596:	4610      	mov	r0, r2
 800e598:	f7fa f970 	bl	800887c <GUI_ALLOC_LockH>
 800e59c:	ac06      	add	r4, sp, #24
 800e59e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e5a2:	f844 0d14 	str.w	r0, [r4, #-20]!
 800e5a6:	f9b0 1000 	ldrsh.w	r1, [r0]
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	f7fa fc82 	bl	8008eb4 <GUI_MoveRect>
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7fa f975 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	f7fb fda1 	bl	800a100 <GUI__IntersectRect>
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f004 fc4e 	bl	8012e60 <LCD_SetClipRectEx>
 800e5c4:	b006      	add	sp, #24
 800e5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e5cc:	e7e3      	b.n	800e596 <WM__ActivateClipRect+0x4e>
 800e5ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	d042      	beq.n	800e65a <WM__ActivateClipRect+0x112>
 800e5d4:	4c24      	ldr	r4, [pc, #144]	; (800e668 <WM__ActivateClipRect+0x120>)
 800e5d6:	6810      	ldr	r0, [r2, #0]
 800e5d8:	6851      	ldr	r1, [r2, #4]
 800e5da:	6824      	ldr	r4, [r4, #0]
 800e5dc:	ad04      	add	r5, sp, #16
 800e5de:	462a      	mov	r2, r5
 800e5e0:	c203      	stmia	r2!, {r0, r1}
 800e5e2:	b1cc      	cbz	r4, 800e618 <WM__ActivateClipRect+0xd0>
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f7fa f949 	bl	800887c <GUI_ALLOC_LockH>
 800e5ea:	ac06      	add	r4, sp, #24
 800e5ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e5f0:	f844 0d10 	str.w	r0, [r4, #-16]!
 800e5f4:	f9b0 1000 	ldrsh.w	r1, [r0]
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	f7fa fc5b 	bl	8008eb4 <GUI_MoveRect>
 800e5fe:	4620      	mov	r0, r4
 800e600:	f7fa f94e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e604:	4919      	ldr	r1, [pc, #100]	; (800e66c <WM__ActivateClipRect+0x124>)
 800e606:	4628      	mov	r0, r5
 800e608:	f7fb fd7a 	bl	800a100 <GUI__IntersectRect>
 800e60c:	4628      	mov	r0, r5
 800e60e:	f004 fc27 	bl	8012e60 <LCD_SetClipRectEx>
 800e612:	b006      	add	sp, #24
 800e614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e618:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800e61a:	e7e3      	b.n	800e5e4 <WM__ActivateClipRect+0x9c>
 800e61c:	ad04      	add	r5, sp, #16
 800e61e:	e007      	b.n	800e630 <WM__ActivateClipRect+0xe8>
 800e620:	f7fb fd6e 	bl	800a100 <GUI__IntersectRect>
 800e624:	9b04      	ldr	r3, [sp, #16]
 800e626:	699c      	ldr	r4, [r3, #24]
 800e628:	4628      	mov	r0, r5
 800e62a:	b17c      	cbz	r4, 800e64c <WM__ActivateClipRect+0x104>
 800e62c:	f7fa f938 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e630:	4620      	mov	r0, r4
 800e632:	f7fa f923 	bl	800887c <GUI_ALLOC_LockH>
 800e636:	4603      	mov	r3, r0
 800e638:	4601      	mov	r1, r0
 800e63a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e63c:	9304      	str	r3, [sp, #16]
 800e63e:	0793      	lsls	r3, r2, #30
 800e640:	4630      	mov	r0, r6
 800e642:	d4ed      	bmi.n	800e620 <WM__ActivateClipRect+0xd8>
 800e644:	4628      	mov	r0, r5
 800e646:	f7fa f92b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e64a:	e798      	b.n	800e57e <WM__ActivateClipRect+0x36>
 800e64c:	f7fa f928 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e650:	e795      	b.n	800e57e <WM__ActivateClipRect+0x36>
 800e652:	4630      	mov	r0, r6
 800e654:	f004 fc04 	bl	8012e60 <LCD_SetClipRectEx>
 800e658:	e7b4      	b.n	800e5c4 <WM__ActivateClipRect+0x7c>
 800e65a:	4804      	ldr	r0, [pc, #16]	; (800e66c <WM__ActivateClipRect+0x124>)
 800e65c:	f004 fc00 	bl	8012e60 <LCD_SetClipRectEx>
 800e660:	e7b0      	b.n	800e5c4 <WM__ActivateClipRect+0x7c>
 800e662:	bf00      	nop
 800e664:	2000007c 	.word	0x2000007c
 800e668:	20035844 	.word	0x20035844
 800e66c:	2000075c 	.word	0x2000075c

0800e670 <WM__InsertWindowIntoList>:
 800e670:	b901      	cbnz	r1, 800e674 <WM__InsertWindowIntoList+0x4>
 800e672:	4770      	bx	lr
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	460c      	mov	r4, r1
 800e67a:	4605      	mov	r5, r0
 800e67c:	f7fa f8fe 	bl	800887c <GUI_ALLOC_LockH>
 800e680:	4603      	mov	r3, r0
 800e682:	2200      	movs	r2, #0
 800e684:	6184      	str	r4, [r0, #24]
 800e686:	4620      	mov	r0, r4
 800e688:	621a      	str	r2, [r3, #32]
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	f7fa f8f6 	bl	800887c <GUI_ALLOC_LockH>
 800e690:	69c4      	ldr	r4, [r0, #28]
 800e692:	9002      	str	r0, [sp, #8]
 800e694:	2c00      	cmp	r4, #0
 800e696:	d02c      	beq.n	800e6f2 <WM__InsertWindowIntoList+0x82>
 800e698:	9b01      	ldr	r3, [sp, #4]
 800e69a:	4620      	mov	r0, r4
 800e69c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800e69e:	f7fa f8ed 	bl	800887c <GUI_ALLOC_LockH>
 800e6a2:	f006 0608 	and.w	r6, r6, #8
 800e6a6:	9003      	str	r0, [sp, #12]
 800e6a8:	2e00      	cmp	r6, #0
 800e6aa:	d12b      	bne.n	800e704 <WM__InsertWindowIntoList+0x94>
 800e6ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e6ae:	071a      	lsls	r2, r3, #28
 800e6b0:	d43d      	bmi.n	800e72e <WM__InsertWindowIntoList+0xbe>
 800e6b2:	a802      	add	r0, sp, #8
 800e6b4:	f7fa f8f4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e6b8:	a803      	add	r0, sp, #12
 800e6ba:	f7fa f8f1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7fa f8d2 	bl	8008868 <GUI_ALLOC_h2p>
 800e6c4:	6a04      	ldr	r4, [r0, #32]
 800e6c6:	9003      	str	r0, [sp, #12]
 800e6c8:	b924      	cbnz	r4, 800e6d4 <WM__InsertWindowIntoList+0x64>
 800e6ca:	e02e      	b.n	800e72a <WM__InsertWindowIntoList+0xba>
 800e6cc:	6a04      	ldr	r4, [r0, #32]
 800e6ce:	9003      	str	r0, [sp, #12]
 800e6d0:	2c00      	cmp	r4, #0
 800e6d2:	d02a      	beq.n	800e72a <WM__InsertWindowIntoList+0xba>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7fa f8c7 	bl	8008868 <GUI_ALLOC_h2p>
 800e6da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e6dc:	071b      	lsls	r3, r3, #28
 800e6de:	d5f5      	bpl.n	800e6cc <WM__InsertWindowIntoList+0x5c>
 800e6e0:	9a03      	ldr	r2, [sp, #12]
 800e6e2:	9b01      	ldr	r3, [sp, #4]
 800e6e4:	6215      	str	r5, [r2, #32]
 800e6e6:	621c      	str	r4, [r3, #32]
 800e6e8:	a801      	add	r0, sp, #4
 800e6ea:	f7fa f8d9 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e6ee:	b004      	add	sp, #16
 800e6f0:	bd70      	pop	{r4, r5, r6, pc}
 800e6f2:	61c5      	str	r5, [r0, #28]
 800e6f4:	a801      	add	r0, sp, #4
 800e6f6:	f7fa f8d3 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e6fa:	a802      	add	r0, sp, #8
 800e6fc:	f7fa f8d0 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e700:	b004      	add	sp, #16
 800e702:	bd70      	pop	{r4, r5, r6, pc}
 800e704:	a802      	add	r0, sp, #8
 800e706:	f7fa f8cb 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e70a:	a803      	add	r0, sp, #12
 800e70c:	f7fa f8c8 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e710:	4620      	mov	r0, r4
 800e712:	f7fa f8a9 	bl	8008868 <GUI_ALLOC_h2p>
 800e716:	6a02      	ldr	r2, [r0, #32]
 800e718:	9003      	str	r0, [sp, #12]
 800e71a:	b132      	cbz	r2, 800e72a <WM__InsertWindowIntoList+0xba>
 800e71c:	4610      	mov	r0, r2
 800e71e:	f7fa f8a3 	bl	8008868 <GUI_ALLOC_h2p>
 800e722:	6a02      	ldr	r2, [r0, #32]
 800e724:	9003      	str	r0, [sp, #12]
 800e726:	2a00      	cmp	r2, #0
 800e728:	d1f8      	bne.n	800e71c <WM__InsertWindowIntoList+0xac>
 800e72a:	6205      	str	r5, [r0, #32]
 800e72c:	e7dc      	b.n	800e6e8 <WM__InsertWindowIntoList+0x78>
 800e72e:	9a01      	ldr	r2, [sp, #4]
 800e730:	9b02      	ldr	r3, [sp, #8]
 800e732:	6214      	str	r4, [r2, #32]
 800e734:	a801      	add	r0, sp, #4
 800e736:	61dd      	str	r5, [r3, #28]
 800e738:	f7fa f8b2 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e73c:	a802      	add	r0, sp, #8
 800e73e:	f7fa f8af 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e742:	a803      	add	r0, sp, #12
 800e744:	f7fa f8ac 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e748:	e7da      	b.n	800e700 <WM__InsertWindowIntoList+0x90>
 800e74a:	bf00      	nop

0800e74c <WM__IsWindow>:
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <WM__IsWindow+0x2c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	b183      	cbz	r3, 800e774 <WM__IsWindow+0x28>
 800e752:	4283      	cmp	r3, r0
 800e754:	b510      	push	{r4, lr}
 800e756:	4604      	mov	r4, r0
 800e758:	d102      	bne.n	800e760 <WM__IsWindow+0x14>
 800e75a:	e009      	b.n	800e770 <WM__IsWindow+0x24>
 800e75c:	429c      	cmp	r4, r3
 800e75e:	d007      	beq.n	800e770 <WM__IsWindow+0x24>
 800e760:	4618      	mov	r0, r3
 800e762:	f7fa f881 	bl	8008868 <GUI_ALLOC_h2p>
 800e766:	6943      	ldr	r3, [r0, #20]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1f7      	bne.n	800e75c <WM__IsWindow+0x10>
 800e76c:	2000      	movs	r0, #0
 800e76e:	bd10      	pop	{r4, pc}
 800e770:	2001      	movs	r0, #1
 800e772:	bd10      	pop	{r4, pc}
 800e774:	2000      	movs	r0, #0
 800e776:	4770      	bx	lr
 800e778:	20035834 	.word	0x20035834

0800e77c <WM__InvalidateDrawAndDescs>:
 800e77c:	b900      	cbnz	r0, 800e780 <WM__InvalidateDrawAndDescs+0x4>
 800e77e:	4770      	bx	lr
 800e780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e784:	b08f      	sub	sp, #60	; 0x3c
 800e786:	4604      	mov	r4, r0
 800e788:	f7fa f878 	bl	800887c <GUI_ALLOC_LockH>
 800e78c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e78e:	9005      	str	r0, [sp, #20]
 800e790:	079a      	lsls	r2, r3, #30
 800e792:	f140 813c 	bpl.w	800ea0e <WM__InvalidateDrawAndDescs+0x292>
 800e796:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e798:	b140      	cbz	r0, 800e7ac <WM__InvalidateDrawAndDescs+0x30>
 800e79a:	4ba0      	ldr	r3, [pc, #640]	; (800ea1c <WM__InvalidateDrawAndDescs+0x2a0>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	429c      	cmp	r4, r3
 800e7a0:	d004      	beq.n	800e7ac <WM__InvalidateDrawAndDescs+0x30>
 800e7a2:	f004 fccd 	bl	8013140 <GUI_MEMDEV_Delete>
 800e7a6:	9b05      	ldr	r3, [sp, #20]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	625a      	str	r2, [r3, #36]	; 0x24
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f001 fce1 	bl	8010174 <WM_GetFirstChild>
 800e7b2:	9003      	str	r0, [sp, #12]
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f000 812a 	beq.w	800ea0e <WM__InvalidateDrawAndDescs+0x292>
 800e7ba:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800ea1c <WM__InvalidateDrawAndDescs+0x2a0>
 800e7be:	9803      	ldr	r0, [sp, #12]
 800e7c0:	f7fa f85c 	bl	800887c <GUI_ALLOC_LockH>
 800e7c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e7c6:	9006      	str	r0, [sp, #24]
 800e7c8:	079b      	lsls	r3, r3, #30
 800e7ca:	f140 8115 	bpl.w	800e9f8 <WM__InvalidateDrawAndDescs+0x27c>
 800e7ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e7d0:	b148      	cbz	r0, 800e7e6 <WM__InvalidateDrawAndDescs+0x6a>
 800e7d2:	f8d8 3000 	ldr.w	r3, [r8]
 800e7d6:	9a03      	ldr	r2, [sp, #12]
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d004      	beq.n	800e7e6 <WM__InvalidateDrawAndDescs+0x6a>
 800e7dc:	f004 fcb0 	bl	8013140 <GUI_MEMDEV_Delete>
 800e7e0:	9b06      	ldr	r3, [sp, #24]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	625a      	str	r2, [r3, #36]	; 0x24
 800e7e6:	9803      	ldr	r0, [sp, #12]
 800e7e8:	f001 fcc4 	bl	8010174 <WM_GetFirstChild>
 800e7ec:	9002      	str	r0, [sp, #8]
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f000 8102 	beq.w	800e9f8 <WM__InvalidateDrawAndDescs+0x27c>
 800e7f4:	9802      	ldr	r0, [sp, #8]
 800e7f6:	f7fa f841 	bl	800887c <GUI_ALLOC_LockH>
 800e7fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e7fc:	9007      	str	r0, [sp, #28]
 800e7fe:	079f      	lsls	r7, r3, #30
 800e800:	f140 80ef 	bpl.w	800e9e2 <WM__InvalidateDrawAndDescs+0x266>
 800e804:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e806:	b148      	cbz	r0, 800e81c <WM__InvalidateDrawAndDescs+0xa0>
 800e808:	f8d8 3000 	ldr.w	r3, [r8]
 800e80c:	9a02      	ldr	r2, [sp, #8]
 800e80e:	4293      	cmp	r3, r2
 800e810:	d004      	beq.n	800e81c <WM__InvalidateDrawAndDescs+0xa0>
 800e812:	f004 fc95 	bl	8013140 <GUI_MEMDEV_Delete>
 800e816:	9b07      	ldr	r3, [sp, #28]
 800e818:	2200      	movs	r2, #0
 800e81a:	625a      	str	r2, [r3, #36]	; 0x24
 800e81c:	9802      	ldr	r0, [sp, #8]
 800e81e:	f001 fca9 	bl	8010174 <WM_GetFirstChild>
 800e822:	4683      	mov	fp, r0
 800e824:	2800      	cmp	r0, #0
 800e826:	f000 80dc 	beq.w	800e9e2 <WM__InvalidateDrawAndDescs+0x266>
 800e82a:	4658      	mov	r0, fp
 800e82c:	f7fa f826 	bl	800887c <GUI_ALLOC_LockH>
 800e830:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e832:	9008      	str	r0, [sp, #32]
 800e834:	079e      	lsls	r6, r3, #30
 800e836:	f140 80c8 	bpl.w	800e9ca <WM__InvalidateDrawAndDescs+0x24e>
 800e83a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e83c:	b140      	cbz	r0, 800e850 <WM__InvalidateDrawAndDescs+0xd4>
 800e83e:	f8d8 3000 	ldr.w	r3, [r8]
 800e842:	455b      	cmp	r3, fp
 800e844:	d004      	beq.n	800e850 <WM__InvalidateDrawAndDescs+0xd4>
 800e846:	f004 fc7b 	bl	8013140 <GUI_MEMDEV_Delete>
 800e84a:	9b08      	ldr	r3, [sp, #32]
 800e84c:	2200      	movs	r2, #0
 800e84e:	625a      	str	r2, [r3, #36]	; 0x24
 800e850:	4658      	mov	r0, fp
 800e852:	f001 fc8f 	bl	8010174 <WM_GetFirstChild>
 800e856:	4682      	mov	sl, r0
 800e858:	2800      	cmp	r0, #0
 800e85a:	f000 80b6 	beq.w	800e9ca <WM__InvalidateDrawAndDescs+0x24e>
 800e85e:	4650      	mov	r0, sl
 800e860:	f7fa f80c 	bl	800887c <GUI_ALLOC_LockH>
 800e864:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e866:	9009      	str	r0, [sp, #36]	; 0x24
 800e868:	079d      	lsls	r5, r3, #30
 800e86a:	f140 80a2 	bpl.w	800e9b2 <WM__InvalidateDrawAndDescs+0x236>
 800e86e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e870:	b140      	cbz	r0, 800e884 <WM__InvalidateDrawAndDescs+0x108>
 800e872:	f8d8 3000 	ldr.w	r3, [r8]
 800e876:	4553      	cmp	r3, sl
 800e878:	d004      	beq.n	800e884 <WM__InvalidateDrawAndDescs+0x108>
 800e87a:	f004 fc61 	bl	8013140 <GUI_MEMDEV_Delete>
 800e87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e880:	2200      	movs	r2, #0
 800e882:	625a      	str	r2, [r3, #36]	; 0x24
 800e884:	4650      	mov	r0, sl
 800e886:	f001 fc75 	bl	8010174 <WM_GetFirstChild>
 800e88a:	9001      	str	r0, [sp, #4]
 800e88c:	2800      	cmp	r0, #0
 800e88e:	f000 8090 	beq.w	800e9b2 <WM__InvalidateDrawAndDescs+0x236>
 800e892:	9801      	ldr	r0, [sp, #4]
 800e894:	f7f9 fff2 	bl	800887c <GUI_ALLOC_LockH>
 800e898:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e89a:	900a      	str	r0, [sp, #40]	; 0x28
 800e89c:	079c      	lsls	r4, r3, #30
 800e89e:	d57d      	bpl.n	800e99c <WM__InvalidateDrawAndDescs+0x220>
 800e8a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e8a2:	b148      	cbz	r0, 800e8b8 <WM__InvalidateDrawAndDescs+0x13c>
 800e8a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a8:	9a01      	ldr	r2, [sp, #4]
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d004      	beq.n	800e8b8 <WM__InvalidateDrawAndDescs+0x13c>
 800e8ae:	f004 fc47 	bl	8013140 <GUI_MEMDEV_Delete>
 800e8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	625a      	str	r2, [r3, #36]	; 0x24
 800e8b8:	9801      	ldr	r0, [sp, #4]
 800e8ba:	f001 fc5b 	bl	8010174 <WM_GetFirstChild>
 800e8be:	4606      	mov	r6, r0
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d06b      	beq.n	800e99c <WM__InvalidateDrawAndDescs+0x220>
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f7f9 ffd9 	bl	800887c <GUI_ALLOC_LockH>
 800e8ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e8cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8ce:	0799      	lsls	r1, r3, #30
 800e8d0:	d55b      	bpl.n	800e98a <WM__InvalidateDrawAndDescs+0x20e>
 800e8d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e8d4:	b140      	cbz	r0, 800e8e8 <WM__InvalidateDrawAndDescs+0x16c>
 800e8d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e8da:	42b3      	cmp	r3, r6
 800e8dc:	d004      	beq.n	800e8e8 <WM__InvalidateDrawAndDescs+0x16c>
 800e8de:	f004 fc2f 	bl	8013140 <GUI_MEMDEV_Delete>
 800e8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	625a      	str	r2, [r3, #36]	; 0x24
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f001 fc43 	bl	8010174 <WM_GetFirstChild>
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d04a      	beq.n	800e98a <WM__InvalidateDrawAndDescs+0x20e>
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f7f9 ffc1 	bl	800887c <GUI_ALLOC_LockH>
 800e8fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e8fc:	900c      	str	r0, [sp, #48]	; 0x30
 800e8fe:	079a      	lsls	r2, r3, #30
 800e900:	d53a      	bpl.n	800e978 <WM__InvalidateDrawAndDescs+0x1fc>
 800e902:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e904:	b140      	cbz	r0, 800e918 <WM__InvalidateDrawAndDescs+0x19c>
 800e906:	f8d8 3000 	ldr.w	r3, [r8]
 800e90a:	42ab      	cmp	r3, r5
 800e90c:	d004      	beq.n	800e918 <WM__InvalidateDrawAndDescs+0x19c>
 800e90e:	f004 fc17 	bl	8013140 <GUI_MEMDEV_Delete>
 800e912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e914:	2200      	movs	r2, #0
 800e916:	625a      	str	r2, [r3, #36]	; 0x24
 800e918:	4628      	mov	r0, r5
 800e91a:	f001 fc2b 	bl	8010174 <WM_GetFirstChild>
 800e91e:	f04f 0900 	mov.w	r9, #0
 800e922:	4604      	mov	r4, r0
 800e924:	b340      	cbz	r0, 800e978 <WM__InvalidateDrawAndDescs+0x1fc>
 800e926:	4620      	mov	r0, r4
 800e928:	f7f9 ffa8 	bl	800887c <GUI_ALLOC_LockH>
 800e92c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e92e:	900d      	str	r0, [sp, #52]	; 0x34
 800e930:	079b      	lsls	r3, r3, #30
 800e932:	d518      	bpl.n	800e966 <WM__InvalidateDrawAndDescs+0x1ea>
 800e934:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e936:	b140      	cbz	r0, 800e94a <WM__InvalidateDrawAndDescs+0x1ce>
 800e938:	f8d8 3000 	ldr.w	r3, [r8]
 800e93c:	42a3      	cmp	r3, r4
 800e93e:	d004      	beq.n	800e94a <WM__InvalidateDrawAndDescs+0x1ce>
 800e940:	f004 fbfe 	bl	8013140 <GUI_MEMDEV_Delete>
 800e944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e946:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 800e94a:	4620      	mov	r0, r4
 800e94c:	f001 fc12 	bl	8010174 <WM_GetFirstChild>
 800e950:	4607      	mov	r7, r0
 800e952:	b140      	cbz	r0, 800e966 <WM__InvalidateDrawAndDescs+0x1ea>
 800e954:	4638      	mov	r0, r7
 800e956:	f7ff ff11 	bl	800e77c <WM__InvalidateDrawAndDescs>
 800e95a:	4638      	mov	r0, r7
 800e95c:	f7f9 ff84 	bl	8008868 <GUI_ALLOC_h2p>
 800e960:	6a07      	ldr	r7, [r0, #32]
 800e962:	2f00      	cmp	r7, #0
 800e964:	d1f6      	bne.n	800e954 <WM__InvalidateDrawAndDescs+0x1d8>
 800e966:	a80d      	add	r0, sp, #52	; 0x34
 800e968:	f7f9 ff9a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e96c:	4620      	mov	r0, r4
 800e96e:	f7f9 ff7b 	bl	8008868 <GUI_ALLOC_h2p>
 800e972:	6a04      	ldr	r4, [r0, #32]
 800e974:	2c00      	cmp	r4, #0
 800e976:	d1d6      	bne.n	800e926 <WM__InvalidateDrawAndDescs+0x1aa>
 800e978:	a80c      	add	r0, sp, #48	; 0x30
 800e97a:	f7f9 ff91 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e97e:	4628      	mov	r0, r5
 800e980:	f7f9 ff72 	bl	8008868 <GUI_ALLOC_h2p>
 800e984:	6a05      	ldr	r5, [r0, #32]
 800e986:	2d00      	cmp	r5, #0
 800e988:	d1b4      	bne.n	800e8f4 <WM__InvalidateDrawAndDescs+0x178>
 800e98a:	a80b      	add	r0, sp, #44	; 0x2c
 800e98c:	f7f9 ff88 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e990:	4630      	mov	r0, r6
 800e992:	f7f9 ff69 	bl	8008868 <GUI_ALLOC_h2p>
 800e996:	6a06      	ldr	r6, [r0, #32]
 800e998:	2e00      	cmp	r6, #0
 800e99a:	d193      	bne.n	800e8c4 <WM__InvalidateDrawAndDescs+0x148>
 800e99c:	a80a      	add	r0, sp, #40	; 0x28
 800e99e:	f7f9 ff7f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e9a2:	9801      	ldr	r0, [sp, #4]
 800e9a4:	f7f9 ff60 	bl	8008868 <GUI_ALLOC_h2p>
 800e9a8:	6a03      	ldr	r3, [r0, #32]
 800e9aa:	9301      	str	r3, [sp, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f47f af70 	bne.w	800e892 <WM__InvalidateDrawAndDescs+0x116>
 800e9b2:	a809      	add	r0, sp, #36	; 0x24
 800e9b4:	f7f9 ff74 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e9b8:	4650      	mov	r0, sl
 800e9ba:	f7f9 ff55 	bl	8008868 <GUI_ALLOC_h2p>
 800e9be:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800e9c2:	f1ba 0f00 	cmp.w	sl, #0
 800e9c6:	f47f af4a 	bne.w	800e85e <WM__InvalidateDrawAndDescs+0xe2>
 800e9ca:	a808      	add	r0, sp, #32
 800e9cc:	f7f9 ff68 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e9d0:	4658      	mov	r0, fp
 800e9d2:	f7f9 ff49 	bl	8008868 <GUI_ALLOC_h2p>
 800e9d6:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800e9da:	f1bb 0f00 	cmp.w	fp, #0
 800e9de:	f47f af24 	bne.w	800e82a <WM__InvalidateDrawAndDescs+0xae>
 800e9e2:	a807      	add	r0, sp, #28
 800e9e4:	f7f9 ff5c 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e9e8:	9802      	ldr	r0, [sp, #8]
 800e9ea:	f7f9 ff3d 	bl	8008868 <GUI_ALLOC_h2p>
 800e9ee:	6a03      	ldr	r3, [r0, #32]
 800e9f0:	9302      	str	r3, [sp, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f47f aefe 	bne.w	800e7f4 <WM__InvalidateDrawAndDescs+0x78>
 800e9f8:	a806      	add	r0, sp, #24
 800e9fa:	f7f9 ff51 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800e9fe:	9803      	ldr	r0, [sp, #12]
 800ea00:	f7f9 ff32 	bl	8008868 <GUI_ALLOC_h2p>
 800ea04:	6a03      	ldr	r3, [r0, #32]
 800ea06:	9303      	str	r3, [sp, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f47f aed8 	bne.w	800e7be <WM__InvalidateDrawAndDescs+0x42>
 800ea0e:	a805      	add	r0, sp, #20
 800ea10:	f7f9 ff46 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ea14:	b00f      	add	sp, #60	; 0x3c
 800ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20035828 	.word	0x20035828

0800ea20 <WM_InvalidateWindowAndDescsEx>:
 800ea20:	b900      	cbnz	r0, 800ea24 <WM_InvalidateWindowAndDescsEx+0x4>
 800ea22:	4770      	bx	lr
 800ea24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea28:	b0a1      	sub	sp, #132	; 0x84
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	9201      	str	r2, [sp, #4]
 800ea2e:	460d      	mov	r5, r1
 800ea30:	f7f9 ff24 	bl	800887c <GUI_ALLOC_LockH>
 800ea34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ea36:	9005      	str	r0, [sp, #20]
 800ea38:	079a      	lsls	r2, r3, #30
 800ea3a:	f140 8156 	bpl.w	800ecea <WM_InvalidateWindowAndDescsEx+0x2ca>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4629      	mov	r1, r5
 800ea42:	a80e      	add	r0, sp, #56	; 0x38
 800ea44:	f7fb fb7a 	bl	800a13c <GUI__IntersectRects>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	f000 814e 	beq.w	800ecea <WM_InvalidateWindowAndDescsEx+0x2ca>
 800ea4e:	a805      	add	r0, sp, #20
 800ea50:	f7f9 ff26 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ea54:	4620      	mov	r0, r4
 800ea56:	9a01      	ldr	r2, [sp, #4]
 800ea58:	a90e      	add	r1, sp, #56	; 0x38
 800ea5a:	f7ff fcff 	bl	800e45c <_Invalidate1Abs>
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f001 fb88 	bl	8010174 <WM_GetFirstChild>
 800ea64:	4604      	mov	r4, r0
 800ea66:	2800      	cmp	r0, #0
 800ea68:	f000 8142 	beq.w	800ecf0 <WM_InvalidateWindowAndDescsEx+0x2d0>
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f7f9 ff05 	bl	800887c <GUI_ALLOC_LockH>
 800ea72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ea74:	9006      	str	r0, [sp, #24]
 800ea76:	079b      	lsls	r3, r3, #30
 800ea78:	f140 813d 	bpl.w	800ecf6 <WM_InvalidateWindowAndDescsEx+0x2d6>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	a90e      	add	r1, sp, #56	; 0x38
 800ea80:	a810      	add	r0, sp, #64	; 0x40
 800ea82:	f7fb fb5b 	bl	800a13c <GUI__IntersectRects>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f000 8135 	beq.w	800ecf6 <WM_InvalidateWindowAndDescsEx+0x2d6>
 800ea8c:	a806      	add	r0, sp, #24
 800ea8e:	f7f9 ff07 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ea92:	9a01      	ldr	r2, [sp, #4]
 800ea94:	a910      	add	r1, sp, #64	; 0x40
 800ea96:	4620      	mov	r0, r4
 800ea98:	f7ff fce0 	bl	800e45c <_Invalidate1Abs>
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f001 fb69 	bl	8010174 <WM_GetFirstChild>
 800eaa2:	4605      	mov	r5, r0
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f000 8118 	beq.w	800ecda <WM_InvalidateWindowAndDescsEx+0x2ba>
 800eaaa:	9402      	str	r4, [sp, #8]
 800eaac:	4628      	mov	r0, r5
 800eaae:	f7f9 fee5 	bl	800887c <GUI_ALLOC_LockH>
 800eab2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eab4:	9007      	str	r0, [sp, #28]
 800eab6:	079f      	lsls	r7, r3, #30
 800eab8:	f140 8121 	bpl.w	800ecfe <WM_InvalidateWindowAndDescsEx+0x2de>
 800eabc:	4602      	mov	r2, r0
 800eabe:	a910      	add	r1, sp, #64	; 0x40
 800eac0:	a812      	add	r0, sp, #72	; 0x48
 800eac2:	f7fb fb3b 	bl	800a13c <GUI__IntersectRects>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f000 8119 	beq.w	800ecfe <WM_InvalidateWindowAndDescsEx+0x2de>
 800eacc:	a807      	add	r0, sp, #28
 800eace:	f7f9 fee7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ead2:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ead6:	4628      	mov	r0, r5
 800ead8:	4652      	mov	r2, sl
 800eada:	a912      	add	r1, sp, #72	; 0x48
 800eadc:	f7ff fcbe 	bl	800e45c <_Invalidate1Abs>
 800eae0:	4628      	mov	r0, r5
 800eae2:	f001 fb47 	bl	8010174 <WM_GetFirstChild>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	f000 80ef 	beq.w	800ecca <WM_InvalidateWindowAndDescsEx+0x2aa>
 800eaec:	9503      	str	r5, [sp, #12]
 800eaee:	4605      	mov	r5, r0
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	f7f9 fec3 	bl	800887c <GUI_ALLOC_LockH>
 800eaf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eaf8:	9008      	str	r0, [sp, #32]
 800eafa:	079e      	lsls	r6, r3, #30
 800eafc:	f140 8103 	bpl.w	800ed06 <WM_InvalidateWindowAndDescsEx+0x2e6>
 800eb00:	4602      	mov	r2, r0
 800eb02:	a912      	add	r1, sp, #72	; 0x48
 800eb04:	a814      	add	r0, sp, #80	; 0x50
 800eb06:	f7fb fb19 	bl	800a13c <GUI__IntersectRects>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	f000 80fb 	beq.w	800ed06 <WM_InvalidateWindowAndDescsEx+0x2e6>
 800eb10:	a808      	add	r0, sp, #32
 800eb12:	f7f9 fec5 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eb16:	4628      	mov	r0, r5
 800eb18:	4652      	mov	r2, sl
 800eb1a:	a914      	add	r1, sp, #80	; 0x50
 800eb1c:	f7ff fc9e 	bl	800e45c <_Invalidate1Abs>
 800eb20:	4628      	mov	r0, r5
 800eb22:	f001 fb27 	bl	8010174 <WM_GetFirstChild>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	f000 80c7 	beq.w	800ecba <WM_InvalidateWindowAndDescsEx+0x29a>
 800eb2c:	46ab      	mov	fp, r5
 800eb2e:	4680      	mov	r8, r0
 800eb30:	4640      	mov	r0, r8
 800eb32:	f7f9 fea3 	bl	800887c <GUI_ALLOC_LockH>
 800eb36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eb38:	9009      	str	r0, [sp, #36]	; 0x24
 800eb3a:	079d      	lsls	r5, r3, #30
 800eb3c:	f140 80e7 	bpl.w	800ed0e <WM_InvalidateWindowAndDescsEx+0x2ee>
 800eb40:	4602      	mov	r2, r0
 800eb42:	a914      	add	r1, sp, #80	; 0x50
 800eb44:	a816      	add	r0, sp, #88	; 0x58
 800eb46:	f7fb faf9 	bl	800a13c <GUI__IntersectRects>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	f000 80df 	beq.w	800ed0e <WM_InvalidateWindowAndDescsEx+0x2ee>
 800eb50:	a809      	add	r0, sp, #36	; 0x24
 800eb52:	f7f9 fea5 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eb56:	4640      	mov	r0, r8
 800eb58:	4652      	mov	r2, sl
 800eb5a:	a916      	add	r1, sp, #88	; 0x58
 800eb5c:	f7ff fc7e 	bl	800e45c <_Invalidate1Abs>
 800eb60:	4640      	mov	r0, r8
 800eb62:	f001 fb07 	bl	8010174 <WM_GetFirstChild>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	f000 809d 	beq.w	800eca6 <WM_InvalidateWindowAndDescsEx+0x286>
 800eb6c:	4681      	mov	r9, r0
 800eb6e:	4648      	mov	r0, r9
 800eb70:	f7f9 fe84 	bl	800887c <GUI_ALLOC_LockH>
 800eb74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eb76:	900a      	str	r0, [sp, #40]	; 0x28
 800eb78:	079c      	lsls	r4, r3, #30
 800eb7a:	f140 80d5 	bpl.w	800ed28 <WM_InvalidateWindowAndDescsEx+0x308>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	a916      	add	r1, sp, #88	; 0x58
 800eb82:	a818      	add	r0, sp, #96	; 0x60
 800eb84:	f7fb fada 	bl	800a13c <GUI__IntersectRects>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f000 80cd 	beq.w	800ed28 <WM_InvalidateWindowAndDescsEx+0x308>
 800eb8e:	a80a      	add	r0, sp, #40	; 0x28
 800eb90:	f7f9 fe86 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eb94:	4652      	mov	r2, sl
 800eb96:	a918      	add	r1, sp, #96	; 0x60
 800eb98:	4648      	mov	r0, r9
 800eb9a:	f7ff fc5f 	bl	800e45c <_Invalidate1Abs>
 800eb9e:	4648      	mov	r0, r9
 800eba0:	f001 fae8 	bl	8010174 <WM_GetFirstChild>
 800eba4:	4605      	mov	r5, r0
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d074      	beq.n	800ec94 <WM_InvalidateWindowAndDescsEx+0x274>
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7f9 fe66 	bl	800887c <GUI_ALLOC_LockH>
 800ebb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ebb2:	900b      	str	r0, [sp, #44]	; 0x2c
 800ebb4:	0799      	lsls	r1, r3, #30
 800ebb6:	f140 80c4 	bpl.w	800ed42 <WM_InvalidateWindowAndDescsEx+0x322>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	a918      	add	r1, sp, #96	; 0x60
 800ebbe:	a81a      	add	r0, sp, #104	; 0x68
 800ebc0:	f7fb fabc 	bl	800a13c <GUI__IntersectRects>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	f000 80bc 	beq.w	800ed42 <WM_InvalidateWindowAndDescsEx+0x322>
 800ebca:	a80b      	add	r0, sp, #44	; 0x2c
 800ebcc:	f7f9 fe68 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ebd0:	4652      	mov	r2, sl
 800ebd2:	a91a      	add	r1, sp, #104	; 0x68
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	f7ff fc41 	bl	800e45c <_Invalidate1Abs>
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f001 faca 	bl	8010174 <WM_GetFirstChild>
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d050      	beq.n	800ec88 <WM_InvalidateWindowAndDescsEx+0x268>
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7f9 fe48 	bl	800887c <GUI_ALLOC_LockH>
 800ebec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ebee:	900c      	str	r0, [sp, #48]	; 0x30
 800ebf0:	079a      	lsls	r2, r3, #30
 800ebf2:	f140 80b1 	bpl.w	800ed58 <WM_InvalidateWindowAndDescsEx+0x338>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	a91a      	add	r1, sp, #104	; 0x68
 800ebfa:	a81c      	add	r0, sp, #112	; 0x70
 800ebfc:	f7fb fa9e 	bl	800a13c <GUI__IntersectRects>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	f000 80a9 	beq.w	800ed58 <WM_InvalidateWindowAndDescsEx+0x338>
 800ec06:	a80c      	add	r0, sp, #48	; 0x30
 800ec08:	f7f9 fe4a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ec0c:	4652      	mov	r2, sl
 800ec0e:	a91c      	add	r1, sp, #112	; 0x70
 800ec10:	4630      	mov	r0, r6
 800ec12:	f7ff fc23 	bl	800e45c <_Invalidate1Abs>
 800ec16:	4630      	mov	r0, r6
 800ec18:	f001 faac 	bl	8010174 <WM_GetFirstChild>
 800ec1c:	4607      	mov	r7, r0
 800ec1e:	b368      	cbz	r0, 800ec7c <WM_InvalidateWindowAndDescsEx+0x25c>
 800ec20:	4638      	mov	r0, r7
 800ec22:	f7f9 fe2b 	bl	800887c <GUI_ALLOC_LockH>
 800ec26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ec28:	900d      	str	r0, [sp, #52]	; 0x34
 800ec2a:	079b      	lsls	r3, r3, #30
 800ec2c:	f140 809f 	bpl.w	800ed6e <WM_InvalidateWindowAndDescsEx+0x34e>
 800ec30:	4602      	mov	r2, r0
 800ec32:	a91c      	add	r1, sp, #112	; 0x70
 800ec34:	a81e      	add	r0, sp, #120	; 0x78
 800ec36:	f7fb fa81 	bl	800a13c <GUI__IntersectRects>
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	f000 8097 	beq.w	800ed6e <WM_InvalidateWindowAndDescsEx+0x34e>
 800ec40:	a80d      	add	r0, sp, #52	; 0x34
 800ec42:	f7f9 fe2d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ec46:	4652      	mov	r2, sl
 800ec48:	a91e      	add	r1, sp, #120	; 0x78
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	f7ff fc06 	bl	800e45c <_Invalidate1Abs>
 800ec50:	4638      	mov	r0, r7
 800ec52:	f001 fa8f 	bl	8010174 <WM_GetFirstChild>
 800ec56:	4604      	mov	r4, r0
 800ec58:	b150      	cbz	r0, 800ec70 <WM_InvalidateWindowAndDescsEx+0x250>
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	4652      	mov	r2, sl
 800ec5e:	a91e      	add	r1, sp, #120	; 0x78
 800ec60:	f7ff fede 	bl	800ea20 <WM_InvalidateWindowAndDescsEx>
 800ec64:	4620      	mov	r0, r4
 800ec66:	f7f9 fdff 	bl	8008868 <GUI_ALLOC_h2p>
 800ec6a:	6a04      	ldr	r4, [r0, #32]
 800ec6c:	2c00      	cmp	r4, #0
 800ec6e:	d1f4      	bne.n	800ec5a <WM_InvalidateWindowAndDescsEx+0x23a>
 800ec70:	4638      	mov	r0, r7
 800ec72:	f7f9 fdf9 	bl	8008868 <GUI_ALLOC_h2p>
 800ec76:	6a07      	ldr	r7, [r0, #32]
 800ec78:	2f00      	cmp	r7, #0
 800ec7a:	d1d1      	bne.n	800ec20 <WM_InvalidateWindowAndDescsEx+0x200>
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f7f9 fdf3 	bl	8008868 <GUI_ALLOC_h2p>
 800ec82:	6a06      	ldr	r6, [r0, #32]
 800ec84:	2e00      	cmp	r6, #0
 800ec86:	d1ae      	bne.n	800ebe6 <WM_InvalidateWindowAndDescsEx+0x1c6>
 800ec88:	4628      	mov	r0, r5
 800ec8a:	f7f9 fded 	bl	8008868 <GUI_ALLOC_h2p>
 800ec8e:	6a05      	ldr	r5, [r0, #32]
 800ec90:	2d00      	cmp	r5, #0
 800ec92:	d18a      	bne.n	800ebaa <WM_InvalidateWindowAndDescsEx+0x18a>
 800ec94:	4648      	mov	r0, r9
 800ec96:	f7f9 fde7 	bl	8008868 <GUI_ALLOC_h2p>
 800ec9a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 800ec9e:	f1b9 0f00 	cmp.w	r9, #0
 800eca2:	f47f af64 	bne.w	800eb6e <WM_InvalidateWindowAndDescsEx+0x14e>
 800eca6:	4640      	mov	r0, r8
 800eca8:	f7f9 fdde 	bl	8008868 <GUI_ALLOC_h2p>
 800ecac:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800ecb0:	f1b8 0f00 	cmp.w	r8, #0
 800ecb4:	f47f af3c 	bne.w	800eb30 <WM_InvalidateWindowAndDescsEx+0x110>
 800ecb8:	465d      	mov	r5, fp
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f7f9 fdd4 	bl	8008868 <GUI_ALLOC_h2p>
 800ecc0:	6a05      	ldr	r5, [r0, #32]
 800ecc2:	2d00      	cmp	r5, #0
 800ecc4:	f47f af14 	bne.w	800eaf0 <WM_InvalidateWindowAndDescsEx+0xd0>
 800ecc8:	9d03      	ldr	r5, [sp, #12]
 800ecca:	4628      	mov	r0, r5
 800eccc:	f7f9 fdcc 	bl	8008868 <GUI_ALLOC_h2p>
 800ecd0:	6a05      	ldr	r5, [r0, #32]
 800ecd2:	2d00      	cmp	r5, #0
 800ecd4:	f47f aeea 	bne.w	800eaac <WM_InvalidateWindowAndDescsEx+0x8c>
 800ecd8:	9c02      	ldr	r4, [sp, #8]
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f7f9 fdc4 	bl	8008868 <GUI_ALLOC_h2p>
 800ece0:	6a04      	ldr	r4, [r0, #32]
 800ece2:	2c00      	cmp	r4, #0
 800ece4:	f47f aec2 	bne.w	800ea6c <WM_InvalidateWindowAndDescsEx+0x4c>
 800ece8:	e002      	b.n	800ecf0 <WM_InvalidateWindowAndDescsEx+0x2d0>
 800ecea:	a805      	add	r0, sp, #20
 800ecec:	f7f9 fdd8 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ecf0:	b021      	add	sp, #132	; 0x84
 800ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf6:	a806      	add	r0, sp, #24
 800ecf8:	f7f9 fdd2 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ecfc:	e7ed      	b.n	800ecda <WM_InvalidateWindowAndDescsEx+0x2ba>
 800ecfe:	a807      	add	r0, sp, #28
 800ed00:	f7f9 fdce 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed04:	e7e1      	b.n	800ecca <WM_InvalidateWindowAndDescsEx+0x2aa>
 800ed06:	a808      	add	r0, sp, #32
 800ed08:	f7f9 fdca 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed0c:	e7d5      	b.n	800ecba <WM_InvalidateWindowAndDescsEx+0x29a>
 800ed0e:	a809      	add	r0, sp, #36	; 0x24
 800ed10:	f7f9 fdc6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed14:	4640      	mov	r0, r8
 800ed16:	f7f9 fda7 	bl	8008868 <GUI_ALLOC_h2p>
 800ed1a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800ed1e:	f1b8 0f00 	cmp.w	r8, #0
 800ed22:	f47f af05 	bne.w	800eb30 <WM_InvalidateWindowAndDescsEx+0x110>
 800ed26:	e7c7      	b.n	800ecb8 <WM_InvalidateWindowAndDescsEx+0x298>
 800ed28:	a80a      	add	r0, sp, #40	; 0x28
 800ed2a:	f7f9 fdb9 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed2e:	4648      	mov	r0, r9
 800ed30:	f7f9 fd9a 	bl	8008868 <GUI_ALLOC_h2p>
 800ed34:	f8d0 9020 	ldr.w	r9, [r0, #32]
 800ed38:	f1b9 0f00 	cmp.w	r9, #0
 800ed3c:	f47f af17 	bne.w	800eb6e <WM_InvalidateWindowAndDescsEx+0x14e>
 800ed40:	e7b1      	b.n	800eca6 <WM_InvalidateWindowAndDescsEx+0x286>
 800ed42:	a80b      	add	r0, sp, #44	; 0x2c
 800ed44:	f7f9 fdac 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed48:	4628      	mov	r0, r5
 800ed4a:	f7f9 fd8d 	bl	8008868 <GUI_ALLOC_h2p>
 800ed4e:	6a05      	ldr	r5, [r0, #32]
 800ed50:	2d00      	cmp	r5, #0
 800ed52:	f47f af2a 	bne.w	800ebaa <WM_InvalidateWindowAndDescsEx+0x18a>
 800ed56:	e79d      	b.n	800ec94 <WM_InvalidateWindowAndDescsEx+0x274>
 800ed58:	a80c      	add	r0, sp, #48	; 0x30
 800ed5a:	f7f9 fda1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f7f9 fd82 	bl	8008868 <GUI_ALLOC_h2p>
 800ed64:	6a06      	ldr	r6, [r0, #32]
 800ed66:	2e00      	cmp	r6, #0
 800ed68:	f47f af3d 	bne.w	800ebe6 <WM_InvalidateWindowAndDescsEx+0x1c6>
 800ed6c:	e78c      	b.n	800ec88 <WM_InvalidateWindowAndDescsEx+0x268>
 800ed6e:	a80d      	add	r0, sp, #52	; 0x34
 800ed70:	f7f9 fd96 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ed74:	4638      	mov	r0, r7
 800ed76:	f7f9 fd77 	bl	8008868 <GUI_ALLOC_h2p>
 800ed7a:	6a07      	ldr	r7, [r0, #32]
 800ed7c:	2f00      	cmp	r7, #0
 800ed7e:	f47f af4f 	bne.w	800ec20 <WM_InvalidateWindowAndDescsEx+0x200>
 800ed82:	e77b      	b.n	800ec7c <WM_InvalidateWindowAndDescsEx+0x25c>

0800ed84 <WM__InvalidateRect>:
 800ed84:	b901      	cbnz	r1, 800ed88 <WM__InvalidateRect+0x4>
 800ed86:	4770      	bx	lr
 800ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8c:	4605      	mov	r5, r0
 800ed8e:	b086      	sub	sp, #24
 800ed90:	4608      	mov	r0, r1
 800ed92:	460c      	mov	r4, r1
 800ed94:	461e      	mov	r6, r3
 800ed96:	4617      	mov	r7, r2
 800ed98:	f7f9 fd70 	bl	800887c <GUI_ALLOC_LockH>
 800ed9c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800eda0:	9000      	str	r0, [sp, #0]
 800eda2:	f018 0f02 	tst.w	r8, #2
 800eda6:	d042      	beq.n	800ee2e <WM__InvalidateRect+0xaa>
 800eda8:	4602      	mov	r2, r0
 800edaa:	4629      	mov	r1, r5
 800edac:	a802      	add	r0, sp, #8
 800edae:	f7fb f9c5 	bl	800a13c <GUI__IntersectRects>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d03b      	beq.n	800ee2e <WM__InvalidateRect+0xaa>
 800edb6:	f640 0301 	movw	r3, #2049	; 0x801
 800edba:	ea08 0303 	and.w	r3, r8, r3
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d03f      	beq.n	800ee42 <WM__InvalidateRect+0xbe>
 800edc2:	4620      	mov	r0, r4
 800edc4:	4632      	mov	r2, r6
 800edc6:	a902      	add	r1, sp, #8
 800edc8:	f7ff fb48 	bl	800e45c <_Invalidate1Abs>
 800edcc:	9b00      	ldr	r3, [sp, #0]
 800edce:	69dc      	ldr	r4, [r3, #28]
 800edd0:	b36c      	cbz	r4, 800ee2e <WM__InvalidateRect+0xaa>
 800edd2:	42bc      	cmp	r4, r7
 800edd4:	d02b      	beq.n	800ee2e <WM__InvalidateRect+0xaa>
 800edd6:	4620      	mov	r0, r4
 800edd8:	f7f9 fd50 	bl	800887c <GUI_ALLOC_LockH>
 800eddc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800edde:	9001      	str	r0, [sp, #4]
 800ede0:	079b      	lsls	r3, r3, #30
 800ede2:	d52a      	bpl.n	800ee3a <WM__InvalidateRect+0xb6>
 800ede4:	4602      	mov	r2, r0
 800ede6:	a902      	add	r1, sp, #8
 800ede8:	a804      	add	r0, sp, #16
 800edea:	f7fb f9a7 	bl	800a13c <GUI__IntersectRects>
 800edee:	b320      	cbz	r0, 800ee3a <WM__InvalidateRect+0xb6>
 800edf0:	a801      	add	r0, sp, #4
 800edf2:	f7f9 fd55 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800edf6:	4632      	mov	r2, r6
 800edf8:	a904      	add	r1, sp, #16
 800edfa:	4620      	mov	r0, r4
 800edfc:	f7ff fb2e 	bl	800e45c <_Invalidate1Abs>
 800ee00:	4620      	mov	r0, r4
 800ee02:	f001 f9b7 	bl	8010174 <WM_GetFirstChild>
 800ee06:	4605      	mov	r5, r0
 800ee08:	b150      	cbz	r0, 800ee20 <WM__InvalidateRect+0x9c>
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	a904      	add	r1, sp, #16
 800ee10:	f7ff fe06 	bl	800ea20 <WM_InvalidateWindowAndDescsEx>
 800ee14:	4628      	mov	r0, r5
 800ee16:	f7f9 fd27 	bl	8008868 <GUI_ALLOC_h2p>
 800ee1a:	6a05      	ldr	r5, [r0, #32]
 800ee1c:	2d00      	cmp	r5, #0
 800ee1e:	d1f4      	bne.n	800ee0a <WM__InvalidateRect+0x86>
 800ee20:	4620      	mov	r0, r4
 800ee22:	f7f9 fd21 	bl	8008868 <GUI_ALLOC_h2p>
 800ee26:	6a04      	ldr	r4, [r0, #32]
 800ee28:	b10c      	cbz	r4, 800ee2e <WM__InvalidateRect+0xaa>
 800ee2a:	42a7      	cmp	r7, r4
 800ee2c:	d1d3      	bne.n	800edd6 <WM__InvalidateRect+0x52>
 800ee2e:	4668      	mov	r0, sp
 800ee30:	f7f9 fd36 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ee34:	b006      	add	sp, #24
 800ee36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3a:	a801      	add	r0, sp, #4
 800ee3c:	f7f9 fd30 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800ee40:	e7ee      	b.n	800ee20 <WM__InvalidateRect+0x9c>
 800ee42:	9900      	ldr	r1, [sp, #0]
 800ee44:	4633      	mov	r3, r6
 800ee46:	6a0a      	ldr	r2, [r1, #32]
 800ee48:	6989      	ldr	r1, [r1, #24]
 800ee4a:	a802      	add	r0, sp, #8
 800ee4c:	f7ff ff9a 	bl	800ed84 <WM__InvalidateRect>
 800ee50:	e7bc      	b.n	800edcc <WM__InvalidateRect+0x48>
 800ee52:	bf00      	nop

0800ee54 <WM_InvalidateRect.part.2>:
 800ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	4607      	mov	r7, r0
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	460c      	mov	r4, r1
 800ee5e:	f7fb f839 	bl	8009ed4 <GUI_Lock>
 800ee62:	4638      	mov	r0, r7
 800ee64:	f7f9 fd0a 	bl	800887c <GUI_ALLOC_LockH>
 800ee68:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800ee6c:	9000      	str	r0, [sp, #0]
 800ee6e:	f018 0f02 	tst.w	r8, #2
 800ee72:	d02f      	beq.n	800eed4 <WM_InvalidateRect.part.2+0x80>
 800ee74:	c803      	ldmia	r0, {r0, r1}
 800ee76:	ae04      	add	r6, sp, #16
 800ee78:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 800ee7c:	e886 0003 	stmia.w	r6, {r0, r1}
 800ee80:	d145      	bne.n	800ef0e <WM_InvalidateRect.part.2+0xba>
 800ee82:	b17c      	cbz	r4, 800eea4 <WM_InvalidateRect.part.2+0x50>
 800ee84:	6820      	ldr	r0, [r4, #0]
 800ee86:	6861      	ldr	r1, [r4, #4]
 800ee88:	9c00      	ldr	r4, [sp, #0]
 800ee8a:	ab02      	add	r3, sp, #8
 800ee8c:	c303      	stmia	r3!, {r0, r1}
 800ee8e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ee92:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ee96:	a802      	add	r0, sp, #8
 800ee98:	f7fa f80c 	bl	8008eb4 <GUI_MoveRect>
 800ee9c:	a902      	add	r1, sp, #8
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f7fb f92e 	bl	800a100 <GUI__IntersectRect>
 800eea4:	463d      	mov	r5, r7
 800eea6:	e008      	b.n	800eeba <WM_InvalidateRect.part.2+0x66>
 800eea8:	f7fb f92a 	bl	800a100 <GUI__IntersectRect>
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	699c      	ldr	r4, [r3, #24]
 800eeb0:	a801      	add	r0, sp, #4
 800eeb2:	b1bc      	cbz	r4, 800eee4 <WM_InvalidateRect.part.2+0x90>
 800eeb4:	f7f9 fcf4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eeb8:	4625      	mov	r5, r4
 800eeba:	4628      	mov	r0, r5
 800eebc:	f7f9 fcde 	bl	800887c <GUI_ALLOC_LockH>
 800eec0:	4603      	mov	r3, r0
 800eec2:	9301      	str	r3, [sp, #4]
 800eec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eec6:	0793      	lsls	r3, r2, #30
 800eec8:	4601      	mov	r1, r0
 800eeca:	4630      	mov	r0, r6
 800eecc:	d4ec      	bmi.n	800eea8 <WM_InvalidateRect.part.2+0x54>
 800eece:	a801      	add	r0, sp, #4
 800eed0:	f7f9 fce6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eed4:	4668      	mov	r0, sp
 800eed6:	f7f9 fce3 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eeda:	f7fa fff1 	bl	8009ec0 <GUI_Unlock>
 800eede:	b006      	add	sp, #24
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	f7f9 fcdc 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800eee8:	4b10      	ldr	r3, [pc, #64]	; (800ef2c <WM_InvalidateRect.part.2+0xd8>)
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	42aa      	cmp	r2, r5
 800eeee:	d002      	beq.n	800eef6 <WM_InvalidateRect.part.2+0xa2>
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	429d      	cmp	r5, r3
 800eef4:	d1ee      	bne.n	800eed4 <WM_InvalidateRect.part.2+0x80>
 800eef6:	f640 0301 	movw	r3, #2049	; 0x801
 800eefa:	ea08 0303 	and.w	r3, r8, r3
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d00b      	beq.n	800ef1a <WM_InvalidateRect.part.2+0xc6>
 800ef02:	4631      	mov	r1, r6
 800ef04:	4638      	mov	r0, r7
 800ef06:	2220      	movs	r2, #32
 800ef08:	f7ff faa8 	bl	800e45c <_Invalidate1Abs>
 800ef0c:	e7e2      	b.n	800eed4 <WM_InvalidateRect.part.2+0x80>
 800ef0e:	4638      	mov	r0, r7
 800ef10:	f7ff fc34 	bl	800e77c <WM__InvalidateDrawAndDescs>
 800ef14:	2c00      	cmp	r4, #0
 800ef16:	d1b5      	bne.n	800ee84 <WM_InvalidateRect.part.2+0x30>
 800ef18:	e7c4      	b.n	800eea4 <WM_InvalidateRect.part.2+0x50>
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	6a1a      	ldr	r2, [r3, #32]
 800ef20:	6999      	ldr	r1, [r3, #24]
 800ef22:	2320      	movs	r3, #32
 800ef24:	f7ff ff2e 	bl	800ed84 <WM__InvalidateRect>
 800ef28:	e7d4      	b.n	800eed4 <WM_InvalidateRect.part.2+0x80>
 800ef2a:	bf00      	nop
 800ef2c:	2003587c 	.word	0x2003587c

0800ef30 <_cbBackWin>:
 800ef30:	6803      	ldr	r3, [r0, #0]
 800ef32:	2b0e      	cmp	r3, #14
 800ef34:	d034      	beq.n	800efa0 <_cbBackWin+0x70>
 800ef36:	2b0f      	cmp	r3, #15
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	d116      	bne.n	800ef6c <_cbBackWin+0x3c>
 800ef3e:	4a26      	ldr	r2, [pc, #152]	; (800efd8 <_cbBackWin+0xa8>)
 800ef40:	6843      	ldr	r3, [r0, #4]
 800ef42:	6811      	ldr	r1, [r2, #0]
 800ef44:	428b      	cmp	r3, r1
 800ef46:	d045      	beq.n	800efd4 <_cbBackWin+0xa4>
 800ef48:	6852      	ldr	r2, [r2, #4]
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	bf14      	ite	ne
 800ef4e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800ef52:	2301      	moveq	r3, #1
 800ef54:	4a21      	ldr	r2, [pc, #132]	; (800efdc <_cbBackWin+0xac>)
 800ef56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ef5a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ef5e:	4298      	cmp	r0, r3
 800ef60:	d01b      	beq.n	800ef9a <_cbBackWin+0x6a>
 800ef62:	f7fa f899 	bl	8009098 <GUI_SetBkColor>
 800ef66:	f7fa f99b 	bl	80092a0 <GUI_Clear>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	6860      	ldr	r0, [r4, #4]
 800ef6e:	3b0e      	subs	r3, #14
 800ef70:	2b1a      	cmp	r3, #26
 800ef72:	d812      	bhi.n	800ef9a <_cbBackWin+0x6a>
 800ef74:	e8df f003 	tbb	[pc, r3]
 800ef78:	11111119 	.word	0x11111119
 800ef7c:	110e1111 	.word	0x110e1111
 800ef80:	11111e11 	.word	0x11111e11
 800ef84:	11111111 	.word	0x11111111
 800ef88:	11111111 	.word	0x11111111
 800ef8c:	11111120 	.word	0x11111120
 800ef90:	1111      	.short	0x1111
 800ef92:	24          	.byte	0x24
 800ef93:	00          	.byte	0x00
 800ef94:	68e1      	ldr	r1, [r4, #12]
 800ef96:	f001 ffe5 	bl	8010f64 <WM__GetClientRectEx>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	60e3      	str	r3, [r4, #12]
 800ef9e:	bd10      	pop	{r4, pc}
 800efa0:	68c3      	ldr	r3, [r0, #12]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	2a01      	cmp	r2, #1
 800efa6:	d012      	beq.n	800efce <_cbBackWin+0x9e>
 800efa8:	4770      	bx	lr
 800efaa:	4621      	mov	r1, r4
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb0:	f001 b976 	b.w	80102a0 <WM_SendToParent>
 800efb4:	60e0      	str	r0, [r4, #12]
 800efb6:	bd10      	pop	{r4, pc}
 800efb8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800efbc:	60e3      	str	r3, [r4, #12]
 800efbe:	bd10      	pop	{r4, pc}
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d0ec      	beq.n	800ef9e <_cbBackWin+0x6e>
 800efc4:	2100      	movs	r1, #0
 800efc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efca:	f7ff bf43 	b.w	800ee54 <WM_InvalidateRect.part.2>
 800efce:	6818      	ldr	r0, [r3, #0]
 800efd0:	f7fa bebc 	b.w	8009d4c <GUI_StoreKey>
 800efd4:	2300      	movs	r3, #0
 800efd6:	e7bd      	b.n	800ef54 <_cbBackWin+0x24>
 800efd8:	2003587c 	.word	0x2003587c
 800efdc:	2003582c 	.word	0x2003582c

0800efe0 <WM_DeleteWindow.part.3>:
 800efe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efe4:	4e81      	ldr	r6, [pc, #516]	; (800f1ec <WM_DeleteWindow.part.3+0x20c>)
 800efe6:	b086      	sub	sp, #24
 800efe8:	4604      	mov	r4, r0
 800efea:	f7fa ff73 	bl	8009ed4 <GUI_Lock>
 800efee:	6830      	ldr	r0, [r6, #0]
 800eff0:	b148      	cbz	r0, 800f006 <WM_DeleteWindow.part.3+0x26>
 800eff2:	42a0      	cmp	r0, r4
 800eff4:	d102      	bne.n	800effc <WM_DeleteWindow.part.3+0x1c>
 800eff6:	e00b      	b.n	800f010 <WM_DeleteWindow.part.3+0x30>
 800eff8:	4284      	cmp	r4, r0
 800effa:	d009      	beq.n	800f010 <WM_DeleteWindow.part.3+0x30>
 800effc:	f7f9 fc34 	bl	8008868 <GUI_ALLOC_h2p>
 800f000:	6940      	ldr	r0, [r0, #20]
 800f002:	2800      	cmp	r0, #0
 800f004:	d1f8      	bne.n	800eff8 <WM_DeleteWindow.part.3+0x18>
 800f006:	f7fa ff5b 	bl	8009ec0 <GUI_Unlock>
 800f00a:	b006      	add	sp, #24
 800f00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f010:	4625      	mov	r5, r4
 800f012:	e000      	b.n	800f016 <WM_DeleteWindow.part.3+0x36>
 800f014:	461d      	mov	r5, r3
 800f016:	4628      	mov	r0, r5
 800f018:	f7f9 fc26 	bl	8008868 <GUI_ALLOC_h2p>
 800f01c:	6983      	ldr	r3, [r0, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1f8      	bne.n	800f014 <WM_DeleteWindow.part.3+0x34>
 800f022:	4f73      	ldr	r7, [pc, #460]	; (800f1f0 <WM_DeleteWindow.part.3+0x210>)
 800f024:	683a      	ldr	r2, [r7, #0]
 800f026:	4295      	cmp	r5, r2
 800f028:	f000 80d8 	beq.w	800f1dc <WM_DeleteWindow.part.3+0x1fc>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	429d      	cmp	r5, r3
 800f030:	bf14      	ite	ne
 800f032:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800f036:	2501      	moveq	r5, #1
 800f038:	f10d 0818 	add.w	r8, sp, #24
 800f03c:	230b      	movs	r3, #11
 800f03e:	f848 3d10 	str.w	r3, [r8, #-16]!
 800f042:	4620      	mov	r0, r4
 800f044:	4641      	mov	r1, r8
 800f046:	9403      	str	r4, [sp, #12]
 800f048:	f001 fe8e 	bl	8010d68 <WM__SendMessage>
 800f04c:	4620      	mov	r0, r4
 800f04e:	f001 fb3d 	bl	80106cc <WM__DeleteAssocTimer>
 800f052:	4620      	mov	r0, r4
 800f054:	f7f9 fc12 	bl	800887c <GUI_ALLOC_LockH>
 800f058:	9001      	str	r0, [sp, #4]
 800f05a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f05c:	2800      	cmp	r0, #0
 800f05e:	f040 80a1 	bne.w	800f1a4 <WM_DeleteWindow.part.3+0x1c4>
 800f062:	4b64      	ldr	r3, [pc, #400]	; (800f1f4 <WM_DeleteWindow.part.3+0x214>)
 800f064:	4a64      	ldr	r2, [pc, #400]	; (800f1f8 <WM_DeleteWindow.part.3+0x218>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4864      	ldr	r0, [pc, #400]	; (800f1fc <WM_DeleteWindow.part.3+0x21c>)
 800f06a:	2100      	movs	r1, #0
 800f06c:	6081      	str	r1, [r0, #8]
 800f06e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f072:	4284      	cmp	r4, r0
 800f074:	bf08      	it	eq
 800f076:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800f07a:	4a61      	ldr	r2, [pc, #388]	; (800f200 <WM_DeleteWindow.part.3+0x220>)
 800f07c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f080:	428c      	cmp	r4, r1
 800f082:	bf04      	itt	eq
 800f084:	2100      	moveq	r1, #0
 800f086:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800f08a:	4b5e      	ldr	r3, [pc, #376]	; (800f204 <WM_DeleteWindow.part.3+0x224>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2100      	movs	r1, #0
 800f090:	b133      	cbz	r3, 800f0a0 <WM_DeleteWindow.part.3+0xc0>
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	4294      	cmp	r4, r2
 800f096:	bf08      	it	eq
 800f098:	6059      	streq	r1, [r3, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1f8      	bne.n	800f092 <WM_DeleteWindow.part.3+0xb2>
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	2107      	movs	r1, #7
 800f0a4:	f001 f89c 	bl	80101e0 <WM_NotifyParent>
 800f0a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f0ac:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d15d      	bne.n	800f170 <WM_DeleteWindow.part.3+0x190>
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f7f9 fbe1 	bl	800887c <GUI_ALLOC_LockH>
 800f0ba:	6981      	ldr	r1, [r0, #24]
 800f0bc:	9002      	str	r0, [sp, #8]
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	d162      	bne.n	800f188 <WM_DeleteWindow.part.3+0x1a8>
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	f7f9 fbec 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f0c8:	6830      	ldr	r0, [r6, #0]
 800f0ca:	b158      	cbz	r0, 800f0e4 <WM_DeleteWindow.part.3+0x104>
 800f0cc:	f7f9 fbcc 	bl	8008868 <GUI_ALLOC_h2p>
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	6940      	ldr	r0, [r0, #20]
 800f0d4:	4284      	cmp	r4, r0
 800f0d6:	d1f8      	bne.n	800f0ca <WM_DeleteWindow.part.3+0xea>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f7f9 fbc5 	bl	8008868 <GUI_ALLOC_h2p>
 800f0de:	6943      	ldr	r3, [r0, #20]
 800f0e0:	f8c8 3014 	str.w	r3, [r8, #20]
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0e8:	07d9      	lsls	r1, r3, #31
 800f0ea:	d503      	bpl.n	800f0f4 <WM_DeleteWindow.part.3+0x114>
 800f0ec:	4946      	ldr	r1, [pc, #280]	; (800f208 <WM_DeleteWindow.part.3+0x228>)
 800f0ee:	680a      	ldr	r2, [r1, #0]
 800f0f0:	3a01      	subs	r2, #1
 800f0f2:	600a      	str	r2, [r1, #0]
 800f0f4:	069a      	lsls	r2, r3, #26
 800f0f6:	d442      	bmi.n	800f17e <WM_DeleteWindow.part.3+0x19e>
 800f0f8:	a801      	add	r0, sp, #4
 800f0fa:	f7f9 fbd1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f0fe:	4a43      	ldr	r2, [pc, #268]	; (800f20c <WM_DeleteWindow.part.3+0x22c>)
 800f100:	8813      	ldrh	r3, [r2, #0]
 800f102:	4620      	mov	r0, r4
 800f104:	3b01      	subs	r3, #1
 800f106:	8013      	strh	r3, [r2, #0]
 800f108:	f7f9 fd3e 	bl	8008b88 <GUI_ALLOC_Free>
 800f10c:	1c6b      	adds	r3, r5, #1
 800f10e:	f43f af7a 	beq.w	800f006 <WM_DeleteWindow.part.3+0x26>
 800f112:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800f116:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800f214 <WM_DeleteWindow.part.3+0x234>
 800f11a:	f7fa fedb 	bl	8009ed4 <GUI_Lock>
 800f11e:	f8d8 3000 	ldr.w	r3, [r8]
 800f122:	b905      	cbnz	r5, 800f126 <WM_DeleteWindow.part.3+0x146>
 800f124:	6835      	ldr	r5, [r6, #0]
 800f126:	649d      	str	r5, [r3, #72]	; 0x48
 800f128:	462c      	mov	r4, r5
 800f12a:	e000      	b.n	800f12e <WM_DeleteWindow.part.3+0x14e>
 800f12c:	461c      	mov	r4, r3
 800f12e:	4620      	mov	r0, r4
 800f130:	f7f9 fb9a 	bl	8008868 <GUI_ALLOC_h2p>
 800f134:	6983      	ldr	r3, [r0, #24]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1f8      	bne.n	800f12c <WM_DeleteWindow.part.3+0x14c>
 800f13a:	6839      	ldr	r1, [r7, #0]
 800f13c:	4a2c      	ldr	r2, [pc, #176]	; (800f1f0 <WM_DeleteWindow.part.3+0x210>)
 800f13e:	428c      	cmp	r4, r1
 800f140:	d04e      	beq.n	800f1e0 <WM_DeleteWindow.part.3+0x200>
 800f142:	6853      	ldr	r3, [r2, #4]
 800f144:	429c      	cmp	r4, r3
 800f146:	d04f      	beq.n	800f1e8 <WM_DeleteWindow.part.3+0x208>
 800f148:	f7fb fce6 	bl	800ab18 <LCD_SetClipRectMax>
 800f14c:	4628      	mov	r0, r5
 800f14e:	f7f9 fb8b 	bl	8008868 <GUI_ALLOC_h2p>
 800f152:	f8d8 3000 	ldr.w	r3, [r8]
 800f156:	f9b0 1000 	ldrsh.w	r1, [r0]
 800f15a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f15e:	651a      	str	r2, [r3, #80]	; 0x50
 800f160:	64d9      	str	r1, [r3, #76]	; 0x4c
 800f162:	f7fa fead 	bl	8009ec0 <GUI_Unlock>
 800f166:	f7fa feab 	bl	8009ec0 <GUI_Unlock>
 800f16a:	b006      	add	sp, #24
 800f16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f170:	f7ff ff36 	bl	800efe0 <WM_DeleteWindow.part.3>
 800f174:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f178:	2800      	cmp	r0, #0
 800f17a:	d199      	bne.n	800f0b0 <WM_DeleteWindow.part.3+0xd0>
 800f17c:	e79a      	b.n	800f0b4 <WM_DeleteWindow.part.3+0xd4>
 800f17e:	4a24      	ldr	r2, [pc, #144]	; (800f210 <WM_DeleteWindow.part.3+0x230>)
 800f180:	8813      	ldrh	r3, [r2, #0]
 800f182:	3b01      	subs	r3, #1
 800f184:	8013      	strh	r3, [r2, #0]
 800f186:	e7b7      	b.n	800f0f8 <WM_DeleteWindow.part.3+0x118>
 800f188:	6a02      	ldr	r2, [r0, #32]
 800f18a:	2320      	movs	r3, #32
 800f18c:	f7ff fdfa 	bl	800ed84 <WM__InvalidateRect>
 800f190:	4620      	mov	r0, r4
 800f192:	f7f9 fb69 	bl	8008868 <GUI_ALLOC_h2p>
 800f196:	4681      	mov	r9, r0
 800f198:	6980      	ldr	r0, [r0, #24]
 800f19a:	b930      	cbnz	r0, 800f1aa <WM_DeleteWindow.part.3+0x1ca>
 800f19c:	9b02      	ldr	r3, [sp, #8]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	619a      	str	r2, [r3, #24]
 800f1a2:	e78e      	b.n	800f0c2 <WM_DeleteWindow.part.3+0xe2>
 800f1a4:	f003 ffcc 	bl	8013140 <GUI_MEMDEV_Delete>
 800f1a8:	e75b      	b.n	800f062 <WM_DeleteWindow.part.3+0x82>
 800f1aa:	f7f9 fb5d 	bl	8008868 <GUI_ALLOC_h2p>
 800f1ae:	69c3      	ldr	r3, [r0, #28]
 800f1b0:	429c      	cmp	r4, r3
 800f1b2:	4682      	mov	sl, r0
 800f1b4:	d00b      	beq.n	800f1ce <WM_DeleteWindow.part.3+0x1ee>
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d0f0      	beq.n	800f19c <WM_DeleteWindow.part.3+0x1bc>
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f9 fb54 	bl	8008868 <GUI_ALLOC_h2p>
 800f1c0:	6a03      	ldr	r3, [r0, #32]
 800f1c2:	429c      	cmp	r4, r3
 800f1c4:	d1f7      	bne.n	800f1b6 <WM_DeleteWindow.part.3+0x1d6>
 800f1c6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f1ca:	6203      	str	r3, [r0, #32]
 800f1cc:	e7e6      	b.n	800f19c <WM_DeleteWindow.part.3+0x1bc>
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f7f9 fb4a 	bl	8008868 <GUI_ALLOC_h2p>
 800f1d4:	6a03      	ldr	r3, [r0, #32]
 800f1d6:	f8ca 301c 	str.w	r3, [sl, #28]
 800f1da:	e7df      	b.n	800f19c <WM_DeleteWindow.part.3+0x1bc>
 800f1dc:	461d      	mov	r5, r3
 800f1de:	e72b      	b.n	800f038 <WM_DeleteWindow.part.3+0x58>
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fa fdfb 	bl	8009ddc <GUI_SelectLayer>
 800f1e6:	e7af      	b.n	800f148 <WM_DeleteWindow.part.3+0x168>
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	e7fa      	b.n	800f1e2 <WM_DeleteWindow.part.3+0x202>
 800f1ec:	20035834 	.word	0x20035834
 800f1f0:	2003587c 	.word	0x2003587c
 800f1f4:	20035848 	.word	0x20035848
 800f1f8:	20035864 	.word	0x20035864
 800f1fc:	20000748 	.word	0x20000748
 800f200:	20035854 	.word	0x20035854
 800f204:	2003585c 	.word	0x2003585c
 800f208:	20035878 	.word	0x20035878
 800f20c:	2003583c 	.word	0x2003583c
 800f210:	20035874 	.word	0x20035874
 800f214:	2000007c 	.word	0x2000007c

0800f218 <_Exec1Input>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	4e1f      	ldr	r6, [pc, #124]	; (800f298 <_Exec1Input+0x80>)
 800f21c:	6873      	ldr	r3, [r6, #4]
 800f21e:	b082      	sub	sp, #8
 800f220:	b9cb      	cbnz	r3, 800f256 <_Exec1Input+0x3e>
 800f222:	4b1e      	ldr	r3, [pc, #120]	; (800f29c <_Exec1Input+0x84>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	b103      	cbz	r3, 800f22a <_Exec1Input+0x12>
 800f228:	4798      	blx	r3
 800f22a:	4b1d      	ldr	r3, [pc, #116]	; (800f2a0 <_Exec1Input+0x88>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	b10b      	cbz	r3, 800f234 <_Exec1Input+0x1c>
 800f230:	4798      	blx	r3
 800f232:	b968      	cbnz	r0, 800f250 <_Exec1Input+0x38>
 800f234:	4b1b      	ldr	r3, [pc, #108]	; (800f2a4 <_Exec1Input+0x8c>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800f23c:	b908      	cbnz	r0, 800f242 <_Exec1Input+0x2a>
 800f23e:	b002      	add	sp, #8
 800f240:	bd70      	pop	{r4, r5, r6, pc}
 800f242:	f7fa fd8b 	bl	8009d5c <GUI_PollKeyMsg>
 800f246:	3000      	adds	r0, #0
 800f248:	bf18      	it	ne
 800f24a:	2001      	movne	r0, #1
 800f24c:	b002      	add	sp, #8
 800f24e:	bd70      	pop	{r4, r5, r6, pc}
 800f250:	2001      	movs	r0, #1
 800f252:	b002      	add	sp, #8
 800f254:	bd70      	pop	{r4, r5, r6, pc}
 800f256:	f7fa fe3d 	bl	8009ed4 <GUI_Lock>
 800f25a:	4b13      	ldr	r3, [pc, #76]	; (800f2a8 <_Exec1Input+0x90>)
 800f25c:	681c      	ldr	r4, [r3, #0]
 800f25e:	b18c      	cbz	r4, 800f284 <_Exec1Input+0x6c>
 800f260:	4620      	mov	r0, r4
 800f262:	f7f9 fb0b 	bl	800887c <GUI_ALLOC_LockH>
 800f266:	4603      	mov	r3, r0
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f26c:	0412      	lsls	r2, r2, #16
 800f26e:	a801      	add	r0, sp, #4
 800f270:	d50d      	bpl.n	800f28e <_Exec1Input+0x76>
 800f272:	695d      	ldr	r5, [r3, #20]
 800f274:	f7f9 fb14 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f278:	4620      	mov	r0, r4
 800f27a:	462c      	mov	r4, r5
 800f27c:	f7ff feb0 	bl	800efe0 <WM_DeleteWindow.part.3>
 800f280:	2c00      	cmp	r4, #0
 800f282:	d1ed      	bne.n	800f260 <_Exec1Input+0x48>
 800f284:	2300      	movs	r3, #0
 800f286:	6073      	str	r3, [r6, #4]
 800f288:	f7fa fe1a 	bl	8009ec0 <GUI_Unlock>
 800f28c:	e7c9      	b.n	800f222 <_Exec1Input+0xa>
 800f28e:	a801      	add	r0, sp, #4
 800f290:	695c      	ldr	r4, [r3, #20]
 800f292:	f7f9 fb05 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f296:	e7e2      	b.n	800f25e <_Exec1Input+0x46>
 800f298:	20000748 	.word	0x20000748
 800f29c:	20035838 	.word	0x20035838
 800f2a0:	200357dc 	.word	0x200357dc
 800f2a4:	2000007c 	.word	0x2000007c
 800f2a8:	20035834 	.word	0x20035834

0800f2ac <WM__InvalidateParent>:
 800f2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	4608      	mov	r0, r1
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	4617      	mov	r7, r2
 800f2ba:	f7f9 fad5 	bl	8008868 <GUI_ALLOC_h2p>
 800f2be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f2c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800f2c4:	bf14      	ite	ne
 800f2c6:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 800f2ca:	2620      	moveq	r6, #32
 800f2cc:	b914      	cbnz	r4, 800f2d4 <WM__InvalidateParent+0x28>
 800f2ce:	b006      	add	sp, #24
 800f2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	f7f9 fad1 	bl	800887c <GUI_ALLOC_LockH>
 800f2da:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800f2de:	9000      	str	r0, [sp, #0]
 800f2e0:	f018 0f02 	tst.w	r8, #2
 800f2e4:	d041      	beq.n	800f36a <WM__InvalidateParent+0xbe>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	a802      	add	r0, sp, #8
 800f2ec:	f7fa ff26 	bl	800a13c <GUI__IntersectRects>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d03a      	beq.n	800f36a <WM__InvalidateParent+0xbe>
 800f2f4:	f640 0301 	movw	r3, #2049	; 0x801
 800f2f8:	ea08 0303 	and.w	r3, r8, r3
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d044      	beq.n	800f38a <WM__InvalidateParent+0xde>
 800f300:	4620      	mov	r0, r4
 800f302:	4632      	mov	r2, r6
 800f304:	a902      	add	r1, sp, #8
 800f306:	f7ff f8a9 	bl	800e45c <_Invalidate1Abs>
 800f30a:	9b00      	ldr	r3, [sp, #0]
 800f30c:	69dc      	ldr	r4, [r3, #28]
 800f30e:	b364      	cbz	r4, 800f36a <WM__InvalidateParent+0xbe>
 800f310:	42a7      	cmp	r7, r4
 800f312:	d02a      	beq.n	800f36a <WM__InvalidateParent+0xbe>
 800f314:	4620      	mov	r0, r4
 800f316:	f7f9 fab1 	bl	800887c <GUI_ALLOC_LockH>
 800f31a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f31c:	9001      	str	r0, [sp, #4]
 800f31e:	079b      	lsls	r3, r3, #30
 800f320:	d529      	bpl.n	800f376 <WM__InvalidateParent+0xca>
 800f322:	4602      	mov	r2, r0
 800f324:	a902      	add	r1, sp, #8
 800f326:	a804      	add	r0, sp, #16
 800f328:	f7fa ff08 	bl	800a13c <GUI__IntersectRects>
 800f32c:	b318      	cbz	r0, 800f376 <WM__InvalidateParent+0xca>
 800f32e:	a801      	add	r0, sp, #4
 800f330:	f7f9 fab6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f334:	4632      	mov	r2, r6
 800f336:	a904      	add	r1, sp, #16
 800f338:	4620      	mov	r0, r4
 800f33a:	f7ff f88f 	bl	800e45c <_Invalidate1Abs>
 800f33e:	4620      	mov	r0, r4
 800f340:	f000 ff18 	bl	8010174 <WM_GetFirstChild>
 800f344:	4605      	mov	r5, r0
 800f346:	b150      	cbz	r0, 800f35e <WM__InvalidateParent+0xb2>
 800f348:	4628      	mov	r0, r5
 800f34a:	4632      	mov	r2, r6
 800f34c:	a904      	add	r1, sp, #16
 800f34e:	f7ff fb67 	bl	800ea20 <WM_InvalidateWindowAndDescsEx>
 800f352:	4628      	mov	r0, r5
 800f354:	f7f9 fa88 	bl	8008868 <GUI_ALLOC_h2p>
 800f358:	6a05      	ldr	r5, [r0, #32]
 800f35a:	2d00      	cmp	r5, #0
 800f35c:	d1f4      	bne.n	800f348 <WM__InvalidateParent+0x9c>
 800f35e:	4620      	mov	r0, r4
 800f360:	f7f9 fa82 	bl	8008868 <GUI_ALLOC_h2p>
 800f364:	6a04      	ldr	r4, [r0, #32]
 800f366:	2c00      	cmp	r4, #0
 800f368:	d1d2      	bne.n	800f310 <WM__InvalidateParent+0x64>
 800f36a:	4668      	mov	r0, sp
 800f36c:	f7f9 fa98 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f370:	b006      	add	sp, #24
 800f372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f376:	a801      	add	r0, sp, #4
 800f378:	f7f9 fa92 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f37c:	4620      	mov	r0, r4
 800f37e:	f7f9 fa73 	bl	8008868 <GUI_ALLOC_h2p>
 800f382:	6a04      	ldr	r4, [r0, #32]
 800f384:	2c00      	cmp	r4, #0
 800f386:	d1c3      	bne.n	800f310 <WM__InvalidateParent+0x64>
 800f388:	e7ef      	b.n	800f36a <WM__InvalidateParent+0xbe>
 800f38a:	9900      	ldr	r1, [sp, #0]
 800f38c:	4633      	mov	r3, r6
 800f38e:	6a0a      	ldr	r2, [r1, #32]
 800f390:	6989      	ldr	r1, [r1, #24]
 800f392:	a802      	add	r0, sp, #8
 800f394:	f7ff fcf6 	bl	800ed84 <WM__InvalidateRect>
 800f398:	e7b7      	b.n	800f30a <WM__InvalidateParent+0x5e>
 800f39a:	bf00      	nop

0800f39c <WM__InvalidateRectEx>:
 800f39c:	b901      	cbnz	r1, 800f3a0 <WM__InvalidateRectEx+0x4>
 800f39e:	4770      	bx	lr
 800f3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	b087      	sub	sp, #28
 800f3a6:	4608      	mov	r0, r1
 800f3a8:	4616      	mov	r6, r2
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	f7f9 fa66 	bl	800887c <GUI_ALLOC_LockH>
 800f3b0:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800f3b2:	9000      	str	r0, [sp, #0]
 800f3b4:	07ba      	lsls	r2, r7, #30
 800f3b6:	d540      	bpl.n	800f43a <WM__InvalidateRectEx+0x9e>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	a802      	add	r0, sp, #8
 800f3be:	f7fa febd 	bl	800a13c <GUI__IntersectRects>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d039      	beq.n	800f43a <WM__InvalidateRectEx+0x9e>
 800f3c6:	f640 0301 	movw	r3, #2049	; 0x801
 800f3ca:	403b      	ands	r3, r7
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d043      	beq.n	800f458 <WM__InvalidateRectEx+0xbc>
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	2220      	movs	r2, #32
 800f3d4:	a902      	add	r1, sp, #8
 800f3d6:	f7ff f841 	bl	800e45c <_Invalidate1Abs>
 800f3da:	9b00      	ldr	r3, [sp, #0]
 800f3dc:	69dc      	ldr	r4, [r3, #28]
 800f3de:	b364      	cbz	r4, 800f43a <WM__InvalidateRectEx+0x9e>
 800f3e0:	42a6      	cmp	r6, r4
 800f3e2:	d02a      	beq.n	800f43a <WM__InvalidateRectEx+0x9e>
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f7f9 fa49 	bl	800887c <GUI_ALLOC_LockH>
 800f3ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f3ec:	9001      	str	r0, [sp, #4]
 800f3ee:	079b      	lsls	r3, r3, #30
 800f3f0:	d528      	bpl.n	800f444 <WM__InvalidateRectEx+0xa8>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	a902      	add	r1, sp, #8
 800f3f6:	a804      	add	r0, sp, #16
 800f3f8:	f7fa fea0 	bl	800a13c <GUI__IntersectRects>
 800f3fc:	b310      	cbz	r0, 800f444 <WM__InvalidateRectEx+0xa8>
 800f3fe:	a801      	add	r0, sp, #4
 800f400:	f7f9 fa4e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f404:	2220      	movs	r2, #32
 800f406:	a904      	add	r1, sp, #16
 800f408:	4620      	mov	r0, r4
 800f40a:	f7ff f827 	bl	800e45c <_Invalidate1Abs>
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 feb0 	bl	8010174 <WM_GetFirstChild>
 800f414:	4605      	mov	r5, r0
 800f416:	b150      	cbz	r0, 800f42e <WM__InvalidateRectEx+0x92>
 800f418:	4628      	mov	r0, r5
 800f41a:	2220      	movs	r2, #32
 800f41c:	a904      	add	r1, sp, #16
 800f41e:	f7ff faff 	bl	800ea20 <WM_InvalidateWindowAndDescsEx>
 800f422:	4628      	mov	r0, r5
 800f424:	f7f9 fa20 	bl	8008868 <GUI_ALLOC_h2p>
 800f428:	6a05      	ldr	r5, [r0, #32]
 800f42a:	2d00      	cmp	r5, #0
 800f42c:	d1f4      	bne.n	800f418 <WM__InvalidateRectEx+0x7c>
 800f42e:	4620      	mov	r0, r4
 800f430:	f7f9 fa1a 	bl	8008868 <GUI_ALLOC_h2p>
 800f434:	6a04      	ldr	r4, [r0, #32]
 800f436:	2c00      	cmp	r4, #0
 800f438:	d1d2      	bne.n	800f3e0 <WM__InvalidateRectEx+0x44>
 800f43a:	4668      	mov	r0, sp
 800f43c:	f7f9 fa30 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f440:	b007      	add	sp, #28
 800f442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f444:	a801      	add	r0, sp, #4
 800f446:	f7f9 fa2b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f44a:	4620      	mov	r0, r4
 800f44c:	f7f9 fa0c 	bl	8008868 <GUI_ALLOC_h2p>
 800f450:	6a04      	ldr	r4, [r0, #32]
 800f452:	2c00      	cmp	r4, #0
 800f454:	d1c4      	bne.n	800f3e0 <WM__InvalidateRectEx+0x44>
 800f456:	e7f0      	b.n	800f43a <WM__InvalidateRectEx+0x9e>
 800f458:	9900      	ldr	r1, [sp, #0]
 800f45a:	2320      	movs	r3, #32
 800f45c:	6a0a      	ldr	r2, [r1, #32]
 800f45e:	6989      	ldr	r1, [r1, #24]
 800f460:	a802      	add	r0, sp, #8
 800f462:	f7ff fc8f 	bl	800ed84 <WM__InvalidateRect>
 800f466:	e7b8      	b.n	800f3da <WM__InvalidateRectEx+0x3e>

0800f468 <WM__SendMsgNoData>:
 800f468:	b500      	push	{lr}
 800f46a:	b085      	sub	sp, #20
 800f46c:	ab04      	add	r3, sp, #16
 800f46e:	9001      	str	r0, [sp, #4]
 800f470:	f843 1d10 	str.w	r1, [r3, #-16]!
 800f474:	4619      	mov	r1, r3
 800f476:	f001 fc77 	bl	8010d68 <WM__SendMessage>
 800f47a:	b005      	add	sp, #20
 800f47c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f480 <WM__GetClientRectWin>:
 800f480:	b430      	push	{r4, r5}
 800f482:	2300      	movs	r3, #0
 800f484:	800b      	strh	r3, [r1, #0]
 800f486:	804b      	strh	r3, [r1, #2]
 800f488:	8805      	ldrh	r5, [r0, #0]
 800f48a:	8844      	ldrh	r4, [r0, #2]
 800f48c:	8882      	ldrh	r2, [r0, #4]
 800f48e:	88c3      	ldrh	r3, [r0, #6]
 800f490:	1b52      	subs	r2, r2, r5
 800f492:	1b1b      	subs	r3, r3, r4
 800f494:	808a      	strh	r2, [r1, #4]
 800f496:	80cb      	strh	r3, [r1, #6]
 800f498:	bc30      	pop	{r4, r5}
 800f49a:	4770      	bx	lr

0800f49c <WM_CreateWindowAsChild>:
 800f49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a0:	b087      	sub	sp, #28
 800f4a2:	461e      	mov	r6, r3
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	4689      	mov	r9, r1
 800f4a8:	4615      	mov	r5, r2
 800f4aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f4ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f4ae:	f7fa fd11 	bl	8009ed4 <GUI_Lock>
 800f4b2:	4b6a      	ldr	r3, [pc, #424]	; (800f65c <WM_CreateWindowAsChild+0x1c0>)
 800f4b4:	f8d3 a000 	ldr.w	sl, [r3]
 800f4b8:	b97f      	cbnz	r7, 800f4da <WM_CreateWindowAsChild+0x3e>
 800f4ba:	4b69      	ldr	r3, [pc, #420]	; (800f660 <WM_CreateWindowAsChild+0x1c4>)
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d170      	bne.n	800f5a4 <WM_CreateWindowAsChild+0x108>
 800f4c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800f4c6:	f7f9 fb7f 	bl	8008bc8 <GUI_ALLOC_AllocZero>
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	bb28      	cbnz	r0, 800f51a <WM_CreateWindowAsChild+0x7e>
 800f4ce:	f7fa fcf7 	bl	8009ec0 <GUI_Unlock>
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	b007      	add	sp, #28
 800f4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4da:	1c7b      	adds	r3, r7, #1
 800f4dc:	d06d      	beq.n	800f5ba <WM_CreateWindowAsChild+0x11e>
 800f4de:	4638      	mov	r0, r7
 800f4e0:	f7f9 f9cc 	bl	800887c <GUI_ALLOC_LockH>
 800f4e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f4e8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f4ec:	9001      	str	r0, [sp, #4]
 800f4ee:	4490      	add	r8, r2
 800f4f0:	4499      	add	r9, r3
 800f4f2:	b91d      	cbnz	r5, 800f4fc <WM_CreateWindowAsChild+0x60>
 800f4f4:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800f4f8:	1aad      	subs	r5, r5, r2
 800f4fa:	3501      	adds	r5, #1
 800f4fc:	b91e      	cbnz	r6, 800f506 <WM_CreateWindowAsChild+0x6a>
 800f4fe:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 800f502:	1af6      	subs	r6, r6, r3
 800f504:	3601      	adds	r6, #1
 800f506:	a801      	add	r0, sp, #4
 800f508:	f7f9 f9ca 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f50c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800f510:	f7f9 fb5a 	bl	8008bc8 <GUI_ALLOC_AllocZero>
 800f514:	4604      	mov	r4, r0
 800f516:	2800      	cmp	r0, #0
 800f518:	d0d9      	beq.n	800f4ce <WM_CreateWindowAsChild+0x32>
 800f51a:	4a51      	ldr	r2, [pc, #324]	; (800f660 <WM_CreateWindowAsChild+0x1c4>)
 800f51c:	8813      	ldrh	r3, [r2, #0]
 800f51e:	3301      	adds	r3, #1
 800f520:	8013      	strh	r3, [r2, #0]
 800f522:	f7f9 f9ab 	bl	800887c <GUI_ALLOC_LockH>
 800f526:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f528:	4b4e      	ldr	r3, [pc, #312]	; (800f664 <WM_CreateWindowAsChild+0x1c8>)
 800f52a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f52c:	f10d 0b18 	add.w	fp, sp, #24
 800f530:	ea4a 0a01 	orr.w	sl, sl, r1
 800f534:	f84b 0d18 	str.w	r0, [fp, #-24]!
 800f538:	4445      	add	r5, r8
 800f53a:	444e      	add	r6, r9
 800f53c:	ea0a 0303 	and.w	r3, sl, r3
 800f540:	4313      	orrs	r3, r2
 800f542:	3d01      	subs	r5, #1
 800f544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f546:	6283      	str	r3, [r0, #40]	; 0x28
 800f548:	3e01      	subs	r6, #1
 800f54a:	8085      	strh	r5, [r0, #4]
 800f54c:	80c6      	strh	r6, [r0, #6]
 800f54e:	6102      	str	r2, [r0, #16]
 800f550:	f8a0 8000 	strh.w	r8, [r0]
 800f554:	f8a0 9002 	strh.w	r9, [r0, #2]
 800f558:	4658      	mov	r0, fp
 800f55a:	f7f9 f9a1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f55e:	4b42      	ldr	r3, [pc, #264]	; (800f668 <WM_CreateWindowAsChild+0x1cc>)
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	2800      	cmp	r0, #0
 800f564:	d15b      	bne.n	800f61e <WM_CreateWindowAsChild+0x182>
 800f566:	601c      	str	r4, [r3, #0]
 800f568:	4639      	mov	r1, r7
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7ff f880 	bl	800e670 <WM__InsertWindowIntoList>
 800f570:	f01a 0f20 	tst.w	sl, #32
 800f574:	d12f      	bne.n	800f5d6 <WM_CreateWindowAsChild+0x13a>
 800f576:	f01a 0f01 	tst.w	sl, #1
 800f57a:	d120      	bne.n	800f5be <WM_CreateWindowAsChild+0x122>
 800f57c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f580:	d125      	bne.n	800f5ce <WM_CreateWindowAsChild+0x132>
 800f582:	f01a 0f02 	tst.w	sl, #2
 800f586:	d158      	bne.n	800f63a <WM_CreateWindowAsChild+0x19e>
 800f588:	a906      	add	r1, sp, #24
 800f58a:	2301      	movs	r3, #1
 800f58c:	4620      	mov	r0, r4
 800f58e:	f841 3d10 	str.w	r3, [r1, #-16]!
 800f592:	9403      	str	r4, [sp, #12]
 800f594:	f001 fbe8 	bl	8010d68 <WM__SendMessage>
 800f598:	f7fa fc92 	bl	8009ec0 <GUI_Unlock>
 800f59c:	4620      	mov	r0, r4
 800f59e:	b007      	add	sp, #28
 800f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a4:	4a31      	ldr	r2, [pc, #196]	; (800f66c <WM_CreateWindowAsChild+0x1d0>)
 800f5a6:	4b32      	ldr	r3, [pc, #200]	; (800f670 <WM_CreateWindowAsChild+0x1d4>)
 800f5a8:	6812      	ldr	r2, [r2, #0]
 800f5aa:	7c52      	ldrb	r2, [r2, #17]
 800f5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b0:	1c5a      	adds	r2, r3, #1
 800f5b2:	2a01      	cmp	r2, #1
 800f5b4:	d985      	bls.n	800f4c2 <WM_CreateWindowAsChild+0x26>
 800f5b6:	461f      	mov	r7, r3
 800f5b8:	e791      	b.n	800f4de <WM_CreateWindowAsChild+0x42>
 800f5ba:	2700      	movs	r7, #0
 800f5bc:	e781      	b.n	800f4c2 <WM_CreateWindowAsChild+0x26>
 800f5be:	4a2d      	ldr	r2, [pc, #180]	; (800f674 <WM_CreateWindowAsChild+0x1d8>)
 800f5c0:	6813      	ldr	r3, [r2, #0]
 800f5c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f5c6:	f103 0301 	add.w	r3, r3, #1
 800f5ca:	6013      	str	r3, [r2, #0]
 800f5cc:	d0d9      	beq.n	800f582 <WM_CreateWindowAsChild+0xe6>
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f000 fd7c 	bl	80100cc <WM_BringToBottom>
 800f5d4:	e7d5      	b.n	800f582 <WM_CreateWindowAsChild+0xe6>
 800f5d6:	4e25      	ldr	r6, [pc, #148]	; (800f66c <WM_CreateWindowAsChild+0x1d0>)
 800f5d8:	f7fa fc7c 	bl	8009ed4 <GUI_Lock>
 800f5dc:	6833      	ldr	r3, [r6, #0]
 800f5de:	4625      	mov	r5, r4
 800f5e0:	649c      	str	r4, [r3, #72]	; 0x48
 800f5e2:	e000      	b.n	800f5e6 <WM_CreateWindowAsChild+0x14a>
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f7f9 f93e 	bl	8008868 <GUI_ALLOC_h2p>
 800f5ec:	6980      	ldr	r0, [r0, #24]
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d1f8      	bne.n	800f5e4 <WM_CreateWindowAsChild+0x148>
 800f5f2:	4b1f      	ldr	r3, [pc, #124]	; (800f670 <WM_CreateWindowAsChild+0x1d4>)
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	4295      	cmp	r5, r2
 800f5f8:	d01c      	beq.n	800f634 <WM_CreateWindowAsChild+0x198>
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	429d      	cmp	r5, r3
 800f5fe:	d018      	beq.n	800f632 <WM_CreateWindowAsChild+0x196>
 800f600:	f7fb fa8a 	bl	800ab18 <LCD_SetClipRectMax>
 800f604:	4620      	mov	r0, r4
 800f606:	f7f9 f92f 	bl	8008868 <GUI_ALLOC_h2p>
 800f60a:	6833      	ldr	r3, [r6, #0]
 800f60c:	f9b0 1000 	ldrsh.w	r1, [r0]
 800f610:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f614:	651a      	str	r2, [r3, #80]	; 0x50
 800f616:	64d9      	str	r1, [r3, #76]	; 0x4c
 800f618:	f7fa fc52 	bl	8009ec0 <GUI_Unlock>
 800f61c:	e7ab      	b.n	800f576 <WM_CreateWindowAsChild+0xda>
 800f61e:	f7f9 f923 	bl	8008868 <GUI_ALLOC_h2p>
 800f622:	4605      	mov	r5, r0
 800f624:	4620      	mov	r0, r4
 800f626:	f7f9 f91f 	bl	8008868 <GUI_ALLOC_h2p>
 800f62a:	696b      	ldr	r3, [r5, #20]
 800f62c:	6143      	str	r3, [r0, #20]
 800f62e:	616c      	str	r4, [r5, #20]
 800f630:	e79a      	b.n	800f568 <WM_CreateWindowAsChild+0xcc>
 800f632:	2001      	movs	r0, #1
 800f634:	f7fa fbd2 	bl	8009ddc <GUI_SelectLayer>
 800f638:	e7e2      	b.n	800f600 <WM_CreateWindowAsChild+0x164>
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7f9 f91e 	bl	800887c <GUI_ALLOC_LockH>
 800f640:	4603      	mov	r3, r0
 800f642:	4658      	mov	r0, fp
 800f644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	f042 0202 	orr.w	r2, r2, #2
 800f64c:	629a      	str	r2, [r3, #40]	; 0x28
 800f64e:	f7f9 f927 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f652:	2100      	movs	r1, #0
 800f654:	4620      	mov	r0, r4
 800f656:	f7ff fbfd 	bl	800ee54 <WM_InvalidateRect.part.2>
 800f65a:	e795      	b.n	800f588 <WM_CreateWindowAsChild+0xec>
 800f65c:	20035870 	.word	0x20035870
 800f660:	2003583c 	.word	0x2003583c
 800f664:	003f3f9f 	.word	0x003f3f9f
 800f668:	20035834 	.word	0x20035834
 800f66c:	2000007c 	.word	0x2000007c
 800f670:	2003587c 	.word	0x2003587c
 800f674:	20035878 	.word	0x20035878

0800f678 <WM__GetNextIVR>:
 800f678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f67c:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800f8c0 <WM__GetNextIVR+0x248>
 800f680:	f8d8 3000 	ldr.w	r3, [r8]
 800f684:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800f688:	b087      	sub	sp, #28
 800f68a:	b130      	cbz	r0, 800f69a <WM__GetNextIVR+0x22>
 800f68c:	4e8b      	ldr	r6, [pc, #556]	; (800f8bc <WM__GetNextIVR+0x244>)
 800f68e:	6a33      	ldr	r3, [r6, #32]
 800f690:	2b01      	cmp	r3, #1
 800f692:	dd05      	ble.n	800f6a0 <WM__GetNextIVR+0x28>
 800f694:	3b01      	subs	r3, #1
 800f696:	6233      	str	r3, [r6, #32]
 800f698:	2000      	movs	r0, #0
 800f69a:	b007      	add	sp, #28
 800f69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a0:	f106 0714 	add.w	r7, r6, #20
 800f6a4:	69f3      	ldr	r3, [r6, #28]
 800f6a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f6aa:	ad02      	add	r5, sp, #8
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	e885 0003 	stmia.w	r5, {r0, r1}
 800f6b2:	61f3      	str	r3, [r6, #28]
 800f6b4:	b953      	cbnz	r3, 800f6cc <WM__GetNextIVR+0x54>
 800f6b6:	68f3      	ldr	r3, [r6, #12]
 800f6b8:	9302      	str	r3, [sp, #8]
 800f6ba:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 800f6be:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800f6c2:	4c7e      	ldr	r4, [pc, #504]	; (800f8bc <WM__GetNextIVR+0x244>)
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	da17      	bge.n	800f6f8 <WM__GetNextIVR+0x80>
 800f6c8:	6a33      	ldr	r3, [r6, #32]
 800f6ca:	e7e3      	b.n	800f694 <WM__GetNextIVR+0x1c>
 800f6cc:	8b32      	ldrh	r2, [r6, #24]
 800f6ce:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 800f6d2:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 800f6d6:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f6da:	3201      	adds	r2, #1
 800f6dc:	b212      	sxth	r2, r2
 800f6de:	4291      	cmp	r1, r2
 800f6e0:	f8ad 2008 	strh.w	r2, [sp, #8]
 800f6e4:	daeb      	bge.n	800f6be <WM__GetNextIVR+0x46>
 800f6e6:	8b73      	ldrh	r3, [r6, #26]
 800f6e8:	89b2      	ldrh	r2, [r6, #12]
 800f6ea:	f8ad 2008 	strh.w	r2, [sp, #8]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	b21b      	sxth	r3, r3
 800f6f2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f6f6:	e7e2      	b.n	800f6be <WM__GetNextIVR+0x46>
 800f6f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f6fc:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800f8c0 <WM__GetNextIVR+0x248>
 800f700:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f702:	f7f9 f8bb 	bl	800887c <GUI_ALLOC_LockH>
 800f706:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800f70a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800f70e:	9000      	str	r0, [sp, #0]
 800f710:	4299      	cmp	r1, r3
 800f712:	4602      	mov	r2, r0
 800f714:	f000 80b9 	beq.w	800f88a <WM__GetNextIVR+0x212>
 800f718:	f8d8 2000 	ldr.w	r2, [r8]
 800f71c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f720:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800f722:	b910      	cbnz	r0, 800f72a <WM__GetNextIVR+0xb2>
 800f724:	e00d      	b.n	800f742 <WM__GetNextIVR+0xca>
 800f726:	69a0      	ldr	r0, [r4, #24]
 800f728:	b158      	cbz	r0, 800f742 <WM__GetNextIVR+0xca>
 800f72a:	f7f9 f89d 	bl	8008868 <GUI_ALLOC_h2p>
 800f72e:	4629      	mov	r1, r5
 800f730:	4604      	mov	r4, r0
 800f732:	6a00      	ldr	r0, [r0, #32]
 800f734:	f7fe fd70 	bl	800e218 <_Findx0.constprop.10>
 800f738:	2800      	cmp	r0, #0
 800f73a:	d0f4      	beq.n	800f726 <WM__GetNextIVR+0xae>
 800f73c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800f740:	e7ea      	b.n	800f718 <WM__GetNextIVR+0xa0>
 800f742:	9b00      	ldr	r3, [sp, #0]
 800f744:	4629      	mov	r1, r5
 800f746:	69d8      	ldr	r0, [r3, #28]
 800f748:	f7fe fd66 	bl	800e218 <_Findx0.constprop.10>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d1f5      	bne.n	800f73c <WM__GetNextIVR+0xc4>
 800f750:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800f754:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800f758:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	f300 808c 	bgt.w	800f87a <WM__GetNextIVR+0x202>
 800f762:	f8d8 3000 	ldr.w	r3, [r8]
 800f766:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f768:	f10d 0810 	add.w	r8, sp, #16
 800f76c:	b368      	cbz	r0, 800f7ca <WM__GetNextIVR+0x152>
 800f76e:	f7f9 f87b 	bl	8008868 <GUI_ALLOC_h2p>
 800f772:	6a04      	ldr	r4, [r0, #32]
 800f774:	4681      	mov	r9, r0
 800f776:	b96c      	cbnz	r4, 800f794 <WM__GetNextIVR+0x11c>
 800f778:	e023      	b.n	800f7c2 <WM__GetNextIVR+0x14a>
 800f77a:	07e1      	lsls	r1, r4, #31
 800f77c:	d44b      	bmi.n	800f816 <WM__GetNextIVR+0x19e>
 800f77e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f782:	9801      	ldr	r0, [sp, #4]
 800f784:	3b01      	subs	r3, #1
 800f786:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f78a:	6a04      	ldr	r4, [r0, #32]
 800f78c:	a801      	add	r0, sp, #4
 800f78e:	f7f9 f887 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f792:	b1b4      	cbz	r4, 800f7c2 <WM__GetNextIVR+0x14a>
 800f794:	4620      	mov	r0, r4
 800f796:	f7f9 f871 	bl	800887c <GUI_ALLOC_LockH>
 800f79a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f79c:	9001      	str	r0, [sp, #4]
 800f79e:	07a3      	lsls	r3, r4, #30
 800f7a0:	d5f3      	bpl.n	800f78a <WM__GetNextIVR+0x112>
 800f7a2:	c803      	ldmia	r0, {r0, r1}
 800f7a4:	e888 0003 	stmia.w	r8, {r0, r1}
 800f7a8:	4641      	mov	r1, r8
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	f7f9 fc34 	bl	8009018 <GUI_RectsIntersect>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d1e2      	bne.n	800f77a <WM__GetNextIVR+0x102>
 800f7b4:	9801      	ldr	r0, [sp, #4]
 800f7b6:	6a04      	ldr	r4, [r0, #32]
 800f7b8:	a801      	add	r0, sp, #4
 800f7ba:	f7f9 f871 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f7be:	2c00      	cmp	r4, #0
 800f7c0:	d1e8      	bne.n	800f794 <WM__GetNextIVR+0x11c>
 800f7c2:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d1d1      	bne.n	800f76e <WM__GetNextIVR+0xf6>
 800f7ca:	9b00      	ldr	r3, [sp, #0]
 800f7cc:	69dc      	ldr	r4, [r3, #28]
 800f7ce:	f10d 0810 	add.w	r8, sp, #16
 800f7d2:	b974      	cbnz	r4, 800f7f2 <WM__GetNextIVR+0x17a>
 800f7d4:	e040      	b.n	800f858 <WM__GetNextIVR+0x1e0>
 800f7d6:	07e3      	lsls	r3, r4, #31
 800f7d8:	d42e      	bmi.n	800f838 <WM__GetNextIVR+0x1c0>
 800f7da:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f7de:	9801      	ldr	r0, [sp, #4]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f7e6:	6a04      	ldr	r4, [r0, #32]
 800f7e8:	a801      	add	r0, sp, #4
 800f7ea:	f7f9 f859 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f7ee:	2c00      	cmp	r4, #0
 800f7f0:	d032      	beq.n	800f858 <WM__GetNextIVR+0x1e0>
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f7f9 f842 	bl	800887c <GUI_ALLOC_LockH>
 800f7f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f7fa:	9001      	str	r0, [sp, #4]
 800f7fc:	07a2      	lsls	r2, r4, #30
 800f7fe:	d5f2      	bpl.n	800f7e6 <WM__GetNextIVR+0x16e>
 800f800:	c803      	ldmia	r0, {r0, r1}
 800f802:	e888 0003 	stmia.w	r8, {r0, r1}
 800f806:	4641      	mov	r1, r8
 800f808:	4628      	mov	r0, r5
 800f80a:	f7f9 fc05 	bl	8009018 <GUI_RectsIntersect>
 800f80e:	2800      	cmp	r0, #0
 800f810:	d1e1      	bne.n	800f7d6 <WM__GetNextIVR+0x15e>
 800f812:	9801      	ldr	r0, [sp, #4]
 800f814:	e7e7      	b.n	800f7e6 <WM__GetNextIVR+0x16e>
 800f816:	9801      	ldr	r0, [sp, #4]
 800f818:	69c4      	ldr	r4, [r0, #28]
 800f81a:	2c00      	cmp	r4, #0
 800f81c:	d0b5      	beq.n	800f78a <WM__GetNextIVR+0x112>
 800f81e:	4620      	mov	r0, r4
 800f820:	4642      	mov	r2, r8
 800f822:	4629      	mov	r1, r5
 800f824:	f7fe fbe6 	bl	800dff4 <_Findx1>
 800f828:	4620      	mov	r0, r4
 800f82a:	f7f9 f81d 	bl	8008868 <GUI_ALLOC_h2p>
 800f82e:	6a04      	ldr	r4, [r0, #32]
 800f830:	2c00      	cmp	r4, #0
 800f832:	d1f4      	bne.n	800f81e <WM__GetNextIVR+0x1a6>
 800f834:	9801      	ldr	r0, [sp, #4]
 800f836:	e7be      	b.n	800f7b6 <WM__GetNextIVR+0x13e>
 800f838:	9801      	ldr	r0, [sp, #4]
 800f83a:	69c4      	ldr	r4, [r0, #28]
 800f83c:	2c00      	cmp	r4, #0
 800f83e:	d0d2      	beq.n	800f7e6 <WM__GetNextIVR+0x16e>
 800f840:	4620      	mov	r0, r4
 800f842:	4642      	mov	r2, r8
 800f844:	4629      	mov	r1, r5
 800f846:	f7fe fbd5 	bl	800dff4 <_Findx1>
 800f84a:	4620      	mov	r0, r4
 800f84c:	f7f9 f80c 	bl	8008868 <GUI_ALLOC_h2p>
 800f850:	6a04      	ldr	r4, [r0, #32]
 800f852:	2c00      	cmp	r4, #0
 800f854:	d1f4      	bne.n	800f840 <WM__GetNextIVR+0x1c8>
 800f856:	e7dc      	b.n	800f812 <WM__GetNextIVR+0x19a>
 800f858:	4668      	mov	r0, sp
 800f85a:	f7f9 f821 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f85e:	69f2      	ldr	r2, [r6, #28]
 800f860:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f864:	429a      	cmp	r2, r3
 800f866:	f73f af2f 	bgt.w	800f6c8 <WM__GetNextIVR+0x50>
 800f86a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f86e:	e887 0003 	stmia.w	r7, {r0, r1}
 800f872:	f7fe fe69 	bl	800e548 <WM__ActivateClipRect>
 800f876:	2001      	movs	r0, #1
 800f878:	e70f      	b.n	800f69a <WM__GetNextIVR+0x22>
 800f87a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f87e:	e887 0003 	stmia.w	r7, {r0, r1}
 800f882:	4668      	mov	r0, sp
 800f884:	f7f9 f80c 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f888:	e72d      	b.n	800f6e6 <WM__GetNextIVR+0x6e>
 800f88a:	f8d9 1000 	ldr.w	r1, [r9]
 800f88e:	6923      	ldr	r3, [r4, #16]
 800f890:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800f892:	9303      	str	r3, [sp, #12]
 800f894:	b150      	cbz	r0, 800f8ac <WM__GetNextIVR+0x234>
 800f896:	f7f8 ffe7 	bl	8008868 <GUI_ALLOC_h2p>
 800f89a:	4604      	mov	r4, r0
 800f89c:	4629      	mov	r1, r5
 800f89e:	6a00      	ldr	r0, [r0, #32]
 800f8a0:	f7fe fd00 	bl	800e2a4 <_Findy1.constprop.11>
 800f8a4:	69a0      	ldr	r0, [r4, #24]
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d1f5      	bne.n	800f896 <WM__GetNextIVR+0x21e>
 800f8aa:	9a00      	ldr	r2, [sp, #0]
 800f8ac:	69d0      	ldr	r0, [r2, #28]
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	f7fe fcf8 	bl	800e2a4 <_Findy1.constprop.11>
 800f8b4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800f8b8:	e72e      	b.n	800f718 <WM__GetNextIVR+0xa0>
 800f8ba:	bf00      	nop
 800f8bc:	20000748 	.word	0x20000748
 800f8c0:	2000007c 	.word	0x2000007c

0800f8c4 <WM__InitIVRSearch>:
 800f8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	4c5e      	ldr	r4, [pc, #376]	; (800fa44 <WM__InitIVRSearch+0x180>)
 800f8ca:	6822      	ldr	r2, [r4, #0]
 800f8cc:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800f8d0:	b089      	sub	sp, #36	; 0x24
 800f8d2:	b14b      	cbz	r3, 800f8e8 <WM__InitIVRSearch+0x24>
 800f8d4:	4d5c      	ldr	r5, [pc, #368]	; (800fa48 <WM__InitIVRSearch+0x184>)
 800f8d6:	6a2b      	ldr	r3, [r5, #32]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	622b      	str	r3, [r5, #32]
 800f8de:	dd09      	ble.n	800f8f4 <WM__InitIVRSearch+0x30>
 800f8e0:	2001      	movs	r0, #1
 800f8e2:	b009      	add	sp, #36	; 0x24
 800f8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8e8:	f7fe fe2e 	bl	800e548 <WM__ActivateClipRect>
 800f8ec:	2001      	movs	r0, #1
 800f8ee:	b009      	add	sp, #36	; 0x24
 800f8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8f4:	4607      	mov	r7, r0
 800f8f6:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800f8f8:	f7f8 ffc0 	bl	800887c <GUI_ALLOC_LockH>
 800f8fc:	4b53      	ldr	r3, [pc, #332]	; (800fa4c <WM__InitIVRSearch+0x188>)
 800f8fe:	9001      	str	r0, [sp, #4]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f906:	61ea      	str	r2, [r5, #28]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d061      	beq.n	800f9d0 <WM__InitIVRSearch+0x10c>
 800f90c:	3008      	adds	r0, #8
 800f90e:	c803      	ldmia	r0, {r0, r1}
 800f910:	ae04      	add	r6, sp, #16
 800f912:	e886 0003 	stmia.w	r6, {r0, r1}
 800f916:	b11f      	cbz	r7, 800f920 <WM__InitIVRSearch+0x5c>
 800f918:	4639      	mov	r1, r7
 800f91a:	4630      	mov	r0, r6
 800f91c:	f7fa fbf0 	bl	800a100 <GUI__IntersectRect>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 8087 	beq.w	800fa38 <WM__InitIVRSearch+0x174>
 800f92a:	4f49      	ldr	r7, [pc, #292]	; (800fa50 <WM__InitIVRSearch+0x18c>)
 800f92c:	6818      	ldr	r0, [r3, #0]
 800f92e:	6859      	ldr	r1, [r3, #4]
 800f930:	683a      	ldr	r2, [r7, #0]
 800f932:	ab06      	add	r3, sp, #24
 800f934:	c303      	stmia	r3!, {r0, r1}
 800f936:	9801      	ldr	r0, [sp, #4]
 800f938:	9002      	str	r0, [sp, #8]
 800f93a:	f10d 0808 	add.w	r8, sp, #8
 800f93e:	2a00      	cmp	r2, #0
 800f940:	d160      	bne.n	800fa04 <WM__InitIVRSearch+0x140>
 800f942:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f946:	f9b0 1000 	ldrsh.w	r1, [r0]
 800f94a:	a806      	add	r0, sp, #24
 800f94c:	f7f9 fab2 	bl	8008eb4 <GUI_MoveRect>
 800f950:	4630      	mov	r0, r6
 800f952:	a906      	add	r1, sp, #24
 800f954:	f7fa fbd4 	bl	800a100 <GUI__IntersectRect>
 800f958:	4640      	mov	r0, r8
 800f95a:	f7f8 ffa1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f95e:	f8d7 9000 	ldr.w	r9, [r7]
 800f962:	f10d 080c 	add.w	r8, sp, #12
 800f966:	f1b9 0f00 	cmp.w	r9, #0
 800f96a:	d126      	bne.n	800f9ba <WM__InitIVRSearch+0xf6>
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800f970:	e008      	b.n	800f984 <WM__InitIVRSearch+0xc0>
 800f972:	f7fa fbc5 	bl	800a100 <GUI__IntersectRect>
 800f976:	9b03      	ldr	r3, [sp, #12]
 800f978:	699c      	ldr	r4, [r3, #24]
 800f97a:	4640      	mov	r0, r8
 800f97c:	b38c      	cbz	r4, 800f9e2 <WM__InitIVRSearch+0x11e>
 800f97e:	f7f8 ff8f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f982:	4627      	mov	r7, r4
 800f984:	4638      	mov	r0, r7
 800f986:	f7f8 ff79 	bl	800887c <GUI_ALLOC_LockH>
 800f98a:	4603      	mov	r3, r0
 800f98c:	4601      	mov	r1, r0
 800f98e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f990:	9303      	str	r3, [sp, #12]
 800f992:	0793      	lsls	r3, r2, #30
 800f994:	4630      	mov	r0, r6
 800f996:	d4ec      	bmi.n	800f972 <WM__InitIVRSearch+0xae>
 800f998:	4640      	mov	r0, r8
 800f99a:	f7f8 ff81 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f99e:	6a2b      	ldr	r3, [r5, #32]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	622b      	str	r3, [r5, #32]
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	e79c      	b.n	800f8e2 <WM__InitIVRSearch+0x1e>
 800f9a8:	f7fa fbaa 	bl	800a100 <GUI__IntersectRect>
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	699f      	ldr	r7, [r3, #24]
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	b37f      	cbz	r7, 800fa14 <WM__InitIVRSearch+0x150>
 800f9b4:	f7f8 ff74 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f9b8:	46b9      	mov	r9, r7
 800f9ba:	4648      	mov	r0, r9
 800f9bc:	f7f8 ff5e 	bl	800887c <GUI_ALLOC_LockH>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	4601      	mov	r1, r0
 800f9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9c6:	9303      	str	r3, [sp, #12]
 800f9c8:	0792      	lsls	r2, r2, #30
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	d5e4      	bpl.n	800f998 <WM__InitIVRSearch+0xd4>
 800f9ce:	e7eb      	b.n	800f9a8 <WM__InitIVRSearch+0xe4>
 800f9d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f9d2:	f013 0602 	ands.w	r6, r3, #2
 800f9d6:	d027      	beq.n	800fa28 <WM__InitIVRSearch+0x164>
 800f9d8:	c803      	ldmia	r0, {r0, r1}
 800f9da:	ae04      	add	r6, sp, #16
 800f9dc:	e886 0003 	stmia.w	r6, {r0, r1}
 800f9e0:	e799      	b.n	800f916 <WM__InitIVRSearch+0x52>
 800f9e2:	f7f8 ff5d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800f9e6:	4b1b      	ldr	r3, [pc, #108]	; (800fa54 <WM__InitIVRSearch+0x190>)
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	4297      	cmp	r7, r2
 800f9ec:	d002      	beq.n	800f9f4 <WM__InitIVRSearch+0x130>
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	429f      	cmp	r7, r3
 800f9f2:	d1d4      	bne.n	800f99e <WM__InitIVRSearch+0xda>
 800f9f4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f9f8:	4b17      	ldr	r3, [pc, #92]	; (800fa58 <WM__InitIVRSearch+0x194>)
 800f9fa:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9fe:	f7ff fe3b 	bl	800f678 <WM__GetNextIVR>
 800fa02:	e76e      	b.n	800f8e2 <WM__InitIVRSearch+0x1e>
 800fa04:	4640      	mov	r0, r8
 800fa06:	f7f8 ff4b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fa0a:	6838      	ldr	r0, [r7, #0]
 800fa0c:	f7f8 ff36 	bl	800887c <GUI_ALLOC_LockH>
 800fa10:	9002      	str	r0, [sp, #8]
 800fa12:	e796      	b.n	800f942 <WM__InitIVRSearch+0x7e>
 800fa14:	f7f8 ff44 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fa18:	4b0e      	ldr	r3, [pc, #56]	; (800fa54 <WM__InitIVRSearch+0x190>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	4591      	cmp	r9, r2
 800fa1e:	d0a5      	beq.n	800f96c <WM__InitIVRSearch+0xa8>
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	4599      	cmp	r9, r3
 800fa24:	d0a2      	beq.n	800f96c <WM__InitIVRSearch+0xa8>
 800fa26:	e7ba      	b.n	800f99e <WM__InitIVRSearch+0xda>
 800fa28:	6a2b      	ldr	r3, [r5, #32]
 800fa2a:	a801      	add	r0, sp, #4
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	622b      	str	r3, [r5, #32]
 800fa30:	f7f8 ff36 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fa34:	4630      	mov	r0, r6
 800fa36:	e754      	b.n	800f8e2 <WM__InitIVRSearch+0x1e>
 800fa38:	a801      	add	r0, sp, #4
 800fa3a:	f7f8 ff31 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fa3e:	4f04      	ldr	r7, [pc, #16]	; (800fa50 <WM__InitIVRSearch+0x18c>)
 800fa40:	e78d      	b.n	800f95e <WM__InitIVRSearch+0x9a>
 800fa42:	bf00      	nop
 800fa44:	2000007c 	.word	0x2000007c
 800fa48:	20000748 	.word	0x20000748
 800fa4c:	2003586c 	.word	0x2003586c
 800fa50:	20035844 	.word	0x20035844
 800fa54:	2003587c 	.word	0x2003587c
 800fa58:	20000754 	.word	0x20000754

0800fa5c <WM__Paint1>:
 800fa5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa60:	b089      	sub	sp, #36	; 0x24
 800fa62:	4606      	mov	r6, r0
 800fa64:	f7f8 ff0a 	bl	800887c <GUI_ALLOC_LockH>
 800fa68:	f100 0208 	add.w	r2, r0, #8
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa72:	ac02      	add	r4, sp, #8
 800fa74:	691f      	ldr	r7, [r3, #16]
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	e884 0003 	stmia.w	r4, {r0, r1}
 800fa7c:	a801      	add	r0, sp, #4
 800fa7e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800fa80:	f7f8 ff0e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fa84:	b10f      	cbz	r7, 800fa8a <WM__Paint1+0x2e>
 800fa86:	07ab      	lsls	r3, r5, #30
 800fa88:	d402      	bmi.n	800fa90 <WM__Paint1+0x34>
 800fa8a:	b009      	add	sp, #36	; 0x24
 800fa8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa90:	4f1e      	ldr	r7, [pc, #120]	; (800fb0c <WM__Paint1+0xb0>)
 800fa92:	212e      	movs	r1, #46	; 0x2e
 800fa94:	4630      	mov	r0, r6
 800fa96:	f000 fbf5 	bl	8010284 <WM_SendMessageNoPara>
 800fa9a:	783b      	ldrb	r3, [r7, #0]
 800fa9c:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800faa0:	f103 0301 	add.w	r3, r3, #1
 800faa4:	703b      	strb	r3, [r7, #0]
 800faa6:	d119      	bne.n	800fadc <WM__Paint1+0x80>
 800faa8:	4620      	mov	r0, r4
 800faaa:	f7ff ff0b 	bl	800f8c4 <WM__InitIVRSearch>
 800faae:	b318      	cbz	r0, 800faf8 <WM__Paint1+0x9c>
 800fab0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800fb10 <WM__Paint1+0xb4>
 800fab4:	f04f 080f 	mov.w	r8, #15
 800fab8:	9605      	str	r6, [sp, #20]
 800faba:	f8cd 8010 	str.w	r8, [sp, #16]
 800fabe:	9407      	str	r4, [sp, #28]
 800fac0:	f7f9 fb02 	bl	80090c8 <GL_SetDefault>
 800fac4:	f8d9 3000 	ldr.w	r3, [r9]
 800fac8:	a904      	add	r1, sp, #16
 800faca:	645d      	str	r5, [r3, #68]	; 0x44
 800facc:	4630      	mov	r0, r6
 800face:	f001 f94b 	bl	8010d68 <WM__SendMessage>
 800fad2:	f7ff fdd1 	bl	800f678 <WM__GetNextIVR>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d1ee      	bne.n	800fab8 <WM__Paint1+0x5c>
 800fada:	e00d      	b.n	800faf8 <WM__Paint1+0x9c>
 800fadc:	230f      	movs	r3, #15
 800fade:	9304      	str	r3, [sp, #16]
 800fae0:	9605      	str	r6, [sp, #20]
 800fae2:	9407      	str	r4, [sp, #28]
 800fae4:	f7f9 faf0 	bl	80090c8 <GL_SetDefault>
 800fae8:	4b09      	ldr	r3, [pc, #36]	; (800fb10 <WM__Paint1+0xb4>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2200      	movs	r2, #0
 800faee:	645a      	str	r2, [r3, #68]	; 0x44
 800faf0:	a904      	add	r1, sp, #16
 800faf2:	4630      	mov	r0, r6
 800faf4:	f001 f938 	bl	8010d68 <WM__SendMessage>
 800faf8:	783b      	ldrb	r3, [r7, #0]
 800fafa:	4630      	mov	r0, r6
 800fafc:	3b01      	subs	r3, #1
 800fafe:	212f      	movs	r1, #47	; 0x2f
 800fb00:	703b      	strb	r3, [r7, #0]
 800fb02:	f000 fbbf 	bl	8010284 <WM_SendMessageNoPara>
 800fb06:	b009      	add	sp, #36	; 0x24
 800fb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb0c:	2003586c 	.word	0x2003586c
 800fb10:	2000007c 	.word	0x2000007c

0800fb14 <WM_Exec>:
 800fb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb18:	b0ab      	sub	sp, #172	; 0xac
 800fb1a:	f7fa f9db 	bl	8009ed4 <GUI_Lock>
 800fb1e:	4b9b      	ldr	r3, [pc, #620]	; (800fd8c <WM_Exec+0x278>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <WM_Exec+0x12>
 800fb24:	4798      	blx	r3
 800fb26:	2300      	movs	r3, #0
 800fb28:	461c      	mov	r4, r3
 800fb2a:	e000      	b.n	800fb2e <WM_Exec+0x1a>
 800fb2c:	2401      	movs	r4, #1
 800fb2e:	f7ff fb73 	bl	800f218 <_Exec1Input>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d1fa      	bne.n	800fb2c <WM_Exec+0x18>
 800fb36:	f8df b264 	ldr.w	fp, [pc, #612]	; 800fd9c <WM_Exec+0x288>
 800fb3a:	9406      	str	r4, [sp, #24]
 800fb3c:	f8db 3000 	ldr.w	r3, [fp]
 800fb40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fb44:	b123      	cbz	r3, 800fb50 <WM_Exec+0x3c>
 800fb46:	4b92      	ldr	r3, [pc, #584]	; (800fd90 <WM_Exec+0x27c>)
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 809a 	bne.w	800fc84 <WM_Exec+0x170>
 800fb50:	9307      	str	r3, [sp, #28]
 800fb52:	f8df a250 	ldr.w	sl, [pc, #592]	; 800fda4 <WM_Exec+0x290>
 800fb56:	f7fa f9b3 	bl	8009ec0 <GUI_Unlock>
 800fb5a:	e021      	b.n	800fba0 <WM_Exec+0x8c>
 800fb5c:	aa0d      	add	r2, sp, #52	; 0x34
 800fb5e:	4b8d      	ldr	r3, [pc, #564]	; (800fd94 <WM_Exec+0x280>)
 800fb60:	9205      	str	r2, [sp, #20]
 800fb62:	4610      	mov	r0, r2
 800fb64:	681e      	ldr	r6, [r3, #0]
 800fb66:	f7f9 fa75 	bl	8009054 <GUI_SaveContext_W>
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb70:	9203      	str	r2, [sp, #12]
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	2e00      	cmp	r6, #0
 800fb76:	d132      	bne.n	800fbde <WM_Exec+0xca>
 800fb78:	4b87      	ldr	r3, [pc, #540]	; (800fd98 <WM_Exec+0x284>)
 800fb7a:	9803      	ldr	r0, [sp, #12]
 800fb7c:	609e      	str	r6, [r3, #8]
 800fb7e:	f7f9 fa97 	bl	80090b0 <GUI_SetColor>
 800fb82:	9804      	ldr	r0, [sp, #16]
 800fb84:	f7f9 fa88 	bl	8009098 <GUI_SetBkColor>
 800fb88:	9805      	ldr	r0, [sp, #20]
 800fb8a:	f7f9 fa6d 	bl	8009068 <GUI_RestoreContext>
 800fb8e:	f7fa f997 	bl	8009ec0 <GUI_Unlock>
 800fb92:	f8b8 3000 	ldrh.w	r3, [r8]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f000 80d2 	beq.w	800fd40 <WM_Exec+0x22c>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	9306      	str	r3, [sp, #24]
 800fba0:	f8db 3000 	ldr.w	r3, [fp]
 800fba4:	4c7d      	ldr	r4, [pc, #500]	; (800fd9c <WM_Exec+0x288>)
 800fba6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f000 80c8 	beq.w	800fd40 <WM_Exec+0x22c>
 800fbb0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800fd90 <WM_Exec+0x27c>
 800fbb4:	f8b8 3000 	ldrh.w	r3, [r8]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 80c1 	beq.w	800fd40 <WM_Exec+0x22c>
 800fbbe:	f7fa f989 	bl	8009ed4 <GUI_Lock>
 800fbc2:	4b75      	ldr	r3, [pc, #468]	; (800fd98 <WM_Exec+0x284>)
 800fbc4:	689e      	ldr	r6, [r3, #8]
 800fbc6:	2e00      	cmp	r6, #0
 800fbc8:	d0c8      	beq.n	800fb5c <WM_Exec+0x48>
 800fbca:	ab0d      	add	r3, sp, #52	; 0x34
 800fbcc:	4618      	mov	r0, r3
 800fbce:	9305      	str	r3, [sp, #20]
 800fbd0:	f7f9 fa40 	bl	8009054 <GUI_SaveContext_W>
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbda:	9203      	str	r2, [sp, #12]
 800fbdc:	9304      	str	r3, [sp, #16]
 800fbde:	ad0b      	add	r5, sp, #44	; 0x2c
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	9608      	str	r6, [sp, #32]
 800fbe4:	f7f8 fe4a 	bl	800887c <GUI_ALLOC_LockH>
 800fbe8:	f100 0208 	add.w	r2, r0, #8
 800fbec:	4603      	mov	r3, r0
 800fbee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf6:	e885 0003 	stmia.w	r5, {r0, r1}
 800fbfa:	a809      	add	r0, sp, #36	; 0x24
 800fbfc:	4617      	mov	r7, r2
 800fbfe:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800fc02:	691c      	ldr	r4, [r3, #16]
 800fc04:	9202      	str	r2, [sp, #8]
 800fc06:	f7f8 fe4b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fc0a:	f244 0320 	movw	r3, #16416	; 0x4020
 800fc0e:	403b      	ands	r3, r7
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d040      	beq.n	800fc96 <WM_Exec+0x182>
 800fc14:	b1d4      	cbz	r4, 800fc4c <WM_Exec+0x138>
 800fc16:	9c08      	ldr	r4, [sp, #32]
 800fc18:	e009      	b.n	800fc2e <WM_Exec+0x11a>
 800fc1a:	f7fa fa71 	bl	800a100 <GUI__IntersectRect>
 800fc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc20:	699f      	ldr	r7, [r3, #24]
 800fc22:	a80a      	add	r0, sp, #40	; 0x28
 800fc24:	2f00      	cmp	r7, #0
 800fc26:	d03d      	beq.n	800fca4 <WM_Exec+0x190>
 800fc28:	f7f8 fe3a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fc2c:	463c      	mov	r4, r7
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f7f8 fe24 	bl	800887c <GUI_ALLOC_LockH>
 800fc34:	4603      	mov	r3, r0
 800fc36:	4601      	mov	r1, r0
 800fc38:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800fc3a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc3c:	f017 0702 	ands.w	r7, r7, #2
 800fc40:	4628      	mov	r0, r5
 800fc42:	d1ea      	bne.n	800fc1a <WM_Exec+0x106>
 800fc44:	a80a      	add	r0, sp, #40	; 0x28
 800fc46:	f7f8 fe2b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fc4a:	463c      	mov	r4, r7
 800fc4c:	9808      	ldr	r0, [sp, #32]
 800fc4e:	f7f8 fe15 	bl	800887c <GUI_ALLOC_LockH>
 800fc52:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fc54:	9009      	str	r0, [sp, #36]	; 0x24
 800fc56:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800fc5a:	f023 0320 	bic.w	r3, r3, #32
 800fc5e:	0492      	lsls	r2, r2, #18
 800fc60:	bf48      	it	mi
 800fc62:	f043 0304 	orrmi.w	r3, r3, #4
 800fc66:	6283      	str	r3, [r0, #40]	; 0x28
 800fc68:	a809      	add	r0, sp, #36	; 0x24
 800fc6a:	f7f8 fe19 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fc6e:	f8b8 3000 	ldrh.w	r3, [r8]
 800fc72:	3b01      	subs	r3, #1
 800fc74:	f8a8 3000 	strh.w	r3, [r8]
 800fc78:	b16c      	cbz	r4, 800fc96 <WM_Exec+0x182>
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f7f8 fdf4 	bl	8008868 <GUI_ALLOC_h2p>
 800fc80:	6946      	ldr	r6, [r0, #20]
 800fc82:	e779      	b.n	800fb78 <WM_Exec+0x64>
 800fc84:	4b46      	ldr	r3, [pc, #280]	; (800fda0 <WM_Exec+0x28c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d071      	beq.n	800fd70 <WM_Exec+0x25c>
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4798      	blx	r3
 800fc90:	2301      	movs	r3, #1
 800fc92:	9307      	str	r3, [sp, #28]
 800fc94:	e75d      	b.n	800fb52 <WM_Exec+0x3e>
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7f8 fde6 	bl	8008868 <GUI_ALLOC_h2p>
 800fc9c:	6946      	ldr	r6, [r0, #20]
 800fc9e:	2e00      	cmp	r6, #0
 800fca0:	d19e      	bne.n	800fbe0 <WM_Exec+0xcc>
 800fca2:	e769      	b.n	800fb78 <WM_Exec+0x64>
 800fca4:	f7f8 fdfc 	bl	80088a0 <GUI_ALLOC_UnlockH>
 800fca8:	f8da 2000 	ldr.w	r2, [sl]
 800fcac:	42a2      	cmp	r2, r4
 800fcae:	d005      	beq.n	800fcbc <WM_Exec+0x1a8>
 800fcb0:	4b3c      	ldr	r3, [pc, #240]	; (800fda4 <WM_Exec+0x290>)
 800fcb2:	685a      	ldr	r2, [r3, #4]
 800fcb4:	4294      	cmp	r4, r2
 800fcb6:	d001      	beq.n	800fcbc <WM_Exec+0x1a8>
 800fcb8:	2400      	movs	r4, #0
 800fcba:	e7c7      	b.n	800fc4c <WM_Exec+0x138>
 800fcbc:	9c08      	ldr	r4, [sp, #32]
 800fcbe:	f7fa f909 	bl	8009ed4 <GUI_Lock>
 800fcc2:	f8db 3000 	ldr.w	r3, [fp]
 800fcc6:	b90c      	cbnz	r4, 800fccc <WM_Exec+0x1b8>
 800fcc8:	4a32      	ldr	r2, [pc, #200]	; (800fd94 <WM_Exec+0x280>)
 800fcca:	6814      	ldr	r4, [r2, #0]
 800fccc:	649c      	str	r4, [r3, #72]	; 0x48
 800fcce:	4627      	mov	r7, r4
 800fcd0:	e000      	b.n	800fcd4 <WM_Exec+0x1c0>
 800fcd2:	461f      	mov	r7, r3
 800fcd4:	4638      	mov	r0, r7
 800fcd6:	f7f8 fdc7 	bl	8008868 <GUI_ALLOC_h2p>
 800fcda:	6983      	ldr	r3, [r0, #24]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1f8      	bne.n	800fcd2 <WM_Exec+0x1be>
 800fce0:	f8da 1000 	ldr.w	r1, [sl]
 800fce4:	428f      	cmp	r7, r1
 800fce6:	d03d      	beq.n	800fd64 <WM_Exec+0x250>
 800fce8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fcec:	429f      	cmp	r7, r3
 800fcee:	d03d      	beq.n	800fd6c <WM_Exec+0x258>
 800fcf0:	f7fa ff12 	bl	800ab18 <LCD_SetClipRectMax>
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f7f8 fdb7 	bl	8008868 <GUI_ALLOC_h2p>
 800fcfa:	f8db 3000 	ldr.w	r3, [fp]
 800fcfe:	f9b0 1000 	ldrsh.w	r1, [r0]
 800fd02:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fd06:	651a      	str	r2, [r3, #80]	; 0x50
 800fd08:	64d9      	str	r1, [r3, #76]	; 0x4c
 800fd0a:	f7fa f8d9 	bl	8009ec0 <GUI_Unlock>
 800fd0e:	9a02      	ldr	r2, [sp, #8]
 800fd10:	0751      	lsls	r1, r2, #29
 800fd12:	d510      	bpl.n	800fd36 <WM_Exec+0x222>
 800fd14:	f1b9 0f00 	cmp.w	r9, #0
 800fd18:	d00b      	beq.n	800fd32 <WM_Exec+0x21e>
 800fd1a:	f002 0301 	and.w	r3, r2, #1
 800fd1e:	f083 0301 	eor.w	r3, r3, #1
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	aa08      	add	r2, sp, #32
 800fd26:	2300      	movs	r3, #0
 800fd28:	491f      	ldr	r1, [pc, #124]	; (800fda8 <WM_Exec+0x294>)
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f003 fab2 	bl	8013294 <GUI_MEMDEV_Draw>
 800fd30:	e7c2      	b.n	800fcb8 <WM_Exec+0x1a4>
 800fd32:	2301      	movs	r3, #1
 800fd34:	e7f5      	b.n	800fd22 <WM_Exec+0x20e>
 800fd36:	9808      	ldr	r0, [sp, #32]
 800fd38:	f7fe fb08 	bl	800e34c <WM__PaintWinAndOverlays>
 800fd3c:	2401      	movs	r4, #1
 800fd3e:	e785      	b.n	800fc4c <WM_Exec+0x138>
 800fd40:	f7fa f8c8 	bl	8009ed4 <GUI_Lock>
 800fd44:	9b07      	ldr	r3, [sp, #28]
 800fd46:	b13b      	cbz	r3, 800fd58 <WM_Exec+0x244>
 800fd48:	4b15      	ldr	r3, [pc, #84]	; (800fda0 <WM_Exec+0x28c>)
 800fd4a:	6818      	ldr	r0, [r3, #0]
 800fd4c:	b1b0      	cbz	r0, 800fd7c <WM_Exec+0x268>
 800fd4e:	6843      	ldr	r3, [r0, #4]
 800fd50:	4798      	blx	r3
 800fd52:	4b16      	ldr	r3, [pc, #88]	; (800fdac <WM_Exec+0x298>)
 800fd54:	2200      	movs	r2, #0
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	f7fa f8b2 	bl	8009ec0 <GUI_Unlock>
 800fd5c:	9806      	ldr	r0, [sp, #24]
 800fd5e:	b02b      	add	sp, #172	; 0xac
 800fd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fa f839 	bl	8009ddc <GUI_SelectLayer>
 800fd6a:	e7c1      	b.n	800fcf0 <WM_Exec+0x1dc>
 800fd6c:	2001      	movs	r0, #1
 800fd6e:	e7fa      	b.n	800fd66 <WM_Exec+0x252>
 800fd70:	2001      	movs	r0, #1
 800fd72:	f002 fed1 	bl	8012b18 <GUI__ManageCache>
 800fd76:	2301      	movs	r3, #1
 800fd78:	9307      	str	r3, [sp, #28]
 800fd7a:	e6ea      	b.n	800fb52 <WM_Exec+0x3e>
 800fd7c:	f002 fecc 	bl	8012b18 <GUI__ManageCache>
 800fd80:	f7fa f89e 	bl	8009ec0 <GUI_Unlock>
 800fd84:	9806      	ldr	r0, [sp, #24]
 800fd86:	b02b      	add	sp, #172	; 0xac
 800fd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8c:	20035860 	.word	0x20035860
 800fd90:	20035874 	.word	0x20035874
 800fd94:	20035834 	.word	0x20035834
 800fd98:	20000748 	.word	0x20000748
 800fd9c:	2000007c 	.word	0x2000007c
 800fda0:	20035850 	.word	0x20035850
 800fda4:	2003587c 	.word	0x2003587c
 800fda8:	0800e3ed 	.word	0x0800e3ed
 800fdac:	20035840 	.word	0x20035840

0800fdb0 <WM_Activate>:
 800fdb0:	4b02      	ldr	r3, [pc, #8]	; (800fdbc <WM_Activate+0xc>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800fdba:	4770      	bx	lr
 800fdbc:	2000007c 	.word	0x2000007c

0800fdc0 <WM_Deactivate>:
 800fdc0:	b508      	push	{r3, lr}
 800fdc2:	4b06      	ldr	r3, [pc, #24]	; (800fddc <WM_Deactivate+0x1c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800fdcc:	f7fa f882 	bl	8009ed4 <GUI_Lock>
 800fdd0:	f7fa fea2 	bl	800ab18 <LCD_SetClipRectMax>
 800fdd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fdd8:	f7fa b872 	b.w	8009ec0 <GUI_Unlock>
 800fddc:	2000007c 	.word	0x2000007c

0800fde0 <WM_DefaultProc>:
 800fde0:	6803      	ldr	r3, [r0, #0]
 800fde2:	3b0e      	subs	r3, #14
 800fde4:	b510      	push	{r4, lr}
 800fde6:	4604      	mov	r4, r0
 800fde8:	6840      	ldr	r0, [r0, #4]
 800fdea:	2b1a      	cmp	r3, #26
 800fdec:	d812      	bhi.n	800fe14 <WM_DefaultProc+0x34>
 800fdee:	e8df f003 	tbb	[pc, r3]
 800fdf2:	111b      	.short	0x111b
 800fdf4:	11111111 	.word	0x11111111
 800fdf8:	2011110e 	.word	0x2011110e
 800fdfc:	11111111 	.word	0x11111111
 800fe00:	11111111 	.word	0x11111111
 800fe04:	11221111 	.word	0x11221111
 800fe08:	11111111 	.word	0x11111111
 800fe0c:	14          	.byte	0x14
 800fe0d:	00          	.byte	0x00
 800fe0e:	68e1      	ldr	r1, [r4, #12]
 800fe10:	f001 f8a8 	bl	8010f64 <WM__GetClientRectEx>
 800fe14:	2300      	movs	r3, #0
 800fe16:	60e3      	str	r3, [r4, #12]
 800fe18:	bd10      	pop	{r4, pc}
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d0fc      	beq.n	800fe18 <WM_DefaultProc+0x38>
 800fe1e:	2100      	movs	r1, #0
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	f7ff b816 	b.w	800ee54 <WM_InvalidateRect.part.2>
 800fe28:	4621      	mov	r1, r4
 800fe2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe2e:	f000 ba37 	b.w	80102a0 <WM_SendToParent>
 800fe32:	60e0      	str	r0, [r4, #12]
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800fe3a:	60e3      	str	r3, [r4, #12]
 800fe3c:	bd10      	pop	{r4, pc}
 800fe3e:	bf00      	nop

0800fe40 <WM_Init>:
 800fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	4d45      	ldr	r5, [pc, #276]	; (800ff5c <WM_Init+0x11c>)
 800fe46:	782b      	ldrb	r3, [r5, #0]
 800fe48:	b085      	sub	sp, #20
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d17b      	bne.n	800ff46 <WM_Init+0x106>
 800fe4e:	4f44      	ldr	r7, [pc, #272]	; (800ff60 <WM_Init+0x120>)
 800fe50:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800ff94 <WM_Init+0x154>
 800fe54:	6838      	ldr	r0, [r7, #0]
 800fe56:	4943      	ldr	r1, [pc, #268]	; (800ff64 <WM_Init+0x124>)
 800fe58:	4a43      	ldr	r2, [pc, #268]	; (800ff68 <WM_Init+0x128>)
 800fe5a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800ff88 <WM_Init+0x148>
 800fe5e:	f8df a138 	ldr.w	sl, [pc, #312]	; 800ff98 <WM_Init+0x158>
 800fe62:	4e42      	ldr	r6, [pc, #264]	; (800ff6c <WM_Init+0x12c>)
 800fe64:	60ab      	str	r3, [r5, #8]
 800fe66:	6443      	str	r3, [r0, #68]	; 0x44
 800fe68:	461c      	mov	r4, r3
 800fe6a:	f8c9 3000 	str.w	r3, [r9]
 800fe6e:	800b      	strh	r3, [r1, #0]
 800fe70:	8013      	strh	r3, [r2, #0]
 800fe72:	469b      	mov	fp, r3
 800fe74:	4620      	mov	r0, r4
 800fe76:	f7f9 fb37 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 800fe7a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800fe7e:	2100      	movs	r1, #0
 800fe80:	f04f 0c02 	mov.w	ip, #2
 800fe84:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800fe88:	461a      	mov	r2, r3
 800fe8a:	b190      	cbz	r0, 800feb2 <WM_Init+0x72>
 800fe8c:	f8cd b00c 	str.w	fp, [sp, #12]
 800fe90:	f8cd a008 	str.w	sl, [sp, #8]
 800fe94:	f8cd c004 	str.w	ip, [sp, #4]
 800fe98:	f8cd e000 	str.w	lr, [sp]
 800fe9c:	4608      	mov	r0, r1
 800fe9e:	f7ff fafd 	bl	800f49c <WM_CreateWindowAsChild>
 800fea2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800fea6:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 800feaa:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 800feae:	2800      	cmp	r0, #0
 800feb0:	d150      	bne.n	800ff54 <WM_Init+0x114>
 800feb2:	3401      	adds	r4, #1
 800feb4:	2c02      	cmp	r4, #2
 800feb6:	d1dd      	bne.n	800fe74 <WM_Init+0x34>
 800feb8:	482d      	ldr	r0, [pc, #180]	; (800ff70 <WM_Init+0x130>)
 800feba:	f001 f82b 	bl	8010f14 <WM__AddCriticalHandle>
 800febe:	482d      	ldr	r0, [pc, #180]	; (800ff74 <WM_Init+0x134>)
 800fec0:	f001 f828 	bl	8010f14 <WM__AddCriticalHandle>
 800fec4:	482c      	ldr	r0, [pc, #176]	; (800ff78 <WM_Init+0x138>)
 800fec6:	f001 f825 	bl	8010f14 <WM__AddCriticalHandle>
 800feca:	482c      	ldr	r0, [pc, #176]	; (800ff7c <WM_Init+0x13c>)
 800fecc:	f001 f822 	bl	8010f14 <WM__AddCriticalHandle>
 800fed0:	482b      	ldr	r0, [pc, #172]	; (800ff80 <WM_Init+0x140>)
 800fed2:	f001 f81f 	bl	8010f14 <WM__AddCriticalHandle>
 800fed6:	482b      	ldr	r0, [pc, #172]	; (800ff84 <WM_Init+0x144>)
 800fed8:	f001 f81c 	bl	8010f14 <WM__AddCriticalHandle>
 800fedc:	f8d8 6000 	ldr.w	r6, [r8]
 800fee0:	f7f9 fff8 	bl	8009ed4 <GUI_Lock>
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	b90e      	cbnz	r6, 800feec <WM_Init+0xac>
 800fee8:	f8d9 6000 	ldr.w	r6, [r9]
 800feec:	649e      	str	r6, [r3, #72]	; 0x48
 800feee:	4634      	mov	r4, r6
 800fef0:	e000      	b.n	800fef4 <WM_Init+0xb4>
 800fef2:	4604      	mov	r4, r0
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7f8 fcb7 	bl	8008868 <GUI_ALLOC_h2p>
 800fefa:	6980      	ldr	r0, [r0, #24]
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d1f8      	bne.n	800fef2 <WM_Init+0xb2>
 800ff00:	f8d8 3000 	ldr.w	r3, [r8]
 800ff04:	4a20      	ldr	r2, [pc, #128]	; (800ff88 <WM_Init+0x148>)
 800ff06:	429c      	cmp	r4, r3
 800ff08:	d021      	beq.n	800ff4e <WM_Init+0x10e>
 800ff0a:	6853      	ldr	r3, [r2, #4]
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	d01d      	beq.n	800ff4c <WM_Init+0x10c>
 800ff10:	f7fa fe02 	bl	800ab18 <LCD_SetClipRectMax>
 800ff14:	4630      	mov	r0, r6
 800ff16:	f7f8 fca7 	bl	8008868 <GUI_ALLOC_h2p>
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	f9b0 1000 	ldrsh.w	r1, [r0]
 800ff20:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ff24:	651a      	str	r2, [r3, #80]	; 0x50
 800ff26:	64d9      	str	r1, [r3, #76]	; 0x4c
 800ff28:	f7f9 ffca 	bl	8009ec0 <GUI_Unlock>
 800ff2c:	683a      	ldr	r2, [r7, #0]
 800ff2e:	4b17      	ldr	r3, [pc, #92]	; (800ff8c <WM_Init+0x14c>)
 800ff30:	4817      	ldr	r0, [pc, #92]	; (800ff90 <WM_Init+0x150>)
 800ff32:	626b      	str	r3, [r5, #36]	; 0x24
 800ff34:	2301      	movs	r3, #1
 800ff36:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 800ff3a:	702b      	strb	r3, [r5, #0]
 800ff3c:	b005      	add	sp, #20
 800ff3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff42:	f7f9 baab 	b.w	800949c <GUI__RegisterExit>
 800ff46:	b005      	add	sp, #20
 800ff48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4c:	2001      	movs	r0, #1
 800ff4e:	f7f9 ff45 	bl	8009ddc <GUI_SelectLayer>
 800ff52:	e7dd      	b.n	800ff10 <WM_Init+0xd0>
 800ff54:	2100      	movs	r1, #0
 800ff56:	f7fe ff7d 	bl	800ee54 <WM_InvalidateRect.part.2>
 800ff5a:	e7aa      	b.n	800feb2 <WM_Init+0x72>
 800ff5c:	20000748 	.word	0x20000748
 800ff60:	2000007c 	.word	0x2000007c
 800ff64:	20035874 	.word	0x20035874
 800ff68:	2003583c 	.word	0x2003583c
 800ff6c:	2003582c 	.word	0x2003582c
 800ff70:	20035894 	.word	0x20035894
 800ff74:	200358a4 	.word	0x200358a4
 800ff78:	20035884 	.word	0x20035884
 800ff7c:	2003589c 	.word	0x2003589c
 800ff80:	200358ac 	.word	0x200358ac
 800ff84:	2003588c 	.word	0x2003588c
 800ff88:	2003587c 	.word	0x2003587c
 800ff8c:	0800ddd5 	.word	0x0800ddd5
 800ff90:	2000076c 	.word	0x2000076c
 800ff94:	20035834 	.word	0x20035834
 800ff98:	0800ef31 	.word	0x0800ef31

0800ff9c <WM_ResizeWindow.part.11>:
 800ff9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa0:	4606      	mov	r6, r0
 800ffa2:	b08a      	sub	sp, #40	; 0x28
 800ffa4:	4688      	mov	r8, r1
 800ffa6:	4617      	mov	r7, r2
 800ffa8:	f7f9 ff94 	bl	8009ed4 <GUI_Lock>
 800ffac:	4630      	mov	r0, r6
 800ffae:	f7f8 fc65 	bl	800887c <GUI_ALLOC_LockH>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	c803      	ldmia	r0, {r0, r1}
 800ffb6:	ac04      	add	r4, sp, #16
 800ffb8:	ad06      	add	r5, sp, #24
 800ffba:	e884 0003 	stmia.w	r4, {r0, r1}
 800ffbe:	9303      	str	r3, [sp, #12]
 800ffc0:	e885 0003 	stmia.w	r5, {r0, r1}
 800ffc4:	f1b8 0f00 	cmp.w	r8, #0
 800ffc8:	d009      	beq.n	800ffde <WM_ResizeWindow.part.11+0x42>
 800ffca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffcc:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800ffd0:	2a80      	cmp	r2, #128	; 0x80
 800ffd2:	d057      	beq.n	8010084 <WM_ResizeWindow.part.11+0xe8>
 800ffd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ffd8:	4490      	add	r8, r2
 800ffda:	f8ad 801c 	strh.w	r8, [sp, #28]
 800ffde:	b157      	cbz	r7, 800fff6 <WM_ResizeWindow.part.11+0x5a>
 800ffe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffe2:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800ffe6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ffea:	d052      	beq.n	8010092 <WM_ResizeWindow.part.11+0xf6>
 800ffec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fff0:	4417      	add	r7, r2
 800fff2:	f8ad 701e 	strh.w	r7, [sp, #30]
 800fff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fff8:	03d1      	lsls	r1, r2, #15
 800fffa:	d43d      	bmi.n	8010078 <WM_ResizeWindow.part.11+0xdc>
 800fffc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010000:	0792      	lsls	r2, r2, #30
 8010002:	e883 0003 	stmia.w	r3, {r0, r1}
 8010006:	d50b      	bpl.n	8010020 <WM_ResizeWindow.part.11+0x84>
 8010008:	462a      	mov	r2, r5
 801000a:	4621      	mov	r1, r4
 801000c:	a808      	add	r0, sp, #32
 801000e:	f7f8 ff23 	bl	8008e58 <GUI_MergeRect>
 8010012:	9b03      	ldr	r3, [sp, #12]
 8010014:	a808      	add	r0, sp, #32
 8010016:	6a1a      	ldr	r2, [r3, #32]
 8010018:	6999      	ldr	r1, [r3, #24]
 801001a:	f7ff f9bf 	bl	800f39c <WM__InvalidateRectEx>
 801001e:	9b03      	ldr	r3, [sp, #12]
 8010020:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 8010024:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8010028:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 801002c:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 8010030:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 8010034:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8010038:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 801003c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010040:	1b04      	subs	r4, r0, r4
 8010042:	9400      	str	r4, [sp, #0]
 8010044:	ac0a      	add	r4, sp, #40	; 0x28
 8010046:	1aba      	subs	r2, r7, r2
 8010048:	4618      	mov	r0, r3
 801004a:	1a69      	subs	r1, r5, r1
 801004c:	ebce 030c 	rsb	r3, lr, ip
 8010050:	f000 fee0 	bl	8010e14 <WM__UpdateChildPositions>
 8010054:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8010058:	f101 0008 	add.w	r0, r1, #8
 801005c:	f7fa f850 	bl	800a100 <GUI__IntersectRect>
 8010060:	2105      	movs	r1, #5
 8010062:	4630      	mov	r0, r6
 8010064:	f7ff fa00 	bl	800f468 <WM__SendMsgNoData>
 8010068:	4620      	mov	r0, r4
 801006a:	f7f8 fc19 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801006e:	f7f9 ff27 	bl	8009ec0 <GUI_Unlock>
 8010072:	b00a      	add	sp, #40	; 0x28
 8010074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010078:	4630      	mov	r0, r6
 801007a:	f7fe fb7f 	bl	800e77c <WM__InvalidateDrawAndDescs>
 801007e:	9b03      	ldr	r3, [sp, #12]
 8010080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010082:	e7bb      	b.n	800fffc <WM_ResizeWindow.part.11+0x60>
 8010084:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8010088:	ebc8 0802 	rsb	r8, r8, r2
 801008c:	f8ad 8018 	strh.w	r8, [sp, #24]
 8010090:	e7a5      	b.n	800ffde <WM_ResizeWindow.part.11+0x42>
 8010092:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010096:	1bd7      	subs	r7, r2, r7
 8010098:	f8ad 701a 	strh.w	r7, [sp, #26]
 801009c:	e7ab      	b.n	800fff6 <WM_ResizeWindow.part.11+0x5a>
 801009e:	bf00      	nop

080100a0 <WM_GetDesktopWindow>:
 80100a0:	4a03      	ldr	r2, [pc, #12]	; (80100b0 <WM_GetDesktopWindow+0x10>)
 80100a2:	4b04      	ldr	r3, [pc, #16]	; (80100b4 <WM_GetDesktopWindow+0x14>)
 80100a4:	6812      	ldr	r2, [r2, #0]
 80100a6:	7c52      	ldrb	r2, [r2, #17]
 80100a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	2000007c 	.word	0x2000007c
 80100b4:	2003587c 	.word	0x2003587c

080100b8 <WM_GetDesktopWindowEx>:
 80100b8:	2801      	cmp	r0, #1
 80100ba:	bf9a      	itte	ls
 80100bc:	4b02      	ldrls	r3, [pc, #8]	; (80100c8 <WM_GetDesktopWindowEx+0x10>)
 80100be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80100c2:	2000      	movhi	r0, #0
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	2003587c 	.word	0x2003587c

080100cc <WM_BringToBottom>:
 80100cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100d0:	4604      	mov	r4, r0
 80100d2:	b087      	sub	sp, #28
 80100d4:	f7f9 fefe 	bl	8009ed4 <GUI_Lock>
 80100d8:	b924      	cbnz	r4, 80100e4 <WM_BringToBottom+0x18>
 80100da:	f7f9 fef1 	bl	8009ec0 <GUI_Unlock>
 80100de:	b007      	add	sp, #28
 80100e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7f8 fbc9 	bl	800887c <GUI_ALLOC_LockH>
 80100ea:	4603      	mov	r3, r0
 80100ec:	c803      	ldmia	r0, {r0, r1}
 80100ee:	ad04      	add	r5, sp, #16
 80100f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80100f4:	a801      	add	r0, sp, #4
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	6a1f      	ldr	r7, [r3, #32]
 80100fa:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 80100fe:	f7f8 fbcf 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010102:	4620      	mov	r0, r4
 8010104:	f000 fdf8 	bl	8010cf8 <WM__GetPrevSibling>
 8010108:	4606      	mov	r6, r0
 801010a:	2800      	cmp	r0, #0
 801010c:	d0e5      	beq.n	80100da <WM_BringToBottom+0xe>
 801010e:	f7f9 fee1 	bl	8009ed4 <GUI_Lock>
 8010112:	4620      	mov	r0, r4
 8010114:	f7f8 fba8 	bl	8008868 <GUI_ALLOC_h2p>
 8010118:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801011c:	f7f9 fed0 	bl	8009ec0 <GUI_Unlock>
 8010120:	f018 0f02 	tst.w	r8, #2
 8010124:	d120      	bne.n	8010168 <WM_BringToBottom+0x9c>
 8010126:	4620      	mov	r0, r4
 8010128:	f7f8 fba8 	bl	800887c <GUI_ALLOC_LockH>
 801012c:	9001      	str	r0, [sp, #4]
 801012e:	4648      	mov	r0, r9
 8010130:	f7f8 fba4 	bl	800887c <GUI_ALLOC_LockH>
 8010134:	9003      	str	r0, [sp, #12]
 8010136:	4630      	mov	r0, r6
 8010138:	f7f8 fba0 	bl	800887c <GUI_ALLOC_LockH>
 801013c:	9a03      	ldr	r2, [sp, #12]
 801013e:	9901      	ldr	r1, [sp, #4]
 8010140:	69d5      	ldr	r5, [r2, #28]
 8010142:	6207      	str	r7, [r0, #32]
 8010144:	4603      	mov	r3, r0
 8010146:	620d      	str	r5, [r1, #32]
 8010148:	a801      	add	r0, sp, #4
 801014a:	61d4      	str	r4, [r2, #28]
 801014c:	9302      	str	r3, [sp, #8]
 801014e:	f7f8 fba7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010152:	a803      	add	r0, sp, #12
 8010154:	f7f8 fba4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010158:	a802      	add	r0, sp, #8
 801015a:	f7f8 fba1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801015e:	f7f9 feaf 	bl	8009ec0 <GUI_Unlock>
 8010162:	b007      	add	sp, #28
 8010164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010168:	4628      	mov	r0, r5
 801016a:	463a      	mov	r2, r7
 801016c:	4649      	mov	r1, r9
 801016e:	f7ff f915 	bl	800f39c <WM__InvalidateRectEx>
 8010172:	e7d8      	b.n	8010126 <WM_BringToBottom+0x5a>

08010174 <WM_GetFirstChild>:
 8010174:	b510      	push	{r4, lr}
 8010176:	4604      	mov	r4, r0
 8010178:	b138      	cbz	r0, 801018a <WM_GetFirstChild+0x16>
 801017a:	f7f9 feab 	bl	8009ed4 <GUI_Lock>
 801017e:	4620      	mov	r0, r4
 8010180:	f7f8 fb72 	bl	8008868 <GUI_ALLOC_h2p>
 8010184:	69c4      	ldr	r4, [r0, #28]
 8010186:	f7f9 fe9b 	bl	8009ec0 <GUI_Unlock>
 801018a:	4620      	mov	r0, r4
 801018c:	bd10      	pop	{r4, pc}
 801018e:	bf00      	nop

08010190 <WM_GetWindowOrgX>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4604      	mov	r4, r0
 8010194:	b140      	cbz	r0, 80101a8 <WM_GetWindowOrgX+0x18>
 8010196:	f7f9 fe9d 	bl	8009ed4 <GUI_Lock>
 801019a:	4620      	mov	r0, r4
 801019c:	f7f8 fb64 	bl	8008868 <GUI_ALLOC_h2p>
 80101a0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80101a4:	f7f9 fe8c 	bl	8009ec0 <GUI_Unlock>
 80101a8:	4620      	mov	r0, r4
 80101aa:	bd10      	pop	{r4, pc}

080101ac <WM_GetParent>:
 80101ac:	b510      	push	{r4, lr}
 80101ae:	4604      	mov	r4, r0
 80101b0:	b138      	cbz	r0, 80101c2 <WM_GetParent+0x16>
 80101b2:	f7f9 fe8f 	bl	8009ed4 <GUI_Lock>
 80101b6:	4620      	mov	r0, r4
 80101b8:	f7f8 fb56 	bl	8008868 <GUI_ALLOC_h2p>
 80101bc:	6984      	ldr	r4, [r0, #24]
 80101be:	f7f9 fe7f 	bl	8009ec0 <GUI_Unlock>
 80101c2:	4620      	mov	r0, r4
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	bf00      	nop

080101c8 <WM_IsWindow>:
 80101c8:	b510      	push	{r4, lr}
 80101ca:	4604      	mov	r4, r0
 80101cc:	f7f9 fe82 	bl	8009ed4 <GUI_Lock>
 80101d0:	4620      	mov	r0, r4
 80101d2:	f7fe fabb 	bl	800e74c <WM__IsWindow>
 80101d6:	4604      	mov	r4, r0
 80101d8:	f7f9 fe72 	bl	8009ec0 <GUI_Unlock>
 80101dc:	4620      	mov	r0, r4
 80101de:	bd10      	pop	{r4, pc}

080101e0 <WM_NotifyParent>:
 80101e0:	b530      	push	{r4, r5, lr}
 80101e2:	b085      	sub	sp, #20
 80101e4:	4604      	mov	r4, r0
 80101e6:	2326      	movs	r3, #38	; 0x26
 80101e8:	9103      	str	r1, [sp, #12]
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	f7f9 fe72 	bl	8009ed4 <GUI_Lock>
 80101f0:	b91c      	cbnz	r4, 80101fa <WM_NotifyParent+0x1a>
 80101f2:	f7f9 fe65 	bl	8009ec0 <GUI_Unlock>
 80101f6:	b005      	add	sp, #20
 80101f8:	bd30      	pop	{r4, r5, pc}
 80101fa:	f7f9 fe6b 	bl	8009ed4 <GUI_Lock>
 80101fe:	4620      	mov	r0, r4
 8010200:	f7f8 fb32 	bl	8008868 <GUI_ALLOC_h2p>
 8010204:	6985      	ldr	r5, [r0, #24]
 8010206:	f7f9 fe5b 	bl	8009ec0 <GUI_Unlock>
 801020a:	2d00      	cmp	r5, #0
 801020c:	d0f1      	beq.n	80101f2 <WM_NotifyParent+0x12>
 801020e:	4628      	mov	r0, r5
 8010210:	4669      	mov	r1, sp
 8010212:	9402      	str	r4, [sp, #8]
 8010214:	f000 fda8 	bl	8010d68 <WM__SendMessage>
 8010218:	f7f9 fe52 	bl	8009ec0 <GUI_Unlock>
 801021c:	b005      	add	sp, #20
 801021e:	bd30      	pop	{r4, r5, pc}

08010220 <WM_OnKey>:
 8010220:	b530      	push	{r4, r5, lr}
 8010222:	b087      	sub	sp, #28
 8010224:	4605      	mov	r5, r0
 8010226:	460c      	mov	r4, r1
 8010228:	f7f9 fe54 	bl	8009ed4 <GUI_Lock>
 801022c:	4a0d      	ldr	r2, [pc, #52]	; (8010264 <WM_OnKey+0x44>)
 801022e:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <WM_OnKey+0x48>)
 8010230:	6812      	ldr	r2, [r2, #0]
 8010232:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010236:	b928      	cbnz	r0, 8010244 <WM_OnKey+0x24>
 8010238:	4604      	mov	r4, r0
 801023a:	f7f9 fe41 	bl	8009ec0 <GUI_Unlock>
 801023e:	4620      	mov	r0, r4
 8010240:	b007      	add	sp, #28
 8010242:	bd30      	pop	{r4, r5, pc}
 8010244:	230e      	movs	r3, #14
 8010246:	a902      	add	r1, sp, #8
 8010248:	9401      	str	r4, [sp, #4]
 801024a:	9302      	str	r3, [sp, #8]
 801024c:	9500      	str	r5, [sp, #0]
 801024e:	f8cd d014 	str.w	sp, [sp, #20]
 8010252:	f000 fd89 	bl	8010d68 <WM__SendMessage>
 8010256:	f7f9 fe33 	bl	8009ec0 <GUI_Unlock>
 801025a:	2401      	movs	r4, #1
 801025c:	4620      	mov	r0, r4
 801025e:	b007      	add	sp, #28
 8010260:	bd30      	pop	{r4, r5, pc}
 8010262:	bf00      	nop
 8010264:	20035848 	.word	0x20035848
 8010268:	20035864 	.word	0x20035864

0801026c <WM_ResizeWindow>:
 801026c:	b500      	push	{lr}
 801026e:	ea51 0e02 	orrs.w	lr, r1, r2
 8010272:	d000      	beq.n	8010276 <WM_ResizeWindow+0xa>
 8010274:	b908      	cbnz	r0, 801027a <WM_ResizeWindow+0xe>
 8010276:	f85d fb04 	ldr.w	pc, [sp], #4
 801027a:	f85d eb04 	ldr.w	lr, [sp], #4
 801027e:	f7ff be8d 	b.w	800ff9c <WM_ResizeWindow.part.11>
 8010282:	bf00      	nop

08010284 <WM_SendMessageNoPara>:
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	4604      	mov	r4, r0
 8010288:	460d      	mov	r5, r1
 801028a:	f7f9 fe23 	bl	8009ed4 <GUI_Lock>
 801028e:	4629      	mov	r1, r5
 8010290:	4620      	mov	r0, r4
 8010292:	f000 fdab 	bl	8010dec <WM__SendMessageNoPara>
 8010296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801029a:	f7f9 be11 	b.w	8009ec0 <GUI_Unlock>
 801029e:	bf00      	nop

080102a0 <WM_SendToParent>:
 80102a0:	b1e1      	cbz	r1, 80102dc <WM_SendToParent+0x3c>
 80102a2:	b570      	push	{r4, r5, r6, lr}
 80102a4:	4605      	mov	r5, r0
 80102a6:	460c      	mov	r4, r1
 80102a8:	f7f9 fe14 	bl	8009ed4 <GUI_Lock>
 80102ac:	b91d      	cbnz	r5, 80102b6 <WM_SendToParent+0x16>
 80102ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102b2:	f7f9 be05 	b.w	8009ec0 <GUI_Unlock>
 80102b6:	f7f9 fe0d 	bl	8009ed4 <GUI_Lock>
 80102ba:	4628      	mov	r0, r5
 80102bc:	f7f8 fad4 	bl	8008868 <GUI_ALLOC_h2p>
 80102c0:	6986      	ldr	r6, [r0, #24]
 80102c2:	f7f9 fdfd 	bl	8009ec0 <GUI_Unlock>
 80102c6:	2e00      	cmp	r6, #0
 80102c8:	d0f1      	beq.n	80102ae <WM_SendToParent+0xe>
 80102ca:	60a5      	str	r5, [r4, #8]
 80102cc:	4621      	mov	r1, r4
 80102ce:	4630      	mov	r0, r6
 80102d0:	f000 fd4a 	bl	8010d68 <WM__SendMessage>
 80102d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102d8:	f7f9 bdf2 	b.w	8009ec0 <GUI_Unlock>
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop

080102e0 <WM_SetSize>:
 80102e0:	b900      	cbnz	r0, 80102e4 <WM_SetSize+0x4>
 80102e2:	4770      	bx	lr
 80102e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e8:	4604      	mov	r4, r0
 80102ea:	b082      	sub	sp, #8
 80102ec:	4617      	mov	r7, r2
 80102ee:	4688      	mov	r8, r1
 80102f0:	f7f9 fdf0 	bl	8009ed4 <GUI_Lock>
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7f8 fac1 	bl	800887c <GUI_ALLOC_LockH>
 80102fa:	f10d 0e08 	add.w	lr, sp, #8
 80102fe:	f9b0 1000 	ldrsh.w	r1, [r0]
 8010302:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8010306:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801030a:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801030e:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8010312:	1a76      	subs	r6, r6, r1
 8010314:	1aeb      	subs	r3, r5, r3
 8010316:	3301      	adds	r3, #1
 8010318:	1c75      	adds	r5, r6, #1
 801031a:	ebc5 0508 	rsb	r5, r5, r8
 801031e:	1afe      	subs	r6, r7, r3
 8010320:	4670      	mov	r0, lr
 8010322:	f7f8 fabd 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010326:	ea55 0306 	orrs.w	r3, r5, r6
 801032a:	d104      	bne.n	8010336 <WM_SetSize+0x56>
 801032c:	f7f9 fdc8 	bl	8009ec0 <GUI_Unlock>
 8010330:	b002      	add	sp, #8
 8010332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010336:	4632      	mov	r2, r6
 8010338:	4629      	mov	r1, r5
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff fe2e 	bl	800ff9c <WM_ResizeWindow.part.11>
 8010340:	e7f4      	b.n	801032c <WM_SetSize+0x4c>
 8010342:	bf00      	nop

08010344 <_MULTIBUF_End>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	4d0a      	ldr	r5, [pc, #40]	; (8010370 <_MULTIBUF_End+0x2c>)
 8010348:	4e0a      	ldr	r6, [pc, #40]	; (8010374 <_MULTIBUF_End+0x30>)
 801034a:	2400      	movs	r4, #0
 801034c:	682a      	ldr	r2, [r5, #0]
 801034e:	6833      	ldr	r3, [r6, #0]
 8010350:	4620      	mov	r0, r4
 8010352:	b932      	cbnz	r2, 8010362 <_MULTIBUF_End+0x1e>
 8010354:	40e3      	lsrs	r3, r4
 8010356:	07db      	lsls	r3, r3, #31
 8010358:	d407      	bmi.n	801036a <_MULTIBUF_End+0x26>
 801035a:	3401      	adds	r4, #1
 801035c:	2c02      	cmp	r4, #2
 801035e:	d1f5      	bne.n	801034c <_MULTIBUF_End+0x8>
 8010360:	bd70      	pop	{r4, r5, r6, pc}
 8010362:	4013      	ands	r3, r2
 8010364:	40e3      	lsrs	r3, r4
 8010366:	07da      	lsls	r2, r3, #31
 8010368:	d5f7      	bpl.n	801035a <_MULTIBUF_End+0x16>
 801036a:	f7f9 fc87 	bl	8009c7c <GUI_MULTIBUF_EndEx>
 801036e:	e7f4      	b.n	801035a <_MULTIBUF_End+0x16>
 8010370:	20035814 	.word	0x20035814
 8010374:	20035840 	.word	0x20035840

08010378 <_MULTIBUF_Begin>:
 8010378:	b570      	push	{r4, r5, r6, lr}
 801037a:	4d0a      	ldr	r5, [pc, #40]	; (80103a4 <_MULTIBUF_Begin+0x2c>)
 801037c:	4e0a      	ldr	r6, [pc, #40]	; (80103a8 <_MULTIBUF_Begin+0x30>)
 801037e:	2400      	movs	r4, #0
 8010380:	682a      	ldr	r2, [r5, #0]
 8010382:	6833      	ldr	r3, [r6, #0]
 8010384:	4620      	mov	r0, r4
 8010386:	b932      	cbnz	r2, 8010396 <_MULTIBUF_Begin+0x1e>
 8010388:	40e3      	lsrs	r3, r4
 801038a:	07db      	lsls	r3, r3, #31
 801038c:	d407      	bmi.n	801039e <_MULTIBUF_Begin+0x26>
 801038e:	3401      	adds	r4, #1
 8010390:	2c02      	cmp	r4, #2
 8010392:	d1f5      	bne.n	8010380 <_MULTIBUF_Begin+0x8>
 8010394:	bd70      	pop	{r4, r5, r6, pc}
 8010396:	4013      	ands	r3, r2
 8010398:	40e3      	lsrs	r3, r4
 801039a:	07da      	lsls	r2, r3, #31
 801039c:	d5f7      	bpl.n	801038e <_MULTIBUF_Begin+0x16>
 801039e:	f7f9 fc37 	bl	8009c10 <GUI_MULTIBUF_BeginEx>
 80103a2:	e7f4      	b.n	801038e <_MULTIBUF_Begin+0x16>
 80103a4:	20035814 	.word	0x20035814
 80103a8:	20035840 	.word	0x20035840

080103ac <WM_MULTIBUF_Enable>:
 80103ac:	4a05      	ldr	r2, [pc, #20]	; (80103c4 <WM_MULTIBUF_Enable+0x18>)
 80103ae:	4b06      	ldr	r3, [pc, #24]	; (80103c8 <WM_MULTIBUF_Enable+0x1c>)
 80103b0:	6811      	ldr	r1, [r2, #0]
 80103b2:	2800      	cmp	r0, #0
 80103b4:	bf08      	it	eq
 80103b6:	2300      	moveq	r3, #0
 80103b8:	1c08      	adds	r0, r1, #0
 80103ba:	6013      	str	r3, [r2, #0]
 80103bc:	bf18      	it	ne
 80103be:	2001      	movne	r0, #1
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	20035850 	.word	0x20035850
 80103c8:	0801a408 	.word	0x0801a408

080103cc <_MoveDescendents>:
 80103cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d0:	b0b5      	sub	sp, #212	; 0xd4
 80103d2:	2300      	movs	r3, #0
 80103d4:	931d      	str	r3, [sp, #116]	; 0x74
 80103d6:	931c      	str	r3, [sp, #112]	; 0x70
 80103d8:	931e      	str	r3, [sp, #120]	; 0x78
 80103da:	931f      	str	r3, [sp, #124]	; 0x7c
 80103dc:	9006      	str	r0, [sp, #24]
 80103de:	2800      	cmp	r0, #0
 80103e0:	f000 8117 	beq.w	8010612 <_MoveDescendents+0x246>
 80103e4:	468a      	mov	sl, r1
 80103e6:	4691      	mov	r9, r2
 80103e8:	f04f 0b03 	mov.w	fp, #3
 80103ec:	9806      	ldr	r0, [sp, #24]
 80103ee:	f7f8 fa45 	bl	800887c <GUI_ALLOC_LockH>
 80103f2:	464a      	mov	r2, r9
 80103f4:	4651      	mov	r1, sl
 80103f6:	900a      	str	r0, [sp, #40]	; 0x28
 80103f8:	f7f8 fd5c 	bl	8008eb4 <GUI_MoveRect>
 80103fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80103fe:	464a      	mov	r2, r9
 8010400:	3008      	adds	r0, #8
 8010402:	4651      	mov	r1, sl
 8010404:	f7f8 fd56 	bl	8008eb4 <GUI_MoveRect>
 8010408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801040a:	69da      	ldr	r2, [r3, #28]
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	9307      	str	r3, [sp, #28]
 8010410:	a80a      	add	r0, sp, #40	; 0x28
 8010412:	4614      	mov	r4, r2
 8010414:	9205      	str	r2, [sp, #20]
 8010416:	f7f8 fa43 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801041a:	2300      	movs	r3, #0
 801041c:	9320      	str	r3, [sp, #128]	; 0x80
 801041e:	9321      	str	r3, [sp, #132]	; 0x84
 8010420:	9322      	str	r3, [sp, #136]	; 0x88
 8010422:	9323      	str	r3, [sp, #140]	; 0x8c
 8010424:	2c00      	cmp	r4, #0
 8010426:	f000 80e3 	beq.w	80105f0 <_MoveDescendents+0x224>
 801042a:	9805      	ldr	r0, [sp, #20]
 801042c:	f7f8 fa26 	bl	800887c <GUI_ALLOC_LockH>
 8010430:	464a      	mov	r2, r9
 8010432:	4651      	mov	r1, sl
 8010434:	900b      	str	r0, [sp, #44]	; 0x2c
 8010436:	f7f8 fd3d 	bl	8008eb4 <GUI_MoveRect>
 801043a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801043c:	464a      	mov	r2, r9
 801043e:	3008      	adds	r0, #8
 8010440:	4651      	mov	r1, sl
 8010442:	f7f8 fd37 	bl	8008eb4 <GUI_MoveRect>
 8010446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010448:	69da      	ldr	r2, [r3, #28]
 801044a:	6a1b      	ldr	r3, [r3, #32]
 801044c:	9308      	str	r3, [sp, #32]
 801044e:	a80b      	add	r0, sp, #44	; 0x2c
 8010450:	4614      	mov	r4, r2
 8010452:	9204      	str	r2, [sp, #16]
 8010454:	f7f8 fa24 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010458:	2300      	movs	r3, #0
 801045a:	9324      	str	r3, [sp, #144]	; 0x90
 801045c:	9325      	str	r3, [sp, #148]	; 0x94
 801045e:	9326      	str	r3, [sp, #152]	; 0x98
 8010460:	9327      	str	r3, [sp, #156]	; 0x9c
 8010462:	2c00      	cmp	r4, #0
 8010464:	f000 80b3 	beq.w	80105ce <_MoveDescendents+0x202>
 8010468:	9804      	ldr	r0, [sp, #16]
 801046a:	f7f8 fa07 	bl	800887c <GUI_ALLOC_LockH>
 801046e:	464a      	mov	r2, r9
 8010470:	4651      	mov	r1, sl
 8010472:	900c      	str	r0, [sp, #48]	; 0x30
 8010474:	f7f8 fd1e 	bl	8008eb4 <GUI_MoveRect>
 8010478:	980c      	ldr	r0, [sp, #48]	; 0x30
 801047a:	464a      	mov	r2, r9
 801047c:	3008      	adds	r0, #8
 801047e:	4651      	mov	r1, sl
 8010480:	f7f8 fd18 	bl	8008eb4 <GUI_MoveRect>
 8010484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010486:	69da      	ldr	r2, [r3, #28]
 8010488:	6a1b      	ldr	r3, [r3, #32]
 801048a:	9309      	str	r3, [sp, #36]	; 0x24
 801048c:	a80c      	add	r0, sp, #48	; 0x30
 801048e:	4614      	mov	r4, r2
 8010490:	9202      	str	r2, [sp, #8]
 8010492:	f7f8 fa05 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010496:	2300      	movs	r3, #0
 8010498:	9328      	str	r3, [sp, #160]	; 0xa0
 801049a:	9329      	str	r3, [sp, #164]	; 0xa4
 801049c:	932a      	str	r3, [sp, #168]	; 0xa8
 801049e:	932b      	str	r3, [sp, #172]	; 0xac
 80104a0:	2c00      	cmp	r4, #0
 80104a2:	f000 8083 	beq.w	80105ac <_MoveDescendents+0x1e0>
 80104a6:	4654      	mov	r4, sl
 80104a8:	464d      	mov	r5, r9
 80104aa:	9802      	ldr	r0, [sp, #8]
 80104ac:	f7f8 f9e6 	bl	800887c <GUI_ALLOC_LockH>
 80104b0:	462a      	mov	r2, r5
 80104b2:	4621      	mov	r1, r4
 80104b4:	900d      	str	r0, [sp, #52]	; 0x34
 80104b6:	f7f8 fcfd 	bl	8008eb4 <GUI_MoveRect>
 80104ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80104bc:	462a      	mov	r2, r5
 80104be:	3008      	adds	r0, #8
 80104c0:	4621      	mov	r1, r4
 80104c2:	f7f8 fcf7 	bl	8008eb4 <GUI_MoveRect>
 80104c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104c8:	a80d      	add	r0, sp, #52	; 0x34
 80104ca:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80104ce:	6a1b      	ldr	r3, [r3, #32]
 80104d0:	9303      	str	r3, [sp, #12]
 80104d2:	f7f8 f9e5 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80104d6:	2300      	movs	r3, #0
 80104d8:	932c      	str	r3, [sp, #176]	; 0xb0
 80104da:	932d      	str	r3, [sp, #180]	; 0xb4
 80104dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80104de:	932f      	str	r3, [sp, #188]	; 0xbc
 80104e0:	f1b9 0f00 	cmp.w	r9, #0
 80104e4:	d052      	beq.n	801058c <_MoveDescendents+0x1c0>
 80104e6:	9301      	str	r3, [sp, #4]
 80104e8:	4648      	mov	r0, r9
 80104ea:	f7f8 f9c7 	bl	800887c <GUI_ALLOC_LockH>
 80104ee:	462a      	mov	r2, r5
 80104f0:	4621      	mov	r1, r4
 80104f2:	900e      	str	r0, [sp, #56]	; 0x38
 80104f4:	f7f8 fcde 	bl	8008eb4 <GUI_MoveRect>
 80104f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80104fa:	462a      	mov	r2, r5
 80104fc:	3008      	adds	r0, #8
 80104fe:	4621      	mov	r1, r4
 8010500:	f7f8 fcd8 	bl	8008eb4 <GUI_MoveRect>
 8010504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010506:	a80e      	add	r0, sp, #56	; 0x38
 8010508:	69de      	ldr	r6, [r3, #28]
 801050a:	6a1b      	ldr	r3, [r3, #32]
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	f7f8 f9c7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010512:	9b01      	ldr	r3, [sp, #4]
 8010514:	9330      	str	r3, [sp, #192]	; 0xc0
 8010516:	9331      	str	r3, [sp, #196]	; 0xc4
 8010518:	9332      	str	r3, [sp, #200]	; 0xc8
 801051a:	9333      	str	r3, [sp, #204]	; 0xcc
 801051c:	af1a      	add	r7, sp, #104	; 0x68
 801051e:	b336      	cbz	r6, 801056e <_MoveDescendents+0x1a2>
 8010520:	4630      	mov	r0, r6
 8010522:	f7f8 f9ab 	bl	800887c <GUI_ALLOC_LockH>
 8010526:	462a      	mov	r2, r5
 8010528:	4621      	mov	r1, r4
 801052a:	900f      	str	r0, [sp, #60]	; 0x3c
 801052c:	f7f8 fcc2 	bl	8008eb4 <GUI_MoveRect>
 8010530:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010532:	462a      	mov	r2, r5
 8010534:	4621      	mov	r1, r4
 8010536:	3008      	adds	r0, #8
 8010538:	f7f8 fcbc 	bl	8008eb4 <GUI_MoveRect>
 801053c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801053e:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8010542:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8010546:	a80f      	add	r0, sp, #60	; 0x3c
 8010548:	f7f8 f9aa 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801054c:	4621      	mov	r1, r4
 801054e:	4650      	mov	r0, sl
 8010550:	462a      	mov	r2, r5
 8010552:	f7ff ff3b 	bl	80103cc <_MoveDescendents>
 8010556:	4630      	mov	r0, r6
 8010558:	a930      	add	r1, sp, #192	; 0xc0
 801055a:	4646      	mov	r6, r8
 801055c:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 8010560:	9733      	str	r7, [sp, #204]	; 0xcc
 8010562:	941a      	str	r4, [sp, #104]	; 0x68
 8010564:	951b      	str	r5, [sp, #108]	; 0x6c
 8010566:	f000 fbff 	bl	8010d68 <WM__SendMessage>
 801056a:	2e00      	cmp	r6, #0
 801056c:	d1d8      	bne.n	8010520 <_MoveDescendents+0x154>
 801056e:	4648      	mov	r0, r9
 8010570:	ab18      	add	r3, sp, #96	; 0x60
 8010572:	a92c      	add	r1, sp, #176	; 0xb0
 8010574:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 8010578:	932f      	str	r3, [sp, #188]	; 0xbc
 801057a:	9418      	str	r4, [sp, #96]	; 0x60
 801057c:	9519      	str	r5, [sp, #100]	; 0x64
 801057e:	f000 fbf3 	bl	8010d68 <WM__SendMessage>
 8010582:	f8dd 9000 	ldr.w	r9, [sp]
 8010586:	f1b9 0f00 	cmp.w	r9, #0
 801058a:	d1ad      	bne.n	80104e8 <_MoveDescendents+0x11c>
 801058c:	ab16      	add	r3, sp, #88	; 0x58
 801058e:	9802      	ldr	r0, [sp, #8]
 8010590:	932b      	str	r3, [sp, #172]	; 0xac
 8010592:	a928      	add	r1, sp, #160	; 0xa0
 8010594:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 8010598:	9416      	str	r4, [sp, #88]	; 0x58
 801059a:	9517      	str	r5, [sp, #92]	; 0x5c
 801059c:	f000 fbe4 	bl	8010d68 <WM__SendMessage>
 80105a0:	9b03      	ldr	r3, [sp, #12]
 80105a2:	9302      	str	r3, [sp, #8]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d180      	bne.n	80104aa <_MoveDescendents+0xde>
 80105a8:	46a2      	mov	sl, r4
 80105aa:	46a9      	mov	r9, r5
 80105ac:	ab14      	add	r3, sp, #80	; 0x50
 80105ae:	9804      	ldr	r0, [sp, #16]
 80105b0:	9327      	str	r3, [sp, #156]	; 0x9c
 80105b2:	a924      	add	r1, sp, #144	; 0x90
 80105b4:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 80105b8:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 80105bc:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80105c0:	f000 fbd2 	bl	8010d68 <WM__SendMessage>
 80105c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c6:	9304      	str	r3, [sp, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f47f af4d 	bne.w	8010468 <_MoveDescendents+0x9c>
 80105ce:	ab12      	add	r3, sp, #72	; 0x48
 80105d0:	9805      	ldr	r0, [sp, #20]
 80105d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80105d4:	a920      	add	r1, sp, #128	; 0x80
 80105d6:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 80105da:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 80105de:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80105e2:	f000 fbc1 	bl	8010d68 <WM__SendMessage>
 80105e6:	9b08      	ldr	r3, [sp, #32]
 80105e8:	9305      	str	r3, [sp, #20]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f47f af1d 	bne.w	801042a <_MoveDescendents+0x5e>
 80105f0:	2303      	movs	r3, #3
 80105f2:	931c      	str	r3, [sp, #112]	; 0x70
 80105f4:	9806      	ldr	r0, [sp, #24]
 80105f6:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80105fa:	ab10      	add	r3, sp, #64	; 0x40
 80105fc:	a91c      	add	r1, sp, #112	; 0x70
 80105fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8010600:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8010604:	f000 fbb0 	bl	8010d68 <WM__SendMessage>
 8010608:	9b07      	ldr	r3, [sp, #28]
 801060a:	9306      	str	r3, [sp, #24]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f47f aeed 	bne.w	80103ec <_MoveDescendents+0x20>
 8010612:	b035      	add	sp, #212	; 0xd4
 8010614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010618 <WM_MoveWindow>:
 8010618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801061c:	b08b      	sub	sp, #44	; 0x2c
 801061e:	4605      	mov	r5, r0
 8010620:	460c      	mov	r4, r1
 8010622:	4616      	mov	r6, r2
 8010624:	f7f9 fc56 	bl	8009ed4 <GUI_Lock>
 8010628:	2300      	movs	r3, #0
 801062a:	9307      	str	r3, [sp, #28]
 801062c:	9306      	str	r3, [sp, #24]
 801062e:	9308      	str	r3, [sp, #32]
 8010630:	9309      	str	r3, [sp, #36]	; 0x24
 8010632:	2d00      	cmp	r5, #0
 8010634:	d03a      	beq.n	80106ac <WM_MoveWindow+0x94>
 8010636:	b90c      	cbnz	r4, 801063c <WM_MoveWindow+0x24>
 8010638:	2e00      	cmp	r6, #0
 801063a:	d037      	beq.n	80106ac <WM_MoveWindow+0x94>
 801063c:	4628      	mov	r0, r5
 801063e:	f7f8 f91d 	bl	800887c <GUI_ALLOC_LockH>
 8010642:	4603      	mov	r3, r0
 8010644:	c803      	ldmia	r0, {r0, r1}
 8010646:	f10d 0808 	add.w	r8, sp, #8
 801064a:	e888 0003 	stmia.w	r8, {r0, r1}
 801064e:	4632      	mov	r2, r6
 8010650:	4618      	mov	r0, r3
 8010652:	4621      	mov	r1, r4
 8010654:	9301      	str	r3, [sp, #4]
 8010656:	f7f8 fc2d 	bl	8008eb4 <GUI_MoveRect>
 801065a:	9801      	ldr	r0, [sp, #4]
 801065c:	af0a      	add	r7, sp, #40	; 0x28
 801065e:	4632      	mov	r2, r6
 8010660:	4621      	mov	r1, r4
 8010662:	3008      	adds	r0, #8
 8010664:	f7f8 fc26 	bl	8008eb4 <GUI_MoveRect>
 8010668:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801066c:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8010670:	4638      	mov	r0, r7
 8010672:	f7f8 f915 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010676:	4632      	mov	r2, r6
 8010678:	4621      	mov	r1, r4
 801067a:	4648      	mov	r0, r9
 801067c:	f7ff fea6 	bl	80103cc <_MoveDescendents>
 8010680:	4628      	mov	r0, r5
 8010682:	f7f8 f8fb 	bl	800887c <GUI_ALLOC_LockH>
 8010686:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010688:	9001      	str	r0, [sp, #4]
 801068a:	0792      	lsls	r2, r2, #30
 801068c:	d501      	bpl.n	8010692 <WM_MoveWindow+0x7a>
 801068e:	6981      	ldr	r1, [r0, #24]
 8010690:	b989      	cbnz	r1, 80106b6 <WM_MoveWindow+0x9e>
 8010692:	4638      	mov	r0, r7
 8010694:	f7f8 f904 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010698:	2203      	movs	r2, #3
 801069a:	ab04      	add	r3, sp, #16
 801069c:	a906      	add	r1, sp, #24
 801069e:	4628      	mov	r0, r5
 80106a0:	9404      	str	r4, [sp, #16]
 80106a2:	9605      	str	r6, [sp, #20]
 80106a4:	9206      	str	r2, [sp, #24]
 80106a6:	9309      	str	r3, [sp, #36]	; 0x24
 80106a8:	f000 fb5e 	bl	8010d68 <WM__SendMessage>
 80106ac:	f7f9 fc08 	bl	8009ec0 <GUI_Unlock>
 80106b0:	b00b      	add	sp, #44	; 0x2c
 80106b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106b6:	6a02      	ldr	r2, [r0, #32]
 80106b8:	f7fe fdf8 	bl	800f2ac <WM__InvalidateParent>
 80106bc:	9b01      	ldr	r3, [sp, #4]
 80106be:	4640      	mov	r0, r8
 80106c0:	6a1a      	ldr	r2, [r3, #32]
 80106c2:	6999      	ldr	r1, [r3, #24]
 80106c4:	f7fe fdf2 	bl	800f2ac <WM__InvalidateParent>
 80106c8:	e7e3      	b.n	8010692 <WM_MoveWindow+0x7a>
 80106ca:	bf00      	nop

080106cc <WM__DeleteAssocTimer>:
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	4605      	mov	r5, r0
 80106d2:	f7f9 fbff 	bl	8009ed4 <GUI_Lock>
 80106d6:	4668      	mov	r0, sp
 80106d8:	f001 fce2 	bl	80120a0 <GUI_TIMER__GetFirstTimer>
 80106dc:	4604      	mov	r4, r0
 80106de:	b168      	cbz	r0, 80106fc <WM__DeleteAssocTimer+0x30>
 80106e0:	2101      	movs	r1, #1
 80106e2:	4620      	mov	r0, r4
 80106e4:	f001 fd7c 	bl	80121e0 <GUI_TIMER_GetFlag>
 80106e8:	9b00      	ldr	r3, [sp, #0]
 80106ea:	b103      	cbz	r3, 80106ee <WM__DeleteAssocTimer+0x22>
 80106ec:	b950      	cbnz	r0, 8010704 <WM__DeleteAssocTimer+0x38>
 80106ee:	4620      	mov	r0, r4
 80106f0:	4669      	mov	r1, sp
 80106f2:	f001 fced 	bl	80120d0 <GUI_TIMER__GetNextTimerLin>
 80106f6:	4604      	mov	r4, r0
 80106f8:	2c00      	cmp	r4, #0
 80106fa:	d1f1      	bne.n	80106e0 <WM__DeleteAssocTimer+0x14>
 80106fc:	f7f9 fbe0 	bl	8009ec0 <GUI_Unlock>
 8010700:	b002      	add	sp, #8
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	4618      	mov	r0, r3
 8010706:	f7f8 f8af 	bl	8008868 <GUI_ALLOC_h2p>
 801070a:	6843      	ldr	r3, [r0, #4]
 801070c:	42ab      	cmp	r3, r5
 801070e:	4669      	mov	r1, sp
 8010710:	4620      	mov	r0, r4
 8010712:	d1ee      	bne.n	80106f2 <WM__DeleteAssocTimer+0x26>
 8010714:	9e00      	ldr	r6, [sp, #0]
 8010716:	f001 fcdb 	bl	80120d0 <GUI_TIMER__GetNextTimerLin>
 801071a:	4604      	mov	r4, r0
 801071c:	2e00      	cmp	r6, #0
 801071e:	d0eb      	beq.n	80106f8 <WM__DeleteAssocTimer+0x2c>
 8010720:	f7f9 fbd8 	bl	8009ed4 <GUI_Lock>
 8010724:	4630      	mov	r0, r6
 8010726:	f7f8 f8a9 	bl	800887c <GUI_ALLOC_LockH>
 801072a:	9001      	str	r0, [sp, #4]
 801072c:	6800      	ldr	r0, [r0, #0]
 801072e:	f001 fcef 	bl	8012110 <GUI_TIMER_Delete>
 8010732:	a801      	add	r0, sp, #4
 8010734:	f7f8 f8b4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010738:	4630      	mov	r0, r6
 801073a:	f7f8 fa25 	bl	8008b88 <GUI_ALLOC_Free>
 801073e:	f7f9 fbbf 	bl	8009ec0 <GUI_Unlock>
 8010742:	2c00      	cmp	r4, #0
 8010744:	d1cc      	bne.n	80106e0 <WM__DeleteAssocTimer+0x14>
 8010746:	e7d9      	b.n	80106fc <WM__DeleteAssocTimer+0x30>

08010748 <WM__SendTouchMessage>:
 8010748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801074a:	68cc      	ldr	r4, [r1, #12]
 801074c:	b087      	sub	sp, #28
 801074e:	460d      	mov	r5, r1
 8010750:	4607      	mov	r7, r0
 8010752:	b194      	cbz	r4, 801077a <WM__SendTouchMessage+0x32>
 8010754:	f7f8 f892 	bl	800887c <GUI_ALLOC_LockH>
 8010758:	aa06      	add	r2, sp, #24
 801075a:	f9b0 e000 	ldrsh.w	lr, [r0]
 801075e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010762:	6821      	ldr	r1, [r4, #0]
 8010764:	6863      	ldr	r3, [r4, #4]
 8010766:	f842 0d14 	str.w	r0, [r2, #-20]!
 801076a:	ebce 0101 	rsb	r1, lr, r1
 801076e:	1b9b      	subs	r3, r3, r6
 8010770:	6021      	str	r1, [r4, #0]
 8010772:	4610      	mov	r0, r2
 8010774:	6063      	str	r3, [r4, #4]
 8010776:	f7f8 f893 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801077a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801077e:	ae02      	add	r6, sp, #8
 8010780:	f04f 0e0d 	mov.w	lr, #13
 8010784:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8010788:	463c      	mov	r4, r7
 801078a:	9704      	str	r7, [sp, #16]
 801078c:	f8cd e008 	str.w	lr, [sp, #8]
 8010790:	4620      	mov	r0, r4
 8010792:	f7ff fd19 	bl	80101c8 <WM_IsWindow>
 8010796:	b170      	cbz	r0, 80107b6 <WM__SendTouchMessage+0x6e>
 8010798:	4620      	mov	r0, r4
 801079a:	f7ff fd07 	bl	80101ac <WM_GetParent>
 801079e:	4604      	mov	r4, r0
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d0f5      	beq.n	8010790 <WM__SendTouchMessage+0x48>
 80107a4:	4631      	mov	r1, r6
 80107a6:	9505      	str	r5, [sp, #20]
 80107a8:	f000 fafc 	bl	8010da4 <WM__SendMessageIfEnabled>
 80107ac:	4620      	mov	r0, r4
 80107ae:	f7ff fd0b 	bl	80101c8 <WM_IsWindow>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	d1f0      	bne.n	8010798 <WM__SendTouchMessage+0x50>
 80107b6:	4629      	mov	r1, r5
 80107b8:	4638      	mov	r0, r7
 80107ba:	f000 faf3 	bl	8010da4 <WM__SendMessageIfEnabled>
 80107be:	b007      	add	sp, #28
 80107c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c2:	bf00      	nop

080107c4 <WM_HandlePID>:
 80107c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c8:	b099      	sub	sp, #100	; 0x64
 80107ca:	ad08      	add	r5, sp, #32
 80107cc:	2300      	movs	r3, #0
 80107ce:	606b      	str	r3, [r5, #4]
 80107d0:	9308      	str	r3, [sp, #32]
 80107d2:	60ab      	str	r3, [r5, #8]
 80107d4:	f000 ffe2 	bl	801179c <GUI_PID_IsEmpty>
 80107d8:	b120      	cbz	r0, 80107e4 <WM_HandlePID+0x20>
 80107da:	2400      	movs	r4, #0
 80107dc:	4620      	mov	r0, r4
 80107de:	b019      	add	sp, #100	; 0x64
 80107e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e4:	af0b      	add	r7, sp, #44	; 0x2c
 80107e6:	4604      	mov	r4, r0
 80107e8:	4638      	mov	r0, r7
 80107ea:	f000 ff33 	bl	8011654 <GUI_PID_GetState>
 80107ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107f0:	3301      	adds	r3, #1
 80107f2:	f000 80e3 	beq.w	80109bc <WM_HandlePID+0x1f8>
 80107f6:	4eb8      	ldr	r6, [pc, #736]	; (8010ad8 <WM_HandlePID+0x314>)
 80107f8:	f7f9 fb6c 	bl	8009ed4 <GUI_Lock>
 80107fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f2c0 8157 	blt.w	8010ab2 <WM_HandlePID+0x2ee>
 8010804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010806:	2a00      	cmp	r2, #0
 8010808:	db09      	blt.n	801081e <WM_HandlePID+0x5a>
 801080a:	48b4      	ldr	r0, [pc, #720]	; (8010adc <WM_HandlePID+0x318>)
 801080c:	49b4      	ldr	r1, [pc, #720]	; (8010ae0 <WM_HandlePID+0x31c>)
 801080e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010812:	f9b1 1000 	ldrsh.w	r1, [r1]
 8010816:	4403      	add	r3, r0
 8010818:	440a      	add	r2, r1
 801081a:	930b      	str	r3, [sp, #44]	; 0x2c
 801081c:	920c      	str	r2, [sp, #48]	; 0x30
 801081e:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 8010822:	2801      	cmp	r0, #1
 8010824:	bf8c      	ite	hi
 8010826:	6830      	ldrhi	r0, [r6, #0]
 8010828:	6030      	strls	r0, [r6, #0]
 801082a:	f7f8 fe5d 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 801082e:	2800      	cmp	r0, #0
 8010830:	f000 80be 	beq.w	80109b0 <WM_HandlePID+0x1ec>
 8010834:	aa04      	add	r2, sp, #16
 8010836:	a903      	add	r1, sp, #12
 8010838:	6830      	ldr	r0, [r6, #0]
 801083a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8010af4 <WM_HandlePID+0x330>
 801083e:	f7f9 fab9 	bl	8009db4 <GUI_GetLayerPosEx>
 8010842:	a806      	add	r0, sp, #24
 8010844:	f000 fb66 	bl	8010f14 <WM__AddCriticalHandle>
 8010848:	6834      	ldr	r4, [r6, #0]
 801084a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801084c:	9803      	ldr	r0, [sp, #12]
 801084e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010850:	9904      	ldr	r1, [sp, #16]
 8010852:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010856:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 801085a:	1a18      	subs	r0, r3, r0
 801085c:	6923      	ldr	r3, [r4, #16]
 801085e:	900b      	str	r0, [sp, #44]	; 0x2c
 8010860:	1a51      	subs	r1, r2, r1
 8010862:	4298      	cmp	r0, r3
 8010864:	910c      	str	r1, [sp, #48]	; 0x30
 8010866:	d103      	bne.n	8010870 <WM_HandlePID+0xac>
 8010868:	6963      	ldr	r3, [r4, #20]
 801086a:	4299      	cmp	r1, r3
 801086c:	f000 815f 	beq.w	8010b2e <WM_HandlePID+0x36a>
 8010870:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8010874:	f000 fe9c 	bl	80115b0 <GUI_CURSOR_SetPositionEx>
 8010878:	f8d8 3000 	ldr.w	r3, [r8]
 801087c:	b113      	cbz	r3, 8010884 <WM_HandlePID+0xc0>
 801087e:	2100      	movs	r1, #0
 8010880:	4638      	mov	r0, r7
 8010882:	4798      	blx	r3
 8010884:	4b97      	ldr	r3, [pc, #604]	; (8010ae4 <WM_HandlePID+0x320>)
 8010886:	6832      	ldr	r2, [r6, #0]
 8010888:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801088c:	2800      	cmp	r0, #0
 801088e:	f000 8137 	beq.w	8010b00 <WM_HandlePID+0x33c>
 8010892:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010896:	9007      	str	r0, [sp, #28]
 8010898:	b113      	cbz	r3, 80108a0 <WM_HandlePID+0xdc>
 801089a:	9907      	ldr	r1, [sp, #28]
 801089c:	4638      	mov	r0, r7
 801089e:	4798      	blx	r3
 80108a0:	6833      	ldr	r3, [r6, #0]
 80108a2:	4c91      	ldr	r4, [pc, #580]	; (8010ae8 <WM_HandlePID+0x324>)
 80108a4:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8010ad8 <WM_HandlePID+0x314>
 80108a8:	00db      	lsls	r3, r3, #3
 80108aa:	18e1      	adds	r1, r4, r3
 80108ac:	684a      	ldr	r2, [r1, #4]
 80108ae:	9807      	ldr	r0, [sp, #28]
 80108b0:	2a00      	cmp	r2, #0
 80108b2:	d042      	beq.n	801093a <WM_HandlePID+0x176>
 80108b4:	4282      	cmp	r2, r0
 80108b6:	d040      	beq.n	801093a <WM_HandlePID+0x176>
 80108b8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80108bc:	f1ba 0f00 	cmp.w	sl, #0
 80108c0:	d03b      	beq.n	801093a <WM_HandlePID+0x176>
 80108c2:	4a8a      	ldr	r2, [pc, #552]	; (8010aec <WM_HandlePID+0x328>)
 80108c4:	6812      	ldr	r2, [r2, #0]
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	db09      	blt.n	80108de <WM_HandlePID+0x11a>
 80108ca:	4b89      	ldr	r3, [pc, #548]	; (8010af0 <WM_HandlePID+0x32c>)
 80108cc:	4650      	mov	r0, sl
 80108ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108d2:	f000 fa2d 	bl	8010d30 <WM__IsAncestor>
 80108d6:	b380      	cbz	r0, 801093a <WM_HandlePID+0x176>
 80108d8:	f8d9 3000 	ldr.w	r3, [r9]
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010afc <WM_HandlePID+0x338>
 80108e2:	444b      	add	r3, r9
 80108e4:	4650      	mov	r0, sl
 80108e6:	6859      	ldr	r1, [r3, #4]
 80108e8:	f000 fa22 	bl	8010d30 <WM__IsAncestor>
 80108ec:	6833      	ldr	r3, [r6, #0]
 80108ee:	00db      	lsls	r3, r3, #3
 80108f0:	4499      	add	r9, r3
 80108f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80108f6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80108fa:	b112      	cbz	r2, 8010902 <WM_HandlePID+0x13e>
 80108fc:	b908      	cbnz	r0, 8010902 <WM_HandlePID+0x13e>
 80108fe:	458a      	cmp	sl, r1
 8010900:	d11b      	bne.n	801093a <WM_HandlePID+0x176>
 8010902:	4423      	add	r3, r4
 8010904:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8010ae8 <WM_HandlePID+0x324>
 8010908:	6858      	ldr	r0, [r3, #4]
 801090a:	f000 fa23 	bl	8010d54 <WM__IsEnabled>
 801090e:	b1a0      	cbz	r0, 801093a <WM_HandlePID+0x176>
 8010910:	6833      	ldr	r3, [r6, #0]
 8010912:	9517      	str	r5, [sp, #92]	; 0x5c
 8010914:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010918:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 801091c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010920:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8010924:	a914      	add	r1, sp, #80	; 0x50
 8010926:	2312      	movs	r3, #18
 8010928:	4670      	mov	r0, lr
 801092a:	9314      	str	r3, [sp, #80]	; 0x50
 801092c:	f7ff ff0c 	bl	8010748 <WM__SendTouchMessage>
 8010930:	6833      	ldr	r3, [r6, #0]
 8010932:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8010936:	2200      	movs	r2, #0
 8010938:	605a      	str	r2, [r3, #4]
 801093a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801093e:	f1b9 0f00 	cmp.w	r9, #0
 8010942:	f000 80b3 	beq.w	8010aac <WM_HandlePID+0x2e8>
 8010946:	4b69      	ldr	r3, [pc, #420]	; (8010aec <WM_HandlePID+0x328>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	db08      	blt.n	8010960 <WM_HandlePID+0x19c>
 801094e:	4a68      	ldr	r2, [pc, #416]	; (8010af0 <WM_HandlePID+0x32c>)
 8010950:	4648      	mov	r0, r9
 8010952:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010956:	f000 f9eb 	bl	8010d30 <WM__IsAncestor>
 801095a:	2800      	cmp	r0, #0
 801095c:	f000 80a6 	beq.w	8010aac <WM_HandlePID+0x2e8>
 8010960:	6833      	ldr	r3, [r6, #0]
 8010962:	f8df a198 	ldr.w	sl, [pc, #408]	; 8010afc <WM_HandlePID+0x338>
 8010966:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801096a:	4648      	mov	r0, r9
 801096c:	6859      	ldr	r1, [r3, #4]
 801096e:	f000 f9df 	bl	8010d30 <WM__IsAncestor>
 8010972:	f8d6 e000 	ldr.w	lr, [r6]
 8010976:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801097a:	44e2      	add	sl, ip
 801097c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010980:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010984:	b363      	cbz	r3, 80109e0 <WM_HandlePID+0x21c>
 8010986:	bb58      	cbnz	r0, 80109e0 <WM_HandlePID+0x21c>
 8010988:	4591      	cmp	r9, r2
 801098a:	d029      	beq.n	80109e0 <WM_HandlePID+0x21c>
 801098c:	2400      	movs	r4, #0
 801098e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010992:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010996:	4473      	add	r3, lr
 8010998:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801099c:	3310      	adds	r3, #16
 801099e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80109a2:	4671      	mov	r1, lr
 80109a4:	4638      	mov	r0, r7
 80109a6:	f002 ffe3 	bl	8013970 <WM_PID__SetPrevState>
 80109aa:	a806      	add	r0, sp, #24
 80109ac:	f000 faba 	bl	8010f24 <WM__RemoveCriticalHandle>
 80109b0:	f7f9 fa86 	bl	8009ec0 <GUI_Unlock>
 80109b4:	4620      	mov	r0, r4
 80109b6:	b019      	add	sp, #100	; 0x64
 80109b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109be:	4e46      	ldr	r6, [pc, #280]	; (8010ad8 <WM_HandlePID+0x314>)
 80109c0:	3301      	adds	r3, #1
 80109c2:	f47f af19 	bne.w	80107f8 <WM_HandlePID+0x34>
 80109c6:	6833      	ldr	r3, [r6, #0]
 80109c8:	4a4a      	ldr	r2, [pc, #296]	; (8010af4 <WM_HandlePID+0x330>)
 80109ca:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80109ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80109d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109d6:	7e1b      	ldrb	r3, [r3, #24]
 80109d8:	428b      	cmp	r3, r1
 80109da:	f47f af0d 	bne.w	80107f8 <WM_HandlePID+0x34>
 80109de:	e6fc      	b.n	80107da <WM_HandlePID+0x16>
 80109e0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80109e4:	eb03 020e 	add.w	r2, r3, lr
 80109e8:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80109ec:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 80109f0:	7e12      	ldrb	r2, [r2, #24]
 80109f2:	9907      	ldr	r1, [sp, #28]
 80109f4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8010af4 <WM_HandlePID+0x330>
 80109f8:	4464      	add	r4, ip
 80109fa:	4552      	cmp	r2, sl
 80109fc:	6061      	str	r1, [r4, #4]
 80109fe:	d003      	beq.n	8010a08 <WM_HandlePID+0x244>
 8010a00:	9907      	ldr	r1, [sp, #28]
 8010a02:	2900      	cmp	r1, #0
 8010a04:	f040 809b 	bne.w	8010b3e <WM_HandlePID+0x37a>
 8010a08:	ea52 090a 	orrs.w	r9, r2, sl
 8010a0c:	d07d      	beq.n	8010b0a <WM_HandlePID+0x346>
 8010a0e:	4c3a      	ldr	r4, [pc, #232]	; (8010af8 <WM_HandlePID+0x334>)
 8010a10:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8010a14:	eb04 020c 	add.w	r2, r4, ip
 8010a18:	f44f 7910 	mov.w	r9, #576	; 0x240
 8010a1c:	6850      	ldr	r0, [r2, #4]
 8010a1e:	9907      	ldr	r1, [sp, #28]
 8010a20:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8010a24:	4288      	cmp	r0, r1
 8010a26:	d022      	beq.n	8010a6e <WM_HandlePID+0x2aa>
 8010a28:	6852      	ldr	r2, [r2, #4]
 8010a2a:	b302      	cbz	r2, 8010a6e <WM_HandlePID+0x2aa>
 8010a2c:	f1ba 0f00 	cmp.w	sl, #0
 8010a30:	f040 8113 	bne.w	8010c5a <WM_HandlePID+0x496>
 8010a34:	4473      	add	r3, lr
 8010a36:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010a3a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010a3e:	691a      	ldr	r2, [r3, #16]
 8010a40:	695b      	ldr	r3, [r3, #20]
 8010a42:	9309      	str	r3, [sp, #36]	; 0x24
 8010a44:	9208      	str	r2, [sp, #32]
 8010a46:	462b      	mov	r3, r5
 8010a48:	44a4      	add	ip, r4
 8010a4a:	a914      	add	r1, sp, #80	; 0x50
 8010a4c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010a50:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a52:	f7ff fe79 	bl	8010748 <WM__SendTouchMessage>
 8010a56:	f8d6 e000 	ldr.w	lr, [r6]
 8010a5a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8010a5e:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8010a62:	eb04 030c 	add.w	r3, r4, ip
 8010a66:	2200      	movs	r2, #0
 8010a68:	605a      	str	r2, [r3, #4]
 8010a6a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010a6e:	eb03 020e 	add.w	r2, r3, lr
 8010a72:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8010a76:	9907      	ldr	r1, [sp, #28]
 8010a78:	f882 a018 	strb.w	sl, [r2, #24]
 8010a7c:	2900      	cmp	r1, #0
 8010a7e:	d054      	beq.n	8010b2a <WM_HandlePID+0x366>
 8010a80:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010a84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010a88:	f1ba 0f00 	cmp.w	sl, #0
 8010a8c:	f000 80c5 	beq.w	8010c1a <WM_HandlePID+0x456>
 8010a90:	4464      	add	r4, ip
 8010a92:	9b07      	ldr	r3, [sp, #28]
 8010a94:	6063      	str	r3, [r4, #4]
 8010a96:	9807      	ldr	r0, [sp, #28]
 8010a98:	9517      	str	r5, [sp, #92]	; 0x5c
 8010a9a:	a914      	add	r1, sp, #80	; 0x50
 8010a9c:	f7ff fe54 	bl	8010748 <WM__SendTouchMessage>
 8010aa0:	f8d6 e000 	ldr.w	lr, [r6]
 8010aa4:	2401      	movs	r4, #1
 8010aa6:	fa0e f304 	lsl.w	r3, lr, r4
 8010aaa:	e772      	b.n	8010992 <WM_HandlePID+0x1ce>
 8010aac:	f8d6 e000 	ldr.w	lr, [r6]
 8010ab0:	e76c      	b.n	801098c <WM_HandlePID+0x1c8>
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	f47f aeb3 	bne.w	801081e <WM_HandlePID+0x5a>
 8010ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010aba:	3301      	adds	r3, #1
 8010abc:	f47f aeaf 	bne.w	801081e <WM_HandlePID+0x5a>
 8010ac0:	6833      	ldr	r3, [r6, #0]
 8010ac2:	4a0c      	ldr	r2, [pc, #48]	; (8010af4 <WM_HandlePID+0x330>)
 8010ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010acc:	691a      	ldr	r2, [r3, #16]
 8010ace:	695b      	ldr	r3, [r3, #20]
 8010ad0:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ad4:	e6a3      	b.n	801081e <WM_HandlePID+0x5a>
 8010ad6:	bf00      	nop
 8010ad8:	20035848 	.word	0x20035848
 8010adc:	200357da 	.word	0x200357da
 8010ae0:	2003580c 	.word	0x2003580c
 8010ae4:	20035854 	.word	0x20035854
 8010ae8:	20035884 	.word	0x20035884
 8010aec:	200000b8 	.word	0x200000b8
 8010af0:	2003587c 	.word	0x2003587c
 8010af4:	20000778 	.word	0x20000778
 8010af8:	200358a4 	.word	0x200358a4
 8010afc:	20035894 	.word	0x20035894
 8010b00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b02:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010b04:	f003 f97a 	bl	8013dfc <WM_Screen2hWin>
 8010b08:	e6c3      	b.n	8010892 <WM_HandlePID+0xce>
 8010b0a:	9c07      	ldr	r4, [sp, #28]
 8010b0c:	2c00      	cmp	r4, #0
 8010b0e:	f43f af40 	beq.w	8010992 <WM_HandlePID+0x1ce>
 8010b12:	9807      	ldr	r0, [sp, #28]
 8010b14:	f000 f91e 	bl	8010d54 <WM__IsEnabled>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	f040 80b0 	bne.w	8010c7e <WM_HandlePID+0x4ba>
 8010b1e:	f8d6 e000 	ldr.w	lr, [r6]
 8010b22:	4604      	mov	r4, r0
 8010b24:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010b28:	e733      	b.n	8010992 <WM_HandlePID+0x1ce>
 8010b2a:	2401      	movs	r4, #1
 8010b2c:	e731      	b.n	8010992 <WM_HandlePID+0x1ce>
 8010b2e:	7e22      	ldrb	r2, [r4, #24]
 8010b30:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8010b34:	429a      	cmp	r2, r3
 8010b36:	f47f ae9b 	bne.w	8010870 <WM_HandlePID+0xac>
 8010b3a:	2400      	movs	r4, #0
 8010b3c:	e735      	b.n	80109aa <WM_HandlePID+0x1e6>
 8010b3e:	9807      	ldr	r0, [sp, #28]
 8010b40:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8010cf0 <WM_HandlePID+0x52c>
 8010b44:	f7f7 fe9a 	bl	800887c <GUI_ALLOC_LockH>
 8010b48:	6833      	ldr	r3, [r6, #0]
 8010b4a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8010b4e:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8010b52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b56:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b5c:	7e1b      	ldrb	r3, [r3, #24]
 8010b5e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8010b62:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010b66:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b6c:	9005      	str	r0, [sp, #20]
 8010b6e:	1b12      	subs	r2, r2, r4
 8010b70:	1a5b      	subs	r3, r3, r1
 8010b72:	a805      	add	r0, sp, #20
 8010b74:	9211      	str	r2, [sp, #68]	; 0x44
 8010b76:	9312      	str	r3, [sp, #72]	; 0x48
 8010b78:	f7f7 fe92 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010b7c:	f8d6 e000 	ldr.w	lr, [r6]
 8010b80:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 8010b84:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8010b88:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010b8c:	f103 0210 	add.w	r2, r3, #16
 8010b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8010b92:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8010b96:	761c      	strb	r4, [r3, #24]
 8010b98:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010b9c:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8010ba0:	a911      	add	r1, sp, #68	; 0x44
 8010ba2:	2211      	movs	r2, #17
 8010ba4:	9117      	str	r1, [sp, #92]	; 0x5c
 8010ba6:	9214      	str	r2, [sp, #80]	; 0x50
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d03e      	beq.n	8010c2a <WM_HandlePID+0x466>
 8010bac:	4c4e      	ldr	r4, [pc, #312]	; (8010ce8 <WM_HandlePID+0x524>)
 8010bae:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8010bb2:	a914      	add	r1, sp, #80	; 0x50
 8010bb4:	f8de 9004 	ldr.w	r9, [lr, #4]
 8010bb8:	9b07      	ldr	r3, [sp, #28]
 8010bba:	f8ce 3004 	str.w	r3, [lr, #4]
 8010bbe:	f8de 3004 	ldr.w	r3, [lr, #4]
 8010bc2:	9807      	ldr	r0, [sp, #28]
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	f000 f8ed 	bl	8010da4 <WM__SendMessageIfEnabled>
 8010bca:	f8db e000 	ldr.w	lr, [fp]
 8010bce:	9b00      	ldr	r3, [sp, #0]
 8010bd0:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8010bd4:	eb04 020c 	add.w	r2, r4, ip
 8010bd8:	6852      	ldr	r2, [r2, #4]
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d003      	beq.n	8010be6 <WM_HandlePID+0x422>
 8010bde:	44a4      	add	ip, r4
 8010be0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010be4:	9307      	str	r3, [sp, #28]
 8010be6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8010bea:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8010bee:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010bf2:	3310      	adds	r3, #16
 8010bf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010bf8:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8010cf4 <WM_HandlePID+0x530>
 8010bfc:	f1b9 0f00 	cmp.w	r9, #0
 8010c00:	d12d      	bne.n	8010c5e <WM_HandlePID+0x49a>
 8010c02:	f8d6 e000 	ldr.w	lr, [r6]
 8010c06:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8010c0a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010c0e:	eb03 020e 	add.w	r2, r3, lr
 8010c12:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8010c16:	7e12      	ldrb	r2, [r2, #24]
 8010c18:	e6f6      	b.n	8010a08 <WM_HandlePID+0x244>
 8010c1a:	4b34      	ldr	r3, [pc, #208]	; (8010cec <WM_HandlePID+0x528>)
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d13f      	bne.n	8010ca2 <WM_HandlePID+0x4de>
 8010c22:	4464      	add	r4, ip
 8010c24:	2300      	movs	r3, #0
 8010c26:	6063      	str	r3, [r4, #4]
 8010c28:	e735      	b.n	8010a96 <WM_HandlePID+0x2d2>
 8010c2a:	4c2f      	ldr	r4, [pc, #188]	; (8010ce8 <WM_HandlePID+0x524>)
 8010c2c:	9301      	str	r3, [sp, #4]
 8010c2e:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8010c32:	a914      	add	r1, sp, #80	; 0x50
 8010c34:	f8de 2004 	ldr.w	r2, [lr, #4]
 8010c38:	9807      	ldr	r0, [sp, #28]
 8010c3a:	9200      	str	r2, [sp, #0]
 8010c3c:	f000 f8b2 	bl	8010da4 <WM__SendMessageIfEnabled>
 8010c40:	f8db e000 	ldr.w	lr, [fp]
 8010c44:	9a00      	ldr	r2, [sp, #0]
 8010c46:	9b01      	ldr	r3, [sp, #4]
 8010c48:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8010c4c:	eb04 010c 	add.w	r1, r4, ip
 8010c50:	6849      	ldr	r1, [r1, #4]
 8010c52:	428a      	cmp	r2, r1
 8010c54:	d036      	beq.n	8010cc4 <WM_HandlePID+0x500>
 8010c56:	4699      	mov	r9, r3
 8010c58:	e7c1      	b.n	8010bde <WM_HandlePID+0x41a>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e6f4      	b.n	8010a48 <WM_HandlePID+0x284>
 8010c5e:	4648      	mov	r0, r9
 8010c60:	f7ff fab2 	bl	80101c8 <WM_IsWindow>
 8010c64:	f8d6 e000 	ldr.w	lr, [r6]
 8010c68:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8010c6c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010c70:	b9f0      	cbnz	r0, 8010cb0 <WM_HandlePID+0x4ec>
 8010c72:	eb03 020e 	add.w	r2, r3, lr
 8010c76:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8010c7a:	7e12      	ldrb	r2, [r2, #24]
 8010c7c:	e6c4      	b.n	8010a08 <WM_HandlePID+0x244>
 8010c7e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010c82:	9c07      	ldr	r4, [sp, #28]
 8010c84:	9517      	str	r5, [sp, #92]	; 0x5c
 8010c86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010c8a:	2310      	movs	r3, #16
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	a914      	add	r1, sp, #80	; 0x50
 8010c90:	9314      	str	r3, [sp, #80]	; 0x50
 8010c92:	f7ff fd59 	bl	8010748 <WM__SendTouchMessage>
 8010c96:	f8d6 e000 	ldr.w	lr, [r6]
 8010c9a:	464c      	mov	r4, r9
 8010c9c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010ca0:	e677      	b.n	8010992 <WM_HandlePID+0x1ce>
 8010ca2:	f003 f8f7 	bl	8013e94 <WM_ReleaseCapture>
 8010ca6:	f8d6 e000 	ldr.w	lr, [r6]
 8010caa:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8010cae:	e7b8      	b.n	8010c22 <WM_HandlePID+0x45e>
 8010cb0:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 8010cb4:	eb03 020e 	add.w	r2, r3, lr
 8010cb8:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8010cbc:	f8c4 9004 	str.w	r9, [r4, #4]
 8010cc0:	7e12      	ldrb	r2, [r2, #24]
 8010cc2:	e6a1      	b.n	8010a08 <WM_HandlePID+0x244>
 8010cc4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8010cc8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010ccc:	eb03 040e 	add.w	r4, r3, lr
 8010cd0:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8010cd4:	f109 0410 	add.w	r4, r9, #16
 8010cd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010cdc:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8010ce0:	f899 2018 	ldrb.w	r2, [r9, #24]
 8010ce4:	e690      	b.n	8010a08 <WM_HandlePID+0x244>
 8010ce6:	bf00      	nop
 8010ce8:	200358a4 	.word	0x200358a4
 8010cec:	2003584c 	.word	0x2003584c
 8010cf0:	20035848 	.word	0x20035848
 8010cf4:	20000778 	.word	0x20000778

08010cf8 <WM__GetPrevSibling>:
 8010cf8:	b538      	push	{r3, r4, r5, lr}
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	f7ff fa56 	bl	80101ac <WM_GetParent>
 8010d00:	b910      	cbnz	r0, 8010d08 <WM__GetPrevSibling+0x10>
 8010d02:	2400      	movs	r4, #0
 8010d04:	4620      	mov	r0, r4
 8010d06:	bd38      	pop	{r3, r4, r5, pc}
 8010d08:	f7f7 fdae 	bl	8008868 <GUI_ALLOC_h2p>
 8010d0c:	69c4      	ldr	r4, [r0, #28]
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	d0f7      	beq.n	8010d02 <WM__GetPrevSibling+0xa>
 8010d12:	42a5      	cmp	r5, r4
 8010d14:	d103      	bne.n	8010d1e <WM__GetPrevSibling+0x26>
 8010d16:	e7f4      	b.n	8010d02 <WM__GetPrevSibling+0xa>
 8010d18:	461c      	mov	r4, r3
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d0f1      	beq.n	8010d02 <WM__GetPrevSibling+0xa>
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f7f7 fda2 	bl	8008868 <GUI_ALLOC_h2p>
 8010d24:	6a03      	ldr	r3, [r0, #32]
 8010d26:	429d      	cmp	r5, r3
 8010d28:	d1f6      	bne.n	8010d18 <WM__GetPrevSibling+0x20>
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	bd38      	pop	{r3, r4, r5, pc}
 8010d2e:	bf00      	nop

08010d30 <WM__IsAncestor>:
 8010d30:	b158      	cbz	r0, 8010d4a <WM__IsAncestor+0x1a>
 8010d32:	b510      	push	{r4, lr}
 8010d34:	460c      	mov	r4, r1
 8010d36:	b131      	cbz	r1, 8010d46 <WM__IsAncestor+0x16>
 8010d38:	f7f7 fd96 	bl	8008868 <GUI_ALLOC_h2p>
 8010d3c:	6980      	ldr	r0, [r0, #24]
 8010d3e:	4284      	cmp	r4, r0
 8010d40:	d005      	beq.n	8010d4e <WM__IsAncestor+0x1e>
 8010d42:	2800      	cmp	r0, #0
 8010d44:	d1f8      	bne.n	8010d38 <WM__IsAncestor+0x8>
 8010d46:	2000      	movs	r0, #0
 8010d48:	bd10      	pop	{r4, pc}
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	4770      	bx	lr
 8010d4e:	2001      	movs	r0, #1
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	bf00      	nop

08010d54 <WM__IsEnabled>:
 8010d54:	b508      	push	{r3, lr}
 8010d56:	f7f7 fd87 	bl	8008868 <GUI_ALLOC_h2p>
 8010d5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010d5c:	f080 0010 	eor.w	r0, r0, #16
 8010d60:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8010d64:	bd08      	pop	{r3, pc}
 8010d66:	bf00      	nop

08010d68 <WM__SendMessage>:
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	4c0d      	ldr	r4, [pc, #52]	; (8010da0 <WM__SendMessage+0x38>)
 8010d6c:	6822      	ldr	r2, [r4, #0]
 8010d6e:	2a13      	cmp	r2, #19
 8010d70:	dd00      	ble.n	8010d74 <WM__SendMessage+0xc>
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
 8010d74:	4606      	mov	r6, r0
 8010d76:	460d      	mov	r5, r1
 8010d78:	f7f7 fd76 	bl	8008868 <GUI_ALLOC_h2p>
 8010d7c:	6902      	ldr	r2, [r0, #16]
 8010d7e:	606e      	str	r6, [r5, #4]
 8010d80:	b142      	cbz	r2, 8010d94 <WM__SendMessage+0x2c>
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	4628      	mov	r0, r5
 8010d86:	3301      	adds	r3, #1
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	4790      	blx	r2
 8010d8c:	6823      	ldr	r3, [r4, #0]
 8010d8e:	3b01      	subs	r3, #1
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	4628      	mov	r0, r5
 8010d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d9a:	f7ff b821 	b.w	800fde0 <WM_DefaultProc>
 8010d9e:	bf00      	nop
 8010da0:	200007a0 	.word	0x200007a0

08010da4 <WM__SendMessageIfEnabled>:
 8010da4:	b570      	push	{r4, r5, r6, lr}
 8010da6:	460e      	mov	r6, r1
 8010da8:	4605      	mov	r5, r0
 8010daa:	f7f7 fd5d 	bl	8008868 <GUI_ALLOC_h2p>
 8010dae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010db0:	06db      	lsls	r3, r3, #27
 8010db2:	d403      	bmi.n	8010dbc <WM__SendMessageIfEnabled+0x18>
 8010db4:	4c0c      	ldr	r4, [pc, #48]	; (8010de8 <WM__SendMessageIfEnabled+0x44>)
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	2b13      	cmp	r3, #19
 8010dba:	dd00      	ble.n	8010dbe <WM__SendMessageIfEnabled+0x1a>
 8010dbc:	bd70      	pop	{r4, r5, r6, pc}
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7f7 fd52 	bl	8008868 <GUI_ALLOC_h2p>
 8010dc4:	6902      	ldr	r2, [r0, #16]
 8010dc6:	6075      	str	r5, [r6, #4]
 8010dc8:	b142      	cbz	r2, 8010ddc <WM__SendMessageIfEnabled+0x38>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	4630      	mov	r0, r6
 8010dce:	3301      	adds	r3, #1
 8010dd0:	6023      	str	r3, [r4, #0]
 8010dd2:	4790      	blx	r2
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	4630      	mov	r0, r6
 8010dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010de2:	f7fe bffd 	b.w	800fde0 <WM_DefaultProc>
 8010de6:	bf00      	nop
 8010de8:	200007a0 	.word	0x200007a0

08010dec <WM__SendMessageNoPara>:
 8010dec:	b530      	push	{r4, r5, lr}
 8010dee:	b085      	sub	sp, #20
 8010df0:	2300      	movs	r3, #0
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	9302      	str	r3, [sp, #8]
 8010df8:	9303      	str	r3, [sp, #12]
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	4605      	mov	r5, r0
 8010dfe:	f7f7 fd33 	bl	8008868 <GUI_ALLOC_h2p>
 8010e02:	6903      	ldr	r3, [r0, #16]
 8010e04:	b11b      	cbz	r3, 8010e0e <WM__SendMessageNoPara+0x22>
 8010e06:	e88d 0030 	stmia.w	sp, {r4, r5}
 8010e0a:	4668      	mov	r0, sp
 8010e0c:	4798      	blx	r3
 8010e0e:	b005      	add	sp, #20
 8010e10:	bd30      	pop	{r4, r5, pc}
 8010e12:	bf00      	nop

08010e14 <WM__UpdateChildPositions>:
 8010e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e18:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8010e1c:	b08b      	sub	sp, #44	; 0x2c
 8010e1e:	f1bb 0f00 	cmp.w	fp, #0
 8010e22:	d074      	beq.n	8010f0e <WM__UpdateChildPositions+0xfa>
 8010e24:	9307      	str	r3, [sp, #28]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	9303      	str	r3, [sp, #12]
 8010e2a:	b28b      	uxth	r3, r1
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010e32:	9202      	str	r2, [sp, #8]
 8010e34:	9106      	str	r1, [sp, #24]
 8010e36:	9305      	str	r3, [sp, #20]
 8010e38:	e039      	b.n	8010eae <WM__UpdateChildPositions+0x9a>
 8010e3a:	9906      	ldr	r1, [sp, #24]
 8010e3c:	eb0a 0601 	add.w	r6, sl, r1
 8010e40:	9907      	ldr	r1, [sp, #28]
 8010e42:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8010e46:	eb08 0401 	add.w	r4, r8, r1
 8010e4a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010e4e:	b236      	sxth	r6, r6
 8010e50:	b224      	sxth	r4, r4
 8010e52:	d04c      	beq.n	8010eee <WM__UpdateChildPositions+0xda>
 8010e54:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8010e58:	d150      	bne.n	8010efc <WM__UpdateChildPositions+0xe8>
 8010e5a:	9a02      	ldr	r2, [sp, #8]
 8010e5c:	189f      	adds	r7, r3, r2
 8010e5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e60:	eb09 0502 	add.w	r5, r9, r2
 8010e64:	b23f      	sxth	r7, r7
 8010e66:	b22d      	sxth	r5, r5
 8010e68:	ebb6 010a 	subs.w	r1, r6, sl
 8010e6c:	eba7 0203 	sub.w	r2, r7, r3
 8010e70:	d100      	bne.n	8010e74 <WM__UpdateChildPositions+0x60>
 8010e72:	b122      	cbz	r2, 8010e7e <WM__UpdateChildPositions+0x6a>
 8010e74:	4658      	mov	r0, fp
 8010e76:	9301      	str	r3, [sp, #4]
 8010e78:	f7ff fbce 	bl	8010618 <WM_MoveWindow>
 8010e7c:	9b01      	ldr	r3, [sp, #4]
 8010e7e:	1ba4      	subs	r4, r4, r6
 8010e80:	ebca 0808 	rsb	r8, sl, r8
 8010e84:	1bed      	subs	r5, r5, r7
 8010e86:	ebc3 0909 	rsb	r9, r3, r9
 8010e8a:	ebb4 0108 	subs.w	r1, r4, r8
 8010e8e:	ebc9 0205 	rsb	r2, r9, r5
 8010e92:	d100      	bne.n	8010e96 <WM__UpdateChildPositions+0x82>
 8010e94:	b112      	cbz	r2, 8010e9c <WM__UpdateChildPositions+0x88>
 8010e96:	4658      	mov	r0, fp
 8010e98:	f7ff f9e8 	bl	801026c <WM_ResizeWindow>
 8010e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e9e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8010ea2:	a809      	add	r0, sp, #36	; 0x24
 8010ea4:	f7f7 fcfc 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010ea8:	f1bb 0f00 	cmp.w	fp, #0
 8010eac:	d02f      	beq.n	8010f0e <WM__UpdateChildPositions+0xfa>
 8010eae:	4658      	mov	r0, fp
 8010eb0:	f7f7 fce4 	bl	800887c <GUI_ALLOC_LockH>
 8010eb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010eb6:	9009      	str	r0, [sp, #36]	; 0x24
 8010eb8:	f402 7120 	and.w	r1, r2, #640	; 0x280
 8010ebc:	2980      	cmp	r1, #128	; 0x80
 8010ebe:	f9b0 a000 	ldrsh.w	sl, [r0]
 8010ec2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010ec6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8010eca:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8010ece:	d01c      	beq.n	8010f0a <WM__UpdateChildPositions+0xf6>
 8010ed0:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 8010ed4:	d0b1      	beq.n	8010e3a <WM__UpdateChildPositions+0x26>
 8010ed6:	9804      	ldr	r0, [sp, #16]
 8010ed8:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8010edc:	eb00 060a 	add.w	r6, r0, sl
 8010ee0:	eb00 0408 	add.w	r4, r0, r8
 8010ee4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010ee8:	b236      	sxth	r6, r6
 8010eea:	b224      	sxth	r4, r4
 8010eec:	d1b2      	bne.n	8010e54 <WM__UpdateChildPositions+0x40>
 8010eee:	9a05      	ldr	r2, [sp, #20]
 8010ef0:	18d7      	adds	r7, r2, r3
 8010ef2:	eb02 0509 	add.w	r5, r2, r9
 8010ef6:	b23f      	sxth	r7, r7
 8010ef8:	b22d      	sxth	r5, r5
 8010efa:	e7b5      	b.n	8010e68 <WM__UpdateChildPositions+0x54>
 8010efc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8010f00:	18cf      	adds	r7, r1, r3
 8010f02:	4449      	add	r1, r9
 8010f04:	b23f      	sxth	r7, r7
 8010f06:	b20d      	sxth	r5, r1
 8010f08:	e7ae      	b.n	8010e68 <WM__UpdateChildPositions+0x54>
 8010f0a:	9803      	ldr	r0, [sp, #12]
 8010f0c:	e7e4      	b.n	8010ed8 <WM__UpdateChildPositions+0xc4>
 8010f0e:	b00b      	add	sp, #44	; 0x2c
 8010f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f14 <WM__AddCriticalHandle>:
 8010f14:	4b02      	ldr	r3, [pc, #8]	; (8010f20 <WM__AddCriticalHandle+0xc>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	6002      	str	r2, [r0, #0]
 8010f1a:	6018      	str	r0, [r3, #0]
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	2003585c 	.word	0x2003585c

08010f24 <WM__RemoveCriticalHandle>:
 8010f24:	b410      	push	{r4}
 8010f26:	4c0e      	ldr	r4, [pc, #56]	; (8010f60 <WM__RemoveCriticalHandle+0x3c>)
 8010f28:	6821      	ldr	r1, [r4, #0]
 8010f2a:	b159      	cbz	r1, 8010f44 <WM__RemoveCriticalHandle+0x20>
 8010f2c:	4281      	cmp	r1, r0
 8010f2e:	d012      	beq.n	8010f56 <WM__RemoveCriticalHandle+0x32>
 8010f30:	680b      	ldr	r3, [r1, #0]
 8010f32:	b90b      	cbnz	r3, 8010f38 <WM__RemoveCriticalHandle+0x14>
 8010f34:	e006      	b.n	8010f44 <WM__RemoveCriticalHandle+0x20>
 8010f36:	4613      	mov	r3, r2
 8010f38:	4298      	cmp	r0, r3
 8010f3a:	d006      	beq.n	8010f4a <WM__RemoveCriticalHandle+0x26>
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	2a00      	cmp	r2, #0
 8010f42:	d1f8      	bne.n	8010f36 <WM__RemoveCriticalHandle+0x12>
 8010f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f48:	4770      	bx	lr
 8010f4a:	b129      	cbz	r1, 8010f58 <WM__RemoveCriticalHandle+0x34>
 8010f4c:	6803      	ldr	r3, [r0, #0]
 8010f4e:	600b      	str	r3, [r1, #0]
 8010f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f54:	4770      	bx	lr
 8010f56:	460b      	mov	r3, r1
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	6023      	str	r3, [r4, #0]
 8010f5c:	e7f2      	b.n	8010f44 <WM__RemoveCriticalHandle+0x20>
 8010f5e:	bf00      	nop
 8010f60:	2003585c 	.word	0x2003585c

08010f64 <WM__GetClientRectEx>:
 8010f64:	b180      	cbz	r0, 8010f88 <WM__GetClientRectEx+0x24>
 8010f66:	b179      	cbz	r1, 8010f88 <WM__GetClientRectEx+0x24>
 8010f68:	b530      	push	{r4, r5, lr}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	460c      	mov	r4, r1
 8010f6e:	f7f7 fc85 	bl	800887c <GUI_ALLOC_LockH>
 8010f72:	ad02      	add	r5, sp, #8
 8010f74:	4621      	mov	r1, r4
 8010f76:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010f7a:	f7fe fa81 	bl	800f480 <WM__GetClientRectWin>
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f7f7 fc8e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8010f84:	b003      	add	sp, #12
 8010f86:	bd30      	pop	{r4, r5, pc}
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop

08010f8c <_GetIndexMask_0>:
 8010f8c:	b508      	push	{r3, lr}
 8010f8e:	f7fa f83b 	bl	800b008 <LCD_GetNumColors>
 8010f92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010f96:	d014      	beq.n	8010fc2 <_GetIndexMask_0+0x36>
 8010f98:	287f      	cmp	r0, #127	; 0x7f
 8010f9a:	d80e      	bhi.n	8010fba <_GetIndexMask_0+0x2e>
 8010f9c:	283f      	cmp	r0, #63	; 0x3f
 8010f9e:	d812      	bhi.n	8010fc6 <_GetIndexMask_0+0x3a>
 8010fa0:	281f      	cmp	r0, #31
 8010fa2:	d80c      	bhi.n	8010fbe <_GetIndexMask_0+0x32>
 8010fa4:	280f      	cmp	r0, #15
 8010fa6:	d810      	bhi.n	8010fca <_GetIndexMask_0+0x3e>
 8010fa8:	2807      	cmp	r0, #7
 8010faa:	d812      	bhi.n	8010fd2 <_GetIndexMask_0+0x46>
 8010fac:	2803      	cmp	r0, #3
 8010fae:	d80e      	bhi.n	8010fce <_GetIndexMask_0+0x42>
 8010fb0:	2801      	cmp	r0, #1
 8010fb2:	bf94      	ite	ls
 8010fb4:	2000      	movls	r0, #0
 8010fb6:	2001      	movhi	r0, #1
 8010fb8:	bd08      	pop	{r3, pc}
 8010fba:	207f      	movs	r0, #127	; 0x7f
 8010fbc:	bd08      	pop	{r3, pc}
 8010fbe:	201f      	movs	r0, #31
 8010fc0:	bd08      	pop	{r3, pc}
 8010fc2:	20ff      	movs	r0, #255	; 0xff
 8010fc4:	bd08      	pop	{r3, pc}
 8010fc6:	203f      	movs	r0, #63	; 0x3f
 8010fc8:	bd08      	pop	{r3, pc}
 8010fca:	200f      	movs	r0, #15
 8010fcc:	bd08      	pop	{r3, pc}
 8010fce:	2003      	movs	r0, #3
 8010fd0:	bd08      	pop	{r3, pc}
 8010fd2:	2007      	movs	r0, #7
 8010fd4:	bd08      	pop	{r3, pc}
 8010fd6:	bf00      	nop

08010fd8 <_Index2Color_0>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4604      	mov	r4, r0
 8010fdc:	f7fa f814 	bl	800b008 <LCD_GetNumColors>
 8010fe0:	4605      	mov	r5, r0
 8010fe2:	f7fa f831 	bl	800b048 <LCD_GetPalette>
 8010fe6:	42a5      	cmp	r5, r4
 8010fe8:	d903      	bls.n	8010ff2 <_Index2Color_0+0x1a>
 8010fea:	b118      	cbz	r0, 8010ff4 <_Index2Color_0+0x1c>
 8010fec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010ff0:	bd38      	pop	{r3, r4, r5, pc}
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	bd38      	pop	{r3, r4, r5, pc}
 8010ff6:	bf00      	nop

08010ff8 <_Color2Index_0>:
 8010ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	f7fa f803 	bl	800b008 <LCD_GetNumColors>
 8011002:	4607      	mov	r7, r0
 8011004:	f7fa f820 	bl	800b048 <LCD_GetPalette>
 8011008:	b158      	cbz	r0, 8011022 <_Color2Index_0+0x2a>
 801100a:	f1a0 0804 	sub.w	r8, r0, #4
 801100e:	4643      	mov	r3, r8
 8011010:	2000      	movs	r0, #0
 8011012:	e002      	b.n	801101a <_Color2Index_0+0x22>
 8011014:	3001      	adds	r0, #1
 8011016:	4287      	cmp	r7, r0
 8011018:	dd05      	ble.n	8011026 <_Color2Index_0+0x2e>
 801101a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801101e:	42b2      	cmp	r2, r6
 8011020:	d1f8      	bne.n	8011014 <_Color2Index_0+0x1c>
 8011022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011026:	2400      	movs	r4, #0
 8011028:	4625      	mov	r5, r4
 801102a:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 801102e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8011032:	4630      	mov	r0, r6
 8011034:	f7f7 fe92 	bl	8008d5c <GUI_CalcColorDist>
 8011038:	4581      	cmp	r9, r0
 801103a:	bf88      	it	hi
 801103c:	462c      	movhi	r4, r5
 801103e:	f105 0501 	add.w	r5, r5, #1
 8011042:	bf88      	it	hi
 8011044:	4681      	movhi	r9, r0
 8011046:	42af      	cmp	r7, r5
 8011048:	dcf1      	bgt.n	801102e <_Color2Index_0+0x36>
 801104a:	4620      	mov	r0, r4
 801104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011050 <_Log2VisBuffered>:
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop

08011054 <_DispLine>:
 8011054:	b570      	push	{r4, r5, r6, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	ab02      	add	r3, sp, #8
 801105a:	4d21      	ldr	r5, [pc, #132]	; (80110e0 <_DispLine+0x8c>)
 801105c:	f843 1d08 	str.w	r1, [r3, #-8]!
 8011060:	4c20      	ldr	r4, [pc, #128]	; (80110e4 <_DispLine+0x90>)
 8011062:	9001      	str	r0, [sp, #4]
 8011064:	4619      	mov	r1, r3
 8011066:	682b      	ldr	r3, [r5, #0]
 8011068:	4615      	mov	r5, r2
 801106a:	4798      	blx	r3
 801106c:	6823      	ldr	r3, [r4, #0]
 801106e:	9001      	str	r0, [sp, #4]
 8011070:	6958      	ldr	r0, [r3, #20]
 8011072:	b118      	cbz	r0, 801107c <_DispLine+0x28>
 8011074:	4629      	mov	r1, r5
 8011076:	f7f7 ffcf 	bl	8009018 <GUI_RectsIntersect>
 801107a:	b1a8      	cbz	r0, 80110a8 <_DispLine+0x54>
 801107c:	2001      	movs	r0, #1
 801107e:	f001 fd4b 	bl	8012b18 <GUI__ManageCache>
 8011082:	6822      	ldr	r2, [r4, #0]
 8011084:	69d3      	ldr	r3, [r2, #28]
 8011086:	695b      	ldr	r3, [r3, #20]
 8011088:	b1ab      	cbz	r3, 80110b6 <_DispLine+0x62>
 801108a:	4c17      	ldr	r4, [pc, #92]	; (80110e8 <_DispLine+0x94>)
 801108c:	6821      	ldr	r1, [r4, #0]
 801108e:	b169      	cbz	r1, 80110ac <_DispLine+0x58>
 8011090:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	9801      	ldr	r0, [sp, #4]
 8011098:	9900      	ldr	r1, [sp, #0]
 801109a:	4798      	blx	r3
 801109c:	4628      	mov	r0, r5
 801109e:	6823      	ldr	r3, [r4, #0]
 80110a0:	4798      	blx	r3
 80110a2:	2000      	movs	r0, #0
 80110a4:	f001 fd38 	bl	8012b18 <GUI__ManageCache>
 80110a8:	b002      	add	sp, #8
 80110aa:	bd70      	pop	{r4, r5, r6, pc}
 80110ac:	689b      	ldr	r3, [r3, #8]
 80110ae:	9900      	ldr	r1, [sp, #0]
 80110b0:	9801      	ldr	r0, [sp, #4]
 80110b2:	4798      	blx	r3
 80110b4:	e7f5      	b.n	80110a2 <_DispLine+0x4e>
 80110b6:	4d0d      	ldr	r5, [pc, #52]	; (80110ec <_DispLine+0x98>)
 80110b8:	9b00      	ldr	r3, [sp, #0]
 80110ba:	3b01      	subs	r3, #1
 80110bc:	2b00      	cmp	r3, #0
 80110be:	a801      	add	r0, sp, #4
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	dbee      	blt.n	80110a2 <_DispLine+0x4e>
 80110c4:	f7f8 ffe2 	bl	800a08c <GUI_UC__GetCharCodeInc>
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	69db      	ldr	r3, [r3, #28]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	4606      	mov	r6, r0
 80110d0:	4798      	blx	r3
 80110d2:	682b      	ldr	r3, [r5, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d0ef      	beq.n	80110b8 <_DispLine+0x64>
 80110d8:	4630      	mov	r0, r6
 80110da:	4798      	blx	r3
 80110dc:	e7ec      	b.n	80110b8 <_DispLine+0x64>
 80110de:	bf00      	nop
 80110e0:	200000bc 	.word	0x200000bc
 80110e4:	2000007c 	.word	0x2000007c
 80110e8:	200357e4 	.word	0x200357e4
 80110ec:	2003581c 	.word	0x2003581c

080110f0 <GUI__GetLineNumChars>:
 80110f0:	b530      	push	{r4, r5, lr}
 80110f2:	b083      	sub	sp, #12
 80110f4:	9001      	str	r0, [sp, #4]
 80110f6:	b300      	cbz	r0, 801113a <GUI__GetLineNumChars+0x4a>
 80110f8:	4b11      	ldr	r3, [pc, #68]	; (8011140 <GUI__GetLineNumChars+0x50>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	69db      	ldr	r3, [r3, #28]
 80110fe:	695b      	ldr	r3, [r3, #20]
 8011100:	460d      	mov	r5, r1
 8011102:	b123      	cbz	r3, 801110e <GUI__GetLineNumChars+0x1e>
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	b113      	cbz	r3, 801110e <GUI__GetLineNumChars+0x1e>
 8011108:	4798      	blx	r3
 801110a:	b003      	add	sp, #12
 801110c:	bd30      	pop	{r4, r5, pc}
 801110e:	2d00      	cmp	r5, #0
 8011110:	bfd8      	it	le
 8011112:	2000      	movle	r0, #0
 8011114:	ddf9      	ble.n	801110a <GUI__GetLineNumChars+0x1a>
 8011116:	2400      	movs	r4, #0
 8011118:	e004      	b.n	8011124 <GUI__GetLineNumChars+0x34>
 801111a:	280a      	cmp	r0, #10
 801111c:	d007      	beq.n	801112e <GUI__GetLineNumChars+0x3e>
 801111e:	3401      	adds	r4, #1
 8011120:	42a5      	cmp	r5, r4
 8011122:	d007      	beq.n	8011134 <GUI__GetLineNumChars+0x44>
 8011124:	a801      	add	r0, sp, #4
 8011126:	f7f8 ffb1 	bl	800a08c <GUI_UC__GetCharCodeInc>
 801112a:	2800      	cmp	r0, #0
 801112c:	d1f5      	bne.n	801111a <GUI__GetLineNumChars+0x2a>
 801112e:	4620      	mov	r0, r4
 8011130:	b003      	add	sp, #12
 8011132:	bd30      	pop	{r4, r5, pc}
 8011134:	4628      	mov	r0, r5
 8011136:	b003      	add	sp, #12
 8011138:	bd30      	pop	{r4, r5, pc}
 801113a:	b003      	add	sp, #12
 801113c:	bd30      	pop	{r4, r5, pc}
 801113e:	bf00      	nop
 8011140:	2000007c 	.word	0x2000007c

08011144 <GUI__GetOverlap>:
 8011144:	b510      	push	{r4, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	a902      	add	r1, sp, #8
 801114a:	2400      	movs	r4, #0
 801114c:	f841 4d04 	str.w	r4, [r1, #-4]!
 8011150:	f7f7 fdf0 	bl	8008d34 <GUI_GetCharDistXEx>
 8011154:	9b01      	ldr	r3, [sp, #4]
 8011156:	4298      	cmp	r0, r3
 8011158:	bfb4      	ite	lt
 801115a:	1a18      	sublt	r0, r3, r0
 801115c:	4620      	movge	r0, r4
 801115e:	b002      	add	sp, #8
 8011160:	bd10      	pop	{r4, pc}
 8011162:	bf00      	nop

08011164 <GUI__GetLineDistX>:
 8011164:	b570      	push	{r4, r5, r6, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	ab04      	add	r3, sp, #16
 801116a:	4a1d      	ldr	r2, [pc, #116]	; (80111e0 <GUI__GetLineDistX+0x7c>)
 801116c:	f843 1d10 	str.w	r1, [r3, #-16]!
 8011170:	9001      	str	r0, [sp, #4]
 8011172:	4619      	mov	r1, r3
 8011174:	6813      	ldr	r3, [r2, #0]
 8011176:	4798      	blx	r3
 8011178:	9001      	str	r0, [sp, #4]
 801117a:	b358      	cbz	r0, 80111d4 <GUI__GetLineDistX+0x70>
 801117c:	4b19      	ldr	r3, [pc, #100]	; (80111e4 <GUI__GetLineDistX+0x80>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	69db      	ldr	r3, [r3, #28]
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	b12b      	cbz	r3, 8011192 <GUI__GetLineDistX+0x2e>
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	b11b      	cbz	r3, 8011192 <GUI__GetLineDistX+0x2e>
 801118a:	9900      	ldr	r1, [sp, #0]
 801118c:	4798      	blx	r3
 801118e:	b004      	add	sp, #16
 8011190:	bd70      	pop	{r4, r5, r6, pc}
 8011192:	9b00      	ldr	r3, [sp, #0]
 8011194:	3b01      	subs	r3, #1
 8011196:	2b00      	cmp	r3, #0
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	bfa8      	it	ge
 801119c:	2400      	movge	r4, #0
 801119e:	db1b      	blt.n	80111d8 <GUI__GetLineDistX+0x74>
 80111a0:	a801      	add	r0, sp, #4
 80111a2:	f7f8 ff73 	bl	800a08c <GUI_UC__GetCharCodeInc>
 80111a6:	4605      	mov	r5, r0
 80111a8:	f7f7 fdb2 	bl	8008d10 <GUI_GetCharDistX>
 80111ac:	9b00      	ldr	r3, [sp, #0]
 80111ae:	3b01      	subs	r3, #1
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	4404      	add	r4, r0
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	daf3      	bge.n	80111a0 <GUI__GetLineDistX+0x3c>
 80111b8:	a904      	add	r1, sp, #16
 80111ba:	2600      	movs	r6, #0
 80111bc:	f841 6d04 	str.w	r6, [r1, #-4]!
 80111c0:	4628      	mov	r0, r5
 80111c2:	f7f7 fdb7 	bl	8008d34 <GUI_GetCharDistXEx>
 80111c6:	9b03      	ldr	r3, [sp, #12]
 80111c8:	4298      	cmp	r0, r3
 80111ca:	bfb8      	it	lt
 80111cc:	1a1e      	sublt	r6, r3, r0
 80111ce:	1930      	adds	r0, r6, r4
 80111d0:	b004      	add	sp, #16
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	b004      	add	sp, #16
 80111d6:	bd70      	pop	{r4, r5, r6, pc}
 80111d8:	2500      	movs	r5, #0
 80111da:	462c      	mov	r4, r5
 80111dc:	e7ec      	b.n	80111b8 <GUI__GetLineDistX+0x54>
 80111de:	bf00      	nop
 80111e0:	200000bc 	.word	0x200000bc
 80111e4:	2000007c 	.word	0x2000007c

080111e8 <GUI__DispLine>:
 80111e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ea:	4b2a      	ldr	r3, [pc, #168]	; (8011294 <GUI__DispLine+0xac>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	b083      	sub	sp, #12
 80111f0:	4604      	mov	r4, r0
 80111f2:	460d      	mov	r5, r1
 80111f4:	b17b      	cbz	r3, 8011216 <GUI__DispLine+0x2e>
 80111f6:	2000      	movs	r0, #0
 80111f8:	f7fe fb64 	bl	800f8c4 <WM__InitIVRSearch>
 80111fc:	b148      	cbz	r0, 8011212 <GUI__DispLine+0x2a>
 80111fe:	466e      	mov	r6, sp
 8011200:	4632      	mov	r2, r6
 8011202:	4629      	mov	r1, r5
 8011204:	4620      	mov	r0, r4
 8011206:	f7ff ff25 	bl	8011054 <_DispLine>
 801120a:	f7fe fa35 	bl	800f678 <WM__GetNextIVR>
 801120e:	2800      	cmp	r0, #0
 8011210:	d1f6      	bne.n	8011200 <GUI__DispLine+0x18>
 8011212:	b003      	add	sp, #12
 8011214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011216:	6810      	ldr	r0, [r2, #0]
 8011218:	6851      	ldr	r1, [r2, #4]
 801121a:	4f1f      	ldr	r7, [pc, #124]	; (8011298 <GUI__DispLine+0xb0>)
 801121c:	466b      	mov	r3, sp
 801121e:	c303      	stmia	r3!, {r0, r1}
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	f8bd 0000 	ldrh.w	r0, [sp]
 8011226:	f8b3 e04c 	ldrh.w	lr, [r3, #76]	; 0x4c
 801122a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 801122e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8011232:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011236:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801123a:	4470      	add	r0, lr
 801123c:	4432      	add	r2, r6
 801123e:	4433      	add	r3, r6
 8011240:	4471      	add	r1, lr
 8011242:	f8ad 0000 	strh.w	r0, [sp]
 8011246:	4668      	mov	r0, sp
 8011248:	466e      	mov	r6, sp
 801124a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801124e:	f8ad 2002 	strh.w	r2, [sp, #2]
 8011252:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011256:	f7fe fb35 	bl	800f8c4 <WM__InitIVRSearch>
 801125a:	b950      	cbnz	r0, 8011272 <GUI__DispLine+0x8a>
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8011260:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8011262:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011264:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011266:	1b09      	subs	r1, r1, r4
 8011268:	1a12      	subs	r2, r2, r0
 801126a:	8459      	strh	r1, [r3, #34]	; 0x22
 801126c:	849a      	strh	r2, [r3, #36]	; 0x24
 801126e:	b003      	add	sp, #12
 8011270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	f8bd 1000 	ldrh.w	r1, [sp]
 8011278:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801127c:	8459      	strh	r1, [r3, #34]	; 0x22
 801127e:	849a      	strh	r2, [r3, #36]	; 0x24
 8011280:	4629      	mov	r1, r5
 8011282:	4632      	mov	r2, r6
 8011284:	4620      	mov	r0, r4
 8011286:	f7ff fee5 	bl	8011054 <_DispLine>
 801128a:	f7fe f9f5 	bl	800f678 <WM__GetNextIVR>
 801128e:	2800      	cmp	r0, #0
 8011290:	d1ef      	bne.n	8011272 <GUI__DispLine+0x8a>
 8011292:	e7e3      	b.n	801125c <GUI__DispLine+0x74>
 8011294:	20035808 	.word	0x20035808
 8011298:	2000007c 	.word	0x2000007c

0801129c <GUIMONO_DispChar>:
 801129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a0:	4e4f      	ldr	r6, [pc, #316]	; (80113e0 <GUIMONO_DispChar+0x144>)
 80112a2:	6833      	ldr	r3, [r6, #0]
 80112a4:	69da      	ldr	r2, [r3, #28]
 80112a6:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 80112aa:	69d4      	ldr	r4, [r2, #28]
 80112ac:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 80112b0:	4583      	cmp	fp, r0
 80112b2:	b08b      	sub	sp, #44	; 0x2c
 80112b4:	d87d      	bhi.n	80113b2 <GUIMONO_DispChar+0x116>
 80112b6:	89e1      	ldrh	r1, [r4, #14]
 80112b8:	4281      	cmp	r1, r0
 80112ba:	d37a      	bcc.n	80113b2 <GUIMONO_DispChar+0x116>
 80112bc:	6821      	ldr	r1, [r4, #0]
 80112be:	9108      	str	r1, [sp, #32]
 80112c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80112c4:	ebcb 0b00 	rsb	fp, fp, r0
 80112c8:	9107      	str	r1, [sp, #28]
 80112ca:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80112ce:	d06a      	beq.n	80113a6 <GUIMONO_DispChar+0x10a>
 80112d0:	7e17      	ldrb	r7, [r2, #24]
 80112d2:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 80112d6:	7ca2      	ldrb	r2, [r4, #18]
 80112d8:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 80112dc:	f894 a010 	ldrb.w	sl, [r4, #16]
 80112e0:	fb17 f302 	smulbb	r3, r7, r2
 80112e4:	4640      	mov	r0, r8
 80112e6:	9306      	str	r3, [sp, #24]
 80112e8:	f7f9 f8c2 	bl	800a470 <LCD_SetDrawMode>
 80112ec:	6833      	ldr	r3, [r6, #0]
 80112ee:	9a06      	ldr	r2, [sp, #24]
 80112f0:	9908      	ldr	r1, [sp, #32]
 80112f2:	9009      	str	r0, [sp, #36]	; 0x24
 80112f4:	fb02 100b 	mla	r0, r2, fp, r1
 80112f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112fa:	69db      	ldr	r3, [r3, #28]
 80112fc:	9004      	str	r0, [sp, #16]
 80112fe:	9205      	str	r2, [sp, #20]
 8011300:	7ca2      	ldrb	r2, [r4, #18]
 8011302:	9203      	str	r2, [sp, #12]
 8011304:	f04f 0b01 	mov.w	fp, #1
 8011308:	f8cd b008 	str.w	fp, [sp, #8]
 801130c:	7eda      	ldrb	r2, [r3, #27]
 801130e:	9201      	str	r2, [sp, #4]
 8011310:	7e9b      	ldrb	r3, [r3, #26]
 8011312:	9300      	str	r3, [sp, #0]
 8011314:	4628      	mov	r0, r5
 8011316:	463b      	mov	r3, r7
 8011318:	4652      	mov	r2, sl
 801131a:	4649      	mov	r1, r9
 801131c:	f7f9 fa76 	bl	800a80c <LCD_DrawBitmap>
 8011320:	9807      	ldr	r0, [sp, #28]
 8011322:	3001      	adds	r0, #1
 8011324:	d01c      	beq.n	8011360 <GUIMONO_DispChar+0xc4>
 8011326:	f048 0002 	orr.w	r0, r8, #2
 801132a:	f7f9 f8a1 	bl	800a470 <LCD_SetDrawMode>
 801132e:	4a2c      	ldr	r2, [pc, #176]	; (80113e0 <GUIMONO_DispChar+0x144>)
 8011330:	9807      	ldr	r0, [sp, #28]
 8011332:	6812      	ldr	r2, [r2, #0]
 8011334:	9908      	ldr	r1, [sp, #32]
 8011336:	9b06      	ldr	r3, [sp, #24]
 8011338:	fb03 1300 	mla	r3, r3, r0, r1
 801133c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 801133e:	69d2      	ldr	r2, [r2, #28]
 8011340:	9105      	str	r1, [sp, #20]
 8011342:	9304      	str	r3, [sp, #16]
 8011344:	7ca3      	ldrb	r3, [r4, #18]
 8011346:	9303      	str	r3, [sp, #12]
 8011348:	f8cd b008 	str.w	fp, [sp, #8]
 801134c:	7ed3      	ldrb	r3, [r2, #27]
 801134e:	9301      	str	r3, [sp, #4]
 8011350:	7e93      	ldrb	r3, [r2, #26]
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	4652      	mov	r2, sl
 8011356:	463b      	mov	r3, r7
 8011358:	4649      	mov	r1, r9
 801135a:	4628      	mov	r0, r5
 801135c:	f7f9 fa56 	bl	800a80c <LCD_DrawBitmap>
 8011360:	6833      	ldr	r3, [r6, #0]
 8011362:	4f1f      	ldr	r7, [pc, #124]	; (80113e0 <GUIMONO_DispChar+0x144>)
 8011364:	69db      	ldr	r3, [r3, #28]
 8011366:	7e5a      	ldrb	r2, [r3, #25]
 8011368:	7e1b      	ldrb	r3, [r3, #24]
 801136a:	429a      	cmp	r2, r3
 801136c:	d914      	bls.n	8011398 <GUIMONO_DispChar+0xfc>
 801136e:	f1b8 0f02 	cmp.w	r8, #2
 8011372:	d011      	beq.n	8011398 <GUIMONO_DispChar+0xfc>
 8011374:	f088 0004 	eor.w	r0, r8, #4
 8011378:	f7f9 f87a 	bl	800a470 <LCD_SetDrawMode>
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	69db      	ldr	r3, [r3, #28]
 8011380:	7e18      	ldrb	r0, [r3, #24]
 8011382:	7ed9      	ldrb	r1, [r3, #27]
 8011384:	7e9a      	ldrb	r2, [r3, #26]
 8011386:	7e5b      	ldrb	r3, [r3, #25]
 8011388:	fb00 9101 	mla	r1, r0, r1, r9
 801138c:	fb0a 5202 	mla	r2, sl, r2, r5
 8011390:	444b      	add	r3, r9
 8011392:	4628      	mov	r0, r5
 8011394:	f7f9 f8fc 	bl	800a590 <LCD_FillRect>
 8011398:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801139c:	f7f9 f868 	bl	800a470 <LCD_SetDrawMode>
 80113a0:	6833      	ldr	r3, [r6, #0]
 80113a2:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 80113a6:	7c62      	ldrb	r2, [r4, #17]
 80113a8:	4415      	add	r5, r2
 80113aa:	845d      	strh	r5, [r3, #34]	; 0x22
 80113ac:	b00b      	add	sp, #44	; 0x2c
 80113ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b2:	68a1      	ldr	r1, [r4, #8]
 80113b4:	2900      	cmp	r1, #0
 80113b6:	d0f6      	beq.n	80113a6 <GUIMONO_DispChar+0x10a>
 80113b8:	880f      	ldrh	r7, [r1, #0]
 80113ba:	42b8      	cmp	r0, r7
 80113bc:	d3f3      	bcc.n	80113a6 <GUIMONO_DispChar+0x10a>
 80113be:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 80113c2:	4586      	cmp	lr, r0
 80113c4:	d3ef      	bcc.n	80113a6 <GUIMONO_DispChar+0x10a>
 80113c6:	6849      	ldr	r1, [r1, #4]
 80113c8:	1bc0      	subs	r0, r0, r7
 80113ca:	b280      	uxth	r0, r0
 80113cc:	6867      	ldr	r7, [r4, #4]
 80113ce:	9708      	str	r7, [sp, #32]
 80113d0:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 80113d4:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 80113d8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80113dc:	9107      	str	r1, [sp, #28]
 80113de:	e774      	b.n	80112ca <GUIMONO_DispChar+0x2e>
 80113e0:	2000007c 	.word	0x2000007c

080113e4 <GUIMONO_GetCharDistX>:
 80113e4:	4b04      	ldr	r3, [pc, #16]	; (80113f8 <GUIMONO_GetCharDistX+0x14>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	69db      	ldr	r3, [r3, #28]
 80113ea:	69db      	ldr	r3, [r3, #28]
 80113ec:	b109      	cbz	r1, 80113f2 <GUIMONO_GetCharDistX+0xe>
 80113ee:	7c1a      	ldrb	r2, [r3, #16]
 80113f0:	600a      	str	r2, [r1, #0]
 80113f2:	7c58      	ldrb	r0, [r3, #17]
 80113f4:	4770      	bx	lr
 80113f6:	bf00      	nop
 80113f8:	2000007c 	.word	0x2000007c

080113fc <GUIMONO_GetFontInfo>:
 80113fc:	2302      	movs	r3, #2
 80113fe:	800b      	strh	r3, [r1, #0]
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop

08011404 <GUIMONO_IsInFont>:
 8011404:	69c3      	ldr	r3, [r0, #28]
 8011406:	899a      	ldrh	r2, [r3, #12]
 8011408:	428a      	cmp	r2, r1
 801140a:	d802      	bhi.n	8011412 <GUIMONO_IsInFont+0xe>
 801140c:	89da      	ldrh	r2, [r3, #14]
 801140e:	428a      	cmp	r2, r1
 8011410:	d211      	bcs.n	8011436 <GUIMONO_IsInFont+0x32>
 8011412:	6898      	ldr	r0, [r3, #8]
 8011414:	b118      	cbz	r0, 801141e <GUIMONO_IsInFont+0x1a>
 8011416:	8803      	ldrh	r3, [r0, #0]
 8011418:	4299      	cmp	r1, r3
 801141a:	d201      	bcs.n	8011420 <GUIMONO_IsInFont+0x1c>
 801141c:	2000      	movs	r0, #0
 801141e:	4770      	bx	lr
 8011420:	8842      	ldrh	r2, [r0, #2]
 8011422:	428a      	cmp	r2, r1
 8011424:	d3fa      	bcc.n	801141c <GUIMONO_IsInFont+0x18>
 8011426:	1ac9      	subs	r1, r1, r3
 8011428:	6843      	ldr	r3, [r0, #4]
 801142a:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 801142e:	43c0      	mvns	r0, r0
 8011430:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8011434:	4770      	bx	lr
 8011436:	2001      	movs	r0, #1
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop

0801143c <GUIPROP_DispChar>:
 801143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011440:	4d3e      	ldr	r5, [pc, #248]	; (801153c <GUIPROP_DispChar+0x100>)
 8011442:	682b      	ldr	r3, [r5, #0]
 8011444:	69da      	ldr	r2, [r3, #28]
 8011446:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 801144a:	69d3      	ldr	r3, [r2, #28]
 801144c:	b089      	sub	sp, #36	; 0x24
 801144e:	b143      	cbz	r3, 8011462 <GUIPROP_DispChar+0x26>
 8011450:	881a      	ldrh	r2, [r3, #0]
 8011452:	4290      	cmp	r0, r2
 8011454:	d302      	bcc.n	801145c <GUIPROP_DispChar+0x20>
 8011456:	8859      	ldrh	r1, [r3, #2]
 8011458:	4281      	cmp	r1, r0
 801145a:	d205      	bcs.n	8011468 <GUIPROP_DispChar+0x2c>
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1f6      	bne.n	8011450 <GUIPROP_DispChar+0x14>
 8011462:	b009      	add	sp, #36	; 0x24
 8011464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011468:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801146c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 801153c <GUIPROP_DispChar+0x100>
 8011470:	1a84      	subs	r4, r0, r2
 8011472:	eb08 07c4 	add.w	r7, r8, r4, lsl #3
 8011476:	4630      	mov	r0, r6
 8011478:	f897 b002 	ldrb.w	fp, [r7, #2]
 801147c:	f7f8 fff8 	bl	800a470 <LCD_SetDrawMode>
 8011480:	4682      	mov	sl, r0
 8011482:	6828      	ldr	r0, [r5, #0]
 8011484:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 8011488:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 801148c:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 8011490:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8011494:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8011498:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 801149c:	f8cd c014 	str.w	ip, [sp, #20]
 80114a0:	9306      	str	r3, [sp, #24]
 80114a2:	f04f 0c01 	mov.w	ip, #1
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	9304      	str	r3, [sp, #16]
 80114aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80114ae:	f8cd c008 	str.w	ip, [sp, #8]
 80114b2:	f89e c01b 	ldrb.w	ip, [lr, #27]
 80114b6:	f8cd c004 	str.w	ip, [sp, #4]
 80114ba:	f89e e01a 	ldrb.w	lr, [lr, #26]
 80114be:	9b06      	ldr	r3, [sp, #24]
 80114c0:	f8cd e000 	str.w	lr, [sp]
 80114c4:	f7f9 f9a2 	bl	800a80c <LCD_DrawBitmap>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	69da      	ldr	r2, [r3, #28]
 80114cc:	7e53      	ldrb	r3, [r2, #25]
 80114ce:	f892 b018 	ldrb.w	fp, [r2, #24]
 80114d2:	455b      	cmp	r3, fp
 80114d4:	d923      	bls.n	801151e <GUIPROP_DispChar+0xe2>
 80114d6:	2e02      	cmp	r6, #2
 80114d8:	9306      	str	r3, [sp, #24]
 80114da:	d020      	beq.n	801151e <GUIPROP_DispChar+0xe2>
 80114dc:	7ed1      	ldrb	r1, [r2, #27]
 80114de:	9107      	str	r1, [sp, #28]
 80114e0:	f7f7 fc70 	bl	8008dc4 <GUI_GetColor>
 80114e4:	4606      	mov	r6, r0
 80114e6:	f7f7 fc61 	bl	8008dac <GUI_GetBkColor>
 80114ea:	f7f7 fde1 	bl	80090b0 <GUI_SetColor>
 80114ee:	f8d9 2000 	ldr.w	r2, [r9]
 80114f2:	f818 c034 	ldrb.w	ip, [r8, r4, lsl #3]
 80114f6:	69d4      	ldr	r4, [r2, #28]
 80114f8:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 80114fc:	f894 e01b 	ldrb.w	lr, [r4, #27]
 8011500:	9907      	ldr	r1, [sp, #28]
 8011502:	f9b2 4024 	ldrsh.w	r4, [r2, #36]	; 0x24
 8011506:	9b06      	ldr	r3, [sp, #24]
 8011508:	fb0c 020e 	mla	r2, ip, lr, r0
 801150c:	fb01 4303 	mla	r3, r1, r3, r4
 8011510:	fb01 410b 	mla	r1, r1, fp, r4
 8011514:	f7f9 f83c 	bl	800a590 <LCD_FillRect>
 8011518:	4630      	mov	r0, r6
 801151a:	f7f7 fdc9 	bl	80090b0 <GUI_SetColor>
 801151e:	4650      	mov	r0, sl
 8011520:	f7f8 ffa6 	bl	800a470 <LCD_SetDrawMode>
 8011524:	682b      	ldr	r3, [r5, #0]
 8011526:	7879      	ldrb	r1, [r7, #1]
 8011528:	69d8      	ldr	r0, [r3, #28]
 801152a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801152c:	7e80      	ldrb	r0, [r0, #26]
 801152e:	fb00 2201 	mla	r2, r0, r1, r2
 8011532:	845a      	strh	r2, [r3, #34]	; 0x22
 8011534:	b009      	add	sp, #36	; 0x24
 8011536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153a:	bf00      	nop
 801153c:	2000007c 	.word	0x2000007c

08011540 <GUIPROP_GetCharDistX>:
 8011540:	4b11      	ldr	r3, [pc, #68]	; (8011588 <GUIPROP_GetCharDistX+0x48>)
 8011542:	b470      	push	{r4, r5, r6}
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	69dd      	ldr	r5, [r3, #28]
 8011548:	69eb      	ldr	r3, [r5, #28]
 801154a:	b143      	cbz	r3, 801155e <GUIPROP_GetCharDistX+0x1e>
 801154c:	881a      	ldrh	r2, [r3, #0]
 801154e:	4290      	cmp	r0, r2
 8011550:	d302      	bcc.n	8011558 <GUIPROP_GetCharDistX+0x18>
 8011552:	885c      	ldrh	r4, [r3, #2]
 8011554:	4284      	cmp	r4, r0
 8011556:	d205      	bcs.n	8011564 <GUIPROP_GetCharDistX+0x24>
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d1f6      	bne.n	801154c <GUIPROP_GetCharDistX+0xc>
 801155e:	4618      	mov	r0, r3
 8011560:	bc70      	pop	{r4, r5, r6}
 8011562:	4770      	bx	lr
 8011564:	685e      	ldr	r6, [r3, #4]
 8011566:	7eac      	ldrb	r4, [r5, #26]
 8011568:	1a82      	subs	r2, r0, r2
 801156a:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801156e:	785b      	ldrb	r3, [r3, #1]
 8011570:	fb13 f004 	smulbb	r0, r3, r4
 8011574:	2900      	cmp	r1, #0
 8011576:	d0f3      	beq.n	8011560 <GUIPROP_GetCharDistX+0x20>
 8011578:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 801157c:	fb14 f303 	smulbb	r3, r4, r3
 8011580:	600b      	str	r3, [r1, #0]
 8011582:	bc70      	pop	{r4, r5, r6}
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop
 8011588:	2000007c 	.word	0x2000007c

0801158c <GUIPROP_GetFontInfo>:
 801158c:	2301      	movs	r3, #1
 801158e:	800b      	strh	r3, [r1, #0]
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop

08011594 <GUIPROP_IsInFont>:
 8011594:	69c0      	ldr	r0, [r0, #28]
 8011596:	b150      	cbz	r0, 80115ae <GUIPROP_IsInFont+0x1a>
 8011598:	8803      	ldrh	r3, [r0, #0]
 801159a:	428b      	cmp	r3, r1
 801159c:	d802      	bhi.n	80115a4 <GUIPROP_IsInFont+0x10>
 801159e:	8843      	ldrh	r3, [r0, #2]
 80115a0:	428b      	cmp	r3, r1
 80115a2:	d203      	bcs.n	80115ac <GUIPROP_IsInFont+0x18>
 80115a4:	6880      	ldr	r0, [r0, #8]
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d1f6      	bne.n	8011598 <GUIPROP_IsInFont+0x4>
 80115aa:	4770      	bx	lr
 80115ac:	2001      	movs	r0, #1
 80115ae:	4770      	bx	lr

080115b0 <GUI_CURSOR_SetPositionEx>:
 80115b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b4:	4614      	mov	r4, r2
 80115b6:	4606      	mov	r6, r0
 80115b8:	4688      	mov	r8, r1
 80115ba:	f7f8 fc8b 	bl	8009ed4 <GUI_Lock>
 80115be:	4620      	mov	r0, r4
 80115c0:	f7f8 fbee 	bl	8009da0 <GUI_GetCursorLayer>
 80115c4:	b9e8      	cbnz	r0, 8011602 <GUI_CURSOR_SetPositionEx+0x52>
 80115c6:	00a7      	lsls	r7, r4, #2
 80115c8:	4d1b      	ldr	r5, [pc, #108]	; (8011638 <GUI_CURSOR_SetPositionEx+0x88>)
 80115ca:	193b      	adds	r3, r7, r4
 80115cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80115d0:	68da      	ldr	r2, [r3, #12]
 80115d2:	42b2      	cmp	r2, r6
 80115d4:	d106      	bne.n	80115e4 <GUI_CURSOR_SetPositionEx+0x34>
 80115d6:	691b      	ldr	r3, [r3, #16]
 80115d8:	4543      	cmp	r3, r8
 80115da:	d103      	bne.n	80115e4 <GUI_CURSOR_SetPositionEx+0x34>
 80115dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115e0:	f7f8 bc6e 	b.w	8009ec0 <GUI_Unlock>
 80115e4:	193b      	adds	r3, r7, r4
 80115e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80115ea:	6958      	ldr	r0, [r3, #20]
 80115ec:	b9d0      	cbnz	r0, 8011624 <GUI_CURSOR_SetPositionEx+0x74>
 80115ee:	443c      	add	r4, r7
 80115f0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80115f4:	60e6      	str	r6, [r4, #12]
 80115f6:	f8c4 8010 	str.w	r8, [r4, #16]
 80115fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115fe:	f7f8 bc5f 	b.w	8009ec0 <GUI_Unlock>
 8011602:	4b0d      	ldr	r3, [pc, #52]	; (8011638 <GUI_CURSOR_SetPositionEx+0x88>)
 8011604:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011608:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801160c:	6863      	ldr	r3, [r4, #4]
 801160e:	689a      	ldr	r2, [r3, #8]
 8011610:	6859      	ldr	r1, [r3, #4]
 8011612:	ebc2 0208 	rsb	r2, r2, r8
 8011616:	1a71      	subs	r1, r6, r1
 8011618:	f7f8 fc00 	bl	8009e1c <GUI_SetLayerPosEx>
 801161c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011620:	f7f8 bc4e 	b.w	8009ec0 <GUI_Unlock>
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	689a      	ldr	r2, [r3, #8]
 8011628:	6859      	ldr	r1, [r3, #4]
 801162a:	ebc2 0208 	rsb	r2, r2, r8
 801162e:	1a71      	subs	r1, r6, r1
 8011630:	f000 f9c2 	bl	80119b8 <GUI_SPRITE_SetPosition>
 8011634:	e7db      	b.n	80115ee <GUI_CURSOR_SetPositionEx+0x3e>
 8011636:	bf00      	nop
 8011638:	200007a4 	.word	0x200007a4

0801163c <_OnExit>:
 801163c:	4b03      	ldr	r3, [pc, #12]	; (801164c <_OnExit+0x10>)
 801163e:	4904      	ldr	r1, [pc, #16]	; (8011650 <_OnExit+0x14>)
 8011640:	2200      	movs	r2, #0
 8011642:	600b      	str	r3, [r1, #0]
 8011644:	604b      	str	r3, [r1, #4]
 8011646:	649a      	str	r2, [r3, #72]	; 0x48
 8011648:	64da      	str	r2, [r3, #76]	; 0x4c
 801164a:	4770      	bx	lr
 801164c:	200007f0 	.word	0x200007f0
 8011650:	200000c0 	.word	0x200000c0

08011654 <GUI_PID_GetState>:
 8011654:	b470      	push	{r4, r5, r6}
 8011656:	4d10      	ldr	r5, [pc, #64]	; (8011698 <GUI_PID_GetState+0x44>)
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	686a      	ldr	r2, [r5, #4]
 801165c:	4293      	cmp	r3, r2
 801165e:	4604      	mov	r4, r0
 8011660:	d00f      	beq.n	8011682 <GUI_PID_GetState+0x2e>
 8011662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011666:	4e0d      	ldr	r6, [pc, #52]	; (801169c <GUI_PID_GetState+0x48>)
 8011668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801166c:	42b3      	cmp	r3, r6
 801166e:	bf14      	ite	ne
 8011670:	330c      	addne	r3, #12
 8011672:	3b3c      	subeq	r3, #60	; 0x3c
 8011674:	602b      	str	r3, [r5, #0]
 8011676:	7a20      	ldrb	r0, [r4, #8]
 8011678:	3000      	adds	r0, #0
 801167a:	bf18      	it	ne
 801167c:	2001      	movne	r0, #1
 801167e:	bc70      	pop	{r4, r5, r6}
 8011680:	4770      	bx	lr
 8011682:	4a07      	ldr	r2, [pc, #28]	; (80116a0 <GUI_PID_GetState+0x4c>)
 8011684:	4293      	cmp	r3, r2
 8011686:	bf06      	itte	eq
 8011688:	333c      	addeq	r3, #60	; 0x3c
 801168a:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 801168e:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 8011692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011696:	e7ee      	b.n	8011676 <GUI_PID_GetState+0x22>
 8011698:	200000c0 	.word	0x200000c0
 801169c:	2000082c 	.word	0x2000082c
 80116a0:	200007f0 	.word	0x200007f0

080116a4 <GUI_PID_StoreState>:
 80116a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116a6:	4e37      	ldr	r6, [pc, #220]	; (8011784 <GUI_PID_StoreState+0xe0>)
 80116a8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80116aa:	b085      	sub	sp, #20
 80116ac:	4604      	mov	r4, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d055      	beq.n	801175e <GUI_PID_StoreState+0xba>
 80116b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80116b6:	4c34      	ldr	r4, [pc, #208]	; (8011788 <GUI_PID_StoreState+0xe4>)
 80116b8:	4d34      	ldr	r5, [pc, #208]	; (801178c <GUI_PID_StoreState+0xe8>)
 80116ba:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80116bc:	6025      	str	r5, [r4, #0]
 80116be:	ad01      	add	r5, sp, #4
 80116c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80116c4:	b10b      	cbz	r3, 80116ca <GUI_PID_StoreState+0x26>
 80116c6:	4628      	mov	r0, r5
 80116c8:	4798      	blx	r3
 80116ca:	4f31      	ldr	r7, [pc, #196]	; (8011790 <GUI_PID_StoreState+0xec>)
 80116cc:	f8d7 e000 	ldr.w	lr, [r7]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	459e      	cmp	lr, r3
 80116d4:	d038      	beq.n	8011748 <GUI_PID_StoreState+0xa4>
 80116d6:	42b3      	cmp	r3, r6
 80116d8:	4c2a      	ldr	r4, [pc, #168]	; (8011784 <GUI_PID_StoreState+0xe0>)
 80116da:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80116de:	d035      	beq.n	801174c <GUI_PID_StoreState+0xa8>
 80116e0:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80116e4:	4291      	cmp	r1, r2
 80116e6:	d012      	beq.n	801170e <GUI_PID_StoreState+0x6a>
 80116e8:	343c      	adds	r4, #60	; 0x3c
 80116ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80116ee:	42a3      	cmp	r3, r4
 80116f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80116f4:	d01b      	beq.n	801172e <GUI_PID_StoreState+0x8a>
 80116f6:	330c      	adds	r3, #12
 80116f8:	459e      	cmp	lr, r3
 80116fa:	607b      	str	r3, [r7, #4]
 80116fc:	d01b      	beq.n	8011736 <GUI_PID_StoreState+0x92>
 80116fe:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8011700:	b10b      	cbz	r3, 8011706 <GUI_PID_StoreState+0x62>
 8011702:	4628      	mov	r0, r5
 8011704:	4798      	blx	r3
 8011706:	f7f8 fcf3 	bl	800a0f0 <GUI_SignalEvent>
 801170a:	b005      	add	sp, #20
 801170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170e:	f1a3 010c 	sub.w	r1, r3, #12
 8011712:	458e      	cmp	lr, r1
 8011714:	d0e8      	beq.n	80116e8 <GUI_PID_StoreState+0x44>
 8011716:	42a1      	cmp	r1, r4
 8011718:	d02e      	beq.n	8011778 <GUI_PID_StoreState+0xd4>
 801171a:	343c      	adds	r4, #60	; 0x3c
 801171c:	390c      	subs	r1, #12
 801171e:	7a09      	ldrb	r1, [r1, #8]
 8011720:	4291      	cmp	r1, r2
 8011722:	d1e2      	bne.n	80116ea <GUI_PID_StoreState+0x46>
 8011724:	42b3      	cmp	r3, r6
 8011726:	bf14      	ite	ne
 8011728:	3b0c      	subne	r3, #12
 801172a:	4623      	moveq	r3, r4
 801172c:	e7dd      	b.n	80116ea <GUI_PID_StoreState+0x46>
 801172e:	4b15      	ldr	r3, [pc, #84]	; (8011784 <GUI_PID_StoreState+0xe0>)
 8011730:	607b      	str	r3, [r7, #4]
 8011732:	459e      	cmp	lr, r3
 8011734:	d1e3      	bne.n	80116fe <GUI_PID_StoreState+0x5a>
 8011736:	4b17      	ldr	r3, [pc, #92]	; (8011794 <GUI_PID_StoreState+0xf0>)
 8011738:	459e      	cmp	lr, r3
 801173a:	bf14      	ite	ne
 801173c:	f10e 030c 	addne.w	r3, lr, #12
 8011740:	f1ae 033c 	subeq.w	r3, lr, #60	; 0x3c
 8011744:	603b      	str	r3, [r7, #0]
 8011746:	e7da      	b.n	80116fe <GUI_PID_StoreState+0x5a>
 8011748:	4c12      	ldr	r4, [pc, #72]	; (8011794 <GUI_PID_StoreState+0xf0>)
 801174a:	e7ce      	b.n	80116ea <GUI_PID_StoreState+0x46>
 801174c:	f896 1044 	ldrb.w	r1, [r6, #68]	; 0x44
 8011750:	4291      	cmp	r1, r2
 8011752:	d00b      	beq.n	801176c <GUI_PID_StoreState+0xc8>
 8011754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011758:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801175c:	e7cb      	b.n	80116f6 <GUI_PID_StoreState+0x52>
 801175e:	4630      	mov	r0, r6
 8011760:	4b0d      	ldr	r3, [pc, #52]	; (8011798 <GUI_PID_StoreState+0xf4>)
 8011762:	f840 3f50 	str.w	r3, [r0, #80]!
 8011766:	f7f7 fe99 	bl	800949c <GUI__RegisterExit>
 801176a:	e7a2      	b.n	80116b2 <GUI_PID_StoreState+0xe>
 801176c:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 8011770:	45a6      	cmp	lr, r4
 8011772:	d0ef      	beq.n	8011754 <GUI_PID_StoreState+0xb0>
 8011774:	4621      	mov	r1, r4
 8011776:	e7d1      	b.n	801171c <GUI_PID_StoreState+0x78>
 8011778:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 801177c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011780:	e7cd      	b.n	801171e <GUI_PID_StoreState+0x7a>
 8011782:	bf00      	nop
 8011784:	200007f0 	.word	0x200007f0
 8011788:	200357dc 	.word	0x200357dc
 801178c:	080107c5 	.word	0x080107c5
 8011790:	200000c0 	.word	0x200000c0
 8011794:	2000082c 	.word	0x2000082c
 8011798:	0801163d 	.word	0x0801163d

0801179c <GUI_PID_IsEmpty>:
 801179c:	4b03      	ldr	r3, [pc, #12]	; (80117ac <GUI_PID_IsEmpty+0x10>)
 801179e:	cb09      	ldmia	r3, {r0, r3}
 80117a0:	1ac0      	subs	r0, r0, r3
 80117a2:	fab0 f080 	clz	r0, r0
 80117a6:	0940      	lsrs	r0, r0, #5
 80117a8:	4770      	bx	lr
 80117aa:	bf00      	nop
 80117ac:	200000c0 	.word	0x200000c0

080117b0 <_CreateBuffer.isra.4>:
 80117b0:	680b      	ldr	r3, [r1, #0]
 80117b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b6:	4680      	mov	r8, r0
 80117b8:	8818      	ldrh	r0, [r3, #0]
 80117ba:	300d      	adds	r0, #13
 80117bc:	0080      	lsls	r0, r0, #2
 80117be:	460d      	mov	r5, r1
 80117c0:	4616      	mov	r6, r2
 80117c2:	f7f7 f843 	bl	800884c <GUI_ALLOC_AllocNoInit>
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d03d      	beq.n	8011846 <_CreateBuffer.isra.4+0x96>
 80117ca:	4607      	mov	r7, r0
 80117cc:	f7f7 f856 	bl	800887c <GUI_ALLOC_LockH>
 80117d0:	f8d8 3000 	ldr.w	r3, [r8]
 80117d4:	4604      	mov	r4, r0
 80117d6:	6998      	ldr	r0, [r3, #24]
 80117d8:	f7f7 fe86 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 80117dc:	2800      	cmp	r0, #0
 80117de:	d032      	beq.n	8011846 <_CreateBuffer.isra.4+0x96>
 80117e0:	68c3      	ldr	r3, [r0, #12]
 80117e2:	2108      	movs	r1, #8
 80117e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e6:	4798      	blx	r3
 80117e8:	2802      	cmp	r0, #2
 80117ea:	dc22      	bgt.n	8011832 <_CreateBuffer.isra.4+0x82>
 80117ec:	61a0      	str	r0, [r4, #24]
 80117ee:	2201      	movs	r2, #1
 80117f0:	682b      	ldr	r3, [r5, #0]
 80117f2:	6122      	str	r2, [r4, #16]
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	61e3      	str	r3, [r4, #28]
 80117f8:	fb03 f302 	mul.w	r3, r3, r2
 80117fc:	6163      	str	r3, [r4, #20]
 80117fe:	f7f7 f869 	bl	80088d4 <GUI_ALLOC_GetMaxSize>
 8011802:	6963      	ldr	r3, [r4, #20]
 8011804:	60a7      	str	r7, [r4, #8]
 8011806:	4298      	cmp	r0, r3
 8011808:	bfb8      	it	lt
 801180a:	6160      	strlt	r0, [r4, #20]
 801180c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8011810:	2300      	movs	r3, #0
 8011812:	2e01      	cmp	r6, #1
 8011814:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8011818:	6022      	str	r2, [r4, #0]
 801181a:	60e3      	str	r3, [r4, #12]
 801181c:	d018      	beq.n	8011850 <_CreateBuffer.isra.4+0xa0>
 801181e:	69e3      	ldr	r3, [r4, #28]
 8011820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011824:	3b01      	subs	r3, #1
 8011826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801182a:	6063      	str	r3, [r4, #4]
 801182c:	4620      	mov	r0, r4
 801182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011832:	2804      	cmp	r0, #4
 8011834:	dd0a      	ble.n	801184c <_CreateBuffer.isra.4+0x9c>
 8011836:	2808      	cmp	r0, #8
 8011838:	dd0e      	ble.n	8011858 <_CreateBuffer.isra.4+0xa8>
 801183a:	2810      	cmp	r0, #16
 801183c:	dd0e      	ble.n	801185c <_CreateBuffer.isra.4+0xac>
 801183e:	2320      	movs	r3, #32
 8011840:	61a3      	str	r3, [r4, #24]
 8011842:	2204      	movs	r2, #4
 8011844:	e7d4      	b.n	80117f0 <_CreateBuffer.isra.4+0x40>
 8011846:	2000      	movs	r0, #0
 8011848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801184c:	2004      	movs	r0, #4
 801184e:	e7cd      	b.n	80117ec <_CreateBuffer.isra.4+0x3c>
 8011850:	6062      	str	r2, [r4, #4]
 8011852:	4620      	mov	r0, r4
 8011854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011858:	2008      	movs	r0, #8
 801185a:	e7c7      	b.n	80117ec <_CreateBuffer.isra.4+0x3c>
 801185c:	2310      	movs	r3, #16
 801185e:	61a3      	str	r3, [r4, #24]
 8011860:	2202      	movs	r2, #2
 8011862:	e7c5      	b.n	80117f0 <_CreateBuffer.isra.4+0x40>

08011864 <_SetBkIndexBuffered>:
 8011864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011868:	b086      	sub	sp, #24
 801186a:	460e      	mov	r6, r1
 801186c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801186e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011870:	428d      	cmp	r5, r1
 8011872:	4607      	mov	r7, r0
 8011874:	4690      	mov	r8, r2
 8011876:	d040      	beq.n	80118fa <_SetBkIndexBuffered+0x96>
 8011878:	68e1      	ldr	r1, [r4, #12]
 801187a:	b369      	cbz	r1, 80118d8 <_SetBkIndexBuffered+0x74>
 801187c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8011880:	2a01      	cmp	r2, #1
 8011882:	d04d      	beq.n	8011920 <_SetBkIndexBuffered+0xbc>
 8011884:	69e2      	ldr	r2, [r4, #28]
 8011886:	6825      	ldr	r5, [r4, #0]
 8011888:	6860      	ldr	r0, [r4, #4]
 801188a:	f8d4 9020 	ldr.w	r9, [r4, #32]
 801188e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011892:	3a01      	subs	r2, #1
 8011894:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8011898:	1d05      	adds	r5, r0, #4
 801189a:	6062      	str	r2, [r4, #4]
 801189c:	f8d3 a000 	ldr.w	sl, [r3]
 80118a0:	f1ba 0f00 	cmp.w	sl, #0
 80118a4:	d019      	beq.n	80118da <_SetBkIndexBuffered+0x76>
 80118a6:	69a2      	ldr	r2, [r4, #24]
 80118a8:	4628      	mov	r0, r5
 80118aa:	f000 fedb 	bl	8012664 <GUI__CompactPixelIndices>
 80118ae:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80118b2:	f8da e00c 	ldr.w	lr, [sl, #12]
 80118b6:	69a0      	ldr	r0, [r4, #24]
 80118b8:	68e3      	ldr	r3, [r4, #12]
 80118ba:	9503      	str	r5, [sp, #12]
 80118bc:	2200      	movs	r2, #0
 80118be:	9205      	str	r2, [sp, #20]
 80118c0:	9204      	str	r2, [sp, #16]
 80118c2:	2101      	movs	r1, #1
 80118c4:	f8cd c008 	str.w	ip, [sp, #8]
 80118c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80118ca:	9001      	str	r0, [sp, #4]
 80118cc:	9100      	str	r1, [sp, #0]
 80118ce:	4650      	mov	r0, sl
 80118d0:	4649      	mov	r1, r9
 80118d2:	f8de 5004 	ldr.w	r5, [lr, #4]
 80118d6:	47a8      	blx	r5
 80118d8:	6862      	ldr	r2, [r4, #4]
 80118da:	f8c2 8000 	str.w	r8, [r2]
 80118de:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80118e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80118e6:	6062      	str	r2, [r4, #4]
 80118e8:	2301      	movs	r3, #1
 80118ea:	62a7      	str	r7, [r4, #40]	; 0x28
 80118ec:	62e6      	str	r6, [r4, #44]	; 0x2c
 80118ee:	60e3      	str	r3, [r4, #12]
 80118f0:	6227      	str	r7, [r4, #32]
 80118f2:	6266      	str	r6, [r4, #36]	; 0x24
 80118f4:	b006      	add	sp, #24
 80118f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118fa:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80118fe:	6a22      	ldr	r2, [r4, #32]
 8011900:	440a      	add	r2, r1
 8011902:	4282      	cmp	r2, r0
 8011904:	d1b8      	bne.n	8011878 <_SetBkIndexBuffered+0x14>
 8011906:	6863      	ldr	r3, [r4, #4]
 8011908:	68e2      	ldr	r2, [r4, #12]
 801190a:	f8c3 8000 	str.w	r8, [r3]
 801190e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 8011912:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011916:	6063      	str	r3, [r4, #4]
 8011918:	1c53      	adds	r3, r2, #1
 801191a:	2a00      	cmp	r2, #0
 801191c:	d1e7      	bne.n	80118ee <_SetBkIndexBuffered+0x8a>
 801191e:	e7e4      	b.n	80118ea <_SetBkIndexBuffered+0x86>
 8011920:	6825      	ldr	r5, [r4, #0]
 8011922:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 8011926:	462a      	mov	r2, r5
 8011928:	e7b7      	b.n	801189a <_SetBkIndexBuffered+0x36>
 801192a:	bf00      	nop

0801192c <_ReleaseBuffer.isra.7>:
 801192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801192e:	68ca      	ldr	r2, [r1, #12]
 8011930:	b089      	sub	sp, #36	; 0x24
 8011932:	460c      	mov	r4, r1
 8011934:	9107      	str	r1, [sp, #28]
 8011936:	2a00      	cmp	r2, #0
 8011938:	d02c      	beq.n	8011994 <_ReleaseBuffer.isra.7+0x68>
 801193a:	f991 3030 	ldrsb.w	r3, [r1, #48]	; 0x30
 801193e:	2b01      	cmp	r3, #1
 8011940:	d031      	beq.n	80119a6 <_ReleaseBuffer.isra.7+0x7a>
 8011942:	69cb      	ldr	r3, [r1, #28]
 8011944:	6a27      	ldr	r7, [r4, #32]
 8011946:	c942      	ldmia	r1, {r1, r6}
 8011948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801194c:	3b01      	subs	r3, #1
 801194e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011952:	6063      	str	r3, [r4, #4]
 8011954:	6805      	ldr	r5, [r0, #0]
 8011956:	3604      	adds	r6, #4
 8011958:	2d00      	cmp	r5, #0
 801195a:	d02b      	beq.n	80119b4 <_ReleaseBuffer.isra.7+0x88>
 801195c:	4611      	mov	r1, r2
 801195e:	4630      	mov	r0, r6
 8011960:	69a2      	ldr	r2, [r4, #24]
 8011962:	f000 fe7f 	bl	8012664 <GUI__CompactPixelIndices>
 8011966:	2100      	movs	r1, #0
 8011968:	68e3      	ldr	r3, [r4, #12]
 801196a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801196e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011970:	9105      	str	r1, [sp, #20]
 8011972:	9104      	str	r1, [sp, #16]
 8011974:	9603      	str	r6, [sp, #12]
 8011976:	6961      	ldr	r1, [r4, #20]
 8011978:	9102      	str	r1, [sp, #8]
 801197a:	69a1      	ldr	r1, [r4, #24]
 801197c:	9101      	str	r1, [sp, #4]
 801197e:	2101      	movs	r1, #1
 8011980:	9100      	str	r1, [sp, #0]
 8011982:	4628      	mov	r0, r5
 8011984:	4639      	mov	r1, r7
 8011986:	f8de 5004 	ldr.w	r5, [lr, #4]
 801198a:	47a8      	blx	r5
 801198c:	9b07      	ldr	r3, [sp, #28]
 801198e:	2200      	movs	r2, #0
 8011990:	60e2      	str	r2, [r4, #12]
 8011992:	461c      	mov	r4, r3
 8011994:	68a4      	ldr	r4, [r4, #8]
 8011996:	a807      	add	r0, sp, #28
 8011998:	f7f6 ff82 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801199c:	4620      	mov	r0, r4
 801199e:	f7f7 f8f3 	bl	8008b88 <GUI_ALLOC_Free>
 80119a2:	b009      	add	sp, #36	; 0x24
 80119a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119a6:	680e      	ldr	r6, [r1, #0]
 80119a8:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80119aa:	4633      	mov	r3, r6
 80119ac:	6063      	str	r3, [r4, #4]
 80119ae:	6805      	ldr	r5, [r0, #0]
 80119b0:	2d00      	cmp	r5, #0
 80119b2:	d1d3      	bne.n	801195c <_ReleaseBuffer.isra.7+0x30>
 80119b4:	4623      	mov	r3, r4
 80119b6:	e7ea      	b.n	801198e <_ReleaseBuffer.isra.7+0x62>

080119b8 <GUI_SPRITE_SetPosition>:
 80119b8:	b900      	cbnz	r0, 80119bc <GUI_SPRITE_SetPosition+0x4>
 80119ba:	4770      	bx	lr
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	b0ab      	sub	sp, #172	; 0xac
 80119c2:	4604      	mov	r4, r0
 80119c4:	460d      	mov	r5, r1
 80119c6:	4616      	mov	r6, r2
 80119c8:	921c      	str	r2, [sp, #112]	; 0x70
 80119ca:	911b      	str	r1, [sp, #108]	; 0x6c
 80119cc:	f7f8 fa82 	bl	8009ed4 <GUI_Lock>
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7f6 ff53 	bl	800887c <GUI_ALLOC_LockH>
 80119d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80119da:	6804      	ldr	r4, [r0, #0]
 80119dc:	9027      	str	r0, [sp, #156]	; 0x9c
 80119de:	429d      	cmp	r5, r3
 80119e0:	9410      	str	r4, [sp, #64]	; 0x40
 80119e2:	f000 8181 	beq.w	8011ce8 <GUI_SPRITE_SetPosition+0x330>
 80119e6:	2000      	movs	r0, #0
 80119e8:	f001 fc1c 	bl	8013224 <GUI_MEMDEV_Select>
 80119ec:	4b9d      	ldr	r3, [pc, #628]	; (8011c64 <GUI_SPRITE_SetPosition+0x2ac>)
 80119ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	6992      	ldr	r2, [r2, #24]
 80119f4:	7c59      	ldrb	r1, [r3, #17]
 80119f6:	901f      	str	r0, [sp, #124]	; 0x7c
 80119f8:	4608      	mov	r0, r1
 80119fa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80119fc:	9120      	str	r1, [sp, #128]	; 0x80
 80119fe:	4282      	cmp	r2, r0
 8011a00:	bf18      	it	ne
 8011a02:	745a      	strbne	r2, [r3, #17]
 8011a04:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011a08:	9305      	str	r3, [sp, #20]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011a10:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011a14:	9216      	str	r2, [sp, #88]	; 0x58
 8011a16:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8011a1a:	9312      	str	r3, [sp, #72]	; 0x48
 8011a1c:	461c      	mov	r4, r3
 8011a1e:	1a09      	subs	r1, r1, r0
 8011a20:	1b12      	subs	r2, r2, r4
 8011a22:	460e      	mov	r6, r1
 8011a24:	910b      	str	r1, [sp, #44]	; 0x2c
 8011a26:	9219      	str	r2, [sp, #100]	; 0x64
 8011a28:	4621      	mov	r1, r4
 8011a2a:	4614      	mov	r4, r2
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	3201      	adds	r2, #1
 8011a30:	8a2b      	ldrh	r3, [r5, #16]
 8011a32:	921a      	str	r2, [sp, #104]	; 0x68
 8011a34:	4622      	mov	r2, r4
 8011a36:	3201      	adds	r2, #1
 8011a38:	079b      	lsls	r3, r3, #30
 8011a3a:	921d      	str	r2, [sp, #116]	; 0x74
 8011a3c:	f140 8135 	bpl.w	8011caa <GUI_SPRITE_SetPosition+0x2f2>
 8011a40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a42:	696a      	ldr	r2, [r5, #20]
 8011a44:	9202      	str	r2, [sp, #8]
 8011a46:	1a1b      	subs	r3, r3, r0
 8011a48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	eba2 0401 	sub.w	r4, r2, r1
 8011a52:	f340 81e8 	ble.w	8011e26 <GUI_SPRITE_SetPosition+0x46e>
 8011a56:	9308      	str	r3, [sp, #32]
 8011a58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a5a:	9304      	str	r3, [sp, #16]
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	f04f 0b01 	mov.w	fp, #1
 8011a62:	9311      	str	r3, [sp, #68]	; 0x44
 8011a64:	2c00      	cmp	r4, #0
 8011a66:	f340 81d2 	ble.w	8011e0e <GUI_SPRITE_SetPosition+0x456>
 8011a6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a6c:	9315      	str	r3, [sp, #84]	; 0x54
 8011a6e:	2301      	movs	r3, #1
 8011a70:	9417      	str	r4, [sp, #92]	; 0x5c
 8011a72:	9314      	str	r3, [sp, #80]	; 0x50
 8011a74:	f04f 0a00 	mov.w	sl, #0
 8011a78:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011a7a:	4b7b      	ldr	r3, [pc, #492]	; (8011c68 <GUI_SPRITE_SetPosition+0x2b0>)
 8011a7c:	69b0      	ldr	r0, [r6, #24]
 8011a7e:	561b      	ldrsb	r3, [r3, r0]
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	f340 81bc 	ble.w	8011dfe <GUI_SPRITE_SetPosition+0x446>
 8011a86:	2300      	movs	r3, #0
 8011a88:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 8011a8c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8011a90:	f7f9 f9fe 	bl	800ae90 <LCD_GetXSizeEx>
 8011a94:	1e43      	subs	r3, r0, #1
 8011a96:	69b0      	ldr	r0, [r6, #24]
 8011a98:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 8011a9c:	f7f9 fa08 	bl	800aeb0 <LCD_GetYSizeEx>
 8011aa0:	3801      	subs	r0, #1
 8011aa2:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 8011aa6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011aa8:	465a      	mov	r2, fp
 8011aaa:	f100 0114 	add.w	r1, r0, #20
 8011aae:	f7ff fe7f 	bl	80117b0 <_CreateBuffer.isra.4>
 8011ab2:	9021      	str	r0, [sp, #132]	; 0x84
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	f000 80f7 	beq.w	8011ca8 <GUI_SPRITE_SetPosition+0x2f0>
 8011aba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011abc:	465a      	mov	r2, fp
 8011abe:	f100 0114 	add.w	r1, r0, #20
 8011ac2:	f7ff fe75 	bl	80117b0 <_CreateBuffer.isra.4>
 8011ac6:	9024      	str	r0, [sp, #144]	; 0x90
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	f000 80e8 	beq.w	8011c9e <GUI_SPRITE_SetPosition+0x2e6>
 8011ace:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011ad0:	68d8      	ldr	r0, [r3, #12]
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	f040 81b8 	bne.w	8011e48 <GUI_SPRITE_SetPosition+0x490>
 8011ad8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011ada:	4552      	cmp	r2, sl
 8011adc:	f000 80db 	beq.w	8011c96 <GUI_SPRITE_SetPosition+0x2de>
 8011ae0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011ae2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ae4:	9022      	str	r0, [sp, #136]	; 0x88
 8011ae6:	009a      	lsls	r2, r3, #2
 8011ae8:	fb0a 1303 	mla	r3, sl, r3, r1
 8011aec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011af0:	930e      	str	r3, [sp, #56]	; 0x38
 8011af2:	ebc4 030a 	rsb	r3, r4, sl
 8011af6:	930c      	str	r3, [sp, #48]	; 0x30
 8011af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011afa:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011afc:	4423      	add	r3, r4
 8011afe:	fb01 f202 	mul.w	r2, r1, r2
 8011b02:	9318      	str	r3, [sp, #96]	; 0x60
 8011b04:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011b08:	921e      	str	r2, [sp, #120]	; 0x78
 8011b0a:	9306      	str	r3, [sp, #24]
 8011b0c:	46d1      	mov	r9, sl
 8011b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b10:	454b      	cmp	r3, r9
 8011b12:	f300 8113 	bgt.w	8011d3c <GUI_SPRITE_SetPosition+0x384>
 8011b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011b18:	454b      	cmp	r3, r9
 8011b1a:	bfb4      	ite	lt
 8011b1c:	2300      	movlt	r3, #0
 8011b1e:	2301      	movge	r3, #1
 8011b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b24:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011b26:	444b      	add	r3, r9
 8011b28:	930d      	str	r3, [sp, #52]	; 0x34
 8011b2a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011b2c:	444b      	add	r3, r9
 8011b2e:	9307      	str	r3, [sp, #28]
 8011b30:	9b04      	ldr	r3, [sp, #16]
 8011b32:	461a      	mov	r2, r3
 8011b34:	42a2      	cmp	r2, r4
 8011b36:	f000 809f 	beq.w	8011c78 <GUI_SPRITE_SetPosition+0x2c0>
 8011b3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011b3c:	9b05      	ldr	r3, [sp, #20]
 8011b3e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8011b42:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b46:	4403      	add	r3, r0
 8011b48:	ebc0 0a04 	rsb	sl, r0, r4
 8011b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b4e:	e051      	b.n	8011bf4 <GUI_SPRITE_SetPosition+0x23c>
 8011b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b52:	42a2      	cmp	r2, r4
 8011b54:	db5e      	blt.n	8011c14 <GUI_SPRITE_SetPosition+0x25c>
 8011b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b58:	2a00      	cmp	r2, #0
 8011b5a:	d05b      	beq.n	8011c14 <GUI_SPRITE_SetPosition+0x25c>
 8011b5c:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8011b60:	42a9      	cmp	r1, r5
 8011b62:	f340 8294 	ble.w	801208e <GUI_SPRITE_SetPosition+0x6d6>
 8011b66:	f04f 0900 	mov.w	r9, #0
 8011b6a:	f1ba 0f00 	cmp.w	sl, #0
 8011b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8011b70:	db0c      	blt.n	8011b8c <GUI_SPRITE_SetPosition+0x1d4>
 8011b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	db09      	blt.n	8011b8c <GUI_SPRITE_SetPosition+0x1d4>
 8011b78:	461a      	mov	r2, r3
 8011b7a:	4651      	mov	r1, sl
 8011b7c:	9802      	ldr	r0, [sp, #8]
 8011b7e:	f7f7 f9d9 	bl	8008f34 <GUI_GetBitmapPixelIndex>
 8011b82:	0e00      	lsrs	r0, r0, #24
 8011b84:	28ff      	cmp	r0, #255	; 0xff
 8011b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b88:	f000 80db 	beq.w	8011d42 <GUI_SPRITE_SetPosition+0x38a>
 8011b8c:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8011b90:	4295      	cmp	r5, r2
 8011b92:	db26      	blt.n	8011be2 <GUI_SPRITE_SetPosition+0x22a>
 8011b94:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 8011b98:	9907      	ldr	r1, [sp, #28]
 8011b9a:	428b      	cmp	r3, r1
 8011b9c:	dc21      	bgt.n	8011be2 <GUI_SPRITE_SetPosition+0x22a>
 8011b9e:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8011ba2:	42ab      	cmp	r3, r5
 8011ba4:	db1d      	blt.n	8011be2 <GUI_SPRITE_SetPosition+0x22a>
 8011ba6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8011baa:	428b      	cmp	r3, r1
 8011bac:	db19      	blt.n	8011be2 <GUI_SPRITE_SetPosition+0x22a>
 8011bae:	2f00      	cmp	r7, #0
 8011bb0:	f000 811a 	beq.w	8011de8 <GUI_SPRITE_SetPosition+0x430>
 8011bb4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011bb6:	4b2d      	ldr	r3, [pc, #180]	; (8011c6c <GUI_SPRITE_SetPosition+0x2b4>)
 8011bb8:	22ff      	movs	r2, #255	; 0xff
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	4798      	blx	r3
 8011bc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bc6:	4b2a      	ldr	r3, [pc, #168]	; (8011c70 <GUI_SPRITE_SetPosition+0x2b8>)
 8011bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bcc:	691b      	ldr	r3, [r3, #16]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4798      	blx	r3
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	4628      	mov	r0, r5
 8011bda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bdc:	9907      	ldr	r1, [sp, #28]
 8011bde:	f7ff fe41 	bl	8011864 <_SetBkIndexBuffered>
 8011be2:	f8c8 9020 	str.w	r9, [r8, #32]
 8011be6:	9b06      	ldr	r3, [sp, #24]
 8011be8:	4498      	add	r8, r3
 8011bea:	9b04      	ldr	r3, [sp, #16]
 8011bec:	445c      	add	r4, fp
 8011bee:	42a3      	cmp	r3, r4
 8011bf0:	44da      	add	sl, fp
 8011bf2:	d03f      	beq.n	8011c74 <GUI_SPRITE_SetPosition+0x2bc>
 8011bf4:	9a03      	ldr	r2, [sp, #12]
 8011bf6:	9802      	ldr	r0, [sp, #8]
 8011bf8:	4621      	mov	r1, r4
 8011bfa:	f7f7 f99b 	bl	8008f34 <GUI_GetBitmapPixelIndex>
 8011bfe:	0e07      	lsrs	r7, r0, #24
 8011c00:	2fff      	cmp	r7, #255	; 0xff
 8011c02:	4606      	mov	r6, r0
 8011c04:	d0ef      	beq.n	8011be6 <GUI_SPRITE_SetPosition+0x22e>
 8011c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c08:	9b05      	ldr	r3, [sp, #20]
 8011c0a:	1915      	adds	r5, r2, r4
 8011c0c:	9a08      	ldr	r2, [sp, #32]
 8011c0e:	42a2      	cmp	r2, r4
 8011c10:	4423      	add	r3, r4
 8011c12:	dd9d      	ble.n	8011b50 <GUI_SPRITE_SetPosition+0x198>
 8011c14:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8011c18:	42aa      	cmp	r2, r5
 8011c1a:	4611      	mov	r1, r2
 8011c1c:	dc6a      	bgt.n	8011cf4 <GUI_SPRITE_SetPosition+0x33c>
 8011c1e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8011c22:	9807      	ldr	r0, [sp, #28]
 8011c24:	4282      	cmp	r2, r0
 8011c26:	f300 8086 	bgt.w	8011d36 <GUI_SPRITE_SetPosition+0x37e>
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8011c2e:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8011c32:	42aa      	cmp	r2, r5
 8011c34:	db05      	blt.n	8011c42 <GUI_SPRITE_SetPosition+0x28a>
 8011c36:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8011c3a:	9907      	ldr	r1, [sp, #28]
 8011c3c:	428a      	cmp	r2, r1
 8011c3e:	f280 8083 	bge.w	8011d48 <GUI_SPRITE_SetPosition+0x390>
 8011c42:	f04f 0900 	mov.w	r9, #0
 8011c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	d18e      	bne.n	8011b6a <GUI_SPRITE_SetPosition+0x1b2>
 8011c4c:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8011c50:	460a      	mov	r2, r1
 8011c52:	4293      	cmp	r3, r2
 8011c54:	db9c      	blt.n	8011b90 <GUI_SPRITE_SetPosition+0x1d8>
 8011c56:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 8011c5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011c5c:	4281      	cmp	r1, r0
 8011c5e:	dc97      	bgt.n	8011b90 <GUI_SPRITE_SetPosition+0x1d8>
 8011c60:	e051      	b.n	8011d06 <GUI_SPRITE_SetPosition+0x34e>
 8011c62:	bf00      	nop
 8011c64:	2000007c 	.word	0x2000007c
 8011c68:	20035810 	.word	0x20035810
 8011c6c:	200000c8 	.word	0x200000c8
 8011c70:	200357f4 	.word	0x200357f4
 8011c74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011c7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c7e:	440b      	add	r3, r1
 8011c80:	930e      	str	r3, [sp, #56]	; 0x38
 8011c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c84:	4619      	mov	r1, r3
 8011c86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c88:	4491      	add	r9, r2
 8011c8a:	4411      	add	r1, r2
 8011c8c:	454b      	cmp	r3, r9
 8011c8e:	910c      	str	r1, [sp, #48]	; 0x30
 8011c90:	f47f af3d 	bne.w	8011b0e <GUI_SPRITE_SetPosition+0x156>
 8011c94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011c96:	6818      	ldr	r0, [r3, #0]
 8011c98:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011c9a:	f7ff fe47 	bl	801192c <_ReleaseBuffer.isra.7>
 8011c9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011ca0:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011ca2:	6818      	ldr	r0, [r3, #0]
 8011ca4:	f7ff fe42 	bl	801192c <_ReleaseBuffer.isra.7>
 8011ca8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8011caa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011cae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011cb0:	80ab      	strh	r3, [r5, #4]
 8011cb2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011cb4:	80e9      	strh	r1, [r5, #6]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	1e4a      	subs	r2, r1, #1
 8011cbc:	4402      	add	r2, r0
 8011cbe:	812b      	strh	r3, [r5, #8]
 8011cc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cc2:	816a      	strh	r2, [r5, #10]
 8011cc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	4291      	cmp	r1, r2
 8011cca:	d002      	beq.n	8011cd2 <GUI_SPRITE_SetPosition+0x31a>
 8011ccc:	4b5c      	ldr	r3, [pc, #368]	; (8011e40 <GUI_SPRITE_SetPosition+0x488>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	745a      	strb	r2, [r3, #17]
 8011cd2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8011cd4:	f001 faa6 	bl	8013224 <GUI_MEMDEV_Select>
 8011cd8:	a827      	add	r0, sp, #156	; 0x9c
 8011cda:	f7f6 fde1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8011cde:	f7f8 f8ef 	bl	8009ec0 <GUI_Unlock>
 8011ce2:	b02b      	add	sp, #172	; 0xac
 8011ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011cec:	429e      	cmp	r6, r3
 8011cee:	f47f ae7a 	bne.w	80119e6 <GUI_SPRITE_SetPosition+0x2e>
 8011cf2:	e7f1      	b.n	8011cd8 <GUI_SPRITE_SetPosition+0x320>
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	db1b      	blt.n	8011d30 <GUI_SPRITE_SetPosition+0x378>
 8011cf8:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 8011cfc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011cfe:	4288      	cmp	r0, r1
 8011d00:	db16      	blt.n	8011d30 <GUI_SPRITE_SetPosition+0x378>
 8011d02:	f04f 0900 	mov.w	r9, #0
 8011d06:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 8011d0a:	4299      	cmp	r1, r3
 8011d0c:	f6ff af40 	blt.w	8011b90 <GUI_SPRITE_SetPosition+0x1d8>
 8011d10:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
 8011d14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011d16:	4281      	cmp	r1, r0
 8011d18:	f6ff af3a 	blt.w	8011b90 <GUI_SPRITE_SetPosition+0x1d8>
 8011d1c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011d1e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8011d22:	9100      	str	r1, [sp, #0]
 8011d24:	4618      	mov	r0, r3
 8011d26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d2a:	f7ff fd9b 	bl	8011864 <_SetBkIndexBuffered>
 8011d2e:	e72d      	b.n	8011b8c <GUI_SPRITE_SetPosition+0x1d4>
 8011d30:	f04f 0900 	mov.w	r9, #0
 8011d34:	e755      	b.n	8011be2 <GUI_SPRITE_SetPosition+0x22a>
 8011d36:	f04f 0900 	mov.w	r9, #0
 8011d3a:	e789      	b.n	8011c50 <GUI_SPRITE_SetPosition+0x298>
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d40:	e6ef      	b.n	8011b22 <GUI_SPRITE_SetPosition+0x16a>
 8011d42:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8011d46:	e784      	b.n	8011c52 <GUI_SPRITE_SetPosition+0x29a>
 8011d48:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8011d4c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8011d50:	42aa      	cmp	r2, r5
 8011d52:	dc3a      	bgt.n	8011dca <GUI_SPRITE_SetPosition+0x412>
 8011d54:	f9b9 1008 	ldrsh.w	r1, [r9, #8]
 8011d58:	42a9      	cmp	r1, r5
 8011d5a:	db36      	blt.n	8011dca <GUI_SPRITE_SetPosition+0x412>
 8011d5c:	f9b9 e006 	ldrsh.w	lr, [r9, #6]
 8011d60:	9907      	ldr	r1, [sp, #28]
 8011d62:	458e      	cmp	lr, r1
 8011d64:	dc31      	bgt.n	8011dca <GUI_SPRITE_SetPosition+0x412>
 8011d66:	f9b9 000a 	ldrsh.w	r0, [r9, #10]
 8011d6a:	4288      	cmp	r0, r1
 8011d6c:	db2d      	blt.n	8011dca <GUI_SPRITE_SetPosition+0x412>
 8011d6e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011d72:	b350      	cbz	r0, 8011dca <GUI_SPRITE_SetPosition+0x412>
 8011d74:	9325      	str	r3, [sp, #148]	; 0x94
 8011d76:	1aab      	subs	r3, r5, r2
 8011d78:	4619      	mov	r1, r3
 8011d7a:	9322      	str	r3, [sp, #136]	; 0x88
 8011d7c:	9b07      	ldr	r3, [sp, #28]
 8011d7e:	ebce 0303 	rsb	r3, lr, r3
 8011d82:	461a      	mov	r2, r3
 8011d84:	9323      	str	r3, [sp, #140]	; 0x8c
 8011d86:	f7f7 f8d5 	bl	8008f34 <GUI_GetBitmapPixelIndex>
 8011d8a:	0e00      	lsrs	r0, r0, #24
 8011d8c:	28ff      	cmp	r0, #255	; 0xff
 8011d8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011d90:	d01b      	beq.n	8011dca <GUI_SPRITE_SetPosition+0x412>
 8011d92:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 8011d96:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8011d9a:	1a52      	subs	r2, r2, r1
 8011d9c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011d9e:	fb02 1201 	mla	r2, r2, r1, r1
 8011da2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011da4:	440a      	add	r2, r1
 8011da6:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8011daa:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8011dae:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 8011db2:	4691      	mov	r9, r2
 8011db4:	9323      	str	r3, [sp, #140]	; 0x8c
 8011db6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011db8:	4b22      	ldr	r3, [pc, #136]	; (8011e44 <GUI_SPRITE_SetPosition+0x48c>)
 8011dba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011dbe:	6912      	ldr	r2, [r2, #16]
 8011dc0:	6852      	ldr	r2, [r2, #4]
 8011dc2:	4790      	blx	r2
 8011dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011dc6:	9022      	str	r0, [sp, #136]	; 0x88
 8011dc8:	e73d      	b.n	8011c46 <GUI_SPRITE_SetPosition+0x28e>
 8011dca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011dcc:	6810      	ldr	r0, [r2, #0]
 8011dce:	b1e0      	cbz	r0, 8011e0a <GUI_SPRITE_SetPosition+0x452>
 8011dd0:	68c2      	ldr	r2, [r0, #12]
 8011dd2:	9322      	str	r3, [sp, #136]	; 0x88
 8011dd4:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8011dd8:	9a07      	ldr	r2, [sp, #28]
 8011dda:	4629      	mov	r1, r5
 8011ddc:	47c8      	blx	r9
 8011dde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011de0:	4681      	mov	r9, r0
 8011de2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8011de6:	e7e5      	b.n	8011db4 <GUI_SPRITE_SetPosition+0x3fc>
 8011de8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011dea:	4b16      	ldr	r3, [pc, #88]	; (8011e44 <GUI_SPRITE_SetPosition+0x48c>)
 8011dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	4798      	blx	r3
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	e6ea      	b.n	8011bd4 <GUI_SPRITE_SetPosition+0x21c>
 8011dfe:	68f3      	ldr	r3, [r6, #12]
 8011e00:	4630      	mov	r0, r6
 8011e02:	a928      	add	r1, sp, #160	; 0xa0
 8011e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e06:	4798      	blx	r3
 8011e08:	e64d      	b.n	8011aa6 <GUI_SPRITE_SetPosition+0xee>
 8011e0a:	4681      	mov	r9, r0
 8011e0c:	e7d2      	b.n	8011db4 <GUI_SPRITE_SetPosition+0x3fc>
 8011e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011e14:	9315      	str	r3, [sp, #84]	; 0x54
 8011e16:	9314      	str	r3, [sp, #80]	; 0x50
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	4423      	add	r3, r4
 8011e20:	4692      	mov	sl, r2
 8011e22:	9319      	str	r3, [sp, #100]	; 0x64
 8011e24:	e628      	b.n	8011a78 <GUI_SPRITE_SetPosition+0xc0>
 8011e26:	2200      	movs	r2, #0
 8011e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e2c:	9208      	str	r2, [sp, #32]
 8011e2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011e30:	9304      	str	r3, [sp, #16]
 8011e32:	469b      	mov	fp, r3
 8011e34:	4633      	mov	r3, r6
 8011e36:	4413      	add	r3, r2
 8011e38:	9611      	str	r6, [sp, #68]	; 0x44
 8011e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e3c:	e612      	b.n	8011a64 <GUI_SPRITE_SetPosition+0xac>
 8011e3e:	bf00      	nop
 8011e40:	2000007c 	.word	0x2000007c
 8011e44:	200357f4 	.word	0x200357f4
 8011e48:	f7f6 fd18 	bl	800887c <GUI_ALLOC_LockH>
 8011e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e4e:	9026      	str	r0, [sp, #152]	; 0x98
 8011e50:	4553      	cmp	r3, sl
 8011e52:	f000 80a9 	beq.w	8011fa8 <GUI_SPRITE_SetPosition+0x5f0>
 8011e56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011e58:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011e5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011e5e:	009a      	lsls	r2, r3, #2
 8011e60:	fb0a 1303 	mla	r3, sl, r3, r1
 8011e64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011e68:	930c      	str	r3, [sp, #48]	; 0x30
 8011e6a:	ebc4 030a 	rsb	r3, r4, sl
 8011e6e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011e70:	930a      	str	r3, [sp, #40]	; 0x28
 8011e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e74:	fb01 f202 	mul.w	r2, r1, r2
 8011e78:	4423      	add	r3, r4
 8011e7a:	920f      	str	r2, [sp, #60]	; 0x3c
 8011e7c:	9318      	str	r3, [sp, #96]	; 0x60
 8011e7e:	9a05      	ldr	r2, [sp, #20]
 8011e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e82:	ea4f 098b 	mov.w	r9, fp, lsl #2
 8011e86:	4413      	add	r3, r2
 8011e88:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e8e:	46d1      	mov	r9, sl
 8011e90:	46da      	mov	sl, fp
 8011e92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e94:	454b      	cmp	r3, r9
 8011e96:	f300 80aa 	bgt.w	8011fee <GUI_SPRITE_SetPosition+0x636>
 8011e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011e9c:	454b      	cmp	r3, r9
 8011e9e:	bfb4      	ite	lt
 8011ea0:	2300      	movlt	r3, #0
 8011ea2:	2301      	movge	r3, #1
 8011ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8011ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ea8:	444b      	add	r3, r9
 8011eaa:	930d      	str	r3, [sp, #52]	; 0x34
 8011eac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011eae:	444b      	add	r3, r9
 8011eb0:	9307      	str	r3, [sp, #28]
 8011eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011eb4:	4598      	cmp	r8, r3
 8011eb6:	d069      	beq.n	8011f8c <GUI_SPRITE_SetPosition+0x5d4>
 8011eb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ebc:	461c      	mov	r4, r3
 8011ebe:	ebc2 0b03 	rsb	fp, r2, r3
 8011ec2:	464a      	mov	r2, r9
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	9802      	ldr	r0, [sp, #8]
 8011ec8:	f7f7 f834 	bl	8008f34 <GUI_GetBitmapPixelIndex>
 8011ecc:	4606      	mov	r6, r0
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d056      	beq.n	8011f80 <GUI_SPRITE_SetPosition+0x5c8>
 8011ed2:	9b05      	ldr	r3, [sp, #20]
 8011ed4:	18e3      	adds	r3, r4, r3
 8011ed6:	9306      	str	r3, [sp, #24]
 8011ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eda:	191f      	adds	r7, r3, r4
 8011edc:	9b08      	ldr	r3, [sp, #32]
 8011ede:	42a3      	cmp	r3, r4
 8011ee0:	dc67      	bgt.n	8011fb2 <GUI_SPRITE_SetPosition+0x5fa>
 8011ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ee4:	42a3      	cmp	r3, r4
 8011ee6:	db64      	blt.n	8011fb2 <GUI_SPRITE_SetPosition+0x5fa>
 8011ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d061      	beq.n	8011fb2 <GUI_SPRITE_SetPosition+0x5fa>
 8011eee:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8011ef2:	42bb      	cmp	r3, r7
 8011ef4:	bfd8      	it	le
 8011ef6:	2301      	movle	r3, #1
 8011ef8:	f300 80c6 	bgt.w	8012088 <GUI_SPRITE_SetPosition+0x6d0>
 8011efc:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8011f00:	9907      	ldr	r1, [sp, #28]
 8011f02:	428a      	cmp	r2, r1
 8011f04:	dc07      	bgt.n	8011f16 <GUI_SPRITE_SetPosition+0x55e>
 8011f06:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8011f0a:	42ba      	cmp	r2, r7
 8011f0c:	db03      	blt.n	8011f16 <GUI_SPRITE_SetPosition+0x55e>
 8011f0e:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8011f12:	428a      	cmp	r2, r1
 8011f14:	da78      	bge.n	8012008 <GUI_SPRITE_SetPosition+0x650>
 8011f16:	2200      	movs	r2, #0
 8011f18:	9204      	str	r2, [sp, #16]
 8011f1a:	b163      	cbz	r3, 8011f36 <GUI_SPRITE_SetPosition+0x57e>
 8011f1c:	f1bb 0f00 	cmp.w	fp, #0
 8011f20:	db5d      	blt.n	8011fde <GUI_SPRITE_SetPosition+0x626>
 8011f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	db5a      	blt.n	8011fde <GUI_SPRITE_SetPosition+0x626>
 8011f28:	461a      	mov	r2, r3
 8011f2a:	4659      	mov	r1, fp
 8011f2c:	9802      	ldr	r0, [sp, #8]
 8011f2e:	f7f7 f801 	bl	8008f34 <GUI_GetBitmapPixelIndex>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d153      	bne.n	8011fde <GUI_SPRITE_SetPosition+0x626>
 8011f36:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8011f3a:	9a06      	ldr	r2, [sp, #24]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	db0e      	blt.n	8011f5e <GUI_SPRITE_SetPosition+0x5a6>
 8011f40:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8011f44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f46:	428a      	cmp	r2, r1
 8011f48:	dc09      	bgt.n	8011f5e <GUI_SPRITE_SetPosition+0x5a6>
 8011f4a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8011f4e:	9906      	ldr	r1, [sp, #24]
 8011f50:	428a      	cmp	r2, r1
 8011f52:	db04      	blt.n	8011f5e <GUI_SPRITE_SetPosition+0x5a6>
 8011f54:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8011f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f5a:	428a      	cmp	r2, r1
 8011f5c:	da38      	bge.n	8011fd0 <GUI_SPRITE_SetPosition+0x618>
 8011f5e:	429f      	cmp	r7, r3
 8011f60:	db0c      	blt.n	8011f7c <GUI_SPRITE_SetPosition+0x5c4>
 8011f62:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 8011f66:	9907      	ldr	r1, [sp, #28]
 8011f68:	428b      	cmp	r3, r1
 8011f6a:	dc07      	bgt.n	8011f7c <GUI_SPRITE_SetPosition+0x5c4>
 8011f6c:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8011f70:	42bb      	cmp	r3, r7
 8011f72:	db03      	blt.n	8011f7c <GUI_SPRITE_SetPosition+0x5c4>
 8011f74:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8011f78:	428b      	cmp	r3, r1
 8011f7a:	da3b      	bge.n	8011ff4 <GUI_SPRITE_SetPosition+0x63c>
 8011f7c:	9b04      	ldr	r3, [sp, #16]
 8011f7e:	622b      	str	r3, [r5, #32]
 8011f80:	4454      	add	r4, sl
 8011f82:	9b03      	ldr	r3, [sp, #12]
 8011f84:	4544      	cmp	r4, r8
 8011f86:	441d      	add	r5, r3
 8011f88:	44d3      	add	fp, sl
 8011f8a:	d19a      	bne.n	8011ec2 <GUI_SPRITE_SetPosition+0x50a>
 8011f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011f90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f92:	440b      	add	r3, r1
 8011f94:	930c      	str	r3, [sp, #48]	; 0x30
 8011f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f98:	4619      	mov	r1, r3
 8011f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f9c:	4491      	add	r9, r2
 8011f9e:	4411      	add	r1, r2
 8011fa0:	4599      	cmp	r9, r3
 8011fa2:	910a      	str	r1, [sp, #40]	; 0x28
 8011fa4:	f47f af75 	bne.w	8011e92 <GUI_SPRITE_SetPosition+0x4da>
 8011fa8:	a826      	add	r0, sp, #152	; 0x98
 8011faa:	f7f6 fc79 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8011fae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011fb0:	e671      	b.n	8011c96 <GUI_SPRITE_SetPosition+0x2de>
 8011fb2:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8011fb6:	42bb      	cmp	r3, r7
 8011fb8:	dd17      	ble.n	8011fea <GUI_SPRITE_SetPosition+0x632>
 8011fba:	9a06      	ldr	r2, [sp, #24]
 8011fbc:	4293      	cmp	r3, r2
 8011fbe:	dc11      	bgt.n	8011fe4 <GUI_SPRITE_SetPosition+0x62c>
 8011fc0:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8011fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011fc6:	4291      	cmp	r1, r2
 8011fc8:	db0c      	blt.n	8011fe4 <GUI_SPRITE_SetPosition+0x62c>
 8011fca:	2200      	movs	r2, #0
 8011fcc:	9204      	str	r2, [sp, #16]
 8011fce:	e7bc      	b.n	8011f4a <GUI_SPRITE_SetPosition+0x592>
 8011fd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011fd2:	6a2a      	ldr	r2, [r5, #32]
 8011fd4:	9806      	ldr	r0, [sp, #24]
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fda:	f7ff fc43 	bl	8011864 <_SetBkIndexBuffered>
 8011fde:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8011fe2:	e7bc      	b.n	8011f5e <GUI_SPRITE_SetPosition+0x5a6>
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	9304      	str	r3, [sp, #16]
 8011fe8:	e7c8      	b.n	8011f7c <GUI_SPRITE_SetPosition+0x5c4>
 8011fea:	2300      	movs	r3, #0
 8011fec:	e786      	b.n	8011efc <GUI_SPRITE_SetPosition+0x544>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8011ff2:	e758      	b.n	8011ea6 <GUI_SPRITE_SetPosition+0x4ee>
 8011ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011ff6:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8011ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	4638      	mov	r0, r7
 8012000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012002:	f7ff fc2f 	bl	8011864 <_SetBkIndexBuffered>
 8012006:	e7b9      	b.n	8011f7c <GUI_SPRITE_SetPosition+0x5c4>
 8012008:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801200a:	9204      	str	r2, [sp, #16]
 801200c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8012010:	42ba      	cmp	r2, r7
 8012012:	dc0d      	bgt.n	8012030 <GUI_SPRITE_SetPosition+0x678>
 8012014:	9804      	ldr	r0, [sp, #16]
 8012016:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801201a:	42b9      	cmp	r1, r7
 801201c:	db08      	blt.n	8012030 <GUI_SPRITE_SetPosition+0x678>
 801201e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8012022:	9907      	ldr	r1, [sp, #28]
 8012024:	458e      	cmp	lr, r1
 8012026:	dc03      	bgt.n	8012030 <GUI_SPRITE_SetPosition+0x678>
 8012028:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 801202c:	4288      	cmp	r0, r1
 801202e:	da0d      	bge.n	801204c <GUI_SPRITE_SetPosition+0x694>
 8012030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012032:	6810      	ldr	r0, [r2, #0]
 8012034:	2800      	cmp	r0, #0
 8012036:	f43f af6e 	beq.w	8011f16 <GUI_SPRITE_SetPosition+0x55e>
 801203a:	68c2      	ldr	r2, [r0, #12]
 801203c:	931e      	str	r3, [sp, #120]	; 0x78
 801203e:	4639      	mov	r1, r7
 8012040:	6953      	ldr	r3, [r2, #20]
 8012042:	9a07      	ldr	r2, [sp, #28]
 8012044:	4798      	blx	r3
 8012046:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012048:	9004      	str	r0, [sp, #16]
 801204a:	e766      	b.n	8011f1a <GUI_SPRITE_SetPosition+0x562>
 801204c:	9323      	str	r3, [sp, #140]	; 0x8c
 801204e:	1abb      	subs	r3, r7, r2
 8012050:	931e      	str	r3, [sp, #120]	; 0x78
 8012052:	ebce 0201 	rsb	r2, lr, r1
 8012056:	4619      	mov	r1, r3
 8012058:	9b04      	ldr	r3, [sp, #16]
 801205a:	9222      	str	r2, [sp, #136]	; 0x88
 801205c:	6958      	ldr	r0, [r3, #20]
 801205e:	f7f6 ff69 	bl	8008f34 <GUI_GetBitmapPixelIndex>
 8012062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012064:	2800      	cmp	r0, #0
 8012066:	d0e3      	beq.n	8012030 <GUI_SPRITE_SetPosition+0x678>
 8012068:	9804      	ldr	r0, [sp, #16]
 801206a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801206e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8012072:	1a52      	subs	r2, r2, r1
 8012074:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012076:	fb02 1201 	mla	r2, r2, r1, r1
 801207a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801207c:	440a      	add	r2, r1
 801207e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012082:	6a12      	ldr	r2, [r2, #32]
 8012084:	9204      	str	r2, [sp, #16]
 8012086:	e748      	b.n	8011f1a <GUI_SPRITE_SetPosition+0x562>
 8012088:	2300      	movs	r3, #0
 801208a:	9304      	str	r3, [sp, #16]
 801208c:	e746      	b.n	8011f1c <GUI_SPRITE_SetPosition+0x564>
 801208e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8012092:	9907      	ldr	r1, [sp, #28]
 8012094:	428a      	cmp	r2, r1
 8012096:	f73f ad66 	bgt.w	8011b66 <GUI_SPRITE_SetPosition+0x1ae>
 801209a:	2201      	movs	r2, #1
 801209c:	920a      	str	r2, [sp, #40]	; 0x28
 801209e:	e5c6      	b.n	8011c2e <GUI_SPRITE_SetPosition+0x276>

080120a0 <GUI_TIMER__GetFirstTimer>:
 80120a0:	b530      	push	{r4, r5, lr}
 80120a2:	4b0a      	ldr	r3, [pc, #40]	; (80120cc <GUI_TIMER__GetFirstTimer+0x2c>)
 80120a4:	681c      	ldr	r4, [r3, #0]
 80120a6:	2300      	movs	r3, #0
 80120a8:	b083      	sub	sp, #12
 80120aa:	6003      	str	r3, [r0, #0]
 80120ac:	b15c      	cbz	r4, 80120c6 <GUI_TIMER__GetFirstTimer+0x26>
 80120ae:	4605      	mov	r5, r0
 80120b0:	4620      	mov	r0, r4
 80120b2:	f7f6 fbe3 	bl	800887c <GUI_ALLOC_LockH>
 80120b6:	ab02      	add	r3, sp, #8
 80120b8:	6902      	ldr	r2, [r0, #16]
 80120ba:	f843 0d04 	str.w	r0, [r3, #-4]!
 80120be:	602a      	str	r2, [r5, #0]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7f6 fbed 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80120c6:	4620      	mov	r0, r4
 80120c8:	b003      	add	sp, #12
 80120ca:	bd30      	pop	{r4, r5, pc}
 80120cc:	20000848 	.word	0x20000848

080120d0 <GUI_TIMER__GetNextTimerLin>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	2300      	movs	r3, #0
 80120d4:	b082      	sub	sp, #8
 80120d6:	600b      	str	r3, [r1, #0]
 80120d8:	b918      	cbnz	r0, 80120e2 <GUI_TIMER__GetNextTimerLin+0x12>
 80120da:	4604      	mov	r4, r0
 80120dc:	4620      	mov	r0, r4
 80120de:	b002      	add	sp, #8
 80120e0:	bd70      	pop	{r4, r5, r6, pc}
 80120e2:	460d      	mov	r5, r1
 80120e4:	f7f6 fbca 	bl	800887c <GUI_ALLOC_LockH>
 80120e8:	6884      	ldr	r4, [r0, #8]
 80120ea:	9001      	str	r0, [sp, #4]
 80120ec:	ae01      	add	r6, sp, #4
 80120ee:	b92c      	cbnz	r4, 80120fc <GUI_TIMER__GetNextTimerLin+0x2c>
 80120f0:	4630      	mov	r0, r6
 80120f2:	f7f6 fbd5 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80120f6:	4620      	mov	r0, r4
 80120f8:	b002      	add	sp, #8
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7f6 fbcf 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012102:	4620      	mov	r0, r4
 8012104:	f7f6 fbba 	bl	800887c <GUI_ALLOC_LockH>
 8012108:	6903      	ldr	r3, [r0, #16]
 801210a:	9001      	str	r0, [sp, #4]
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	e7ef      	b.n	80120f0 <GUI_TIMER__GetNextTimerLin+0x20>

08012110 <GUI_TIMER_Delete>:
 8012110:	b900      	cbnz	r0, 8012114 <GUI_TIMER_Delete+0x4>
 8012112:	4770      	bx	lr
 8012114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012118:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80121dc <GUI_TIMER_Delete+0xcc>
 801211c:	b082      	sub	sp, #8
 801211e:	4605      	mov	r5, r0
 8012120:	f7f7 fed8 	bl	8009ed4 <GUI_Lock>
 8012124:	f8d8 4000 	ldr.w	r4, [r8]
 8012128:	42a5      	cmp	r5, r4
 801212a:	d042      	beq.n	80121b2 <GUI_TIMER_Delete+0xa2>
 801212c:	466e      	mov	r6, sp
 801212e:	b91c      	cbnz	r4, 8012138 <GUI_TIMER_Delete+0x28>
 8012130:	e017      	b.n	8012162 <GUI_TIMER_Delete+0x52>
 8012132:	f7f6 fbb5 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012136:	b1a4      	cbz	r4, 8012162 <GUI_TIMER_Delete+0x52>
 8012138:	4620      	mov	r0, r4
 801213a:	f7f6 fb9f 	bl	800887c <GUI_ALLOC_LockH>
 801213e:	6884      	ldr	r4, [r0, #8]
 8012140:	9000      	str	r0, [sp, #0]
 8012142:	42a5      	cmp	r5, r4
 8012144:	4630      	mov	r0, r6
 8012146:	d1f4      	bne.n	8012132 <GUI_TIMER_Delete+0x22>
 8012148:	4628      	mov	r0, r5
 801214a:	f7f6 fb97 	bl	800887c <GUI_ALLOC_LockH>
 801214e:	9b00      	ldr	r3, [sp, #0]
 8012150:	6882      	ldr	r2, [r0, #8]
 8012152:	9001      	str	r0, [sp, #4]
 8012154:	a801      	add	r0, sp, #4
 8012156:	609a      	str	r2, [r3, #8]
 8012158:	f7f6 fba2 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801215c:	4630      	mov	r0, r6
 801215e:	f7f6 fb9f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012162:	4628      	mov	r0, r5
 8012164:	f7f6 fb8a 	bl	800887c <GUI_ALLOC_LockH>
 8012168:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801216c:	9000      	str	r0, [sp, #0]
 801216e:	42a5      	cmp	r5, r4
 8012170:	4b1a      	ldr	r3, [pc, #104]	; (80121dc <GUI_TIMER_Delete+0xcc>)
 8012172:	d02c      	beq.n	80121ce <GUI_TIMER_Delete+0xbe>
 8012174:	af01      	add	r7, sp, #4
 8012176:	b91c      	cbnz	r4, 8012180 <GUI_TIMER_Delete+0x70>
 8012178:	e010      	b.n	801219c <GUI_TIMER_Delete+0x8c>
 801217a:	f7f6 fb91 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801217e:	b16c      	cbz	r4, 801219c <GUI_TIMER_Delete+0x8c>
 8012180:	4620      	mov	r0, r4
 8012182:	f7f6 fb7b 	bl	800887c <GUI_ALLOC_LockH>
 8012186:	6844      	ldr	r4, [r0, #4]
 8012188:	9001      	str	r0, [sp, #4]
 801218a:	42a5      	cmp	r5, r4
 801218c:	4603      	mov	r3, r0
 801218e:	4638      	mov	r0, r7
 8012190:	d1f3      	bne.n	801217a <GUI_TIMER_Delete+0x6a>
 8012192:	9a00      	ldr	r2, [sp, #0]
 8012194:	6852      	ldr	r2, [r2, #4]
 8012196:	605a      	str	r2, [r3, #4]
 8012198:	f7f6 fb82 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801219c:	4630      	mov	r0, r6
 801219e:	f7f6 fb7f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80121a2:	4628      	mov	r0, r5
 80121a4:	f7f6 fcf0 	bl	8008b88 <GUI_ALLOC_Free>
 80121a8:	f7f7 fe8a 	bl	8009ec0 <GUI_Unlock>
 80121ac:	b002      	add	sp, #8
 80121ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b2:	4628      	mov	r0, r5
 80121b4:	f7f6 fb62 	bl	800887c <GUI_ALLOC_LockH>
 80121b8:	af02      	add	r7, sp, #8
 80121ba:	6883      	ldr	r3, [r0, #8]
 80121bc:	f847 0d04 	str.w	r0, [r7, #-4]!
 80121c0:	4638      	mov	r0, r7
 80121c2:	f8c8 3000 	str.w	r3, [r8]
 80121c6:	466e      	mov	r6, sp
 80121c8:	f7f6 fb6a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80121cc:	e7c9      	b.n	8012162 <GUI_TIMER_Delete+0x52>
 80121ce:	6842      	ldr	r2, [r0, #4]
 80121d0:	605a      	str	r2, [r3, #4]
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7f6 fb64 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80121d8:	e7e3      	b.n	80121a2 <GUI_TIMER_Delete+0x92>
 80121da:	bf00      	nop
 80121dc:	20000848 	.word	0x20000848

080121e0 <GUI_TIMER_GetFlag>:
 80121e0:	b530      	push	{r4, r5, lr}
 80121e2:	b083      	sub	sp, #12
 80121e4:	b918      	cbnz	r0, 80121ee <GUI_TIMER_GetFlag+0xe>
 80121e6:	2401      	movs	r4, #1
 80121e8:	4620      	mov	r0, r4
 80121ea:	b003      	add	sp, #12
 80121ec:	bd30      	pop	{r4, r5, pc}
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	f7f7 fe6f 	bl	8009ed4 <GUI_Lock>
 80121f6:	4620      	mov	r0, r4
 80121f8:	f7f6 fb40 	bl	800887c <GUI_ALLOC_LockH>
 80121fc:	ab02      	add	r3, sp, #8
 80121fe:	8982      	ldrh	r2, [r0, #12]
 8012200:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012204:	422a      	tst	r2, r5
 8012206:	4618      	mov	r0, r3
 8012208:	bf14      	ite	ne
 801220a:	2401      	movne	r4, #1
 801220c:	2400      	moveq	r4, #0
 801220e:	f7f6 fb47 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012212:	f7f7 fe55 	bl	8009ec0 <GUI_Unlock>
 8012216:	4620      	mov	r0, r4
 8012218:	b003      	add	sp, #12
 801221a:	bd30      	pop	{r4, r5, pc}

0801221c <GUI__MixColorsBulk>:
 801221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012220:	b087      	sub	sp, #28
 8012222:	4692      	mov	sl, r2
 8012224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012228:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 801222c:	9001      	str	r0, [sp, #4]
 801222e:	9102      	str	r1, [sp, #8]
 8012230:	2a00      	cmp	r2, #0
 8012232:	d037      	beq.n	80122a4 <GUI__MixColorsBulk+0x88>
 8012234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012236:	f8df b074 	ldr.w	fp, [pc, #116]	; 80122ac <GUI__MixColorsBulk+0x90>
 801223a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80122b0 <GUI__MixColorsBulk+0x94>
 801223e:	0092      	lsls	r2, r2, #2
 8012240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012244:	9304      	str	r3, [sp, #16]
 8012246:	2300      	movs	r3, #0
 8012248:	9205      	str	r2, [sp, #20]
 801224a:	9303      	str	r3, [sp, #12]
 801224c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801224e:	9e02      	ldr	r6, [sp, #8]
 8012250:	9d01      	ldr	r5, [sp, #4]
 8012252:	4657      	mov	r7, sl
 8012254:	f855 0b04 	ldr.w	r0, [r5], #4
 8012258:	f8db 3000 	ldr.w	r3, [fp]
 801225c:	f856 1b04 	ldr.w	r1, [r6], #4
 8012260:	0e02      	lsrs	r2, r0, #24
 8012262:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8012266:	fb09 f202 	mul.w	r2, r9, r2
 801226a:	fba8 e202 	umull	lr, r2, r8, r2
 801226e:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8012272:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8012276:	4798      	blx	r3
 8012278:	3c01      	subs	r4, #1
 801227a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801227e:	f847 0b04 	str.w	r0, [r7], #4
 8012282:	d1e7      	bne.n	8012254 <GUI__MixColorsBulk+0x38>
 8012284:	9a01      	ldr	r2, [sp, #4]
 8012286:	9905      	ldr	r1, [sp, #20]
 8012288:	9b03      	ldr	r3, [sp, #12]
 801228a:	4610      	mov	r0, r2
 801228c:	4408      	add	r0, r1
 801228e:	9a02      	ldr	r2, [sp, #8]
 8012290:	9001      	str	r0, [sp, #4]
 8012292:	448a      	add	sl, r1
 8012294:	9904      	ldr	r1, [sp, #16]
 8012296:	440a      	add	r2, r1
 8012298:	9202      	str	r2, [sp, #8]
 801229a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801229c:	3301      	adds	r3, #1
 801229e:	429a      	cmp	r2, r3
 80122a0:	9303      	str	r3, [sp, #12]
 80122a2:	d1d3      	bne.n	801224c <GUI__MixColorsBulk+0x30>
 80122a4:	b007      	add	sp, #28
 80122a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122aa:	bf00      	nop
 80122ac:	200000c8 	.word	0x200000c8
 80122b0:	80808081 	.word	0x80808081

080122b4 <GUI__MixColors>:
 80122b4:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 80122b8:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 80122bc:	b4f0      	push	{r4, r5, r6, r7}
 80122be:	0e0b      	lsrs	r3, r1, #24
 80122c0:	ea4f 6410 	mov.w	r4, r0, lsr #24
 80122c4:	4b13      	ldr	r3, [pc, #76]	; (8012314 <GUI__MixColors+0x60>)
 80122c6:	fb02 f204 	mul.w	r2, r2, r4
 80122ca:	bf08      	it	eq
 80122cc:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 80122d0:	fba3 3202 	umull	r3, r2, r3, r2
 80122d4:	09d2      	lsrs	r2, r2, #7
 80122d6:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80122da:	0a0d      	lsrs	r5, r1, #8
 80122dc:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 80122e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80122e4:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80122e8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80122ec:	fb02 f106 	mul.w	r1, r2, r6
 80122f0:	fb07 f005 	mul.w	r0, r7, r5
 80122f4:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80122f8:	fb07 1103 	mla	r1, r7, r3, r1
 80122fc:	fb02 0004 	mla	r0, r2, r4, r0
 8012300:	0a09      	lsrs	r1, r1, #8
 8012302:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8012306:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801230a:	4308      	orrs	r0, r1
 801230c:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8012310:	bcf0      	pop	{r4, r5, r6, r7}
 8012312:	4770      	bx	lr
 8012314:	80808081 	.word	0x80808081

08012318 <_OnExit>:
 8012318:	b510      	push	{r4, lr}
 801231a:	4c08      	ldr	r4, [pc, #32]	; (801233c <_OnExit+0x24>)
 801231c:	6820      	ldr	r0, [r4, #0]
 801231e:	f7f6 f973 	bl	8008608 <GUI_ALLOC_FreeFixedBlock>
 8012322:	6860      	ldr	r0, [r4, #4]
 8012324:	f7f6 f970 	bl	8008608 <GUI_ALLOC_FreeFixedBlock>
 8012328:	68a0      	ldr	r0, [r4, #8]
 801232a:	f7f6 f96d 	bl	8008608 <GUI_ALLOC_FreeFixedBlock>
 801232e:	2300      	movs	r3, #0
 8012330:	60a3      	str	r3, [r4, #8]
 8012332:	6063      	str	r3, [r4, #4]
 8012334:	6023      	str	r3, [r4, #0]
 8012336:	60e3      	str	r3, [r4, #12]
 8012338:	6123      	str	r3, [r4, #16]
 801233a:	bd10      	pop	{r4, pc}
 801233c:	2000085c 	.word	0x2000085c

08012340 <GUI__DoAlphaBlending>:
 8012340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012344:	4c98      	ldr	r4, [pc, #608]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 8012346:	b08f      	sub	sp, #60	; 0x3c
 8012348:	461d      	mov	r5, r3
 801234a:	6924      	ldr	r4, [r4, #16]
 801234c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801234e:	9004      	str	r0, [sp, #16]
 8012350:	2600      	movs	r6, #0
 8012352:	9106      	str	r1, [sp, #24]
 8012354:	4693      	mov	fp, r2
 8012356:	601e      	str	r6, [r3, #0]
 8012358:	2c00      	cmp	r4, #0
 801235a:	f000 80f5 	beq.w	8012548 <GUI__DoAlphaBlending+0x208>
 801235e:	4b92      	ldr	r3, [pc, #584]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 8012360:	68de      	ldr	r6, [r3, #12]
 8012362:	461c      	mov	r4, r3
 8012364:	b92e      	cbnz	r6, 8012372 <GUI__DoAlphaBlending+0x32>
 8012366:	4b91      	ldr	r3, [pc, #580]	; (80125ac <GUI__DoAlphaBlending+0x26c>)
 8012368:	681e      	ldr	r6, [r3, #0]
 801236a:	60e6      	str	r6, [r4, #12]
 801236c:	2e00      	cmp	r6, #0
 801236e:	f000 80f5 	beq.w	801255c <GUI__DoAlphaBlending+0x21c>
 8012372:	4b8d      	ldr	r3, [pc, #564]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 8012374:	4f8c      	ldr	r7, [pc, #560]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	9303      	str	r3, [sp, #12]
 801237a:	2b00      	cmp	r3, #0
 801237c:	f000 8104 	beq.w	8012588 <GUI__DoAlphaBlending+0x248>
 8012380:	4b89      	ldr	r3, [pc, #548]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 8012382:	4c89      	ldr	r4, [pc, #548]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	9302      	str	r3, [sp, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	f000 80ef 	beq.w	801256c <GUI__DoAlphaBlending+0x22c>
 801238e:	4a88      	ldr	r2, [pc, #544]	; (80125b0 <GUI__DoAlphaBlending+0x270>)
 8012390:	4b88      	ldr	r3, [pc, #544]	; (80125b4 <GUI__DoAlphaBlending+0x274>)
 8012392:	6812      	ldr	r2, [r2, #0]
 8012394:	7c50      	ldrb	r0, [r2, #17]
 8012396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801239a:	9308      	str	r3, [sp, #32]
 801239c:	691b      	ldr	r3, [r3, #16]
 801239e:	930d      	str	r3, [sp, #52]	; 0x34
 80123a0:	f7f8 fe48 	bl	800b034 <GUI_GetBitsPerPixelEx>
 80123a4:	4b82      	ldr	r3, [pc, #520]	; (80125b0 <GUI__DoAlphaBlending+0x270>)
 80123a6:	9005      	str	r0, [sp, #20]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	7c58      	ldrb	r0, [r3, #17]
 80123ac:	f7f8 fe5c 	bl	800b068 <GUI_GetpfIndex2ColorEx>
 80123b0:	4b81      	ldr	r3, [pc, #516]	; (80125b8 <GUI__DoAlphaBlending+0x278>)
 80123b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80123b4:	42ae      	cmp	r6, r5
 80123b6:	bfa8      	it	ge
 80123b8:	462e      	movge	r6, r5
 80123ba:	4298      	cmp	r0, r3
 80123bc:	f000 80d3 	beq.w	8012566 <GUI__DoAlphaBlending+0x226>
 80123c0:	4b7e      	ldr	r3, [pc, #504]	; (80125bc <GUI__DoAlphaBlending+0x27c>)
 80123c2:	1ac3      	subs	r3, r0, r3
 80123c4:	bf18      	it	ne
 80123c6:	2301      	movne	r3, #1
 80123c8:	930a      	str	r3, [sp, #40]	; 0x28
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	4433      	add	r3, r6
 80123ce:	930c      	str	r3, [sp, #48]	; 0x30
 80123d0:	2500      	movs	r5, #0
 80123d2:	3b01      	subs	r3, #1
 80123d4:	9309      	str	r3, [sp, #36]	; 0x24
 80123d6:	462c      	mov	r4, r5
 80123d8:	46b2      	mov	sl, r6
 80123da:	46d8      	mov	r8, fp
 80123dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80123de:	f858 0b04 	ldr.w	r0, [r8], #4
 80123e2:	4798      	blx	r3
 80123e4:	ea5f 6910 	movs.w	r9, r0, lsr #24
 80123e8:	4607      	mov	r7, r0
 80123ea:	d048      	beq.n	801247e <GUI__DoAlphaBlending+0x13e>
 80123ec:	2c00      	cmp	r4, #0
 80123ee:	d12c      	bne.n	801244a <GUI__DoAlphaBlending+0x10a>
 80123f0:	4b6f      	ldr	r3, [pc, #444]	; (80125b0 <GUI__DoAlphaBlending+0x270>)
 80123f2:	9a04      	ldr	r2, [sp, #16]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80123fa:	1956      	adds	r6, r2, r5
 80123fc:	42b3      	cmp	r3, r6
 80123fe:	dd5c      	ble.n	80124ba <GUI__DoAlphaBlending+0x17a>
 8012400:	1b9a      	subs	r2, r3, r6
 8012402:	9207      	str	r2, [sp, #28]
 8012404:	4614      	mov	r4, r2
 8012406:	461e      	mov	r6, r3
 8012408:	9b03      	ldr	r3, [sp, #12]
 801240a:	9906      	ldr	r1, [sp, #24]
 801240c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801240e:	442c      	add	r4, r5
 8012410:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012414:	9b08      	ldr	r3, [sp, #32]
 8012416:	9301      	str	r3, [sp, #4]
 8012418:	9400      	str	r4, [sp, #0]
 801241a:	460b      	mov	r3, r1
 801241c:	4630      	mov	r0, r6
 801241e:	f000 fcef 	bl	8012e00 <GUI_ReadRectEx>
 8012422:	9b05      	ldr	r3, [sp, #20]
 8012424:	2b17      	cmp	r3, #23
 8012426:	f340 8085 	ble.w	8012534 <GUI__DoAlphaBlending+0x1f4>
 801242a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801242c:	2b00      	cmp	r3, #0
 801242e:	d046      	beq.n	80124be <GUI__DoAlphaBlending+0x17e>
 8012430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012432:	9507      	str	r5, [sp, #28]
 8012434:	1b9e      	subs	r6, r3, r6
 8012436:	4635      	mov	r5, r6
 8012438:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801243a:	6820      	ldr	r0, [r4, #0]
 801243c:	47b0      	blx	r6
 801243e:	3d01      	subs	r5, #1
 8012440:	f844 0b04 	str.w	r0, [r4], #4
 8012444:	d1f9      	bne.n	801243a <GUI__DoAlphaBlending+0xfa>
 8012446:	9d07      	ldr	r5, [sp, #28]
 8012448:	2401      	movs	r4, #1
 801244a:	4b57      	ldr	r3, [pc, #348]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 801244c:	69db      	ldr	r3, [r3, #28]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d13a      	bne.n	80124c8 <GUI__DoAlphaBlending+0x188>
 8012452:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012456:	fa5f f289 	uxtb.w	r2, r9
 801245a:	d11a      	bne.n	8012492 <GUI__DoAlphaBlending+0x152>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	9a02      	ldr	r2, [sp, #8]
 8012460:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012464:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012468:	f1ba 0a01 	subs.w	sl, sl, #1
 801246c:	f105 0501 	add.w	r5, r5, #1
 8012470:	46c3      	mov	fp, r8
 8012472:	d1b2      	bne.n	80123da <GUI__DoAlphaBlending+0x9a>
 8012474:	9c02      	ldr	r4, [sp, #8]
 8012476:	4620      	mov	r0, r4
 8012478:	b00f      	add	sp, #60	; 0x3c
 801247a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012480:	9a02      	ldr	r2, [sp, #8]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 8012488:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801248a:	f043 0301 	orr.w	r3, r3, #1
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	e7ea      	b.n	8012468 <GUI__DoAlphaBlending+0x128>
 8012492:	9903      	ldr	r1, [sp, #12]
 8012494:	4b4a      	ldr	r3, [pc, #296]	; (80125c0 <GUI__DoAlphaBlending+0x280>)
 8012496:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	43d2      	mvns	r2, r2
 801249e:	b2d2      	uxtb	r2, r2
 80124a0:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 80124a4:	4798      	blx	r3
 80124a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124a8:	9a02      	ldr	r2, [sp, #8]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 80124b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80124b2:	f043 0301 	orr.w	r3, r3, #1
 80124b6:	6013      	str	r3, [r2, #0]
 80124b8:	e7d6      	b.n	8012468 <GUI__DoAlphaBlending+0x128>
 80124ba:	9407      	str	r4, [sp, #28]
 80124bc:	e7a4      	b.n	8012408 <GUI__DoAlphaBlending+0xc8>
 80124be:	4b3a      	ldr	r3, [pc, #232]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 80124c0:	69db      	ldr	r3, [r3, #28]
 80124c2:	2401      	movs	r4, #1
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d0c4      	beq.n	8012452 <GUI__DoAlphaBlending+0x112>
 80124c8:	461f      	mov	r7, r3
 80124ca:	9b03      	ldr	r3, [sp, #12]
 80124cc:	00ad      	lsls	r5, r5, #2
 80124ce:	442b      	add	r3, r5
 80124d0:	461c      	mov	r4, r3
 80124d2:	9b02      	ldr	r3, [sp, #8]
 80124d4:	441d      	add	r5, r3
 80124d6:	4621      	mov	r1, r4
 80124d8:	462a      	mov	r2, r5
 80124da:	4653      	mov	r3, sl
 80124dc:	4658      	mov	r0, fp
 80124de:	47b8      	blx	r7
 80124e0:	4656      	mov	r6, sl
 80124e2:	f1ab 0104 	sub.w	r1, fp, #4
 80124e6:	e00b      	b.n	8012500 <GUI__DoAlphaBlending+0x1c0>
 80124e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80124ec:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80124f0:	bf08      	it	eq
 80124f2:	602a      	streq	r2, [r5, #0]
 80124f4:	3e01      	subs	r6, #1
 80124f6:	f104 0404 	add.w	r4, r4, #4
 80124fa:	f105 0504 	add.w	r5, r5, #4
 80124fe:	d00e      	beq.n	801251e <GUI__DoAlphaBlending+0x1de>
 8012500:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012504:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8012508:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	d1eb      	bne.n	80124e8 <GUI__DoAlphaBlending+0x1a8>
 8012510:	3e01      	subs	r6, #1
 8012512:	602b      	str	r3, [r5, #0]
 8012514:	f104 0404 	add.w	r4, r4, #4
 8012518:	f105 0504 	add.w	r5, r5, #4
 801251c:	d1f0      	bne.n	8012500 <GUI__DoAlphaBlending+0x1c0>
 801251e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012520:	9c02      	ldr	r4, [sp, #8]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012526:	f043 0301 	orr.w	r3, r3, #1
 801252a:	4620      	mov	r0, r4
 801252c:	6013      	str	r3, [r2, #0]
 801252e:	b00f      	add	sp, #60	; 0x3c
 8012530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012534:	461a      	mov	r2, r3
 8012536:	9b07      	ldr	r3, [sp, #28]
 8012538:	4620      	mov	r0, r4
 801253a:	ebc3 010a 	rsb	r1, r3, sl
 801253e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012540:	f000 fa1e 	bl	8012980 <GUI__ExpandPixelIndicesEx>
 8012544:	2401      	movs	r4, #1
 8012546:	e780      	b.n	801244a <GUI__DoAlphaBlending+0x10a>
 8012548:	4817      	ldr	r0, [pc, #92]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 801254a:	4b1e      	ldr	r3, [pc, #120]	; (80125c4 <GUI__DoAlphaBlending+0x284>)
 801254c:	4a16      	ldr	r2, [pc, #88]	; (80125a8 <GUI__DoAlphaBlending+0x268>)
 801254e:	f840 3f14 	str.w	r3, [r0, #20]!
 8012552:	2301      	movs	r3, #1
 8012554:	6113      	str	r3, [r2, #16]
 8012556:	f7f6 ffa1 	bl	800949c <GUI__RegisterExit>
 801255a:	e700      	b.n	801235e <GUI__DoAlphaBlending+0x1e>
 801255c:	f7f8 fdc8 	bl	800b0f0 <LCD_GetVXSizeMax>
 8012560:	4606      	mov	r6, r0
 8012562:	60e0      	str	r0, [r4, #12]
 8012564:	e705      	b.n	8012372 <GUI__DoAlphaBlending+0x32>
 8012566:	2300      	movs	r3, #0
 8012568:	930a      	str	r3, [sp, #40]	; 0x28
 801256a:	e72e      	b.n	80123ca <GUI__DoAlphaBlending+0x8a>
 801256c:	68e0      	ldr	r0, [r4, #12]
 801256e:	0080      	lsls	r0, r0, #2
 8012570:	f7f6 f854 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 8012574:	9002      	str	r0, [sp, #8]
 8012576:	6060      	str	r0, [r4, #4]
 8012578:	2800      	cmp	r0, #0
 801257a:	f47f af08 	bne.w	801238e <GUI__DoAlphaBlending+0x4e>
 801257e:	2400      	movs	r4, #0
 8012580:	4620      	mov	r0, r4
 8012582:	b00f      	add	sp, #60	; 0x3c
 8012584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012588:	00b0      	lsls	r0, r6, #2
 801258a:	f7f6 f847 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 801258e:	6038      	str	r0, [r7, #0]
 8012590:	b108      	cbz	r0, 8012596 <GUI__DoAlphaBlending+0x256>
 8012592:	9003      	str	r0, [sp, #12]
 8012594:	e6f4      	b.n	8012380 <GUI__DoAlphaBlending+0x40>
 8012596:	687c      	ldr	r4, [r7, #4]
 8012598:	2c00      	cmp	r4, #0
 801259a:	d1f0      	bne.n	801257e <GUI__DoAlphaBlending+0x23e>
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	0080      	lsls	r0, r0, #2
 80125a0:	f7f6 f83c 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 80125a4:	6078      	str	r0, [r7, #4]
 80125a6:	e766      	b.n	8012476 <GUI__DoAlphaBlending+0x136>
 80125a8:	2000085c 	.word	0x2000085c
 80125ac:	200357ec 	.word	0x200357ec
 80125b0:	2000007c 	.word	0x2000007c
 80125b4:	200357f4 	.word	0x200357f4
 80125b8:	08013f01 	.word	0x08013f01
 80125bc:	08013f05 	.word	0x08013f05
 80125c0:	200000c8 	.word	0x200000c8
 80125c4:	08012319 	.word	0x08012319

080125c8 <GUI__AllocAlphaBuffer>:
 80125c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ca:	b083      	sub	sp, #12
 80125cc:	b9c0      	cbnz	r0, 8012600 <GUI__AllocAlphaBuffer+0x38>
 80125ce:	4c22      	ldr	r4, [pc, #136]	; (8012658 <GUI__AllocAlphaBuffer+0x90>)
 80125d0:	6923      	ldr	r3, [r4, #16]
 80125d2:	4605      	mov	r5, r0
 80125d4:	b1cb      	cbz	r3, 801260a <GUI__AllocAlphaBuffer+0x42>
 80125d6:	68e0      	ldr	r0, [r4, #12]
 80125d8:	4e1f      	ldr	r6, [pc, #124]	; (8012658 <GUI__AllocAlphaBuffer+0x90>)
 80125da:	b918      	cbnz	r0, 80125e4 <GUI__AllocAlphaBuffer+0x1c>
 80125dc:	4b1f      	ldr	r3, [pc, #124]	; (801265c <GUI__AllocAlphaBuffer+0x94>)
 80125de:	6818      	ldr	r0, [r3, #0]
 80125e0:	60f0      	str	r0, [r6, #12]
 80125e2:	b1d8      	cbz	r0, 801261c <GUI__AllocAlphaBuffer+0x54>
 80125e4:	6823      	ldr	r3, [r4, #0]
 80125e6:	4f1c      	ldr	r7, [pc, #112]	; (8012658 <GUI__AllocAlphaBuffer+0x90>)
 80125e8:	2600      	movs	r6, #0
 80125ea:	b323      	cbz	r3, 8012636 <GUI__AllocAlphaBuffer+0x6e>
 80125ec:	6863      	ldr	r3, [r4, #4]
 80125ee:	4f1a      	ldr	r7, [pc, #104]	; (8012658 <GUI__AllocAlphaBuffer+0x90>)
 80125f0:	b1c3      	cbz	r3, 8012624 <GUI__AllocAlphaBuffer+0x5c>
 80125f2:	b115      	cbz	r5, 80125fa <GUI__AllocAlphaBuffer+0x32>
 80125f4:	68a3      	ldr	r3, [r4, #8]
 80125f6:	4c18      	ldr	r4, [pc, #96]	; (8012658 <GUI__AllocAlphaBuffer+0x90>)
 80125f8:	b32b      	cbz	r3, 8012646 <GUI__AllocAlphaBuffer+0x7e>
 80125fa:	4630      	mov	r0, r6
 80125fc:	b003      	add	sp, #12
 80125fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012600:	4c15      	ldr	r4, [pc, #84]	; (8012658 <GUI__AllocAlphaBuffer+0x90>)
 8012602:	6923      	ldr	r3, [r4, #16]
 8012604:	ad01      	add	r5, sp, #4
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1e5      	bne.n	80125d6 <GUI__AllocAlphaBuffer+0xe>
 801260a:	4620      	mov	r0, r4
 801260c:	4b14      	ldr	r3, [pc, #80]	; (8012660 <GUI__AllocAlphaBuffer+0x98>)
 801260e:	f840 3f14 	str.w	r3, [r0, #20]!
 8012612:	2301      	movs	r3, #1
 8012614:	6123      	str	r3, [r4, #16]
 8012616:	f7f6 ff41 	bl	800949c <GUI__RegisterExit>
 801261a:	e7dc      	b.n	80125d6 <GUI__AllocAlphaBuffer+0xe>
 801261c:	f7f8 fd68 	bl	800b0f0 <LCD_GetVXSizeMax>
 8012620:	60f0      	str	r0, [r6, #12]
 8012622:	e7df      	b.n	80125e4 <GUI__AllocAlphaBuffer+0x1c>
 8012624:	68f8      	ldr	r0, [r7, #12]
 8012626:	0080      	lsls	r0, r0, #2
 8012628:	f7f5 fff8 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 801262c:	2800      	cmp	r0, #0
 801262e:	bf08      	it	eq
 8012630:	2601      	moveq	r6, #1
 8012632:	6078      	str	r0, [r7, #4]
 8012634:	e7dd      	b.n	80125f2 <GUI__AllocAlphaBuffer+0x2a>
 8012636:	0080      	lsls	r0, r0, #2
 8012638:	f7f5 fff0 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 801263c:	fab0 f680 	clz	r6, r0
 8012640:	6038      	str	r0, [r7, #0]
 8012642:	0976      	lsrs	r6, r6, #5
 8012644:	e7d2      	b.n	80125ec <GUI__AllocAlphaBuffer+0x24>
 8012646:	68e0      	ldr	r0, [r4, #12]
 8012648:	0080      	lsls	r0, r0, #2
 801264a:	f7f5 ffe7 	bl	800861c <GUI_ALLOC_GetFixedBlock>
 801264e:	2800      	cmp	r0, #0
 8012650:	bf08      	it	eq
 8012652:	2601      	moveq	r6, #1
 8012654:	60a0      	str	r0, [r4, #8]
 8012656:	e7d0      	b.n	80125fa <GUI__AllocAlphaBuffer+0x32>
 8012658:	2000085c 	.word	0x2000085c
 801265c:	200357ec 	.word	0x200357ec
 8012660:	08012319 	.word	0x08012319

08012664 <GUI__CompactPixelIndices>:
 8012664:	2a08      	cmp	r2, #8
 8012666:	b410      	push	{r4}
 8012668:	dd0e      	ble.n	8012688 <GUI__CompactPixelIndices+0x24>
 801266a:	2a10      	cmp	r2, #16
 801266c:	dc1c      	bgt.n	80126a8 <GUI__CompactPixelIndices+0x44>
 801266e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012672:	4603      	mov	r3, r0
 8012674:	f850 2b04 	ldr.w	r2, [r0], #4
 8012678:	f823 2b02 	strh.w	r2, [r3], #2
 801267c:	4299      	cmp	r1, r3
 801267e:	d1f9      	bne.n	8012674 <GUI__CompactPixelIndices+0x10>
 8012680:	2001      	movs	r0, #1
 8012682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012686:	4770      	bx	lr
 8012688:	2a02      	cmp	r2, #2
 801268a:	d011      	beq.n	80126b0 <GUI__CompactPixelIndices+0x4c>
 801268c:	2a04      	cmp	r2, #4
 801268e:	f000 8090 	beq.w	80127b2 <GUI__CompactPixelIndices+0x14e>
 8012692:	2a01      	cmp	r2, #1
 8012694:	d03c      	beq.n	8012710 <GUI__CompactPixelIndices+0xac>
 8012696:	4401      	add	r1, r0
 8012698:	4603      	mov	r3, r0
 801269a:	f850 2b04 	ldr.w	r2, [r0], #4
 801269e:	f803 2b01 	strb.w	r2, [r3], #1
 80126a2:	4299      	cmp	r1, r3
 80126a4:	d1f9      	bne.n	801269a <GUI__CompactPixelIndices+0x36>
 80126a6:	e7eb      	b.n	8012680 <GUI__CompactPixelIndices+0x1c>
 80126a8:	2000      	movs	r0, #0
 80126aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ae:	4770      	bx	lr
 80126b0:	f100 0210 	add.w	r2, r0, #16
 80126b4:	f852 3c10 	ldr.w	r3, [r2, #-16]
 80126b8:	2901      	cmp	r1, #1
 80126ba:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	d023      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 80126c2:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 80126c6:	0124      	lsls	r4, r4, #4
 80126c8:	f004 0430 	and.w	r4, r4, #48	; 0x30
 80126cc:	2902      	cmp	r1, #2
 80126ce:	ea43 0304 	orr.w	r3, r3, r4
 80126d2:	d01a      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 80126d4:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80126d8:	00a4      	lsls	r4, r4, #2
 80126da:	f004 040c 	and.w	r4, r4, #12
 80126de:	2903      	cmp	r1, #3
 80126e0:	ea43 0304 	orr.w	r3, r3, r4
 80126e4:	d011      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 80126e6:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80126ea:	f004 0403 	and.w	r4, r4, #3
 80126ee:	4323      	orrs	r3, r4
 80126f0:	3904      	subs	r1, #4
 80126f2:	f800 3b01 	strb.w	r3, [r0], #1
 80126f6:	f102 0210 	add.w	r2, r2, #16
 80126fa:	d0c1      	beq.n	8012680 <GUI__CompactPixelIndices+0x1c>
 80126fc:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8012700:	2901      	cmp	r1, #1
 8012702:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8012706:	b2db      	uxtb	r3, r3
 8012708:	d1db      	bne.n	80126c2 <GUI__CompactPixelIndices+0x5e>
 801270a:	7003      	strb	r3, [r0, #0]
 801270c:	2001      	movs	r0, #1
 801270e:	e7b8      	b.n	8012682 <GUI__CompactPixelIndices+0x1e>
 8012710:	f100 0220 	add.w	r2, r0, #32
 8012714:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8012718:	2901      	cmp	r1, #1
 801271a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801271e:	b2db      	uxtb	r3, r3
 8012720:	d0f3      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 8012722:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 8012726:	01a4      	lsls	r4, r4, #6
 8012728:	f004 0440 	and.w	r4, r4, #64	; 0x40
 801272c:	2902      	cmp	r1, #2
 801272e:	ea43 0304 	orr.w	r3, r3, r4
 8012732:	d0ea      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 8012734:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8012738:	0164      	lsls	r4, r4, #5
 801273a:	f004 0420 	and.w	r4, r4, #32
 801273e:	2903      	cmp	r1, #3
 8012740:	ea43 0304 	orr.w	r3, r3, r4
 8012744:	d0e1      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 8012746:	f852 4c14 	ldr.w	r4, [r2, #-20]
 801274a:	0124      	lsls	r4, r4, #4
 801274c:	f004 0410 	and.w	r4, r4, #16
 8012750:	2904      	cmp	r1, #4
 8012752:	ea43 0304 	orr.w	r3, r3, r4
 8012756:	d0d8      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 8012758:	f852 4c10 	ldr.w	r4, [r2, #-16]
 801275c:	00e4      	lsls	r4, r4, #3
 801275e:	f004 0408 	and.w	r4, r4, #8
 8012762:	2905      	cmp	r1, #5
 8012764:	ea43 0304 	orr.w	r3, r3, r4
 8012768:	d0cf      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 801276a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801276e:	00a4      	lsls	r4, r4, #2
 8012770:	f004 0404 	and.w	r4, r4, #4
 8012774:	2906      	cmp	r1, #6
 8012776:	ea43 0304 	orr.w	r3, r3, r4
 801277a:	d0c6      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 801277c:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8012780:	0064      	lsls	r4, r4, #1
 8012782:	f004 0402 	and.w	r4, r4, #2
 8012786:	3907      	subs	r1, #7
 8012788:	ea43 0304 	orr.w	r3, r3, r4
 801278c:	f102 0220 	add.w	r2, r2, #32
 8012790:	d0bb      	beq.n	801270a <GUI__CompactPixelIndices+0xa6>
 8012792:	f852 4c24 	ldr.w	r4, [r2, #-36]
 8012796:	f004 0401 	and.w	r4, r4, #1
 801279a:	4323      	orrs	r3, r4
 801279c:	f800 3b01 	strb.w	r3, [r0], #1
 80127a0:	f852 3c20 	ldr.w	r3, [r2, #-32]
 80127a4:	2901      	cmp	r1, #1
 80127a6:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	d1b9      	bne.n	8012722 <GUI__CompactPixelIndices+0xbe>
 80127ae:	7003      	strb	r3, [r0, #0]
 80127b0:	e7ac      	b.n	801270c <GUI__CompactPixelIndices+0xa8>
 80127b2:	f100 0408 	add.w	r4, r0, #8
 80127b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80127ba:	2901      	cmp	r1, #1
 80127bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	d012      	beq.n	80127ea <GUI__CompactPixelIndices+0x186>
 80127c4:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80127c8:	f002 020f 	and.w	r2, r2, #15
 80127cc:	4313      	orrs	r3, r2
 80127ce:	3902      	subs	r1, #2
 80127d0:	f800 3b01 	strb.w	r3, [r0], #1
 80127d4:	f104 0408 	add.w	r4, r4, #8
 80127d8:	f43f af52 	beq.w	8012680 <GUI__CompactPixelIndices+0x1c>
 80127dc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80127e0:	2901      	cmp	r1, #1
 80127e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	d1ec      	bne.n	80127c4 <GUI__CompactPixelIndices+0x160>
 80127ea:	7003      	strb	r3, [r0, #0]
 80127ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127f0:	4608      	mov	r0, r1
 80127f2:	4770      	bx	lr

080127f4 <GUI__CompactPixelIndicesEx>:
 80127f4:	2a08      	cmp	r2, #8
 80127f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127fa:	460c      	mov	r4, r1
 80127fc:	681f      	ldr	r7, [r3, #0]
 80127fe:	4605      	mov	r5, r0
 8012800:	dd0c      	ble.n	801281c <GUI__CompactPixelIndicesEx+0x28>
 8012802:	2a10      	cmp	r2, #16
 8012804:	dc21      	bgt.n	801284a <GUI__CompactPixelIndicesEx+0x56>
 8012806:	691e      	ldr	r6, [r3, #16]
 8012808:	2e00      	cmp	r6, #0
 801280a:	f000 8091 	beq.w	8012930 <GUI__CompactPixelIndicesEx+0x13c>
 801280e:	4622      	mov	r2, r4
 8012810:	4629      	mov	r1, r5
 8012812:	2302      	movs	r3, #2
 8012814:	47b0      	blx	r6
 8012816:	2001      	movs	r0, #1
 8012818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801281c:	3a01      	subs	r2, #1
 801281e:	2a07      	cmp	r2, #7
 8012820:	d810      	bhi.n	8012844 <GUI__CompactPixelIndicesEx+0x50>
 8012822:	e8df f002 	tbb	[pc, r2]
 8012826:	5104      	.short	0x5104
 8012828:	0f0f770f 	.word	0x0f0f770f
 801282c:	9a0f      	.short	0x9a0f
 801282e:	f100 0820 	add.w	r8, r0, #32
 8012832:	f858 0c20 	ldr.w	r0, [r8, #-32]
 8012836:	47b8      	blx	r7
 8012838:	2c01      	cmp	r4, #1
 801283a:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 801283e:	b2c6      	uxtb	r6, r0
 8012840:	d106      	bne.n	8012850 <GUI__CompactPixelIndicesEx+0x5c>
 8012842:	702e      	strb	r6, [r5, #0]
 8012844:	2001      	movs	r0, #1
 8012846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284a:	2000      	movs	r0, #0
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012850:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 8012854:	47b8      	blx	r7
 8012856:	2c02      	cmp	r4, #2
 8012858:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 801285c:	b2c6      	uxtb	r6, r0
 801285e:	d0f0      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 8012860:	f858 0c18 	ldr.w	r0, [r8, #-24]
 8012864:	47b8      	blx	r7
 8012866:	2c03      	cmp	r4, #3
 8012868:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 801286c:	b2c6      	uxtb	r6, r0
 801286e:	d0e8      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 8012870:	f858 0c14 	ldr.w	r0, [r8, #-20]
 8012874:	47b8      	blx	r7
 8012876:	2c04      	cmp	r4, #4
 8012878:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801287c:	b2c6      	uxtb	r6, r0
 801287e:	d0e0      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 8012880:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8012884:	47b8      	blx	r7
 8012886:	2c05      	cmp	r4, #5
 8012888:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 801288c:	b2c6      	uxtb	r6, r0
 801288e:	d0d8      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 8012890:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8012894:	47b8      	blx	r7
 8012896:	2c06      	cmp	r4, #6
 8012898:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801289c:	b2c6      	uxtb	r6, r0
 801289e:	d0d0      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 80128a0:	f858 0c08 	ldr.w	r0, [r8, #-8]
 80128a4:	47b8      	blx	r7
 80128a6:	2c07      	cmp	r4, #7
 80128a8:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 80128ac:	b2c6      	uxtb	r6, r0
 80128ae:	d0c8      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 80128b0:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80128b4:	47b8      	blx	r7
 80128b6:	3c08      	subs	r4, #8
 80128b8:	ea40 0006 	orr.w	r0, r0, r6
 80128bc:	f805 0b01 	strb.w	r0, [r5], #1
 80128c0:	f108 0820 	add.w	r8, r8, #32
 80128c4:	d1b5      	bne.n	8012832 <GUI__CompactPixelIndicesEx+0x3e>
 80128c6:	e7bd      	b.n	8012844 <GUI__CompactPixelIndicesEx+0x50>
 80128c8:	f100 0810 	add.w	r8, r0, #16
 80128cc:	f858 0c10 	ldr.w	r0, [r8, #-16]
 80128d0:	47b8      	blx	r7
 80128d2:	2c01      	cmp	r4, #1
 80128d4:	ea4f 1080 	mov.w	r0, r0, lsl #6
 80128d8:	b2c6      	uxtb	r6, r0
 80128da:	d0b2      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 80128dc:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 80128e0:	47b8      	blx	r7
 80128e2:	2c02      	cmp	r4, #2
 80128e4:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 80128e8:	b2c6      	uxtb	r6, r0
 80128ea:	d0aa      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 80128ec:	f858 0c08 	ldr.w	r0, [r8, #-8]
 80128f0:	47b8      	blx	r7
 80128f2:	2c03      	cmp	r4, #3
 80128f4:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 80128f8:	b2c6      	uxtb	r6, r0
 80128fa:	d0a2      	beq.n	8012842 <GUI__CompactPixelIndicesEx+0x4e>
 80128fc:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8012900:	47b8      	blx	r7
 8012902:	3c04      	subs	r4, #4
 8012904:	ea40 0006 	orr.w	r0, r0, r6
 8012908:	f805 0b01 	strb.w	r0, [r5], #1
 801290c:	f108 0810 	add.w	r8, r8, #16
 8012910:	d1dc      	bne.n	80128cc <GUI__CompactPixelIndicesEx+0xd8>
 8012912:	e797      	b.n	8012844 <GUI__CompactPixelIndicesEx+0x50>
 8012914:	f100 0808 	add.w	r8, r0, #8
 8012918:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801291c:	47b8      	blx	r7
 801291e:	2c01      	cmp	r4, #1
 8012920:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8012924:	b2c6      	uxtb	r6, r0
 8012926:	d10c      	bne.n	8012942 <GUI__CompactPixelIndicesEx+0x14e>
 8012928:	702e      	strb	r6, [r5, #0]
 801292a:	4620      	mov	r0, r4
 801292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012930:	1e86      	subs	r6, r0, #2
 8012932:	f855 0b04 	ldr.w	r0, [r5], #4
 8012936:	47b8      	blx	r7
 8012938:	3c01      	subs	r4, #1
 801293a:	f826 0f02 	strh.w	r0, [r6, #2]!
 801293e:	d1f8      	bne.n	8012932 <GUI__CompactPixelIndicesEx+0x13e>
 8012940:	e780      	b.n	8012844 <GUI__CompactPixelIndicesEx+0x50>
 8012942:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8012946:	47b8      	blx	r7
 8012948:	3c02      	subs	r4, #2
 801294a:	ea40 0006 	orr.w	r0, r0, r6
 801294e:	f805 0b01 	strb.w	r0, [r5], #1
 8012952:	f108 0808 	add.w	r8, r8, #8
 8012956:	d1df      	bne.n	8012918 <GUI__CompactPixelIndicesEx+0x124>
 8012958:	e774      	b.n	8012844 <GUI__CompactPixelIndicesEx+0x50>
 801295a:	691e      	ldr	r6, [r3, #16]
 801295c:	b13e      	cbz	r6, 801296e <GUI__CompactPixelIndicesEx+0x17a>
 801295e:	4628      	mov	r0, r5
 8012960:	4622      	mov	r2, r4
 8012962:	2301      	movs	r3, #1
 8012964:	4629      	mov	r1, r5
 8012966:	47b0      	blx	r6
 8012968:	2001      	movs	r0, #1
 801296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296e:	1e6e      	subs	r6, r5, #1
 8012970:	f855 0b04 	ldr.w	r0, [r5], #4
 8012974:	47b8      	blx	r7
 8012976:	3c01      	subs	r4, #1
 8012978:	f806 0f01 	strb.w	r0, [r6, #1]!
 801297c:	d1f8      	bne.n	8012970 <GUI__CompactPixelIndicesEx+0x17c>
 801297e:	e761      	b.n	8012844 <GUI__CompactPixelIndicesEx+0x50>

08012980 <GUI__ExpandPixelIndicesEx>:
 8012980:	2900      	cmp	r1, #0
 8012982:	dd2a      	ble.n	80129da <GUI__ExpandPixelIndicesEx+0x5a>
 8012984:	2a08      	cmp	r2, #8
 8012986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801298a:	4604      	mov	r4, r0
 801298c:	685e      	ldr	r6, [r3, #4]
 801298e:	dd03      	ble.n	8012998 <GUI__ExpandPixelIndicesEx+0x18>
 8012990:	2a10      	cmp	r2, #16
 8012992:	dd0c      	ble.n	80129ae <GUI__ExpandPixelIndicesEx+0x2e>
 8012994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012998:	1e53      	subs	r3, r2, #1
 801299a:	2b07      	cmp	r3, #7
 801299c:	d805      	bhi.n	80129aa <GUI__ExpandPixelIndicesEx+0x2a>
 801299e:	e8df f003 	tbb	[pc, r3]
 80129a2:	532a      	.short	0x532a
 80129a4:	04047c04 	.word	0x04047c04
 80129a8:	1d04      	.short	0x1d04
 80129aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ae:	695d      	ldr	r5, [r3, #20]
 80129b0:	b135      	cbz	r5, 80129c0 <GUI__ExpandPixelIndicesEx+0x40>
 80129b2:	460a      	mov	r2, r1
 80129b4:	46ac      	mov	ip, r5
 80129b6:	4621      	mov	r1, r4
 80129b8:	2302      	movs	r3, #2
 80129ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129be:	4760      	bx	ip
 80129c0:	0049      	lsls	r1, r1, #1
 80129c2:	440c      	add	r4, r1
 80129c4:	1865      	adds	r5, r4, r1
 80129c6:	1a67      	subs	r7, r4, r1
 80129c8:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 80129cc:	47b0      	blx	r6
 80129ce:	42bc      	cmp	r4, r7
 80129d0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80129d4:	d1f8      	bne.n	80129c8 <GUI__ExpandPixelIndicesEx+0x48>
 80129d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129da:	4770      	bx	lr
 80129dc:	1865      	adds	r5, r4, r1
 80129de:	1a6f      	subs	r7, r5, r1
 80129e0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80129e4:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 80129e8:	47b0      	blx	r6
 80129ea:	42bd      	cmp	r5, r7
 80129ec:	f844 0d04 	str.w	r0, [r4, #-4]!
 80129f0:	d1f8      	bne.n	80129e4 <GUI__ExpandPixelIndicesEx+0x64>
 80129f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f6:	1e4f      	subs	r7, r1, #1
 80129f8:	10fb      	asrs	r3, r7, #3
 80129fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80129fe:	f007 0a07 	and.w	sl, r7, #7
 8012a02:	f04f 0880 	mov.w	r8, #128	; 0x80
 8012a06:	3901      	subs	r1, #1
 8012a08:	1e5a      	subs	r2, r3, #1
 8012a0a:	fa48 f80a 	asr.w	r8, r8, sl
 8012a0e:	f814 9003 	ldrb.w	r9, [r4, r3]
 8012a12:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 8012a16:	fa5f f888 	uxtb.w	r8, r8
 8012a1a:	4414      	add	r4, r2
 8012a1c:	f1ca 0307 	rsb	r3, sl, #7
 8012a20:	ea08 0009 	and.w	r0, r8, r9
 8012a24:	4118      	asrs	r0, r3
 8012a26:	47b0      	blx	r6
 8012a28:	f845 0904 	str.w	r0, [r5], #-4
 8012a2c:	f1ba 0f00 	cmp.w	sl, #0
 8012a30:	d15f      	bne.n	8012af2 <GUI__ExpandPixelIndicesEx+0x172>
 8012a32:	f894 9000 	ldrb.w	r9, [r4]
 8012a36:	f04f 0801 	mov.w	r8, #1
 8012a3a:	3c01      	subs	r4, #1
 8012a3c:	f04f 0a07 	mov.w	sl, #7
 8012a40:	2f00      	cmp	r7, #0
 8012a42:	d0b2      	beq.n	80129aa <GUI__ExpandPixelIndicesEx+0x2a>
 8012a44:	3f01      	subs	r7, #1
 8012a46:	e7e9      	b.n	8012a1c <GUI__ExpandPixelIndicesEx+0x9c>
 8012a48:	1e4f      	subs	r7, r1, #1
 8012a4a:	f007 0903 	and.w	r9, r7, #3
 8012a4e:	10bb      	asrs	r3, r7, #2
 8012a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8012a54:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8012a58:	25c0      	movs	r5, #192	; 0xc0
 8012a5a:	3901      	subs	r1, #1
 8012a5c:	4105      	asrs	r5, r0
 8012a5e:	1e5a      	subs	r2, r3, #1
 8012a60:	f814 8003 	ldrb.w	r8, [r4, r3]
 8012a64:	eb04 0a81 	add.w	sl, r4, r1, lsl #2
 8012a68:	b2ed      	uxtb	r5, r5
 8012a6a:	4414      	add	r4, r2
 8012a6c:	ea05 0308 	and.w	r3, r5, r8
 8012a70:	f1c0 0006 	rsb	r0, r0, #6
 8012a74:	fa43 f000 	asr.w	r0, r3, r0
 8012a78:	47b0      	blx	r6
 8012a7a:	f84a 0904 	str.w	r0, [sl], #-4
 8012a7e:	f1b9 0f00 	cmp.w	r9, #0
 8012a82:	d144      	bne.n	8012b0e <GUI__ExpandPixelIndicesEx+0x18e>
 8012a84:	2503      	movs	r5, #3
 8012a86:	f894 8000 	ldrb.w	r8, [r4]
 8012a8a:	46a9      	mov	r9, r5
 8012a8c:	3c01      	subs	r4, #1
 8012a8e:	2f00      	cmp	r7, #0
 8012a90:	d08b      	beq.n	80129aa <GUI__ExpandPixelIndicesEx+0x2a>
 8012a92:	3f01      	subs	r7, #1
 8012a94:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8012a98:	e7e8      	b.n	8012a6c <GUI__ExpandPixelIndicesEx+0xec>
 8012a9a:	1e4f      	subs	r7, r1, #1
 8012a9c:	f007 0801 	and.w	r8, r7, #1
 8012aa0:	107a      	asrs	r2, r7, #1
 8012aa2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8012aa6:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8012aaa:	23f0      	movs	r3, #240	; 0xf0
 8012aac:	3901      	subs	r1, #1
 8012aae:	4103      	asrs	r3, r0
 8012ab0:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 8012ab4:	5ca5      	ldrb	r5, [r4, r2]
 8012ab6:	eb04 0981 	add.w	r9, r4, r1, lsl #2
 8012aba:	fa5f fa83 	uxtb.w	sl, r3
 8012abe:	4474      	add	r4, lr
 8012ac0:	ea0a 0305 	and.w	r3, sl, r5
 8012ac4:	f1c0 0004 	rsb	r0, r0, #4
 8012ac8:	fa43 f000 	asr.w	r0, r3, r0
 8012acc:	47b0      	blx	r6
 8012ace:	f849 0904 	str.w	r0, [r9], #-4
 8012ad2:	f1b8 0f00 	cmp.w	r8, #0
 8012ad6:	d113      	bne.n	8012b00 <GUI__ExpandPixelIndicesEx+0x180>
 8012ad8:	7825      	ldrb	r5, [r4, #0]
 8012ada:	f04f 0a0f 	mov.w	sl, #15
 8012ade:	3c01      	subs	r4, #1
 8012ae0:	f04f 0801 	mov.w	r8, #1
 8012ae4:	2f00      	cmp	r7, #0
 8012ae6:	f43f af60 	beq.w	80129aa <GUI__ExpandPixelIndicesEx+0x2a>
 8012aea:	3f01      	subs	r7, #1
 8012aec:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8012af0:	e7e6      	b.n	8012ac0 <GUI__ExpandPixelIndicesEx+0x140>
 8012af2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012af6:	fa5f f888 	uxtb.w	r8, r8
 8012afa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012afe:	e79f      	b.n	8012a40 <GUI__ExpandPixelIndicesEx+0xc0>
 8012b00:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8012b04:	fa5f fa83 	uxtb.w	sl, r3
 8012b08:	f04f 0800 	mov.w	r8, #0
 8012b0c:	e7ea      	b.n	8012ae4 <GUI__ExpandPixelIndicesEx+0x164>
 8012b0e:	00ad      	lsls	r5, r5, #2
 8012b10:	b2ed      	uxtb	r5, r5
 8012b12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012b16:	e7ba      	b.n	8012a8e <GUI__ExpandPixelIndicesEx+0x10e>

08012b18 <GUI__ManageCache>:
 8012b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b1c:	4b39      	ldr	r3, [pc, #228]	; (8012c04 <GUI__ManageCache+0xec>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	7c5d      	ldrb	r5, [r3, #17]
 8012b22:	2d01      	cmp	r5, #1
 8012b24:	b082      	sub	sp, #8
 8012b26:	dd03      	ble.n	8012b30 <GUI__ManageCache+0x18>
 8012b28:	2001      	movs	r0, #1
 8012b2a:	b002      	add	sp, #8
 8012b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b30:	4e35      	ldr	r6, [pc, #212]	; (8012c08 <GUI__ManageCache+0xf0>)
 8012b32:	6873      	ldr	r3, [r6, #4]
 8012b34:	4604      	mov	r4, r0
 8012b36:	b113      	cbz	r3, 8012b3e <GUI__ManageCache+0x26>
 8012b38:	4601      	mov	r1, r0
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	4798      	blx	r3
 8012b3e:	2c01      	cmp	r4, #1
 8012b40:	d027      	beq.n	8012b92 <GUI__ManageCache+0x7a>
 8012b42:	2c02      	cmp	r4, #2
 8012b44:	d00f      	beq.n	8012b66 <GUI__ManageCache+0x4e>
 8012b46:	2c00      	cmp	r4, #0
 8012b48:	d1ee      	bne.n	8012b28 <GUI__ManageCache+0x10>
 8012b4a:	00ac      	lsls	r4, r5, #2
 8012b4c:	1937      	adds	r7, r6, r4
 8012b4e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012c08 <GUI__ManageCache+0xf0>
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d03a      	beq.n	8012bce <GUI__ManageCache+0xb6>
 8012b58:	2001      	movs	r0, #1
 8012b5a:	4426      	add	r6, r4
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	bf18      	it	ne
 8012b60:	3b01      	subne	r3, #1
 8012b62:	60b3      	str	r3, [r6, #8]
 8012b64:	e7e1      	b.n	8012b2a <GUI__ManageCache+0x12>
 8012b66:	4628      	mov	r0, r5
 8012b68:	f7f6 fcbe 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 8012b6c:	9001      	str	r0, [sp, #4]
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d0da      	beq.n	8012b28 <GUI__ManageCache+0x10>
 8012b72:	68c3      	ldr	r3, [r0, #12]
 8012b74:	210d      	movs	r1, #13
 8012b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b78:	a801      	add	r0, sp, #4
 8012b7a:	4798      	blx	r3
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d0d2      	beq.n	8012b28 <GUI__ManageCache+0x10>
 8012b82:	6833      	ldr	r3, [r6, #0]
 8012b84:	b103      	cbz	r3, 8012b88 <GUI__ManageCache+0x70>
 8012b86:	4798      	blx	r3
 8012b88:	2102      	movs	r1, #2
 8012b8a:	9801      	ldr	r0, [sp, #4]
 8012b8c:	47a0      	blx	r4
 8012b8e:	2000      	movs	r0, #0
 8012b90:	e7cb      	b.n	8012b2a <GUI__ManageCache+0x12>
 8012b92:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8012b96:	68b7      	ldr	r7, [r6, #8]
 8012b98:	b11f      	cbz	r7, 8012ba2 <GUI__ManageCache+0x8a>
 8012b9a:	1c78      	adds	r0, r7, #1
 8012b9c:	60b0      	str	r0, [r6, #8]
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	e7c3      	b.n	8012b2a <GUI__ManageCache+0x12>
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f7f6 fca0 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 8012ba8:	9001      	str	r0, [sp, #4]
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d0bc      	beq.n	8012b28 <GUI__ManageCache+0x10>
 8012bae:	68c3      	ldr	r3, [r0, #12]
 8012bb0:	210d      	movs	r1, #13
 8012bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb4:	a801      	add	r0, sp, #4
 8012bb6:	4798      	blx	r3
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d0b4      	beq.n	8012b28 <GUI__ManageCache+0x10>
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	9801      	ldr	r0, [sp, #4]
 8012bc2:	4798      	blx	r3
 8012bc4:	68b3      	ldr	r3, [r6, #8]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	4638      	mov	r0, r7
 8012bca:	60b3      	str	r3, [r6, #8]
 8012bcc:	e7ad      	b.n	8012b2a <GUI__ManageCache+0x12>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f7f6 fc8a 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 8012bd4:	9001      	str	r0, [sp, #4]
 8012bd6:	b188      	cbz	r0, 8012bfc <GUI__ManageCache+0xe4>
 8012bd8:	68c3      	ldr	r3, [r0, #12]
 8012bda:	210d      	movs	r1, #13
 8012bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bde:	a801      	add	r0, sp, #4
 8012be0:	4798      	blx	r3
 8012be2:	4605      	mov	r5, r0
 8012be4:	b150      	cbz	r0, 8012bfc <GUI__ManageCache+0xe4>
 8012be6:	f8d8 3000 	ldr.w	r3, [r8]
 8012bea:	b103      	cbz	r3, 8012bee <GUI__ManageCache+0xd6>
 8012bec:	4798      	blx	r3
 8012bee:	2100      	movs	r1, #0
 8012bf0:	9801      	ldr	r0, [sp, #4]
 8012bf2:	47a8      	blx	r5
 8012bf4:	1933      	adds	r3, r6, r4
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	e7ae      	b.n	8012b5a <GUI__ManageCache+0x42>
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	2001      	movs	r0, #1
 8012c00:	e7ab      	b.n	8012b5a <GUI__ManageCache+0x42>
 8012c02:	bf00      	nop
 8012c04:	2000007c 	.word	0x2000007c
 8012c08:	2000087c 	.word	0x2000087c

08012c0c <LCD_ReadRectEx>:
 8012c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c10:	b085      	sub	sp, #20
 8012c12:	4681      	mov	r9, r0
 8012c14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012c16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012c18:	68ed      	ldr	r5, [r5, #12]
 8012c1a:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8012c1e:	696f      	ldr	r7, [r5, #20]
 8012c20:	4616      	mov	r6, r2
 8012c22:	460d      	mov	r5, r1
 8012c24:	469a      	mov	sl, r3
 8012c26:	f1b8 0f00 	cmp.w	r8, #0
 8012c2a:	d00f      	beq.n	8012c4c <LCD_ReadRectEx+0x40>
 8012c2c:	2101      	movs	r1, #1
 8012c2e:	a80f      	add	r0, sp, #60	; 0x3c
 8012c30:	47c0      	blx	r8
 8012c32:	4680      	mov	r8, r0
 8012c34:	b150      	cbz	r0, 8012c4c <LCD_ReadRectEx+0x40>
 8012c36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012c38:	9401      	str	r4, [sp, #4]
 8012c3a:	f8cd a000 	str.w	sl, [sp]
 8012c3e:	4633      	mov	r3, r6
 8012c40:	462a      	mov	r2, r5
 8012c42:	4649      	mov	r1, r9
 8012c44:	47c0      	blx	r8
 8012c46:	b005      	add	sp, #20
 8012c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c4c:	4b6b      	ldr	r3, [pc, #428]	; (8012dfc <LCD_ReadRectEx+0x1f0>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	7c58      	ldrb	r0, [r3, #17]
 8012c52:	f7f8 f9ef 	bl	800b034 <GUI_GetBitsPerPixelEx>
 8012c56:	2808      	cmp	r0, #8
 8012c58:	dc34      	bgt.n	8012cc4 <LCD_ReadRectEx+0xb8>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	4555      	cmp	r5, sl
 8012c5e:	dcf2      	bgt.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012c60:	2b02      	cmp	r3, #2
 8012c62:	d00a      	beq.n	8012c7a <LCD_ReadRectEx+0x6e>
 8012c64:	2b04      	cmp	r3, #4
 8012c66:	d01d      	beq.n	8012ca4 <LCD_ReadRectEx+0x98>
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	d030      	beq.n	8012cce <LCD_ReadRectEx+0xc2>
 8012c6c:	3501      	adds	r5, #1
 8012c6e:	45aa      	cmp	sl, r5
 8012c70:	daf6      	bge.n	8012c60 <LCD_ReadRectEx+0x54>
 8012c72:	e7e8      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012c74:	3501      	adds	r5, #1
 8012c76:	4555      	cmp	r5, sl
 8012c78:	dce5      	bgt.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012c7a:	45b1      	cmp	r9, r6
 8012c7c:	bfd8      	it	le
 8012c7e:	46c8      	movle	r8, r9
 8012c80:	dcf8      	bgt.n	8012c74 <LCD_ReadRectEx+0x68>
 8012c82:	4641      	mov	r1, r8
 8012c84:	462a      	mov	r2, r5
 8012c86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012c88:	47b8      	blx	r7
 8012c8a:	f108 0801 	add.w	r8, r8, #1
 8012c8e:	4546      	cmp	r6, r8
 8012c90:	f824 0b02 	strh.w	r0, [r4], #2
 8012c94:	daf5      	bge.n	8012c82 <LCD_ReadRectEx+0x76>
 8012c96:	3501      	adds	r5, #1
 8012c98:	45aa      	cmp	sl, r5
 8012c9a:	daee      	bge.n	8012c7a <LCD_ReadRectEx+0x6e>
 8012c9c:	e7d3      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012c9e:	3501      	adds	r5, #1
 8012ca0:	45aa      	cmp	sl, r5
 8012ca2:	dbd0      	blt.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012ca4:	45b1      	cmp	r9, r6
 8012ca6:	bfd8      	it	le
 8012ca8:	46c8      	movle	r8, r9
 8012caa:	f300 80a1 	bgt.w	8012df0 <LCD_ReadRectEx+0x1e4>
 8012cae:	4641      	mov	r1, r8
 8012cb0:	462a      	mov	r2, r5
 8012cb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012cb4:	47b8      	blx	r7
 8012cb6:	f108 0801 	add.w	r8, r8, #1
 8012cba:	4546      	cmp	r6, r8
 8012cbc:	f844 0b04 	str.w	r0, [r4], #4
 8012cc0:	daf5      	bge.n	8012cae <LCD_ReadRectEx+0xa2>
 8012cc2:	e7ec      	b.n	8012c9e <LCD_ReadRectEx+0x92>
 8012cc4:	2811      	cmp	r0, #17
 8012cc6:	bfb4      	ite	lt
 8012cc8:	2302      	movlt	r3, #2
 8012cca:	2304      	movge	r3, #4
 8012ccc:	e7c6      	b.n	8012c5c <LCD_ReadRectEx+0x50>
 8012cce:	1e43      	subs	r3, r0, #1
 8012cd0:	9303      	str	r3, [sp, #12]
 8012cd2:	f04f 0800 	mov.w	r8, #0
 8012cd6:	f8cd a008 	str.w	sl, [sp, #8]
 8012cda:	9b03      	ldr	r3, [sp, #12]
 8012cdc:	2b07      	cmp	r3, #7
 8012cde:	f200 8081 	bhi.w	8012de4 <LCD_ReadRectEx+0x1d8>
 8012ce2:	e8df f003 	tbb	[pc, r3]
 8012ce6:	5833      	.short	0x5833
 8012ce8:	04041717 	.word	0x04041717
 8012cec:	0404      	.short	0x0404
 8012cee:	45b1      	cmp	r9, r6
 8012cf0:	bfd8      	it	le
 8012cf2:	46cb      	movle	fp, r9
 8012cf4:	dc09      	bgt.n	8012d0a <LCD_ReadRectEx+0xfe>
 8012cf6:	4659      	mov	r1, fp
 8012cf8:	462a      	mov	r2, r5
 8012cfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012cfc:	47b8      	blx	r7
 8012cfe:	f10b 0b01 	add.w	fp, fp, #1
 8012d02:	455e      	cmp	r6, fp
 8012d04:	f804 0b01 	strb.w	r0, [r4], #1
 8012d08:	daf5      	bge.n	8012cf6 <LCD_ReadRectEx+0xea>
 8012d0a:	9b02      	ldr	r3, [sp, #8]
 8012d0c:	3501      	adds	r5, #1
 8012d0e:	42ab      	cmp	r3, r5
 8012d10:	dae3      	bge.n	8012cda <LCD_ReadRectEx+0xce>
 8012d12:	e798      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012d14:	45b1      	cmp	r9, r6
 8012d16:	dcf8      	bgt.n	8012d0a <LCD_ReadRectEx+0xfe>
 8012d18:	46ca      	mov	sl, r9
 8012d1a:	f04f 0b0f 	mov.w	fp, #15
 8012d1e:	4651      	mov	r1, sl
 8012d20:	462a      	mov	r2, r5
 8012d22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012d24:	47b8      	blx	r7
 8012d26:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8012d2a:	7821      	ldrb	r1, [r4, #0]
 8012d2c:	f1c3 0204 	rsb	r2, r3, #4
 8012d30:	fa0b f303 	lsl.w	r3, fp, r3
 8012d34:	4090      	lsls	r0, r2
 8012d36:	400b      	ands	r3, r1
 8012d38:	f10a 0a01 	add.w	sl, sl, #1
 8012d3c:	4303      	orrs	r3, r0
 8012d3e:	4556      	cmp	r6, sl
 8012d40:	7023      	strb	r3, [r4, #0]
 8012d42:	4444      	add	r4, r8
 8012d44:	f088 0801 	eor.w	r8, r8, #1
 8012d48:	dae9      	bge.n	8012d1e <LCD_ReadRectEx+0x112>
 8012d4a:	e7de      	b.n	8012d0a <LCD_ReadRectEx+0xfe>
 8012d4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012d50:	45b1      	cmp	r9, r6
 8012d52:	dcda      	bgt.n	8012d0a <LCD_ReadRectEx+0xfe>
 8012d54:	46ca      	mov	sl, r9
 8012d56:	4651      	mov	r1, sl
 8012d58:	462a      	mov	r2, r5
 8012d5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012d5c:	47b8      	blx	r7
 8012d5e:	7821      	ldrb	r1, [r4, #0]
 8012d60:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8012d64:	f1c8 0307 	rsb	r3, r8, #7
 8012d68:	fa42 f208 	asr.w	r2, r2, r8
 8012d6c:	4098      	lsls	r0, r3
 8012d6e:	f10a 0a01 	add.w	sl, sl, #1
 8012d72:	ea01 0302 	and.w	r3, r1, r2
 8012d76:	f108 0201 	add.w	r2, r8, #1
 8012d7a:	4318      	orrs	r0, r3
 8012d7c:	f022 0807 	bic.w	r8, r2, #7
 8012d80:	4556      	cmp	r6, sl
 8012d82:	7020      	strb	r0, [r4, #0]
 8012d84:	fa42 f808 	asr.w	r8, r2, r8
 8012d88:	eb04 04e2 	add.w	r4, r4, r2, asr #3
 8012d8c:	dae3      	bge.n	8012d56 <LCD_ReadRectEx+0x14a>
 8012d8e:	3501      	adds	r5, #1
 8012d90:	45ab      	cmp	fp, r5
 8012d92:	dadd      	bge.n	8012d50 <LCD_ReadRectEx+0x144>
 8012d94:	e757      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012d96:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 8012d9a:	45b1      	cmp	r9, r6
 8012d9c:	dcb5      	bgt.n	8012d0a <LCD_ReadRectEx+0xfe>
 8012d9e:	46ca      	mov	sl, r9
 8012da0:	4651      	mov	r1, sl
 8012da2:	462a      	mov	r2, r5
 8012da4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012da6:	47b8      	blx	r7
 8012da8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8012dac:	f894 e000 	ldrb.w	lr, [r4]
 8012db0:	f1c3 0206 	rsb	r2, r3, #6
 8012db4:	fa4b f303 	asr.w	r3, fp, r3
 8012db8:	f108 0101 	add.w	r1, r8, #1
 8012dbc:	4090      	lsls	r0, r2
 8012dbe:	ea0e 0303 	and.w	r3, lr, r3
 8012dc2:	f10a 0a01 	add.w	sl, sl, #1
 8012dc6:	4303      	orrs	r3, r0
 8012dc8:	f021 0803 	bic.w	r8, r1, #3
 8012dcc:	4556      	cmp	r6, sl
 8012dce:	7023      	strb	r3, [r4, #0]
 8012dd0:	fa41 f808 	asr.w	r8, r1, r8
 8012dd4:	eb04 04a1 	add.w	r4, r4, r1, asr #2
 8012dd8:	dae2      	bge.n	8012da0 <LCD_ReadRectEx+0x194>
 8012dda:	9b02      	ldr	r3, [sp, #8]
 8012ddc:	3501      	adds	r5, #1
 8012dde:	42ab      	cmp	r3, r5
 8012de0:	dadb      	bge.n	8012d9a <LCD_ReadRectEx+0x18e>
 8012de2:	e730      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	3501      	adds	r5, #1
 8012de8:	429d      	cmp	r5, r3
 8012dea:	f77f af76 	ble.w	8012cda <LCD_ReadRectEx+0xce>
 8012dee:	e72a      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012df0:	3501      	adds	r5, #1
 8012df2:	4555      	cmp	r5, sl
 8012df4:	f77f af56 	ble.w	8012ca4 <LCD_ReadRectEx+0x98>
 8012df8:	e725      	b.n	8012c46 <LCD_ReadRectEx+0x3a>
 8012dfa:	bf00      	nop
 8012dfc:	2000007c 	.word	0x2000007c

08012e00 <GUI_ReadRectEx>:
 8012e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e02:	4c16      	ldr	r4, [pc, #88]	; (8012e5c <GUI_ReadRectEx+0x5c>)
 8012e04:	9e05      	ldr	r6, [sp, #20]
 8012e06:	6825      	ldr	r5, [r4, #0]
 8012e08:	9c06      	ldr	r4, [sp, #24]
 8012e0a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012e0e:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8012e12:	4570      	cmp	r0, lr
 8012e14:	bfb8      	it	lt
 8012e16:	4670      	movlt	r0, lr
 8012e18:	42ba      	cmp	r2, r7
 8012e1a:	bfa8      	it	ge
 8012e1c:	463a      	movge	r2, r7
 8012e1e:	4290      	cmp	r0, r2
 8012e20:	dc1a      	bgt.n	8012e58 <GUI_ReadRectEx+0x58>
 8012e22:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8012e26:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8012e2a:	42b9      	cmp	r1, r7
 8012e2c:	bfb8      	it	lt
 8012e2e:	4639      	movlt	r1, r7
 8012e30:	42ab      	cmp	r3, r5
 8012e32:	bfa8      	it	ge
 8012e34:	462b      	movge	r3, r5
 8012e36:	428b      	cmp	r3, r1
 8012e38:	da03      	bge.n	8012e42 <GUI_ReadRectEx+0x42>
 8012e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e3c:	6825      	ldr	r5, [r4, #0]
 8012e3e:	b12d      	cbz	r5, 8012e4c <GUI_ReadRectEx+0x4c>
 8012e40:	462c      	mov	r4, r5
 8012e42:	68e5      	ldr	r5, [r4, #12]
 8012e44:	682d      	ldr	r5, [r5, #0]
 8012e46:	f035 0504 	bics.w	r5, r5, #4
 8012e4a:	d1f7      	bne.n	8012e3c <GUI_ReadRectEx+0x3c>
 8012e4c:	9406      	str	r4, [sp, #24]
 8012e4e:	9605      	str	r6, [sp, #20]
 8012e50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012e54:	f7ff beda 	b.w	8012c0c <LCD_ReadRectEx>
 8012e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	2000007c 	.word	0x2000007c

08012e60 <LCD_SetClipRectEx>:
 8012e60:	b530      	push	{r4, r5, lr}
 8012e62:	4c0a      	ldr	r4, [pc, #40]	; (8012e8c <LCD_SetClipRectEx+0x2c>)
 8012e64:	4b0a      	ldr	r3, [pc, #40]	; (8012e90 <LCD_SetClipRectEx+0x30>)
 8012e66:	6822      	ldr	r2, [r4, #0]
 8012e68:	7c52      	ldrb	r2, [r2, #17]
 8012e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e6e:	68da      	ldr	r2, [r3, #12]
 8012e70:	b083      	sub	sp, #12
 8012e72:	4605      	mov	r5, r0
 8012e74:	4669      	mov	r1, sp
 8012e76:	4618      	mov	r0, r3
 8012e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012e7a:	4790      	blx	r2
 8012e7c:	6820      	ldr	r0, [r4, #0]
 8012e7e:	466a      	mov	r2, sp
 8012e80:	4629      	mov	r1, r5
 8012e82:	3008      	adds	r0, #8
 8012e84:	f7f7 f95a 	bl	800a13c <GUI__IntersectRects>
 8012e88:	b003      	add	sp, #12
 8012e8a:	bd30      	pop	{r4, r5, pc}
 8012e8c:	2000007c 	.word	0x2000007c
 8012e90:	200357f4 	.word	0x200357f4

08012e94 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 8012e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	460c      	mov	r4, r1
 8012e9c:	4615      	mov	r5, r2
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	f7f7 f818 	bl	8009ed4 <GUI_Lock>
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	f7f6 f959 	bl	800915c <GUI_SetDrawMode>
 8012eaa:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8012f90 <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>
 8012eae:	f8d8 3000 	ldr.w	r3, [r8]
 8012eb2:	4681      	mov	r9, r0
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8012eb8:	f7f5 fce0 	bl	800887c <GUI_ALLOC_LockH>
 8012ebc:	6803      	ldr	r3, [r0, #0]
 8012ebe:	9000      	str	r0, [sp, #0]
 8012ec0:	6998      	ldr	r0, [r3, #24]
 8012ec2:	f7f6 ff8b 	bl	8009ddc <GUI_SelectLayer>
 8012ec6:	4b31      	ldr	r3, [pc, #196]	; (8012f8c <GUI_MEMDEV_CopyToLCDAt.part.0+0xf8>)
 8012ec8:	429c      	cmp	r4, r3
 8012eca:	9b00      	ldr	r3, [sp, #0]
 8012ecc:	bf04      	itt	eq
 8012ece:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8012ed2:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8012ed6:	891a      	ldrh	r2, [r3, #8]
 8012ed8:	895b      	ldrh	r3, [r3, #10]
 8012eda:	f8ad 4008 	strh.w	r4, [sp, #8]
 8012ede:	3a01      	subs	r2, #1
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	4422      	add	r2, r4
 8012ee4:	442b      	add	r3, r5
 8012ee6:	4682      	mov	sl, r0
 8012ee8:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012eec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012ef0:	f8ad 500a 	strh.w	r5, [sp, #10]
 8012ef4:	f7fc ff5c 	bl	800fdb0 <WM_Activate>
 8012ef8:	4668      	mov	r0, sp
 8012efa:	f7f5 fcd1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012efe:	a802      	add	r0, sp, #8
 8012f00:	f7fc fce0 	bl	800f8c4 <WM__InitIVRSearch>
 8012f04:	bb48      	cbnz	r0, 8012f5a <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 8012f06:	4650      	mov	r0, sl
 8012f08:	f7f6 ff68 	bl	8009ddc <GUI_SelectLayer>
 8012f0c:	f7f6 ffe2 	bl	8009ed4 <GUI_Lock>
 8012f10:	2f00      	cmp	r7, #0
 8012f12:	d038      	beq.n	8012f86 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf2>
 8012f14:	f8d8 3000 	ldr.w	r3, [r8]
 8012f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f1a:	bb8b      	cbnz	r3, 8012f80 <GUI_MEMDEV_CopyToLCDAt.part.0+0xec>
 8012f1c:	f7fc ff50 	bl	800fdc0 <WM_Deactivate>
 8012f20:	4638      	mov	r0, r7
 8012f22:	f7f5 fcab 	bl	800887c <GUI_ALLOC_LockH>
 8012f26:	ac04      	add	r4, sp, #16
 8012f28:	f8d8 3000 	ldr.w	r3, [r8]
 8012f2c:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8012f30:	661f      	str	r7, [r3, #96]	; 0x60
 8012f32:	6800      	ldr	r0, [r0, #0]
 8012f34:	f7f6 fb3a 	bl	80095ac <GUI_DEVICE_Link>
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f7f5 fcb1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012f3e:	f7f8 fa33 	bl	800b3a8 <LCD_UpdateColorIndices>
 8012f42:	f7f7 fde9 	bl	800ab18 <LCD_SetClipRectMax>
 8012f46:	f7f6 ffbb 	bl	8009ec0 <GUI_Unlock>
 8012f4a:	4648      	mov	r0, r9
 8012f4c:	f7f6 f906 	bl	800915c <GUI_SetDrawMode>
 8012f50:	f7f6 ffb6 	bl	8009ec0 <GUI_Unlock>
 8012f54:	b004      	add	sp, #16
 8012f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5a:	462a      	mov	r2, r5
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	4630      	mov	r0, r6
 8012f60:	f7fa fa7a 	bl	800d458 <GUI_MEMDEV__WriteToActiveOpaque>
 8012f64:	f7fc fb88 	bl	800f678 <WM__GetNextIVR>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d0cc      	beq.n	8012f06 <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 8012f6c:	462a      	mov	r2, r5
 8012f6e:	4621      	mov	r1, r4
 8012f70:	4630      	mov	r0, r6
 8012f72:	f7fa fa71 	bl	800d458 <GUI_MEMDEV__WriteToActiveOpaque>
 8012f76:	f7fc fb7f 	bl	800f678 <WM__GetNextIVR>
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	d1ed      	bne.n	8012f5a <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 8012f7e:	e7c2      	b.n	8012f06 <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 8012f80:	f7f6 f87c 	bl	800907c <GUI_SelectLCD>
 8012f84:	e7ca      	b.n	8012f1c <GUI_MEMDEV_CopyToLCDAt.part.0+0x88>
 8012f86:	f7f6 f879 	bl	800907c <GUI_SelectLCD>
 8012f8a:	e7dc      	b.n	8012f46 <GUI_MEMDEV_CopyToLCDAt.part.0+0xb2>
 8012f8c:	fffff001 	.word	0xfffff001
 8012f90:	2000007c 	.word	0x2000007c

08012f94 <GUI_MEMDEV__WriteToActiveAt>:
 8012f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f98:	b082      	sub	sp, #8
 8012f9a:	460f      	mov	r7, r1
 8012f9c:	4690      	mov	r8, r2
 8012f9e:	4606      	mov	r6, r0
 8012fa0:	f7f5 fc6c 	bl	800887c <GUI_ALLOC_LockH>
 8012fa4:	6803      	ldr	r3, [r0, #0]
 8012fa6:	ac02      	add	r4, sp, #8
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	f844 0d04 	str.w	r0, [r4, #-4]!
 8012fae:	2116      	movs	r1, #22
 8012fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb2:	2000      	movs	r0, #0
 8012fb4:	4798      	blx	r3
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f7f5 fc71 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8012fbe:	b11d      	cbz	r5, 8012fc8 <GUI_MEMDEV__WriteToActiveAt+0x34>
 8012fc0:	4642      	mov	r2, r8
 8012fc2:	4639      	mov	r1, r7
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	47a8      	blx	r5
 8012fc8:	b002      	add	sp, #8
 8012fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fce:	bf00      	nop

08012fd0 <GUI_MEMDEV__CreateFixed>:
 8012fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8013104 <GUI_MEMDEV__CreateFixed+0x134>
 8012fd8:	b087      	sub	sp, #28
 8012fda:	f8d8 4000 	ldr.w	r4, [r8]
 8012fde:	4681      	mov	r9, r0
 8012fe0:	468a      	mov	sl, r1
 8012fe2:	4617      	mov	r7, r2
 8012fe4:	461e      	mov	r6, r3
 8012fe6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012fe8:	7c63      	ldrb	r3, [r4, #17]
 8012fea:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012fec:	2200      	movs	r2, #0
 8012fee:	f7f6 fa93 	bl	8009518 <GUI_DEVICE_Create>
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	d04d      	beq.n	8013092 <GUI_MEMDEV__CreateFixed+0xc2>
 8012ff6:	6903      	ldr	r3, [r0, #16]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	4798      	blx	r3
 8012ffe:	f7f8 f8a3 	bl	800b148 <LCD__GetBPPDevice>
 8013002:	fb00 f407 	mul.w	r4, r0, r7
 8013006:	4683      	mov	fp, r0
 8013008:	f7f5 fcfe 	bl	8008a08 <GUI_ALLOC_RequestSize>
 801300c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801300e:	3407      	adds	r4, #7
 8013010:	f013 0301 	ands.w	r3, r3, #1
 8013014:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8013018:	d03f      	beq.n	801309a <GUI_MEMDEV__CreateFixed+0xca>
 801301a:	2e00      	cmp	r6, #0
 801301c:	dd2c      	ble.n	8013078 <GUI_MEMDEV__CreateFixed+0xa8>
 801301e:	2b00      	cmp	r3, #0
 8013020:	d042      	beq.n	80130a8 <GUI_MEMDEV__CreateFixed+0xd8>
 8013022:	fb04 f006 	mul.w	r0, r4, r6
 8013026:	3018      	adds	r0, #24
 8013028:	f7f5 fc10 	bl	800884c <GUI_ALLOC_AllocNoInit>
 801302c:	4603      	mov	r3, r0
 801302e:	b368      	cbz	r0, 801308c <GUI_MEMDEV__CreateFixed+0xbc>
 8013030:	2200      	movs	r2, #0
 8013032:	9202      	str	r2, [sp, #8]
 8013034:	4618      	mov	r0, r3
 8013036:	9303      	str	r3, [sp, #12]
 8013038:	f7f5 fc20 	bl	800887c <GUI_ALLOC_LockH>
 801303c:	4602      	mov	r2, r0
 801303e:	a806      	add	r0, sp, #24
 8013040:	9b02      	ldr	r3, [sp, #8]
 8013042:	f8a2 9004 	strh.w	r9, [r2, #4]
 8013046:	f840 2d04 	str.w	r2, [r0, #-4]!
 801304a:	f8a2 a006 	strh.w	sl, [r2, #6]
 801304e:	8117      	strh	r7, [r2, #8]
 8013050:	8156      	strh	r6, [r2, #10]
 8013052:	60d4      	str	r4, [r2, #12]
 8013054:	f8c2 b010 	str.w	fp, [r2, #16]
 8013058:	6153      	str	r3, [r2, #20]
 801305a:	6015      	str	r5, [r2, #0]
 801305c:	f7f5 fc20 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013062:	612b      	str	r3, [r5, #16]
 8013064:	f8d8 2000 	ldr.w	r2, [r8]
 8013068:	9b03      	ldr	r3, [sp, #12]
 801306a:	60ab      	str	r3, [r5, #8]
 801306c:	7c52      	ldrb	r2, [r2, #17]
 801306e:	61aa      	str	r2, [r5, #24]
 8013070:	4618      	mov	r0, r3
 8013072:	b007      	add	sp, #28
 8013074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013078:	2c00      	cmp	r4, #0
 801307a:	d134      	bne.n	80130e6 <GUI_MEMDEV__CreateFixed+0x116>
 801307c:	4620      	mov	r0, r4
 801307e:	4276      	negs	r6, r6
 8013080:	4286      	cmp	r6, r0
 8013082:	bfa8      	it	ge
 8013084:	4606      	movge	r6, r0
 8013086:	b393      	cbz	r3, 80130ee <GUI_MEMDEV__CreateFixed+0x11e>
 8013088:	2e00      	cmp	r6, #0
 801308a:	dcca      	bgt.n	8013022 <GUI_MEMDEV__CreateFixed+0x52>
 801308c:	4628      	mov	r0, r5
 801308e:	f7f6 fa41 	bl	8009514 <GUI_DEVICE_Delete>
 8013092:	2000      	movs	r0, #0
 8013094:	b007      	add	sp, #28
 8013096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309a:	2800      	cmp	r0, #0
 801309c:	bfb8      	it	lt
 801309e:	3003      	addlt	r0, #3
 80130a0:	1080      	asrs	r0, r0, #2
 80130a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80130a6:	e7b8      	b.n	801301a <GUI_MEMDEV__CreateFixed+0x4a>
 80130a8:	9300      	str	r3, [sp, #0]
 80130aa:	463a      	mov	r2, r7
 80130ac:	4633      	mov	r3, r6
 80130ae:	4651      	mov	r1, sl
 80130b0:	4648      	mov	r0, r9
 80130b2:	f000 fbf9 	bl	80138a8 <GUI_USAGE_BM_Create>
 80130b6:	9002      	str	r0, [sp, #8]
 80130b8:	fb04 f006 	mul.w	r0, r4, r6
 80130bc:	3018      	adds	r0, #24
 80130be:	f7f5 fd83 	bl	8008bc8 <GUI_ALLOC_AllocZero>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d1b5      	bne.n	8013034 <GUI_MEMDEV__CreateFixed+0x64>
 80130c8:	4628      	mov	r0, r5
 80130ca:	9303      	str	r3, [sp, #12]
 80130cc:	f7f6 fa22 	bl	8009514 <GUI_DEVICE_Delete>
 80130d0:	9b02      	ldr	r3, [sp, #8]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d0dd      	beq.n	8013092 <GUI_MEMDEV__CreateFixed+0xc2>
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7f5 fd56 	bl	8008b88 <GUI_ALLOC_Free>
 80130dc:	9b03      	ldr	r3, [sp, #12]
 80130de:	4618      	mov	r0, r3
 80130e0:	b007      	add	sp, #28
 80130e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e6:	3818      	subs	r0, #24
 80130e8:	fbb0 f0f4 	udiv	r0, r0, r4
 80130ec:	e7c7      	b.n	801307e <GUI_MEMDEV__CreateFixed+0xae>
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	463a      	mov	r2, r7
 80130f2:	4633      	mov	r3, r6
 80130f4:	4651      	mov	r1, sl
 80130f6:	4648      	mov	r0, r9
 80130f8:	f000 fbd6 	bl	80138a8 <GUI_USAGE_BM_Create>
 80130fc:	2e00      	cmp	r6, #0
 80130fe:	9002      	str	r0, [sp, #8]
 8013100:	dcda      	bgt.n	80130b8 <GUI_MEMDEV__CreateFixed+0xe8>
 8013102:	e7c3      	b.n	801308c <GUI_MEMDEV__CreateFixed+0xbc>
 8013104:	2000007c 	.word	0x2000007c

08013108 <GUI_MEMDEV_GetBitsPerPixel>:
 8013108:	b530      	push	{r4, r5, lr}
 801310a:	4604      	mov	r4, r0
 801310c:	b083      	sub	sp, #12
 801310e:	b198      	cbz	r0, 8013138 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 8013110:	f7f6 fee0 	bl	8009ed4 <GUI_Lock>
 8013114:	4620      	mov	r0, r4
 8013116:	f7f5 fbb1 	bl	800887c <GUI_ALLOC_LockH>
 801311a:	6803      	ldr	r3, [r0, #0]
 801311c:	ad02      	add	r5, sp, #8
 801311e:	691b      	ldr	r3, [r3, #16]
 8013120:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	4798      	blx	r3
 8013128:	f7f8 f80e 	bl	800b148 <LCD__GetBPPDevice>
 801312c:	4604      	mov	r4, r0
 801312e:	4628      	mov	r0, r5
 8013130:	f7f5 fbb6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013134:	f7f6 fec4 	bl	8009ec0 <GUI_Unlock>
 8013138:	4620      	mov	r0, r4
 801313a:	b003      	add	sp, #12
 801313c:	bd30      	pop	{r4, r5, pc}
 801313e:	bf00      	nop

08013140 <GUI_MEMDEV_Delete>:
 8013140:	b900      	cbnz	r0, 8013144 <GUI_MEMDEV_Delete+0x4>
 8013142:	4770      	bx	lr
 8013144:	b510      	push	{r4, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	4604      	mov	r4, r0
 801314a:	f7f6 fec3 	bl	8009ed4 <GUI_Lock>
 801314e:	4b10      	ldr	r3, [pc, #64]	; (8013190 <GUI_MEMDEV_Delete+0x50>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013154:	429c      	cmp	r4, r3
 8013156:	d017      	beq.n	8013188 <GUI_MEMDEV_Delete+0x48>
 8013158:	4620      	mov	r0, r4
 801315a:	f7f5 fb8f 	bl	800887c <GUI_ALLOC_LockH>
 801315e:	6943      	ldr	r3, [r0, #20]
 8013160:	9001      	str	r0, [sp, #4]
 8013162:	b963      	cbnz	r3, 801317e <GUI_MEMDEV_Delete+0x3e>
 8013164:	6800      	ldr	r0, [r0, #0]
 8013166:	f7f6 f9d5 	bl	8009514 <GUI_DEVICE_Delete>
 801316a:	a801      	add	r0, sp, #4
 801316c:	f7f5 fb98 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013170:	4620      	mov	r0, r4
 8013172:	f7f5 fd09 	bl	8008b88 <GUI_ALLOC_Free>
 8013176:	f7f6 fea3 	bl	8009ec0 <GUI_Unlock>
 801317a:	b002      	add	sp, #8
 801317c:	bd10      	pop	{r4, pc}
 801317e:	4618      	mov	r0, r3
 8013180:	f7fa f93e 	bl	800d400 <GUI_USAGE_DecUseCnt>
 8013184:	9801      	ldr	r0, [sp, #4]
 8013186:	e7ed      	b.n	8013164 <GUI_MEMDEV_Delete+0x24>
 8013188:	f7f5 ff78 	bl	800907c <GUI_SelectLCD>
 801318c:	e7e4      	b.n	8013158 <GUI_MEMDEV_Delete+0x18>
 801318e:	bf00      	nop
 8013190:	2000007c 	.word	0x2000007c

08013194 <GUI_MEMDEV_CreateEx>:
 8013194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013198:	b085      	sub	sp, #20
 801319a:	4606      	mov	r6, r0
 801319c:	4690      	mov	r8, r2
 801319e:	4699      	mov	r9, r3
 80131a0:	460f      	mov	r7, r1
 80131a2:	f7f6 fe97 	bl	8009ed4 <GUI_Lock>
 80131a6:	4a1c      	ldr	r2, [pc, #112]	; (8013218 <GUI_MEMDEV_CreateEx+0x84>)
 80131a8:	4b1c      	ldr	r3, [pc, #112]	; (801321c <GUI_MEMDEV_CreateEx+0x88>)
 80131aa:	6812      	ldr	r2, [r2, #0]
 80131ac:	7c50      	ldrb	r0, [r2, #17]
 80131ae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80131b2:	e001      	b.n	80131b8 <GUI_MEMDEV_CreateEx+0x24>
 80131b4:	6824      	ldr	r4, [r4, #0]
 80131b6:	b1fc      	cbz	r4, 80131f8 <GUI_MEMDEV_CreateEx+0x64>
 80131b8:	68e3      	ldr	r3, [r4, #12]
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	2a04      	cmp	r2, #4
 80131be:	d1f9      	bne.n	80131b4 <GUI_MEMDEV_CreateEx+0x20>
 80131c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c2:	2101      	movs	r1, #1
 80131c4:	4620      	mov	r0, r4
 80131c6:	4798      	blx	r3
 80131c8:	4605      	mov	r5, r0
 80131ca:	b1d8      	cbz	r0, 8013204 <GUI_MEMDEV_CreateEx+0x70>
 80131cc:	6924      	ldr	r4, [r4, #16]
 80131ce:	68a3      	ldr	r3, [r4, #8]
 80131d0:	4798      	blx	r3
 80131d2:	3001      	adds	r0, #1
 80131d4:	d018      	beq.n	8013208 <GUI_MEMDEV_CreateEx+0x74>
 80131d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131d8:	9402      	str	r4, [sp, #8]
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	9501      	str	r5, [sp, #4]
 80131de:	464b      	mov	r3, r9
 80131e0:	4642      	mov	r2, r8
 80131e2:	4639      	mov	r1, r7
 80131e4:	4630      	mov	r0, r6
 80131e6:	f7ff fef3 	bl	8012fd0 <GUI_MEMDEV__CreateFixed>
 80131ea:	4604      	mov	r4, r0
 80131ec:	f7f6 fe68 	bl	8009ec0 <GUI_Unlock>
 80131f0:	4620      	mov	r0, r4
 80131f2:	b005      	add	sp, #20
 80131f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131f8:	f7f6 f976 	bl	80094e8 <GUI_DEVICE__GetpDriver>
 80131fc:	4604      	mov	r4, r0
 80131fe:	b148      	cbz	r0, 8013214 <GUI_MEMDEV_CreateEx+0x80>
 8013200:	68c3      	ldr	r3, [r0, #12]
 8013202:	e7dd      	b.n	80131c0 <GUI_MEMDEV_CreateEx+0x2c>
 8013204:	4604      	mov	r4, r0
 8013206:	e7f1      	b.n	80131ec <GUI_MEMDEV_CreateEx+0x58>
 8013208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801320a:	4c05      	ldr	r4, [pc, #20]	; (8013220 <GUI_MEMDEV_CreateEx+0x8c>)
 801320c:	f043 0301 	orr.w	r3, r3, #1
 8013210:	930c      	str	r3, [sp, #48]	; 0x30
 8013212:	e7e0      	b.n	80131d6 <GUI_MEMDEV_CreateEx+0x42>
 8013214:	4620      	mov	r0, r4
 8013216:	e7ec      	b.n	80131f2 <GUI_MEMDEV_CreateEx+0x5e>
 8013218:	2000007c 	.word	0x2000007c
 801321c:	200357f4 	.word	0x200357f4
 8013220:	0801a540 	.word	0x0801a540

08013224 <GUI_MEMDEV_Select>:
 8013224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013226:	4f16      	ldr	r7, [pc, #88]	; (8013280 <GUI_MEMDEV_Select+0x5c>)
 8013228:	b083      	sub	sp, #12
 801322a:	4604      	mov	r4, r0
 801322c:	f7f6 fe52 	bl	8009ed4 <GUI_Lock>
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8013234:	b1e4      	cbz	r4, 8013270 <GUI_MEMDEV_Select+0x4c>
 8013236:	b9c6      	cbnz	r6, 801326a <GUI_MEMDEV_Select+0x46>
 8013238:	f7fc fdc2 	bl	800fdc0 <WM_Deactivate>
 801323c:	4620      	mov	r0, r4
 801323e:	f7f5 fb1d 	bl	800887c <GUI_ALLOC_LockH>
 8013242:	ad02      	add	r5, sp, #8
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	f845 0d04 	str.w	r0, [r5, #-4]!
 801324a:	661c      	str	r4, [r3, #96]	; 0x60
 801324c:	6800      	ldr	r0, [r0, #0]
 801324e:	f7f6 f9ad 	bl	80095ac <GUI_DEVICE_Link>
 8013252:	4628      	mov	r0, r5
 8013254:	f7f5 fb24 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013258:	f7f8 f8a6 	bl	800b3a8 <LCD_UpdateColorIndices>
 801325c:	f7f7 fc5c 	bl	800ab18 <LCD_SetClipRectMax>
 8013260:	f7f6 fe2e 	bl	8009ec0 <GUI_Unlock>
 8013264:	4630      	mov	r0, r6
 8013266:	b003      	add	sp, #12
 8013268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801326a:	f7f5 ff07 	bl	800907c <GUI_SelectLCD>
 801326e:	e7e3      	b.n	8013238 <GUI_MEMDEV_Select+0x14>
 8013270:	f7f5 ff04 	bl	800907c <GUI_SelectLCD>
 8013274:	f7f6 fe24 	bl	8009ec0 <GUI_Unlock>
 8013278:	4630      	mov	r0, r6
 801327a:	b003      	add	sp, #12
 801327c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801327e:	bf00      	nop
 8013280:	2000007c 	.word	0x2000007c

08013284 <GUI_MEMDEV_CopyToLCD>:
 8013284:	b900      	cbnz	r0, 8013288 <GUI_MEMDEV_CopyToLCD+0x4>
 8013286:	4770      	bx	lr
 8013288:	4a01      	ldr	r2, [pc, #4]	; (8013290 <GUI_MEMDEV_CopyToLCD+0xc>)
 801328a:	4611      	mov	r1, r2
 801328c:	f7ff be02 	b.w	8012e94 <GUI_MEMDEV_CopyToLCDAt.part.0>
 8013290:	fffff001 	.word	0xfffff001

08013294 <GUI_MEMDEV_Draw>:
 8013294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013298:	b087      	sub	sp, #28
 801329a:	4606      	mov	r6, r0
 801329c:	4692      	mov	sl, r2
 801329e:	461c      	mov	r4, r3
 80132a0:	4689      	mov	r9, r1
 80132a2:	f7f6 fe17 	bl	8009ed4 <GUI_Lock>
 80132a6:	4b56      	ldr	r3, [pc, #344]	; (8013400 <GUI_MEMDEV_Draw+0x16c>)
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	4b56      	ldr	r3, [pc, #344]	; (8013404 <GUI_MEMDEV_Draw+0x170>)
 80132ac:	7c57      	ldrb	r7, [r2, #17]
 80132ae:	57db      	ldrsb	r3, [r3, r7]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	4638      	mov	r0, r7
 80132b4:	f340 8097 	ble.w	80133e6 <GUI_MEMDEV_Draw+0x152>
 80132b8:	f7f7 fdea 	bl	800ae90 <LCD_GetXSizeEx>
 80132bc:	4605      	mov	r5, r0
 80132be:	4638      	mov	r0, r7
 80132c0:	f7f7 fdf6 	bl	800aeb0 <LCD_GetYSizeEx>
 80132c4:	4607      	mov	r7, r0
 80132c6:	2e00      	cmp	r6, #0
 80132c8:	f000 808a 	beq.w	80133e0 <GUI_MEMDEV_Draw+0x14c>
 80132cc:	a905      	add	r1, sp, #20
 80132ce:	a804      	add	r0, sp, #16
 80132d0:	f7f5 fda0 	bl	8008e14 <GUI_GetOrg>
 80132d4:	9a04      	ldr	r2, [sp, #16]
 80132d6:	9b05      	ldr	r3, [sp, #20]
 80132d8:	f9b6 c000 	ldrsh.w	ip, [r6]
 80132dc:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80132e0:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
 80132e4:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80132e8:	4415      	add	r5, r2
 80132ea:	441f      	add	r7, r3
 80132ec:	3d01      	subs	r5, #1
 80132ee:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
 80132f2:	3f01      	subs	r7, #1
 80132f4:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 80132f8:	9302      	str	r3, [sp, #8]
 80132fa:	9203      	str	r2, [sp, #12]
 80132fc:	4575      	cmp	r5, lr
 80132fe:	bfd4      	ite	le
 8013300:	ebc3 0305 	rsble	r3, r3, r5
 8013304:	ebc3 030e 	rsbgt	r3, r3, lr
 8013308:	428f      	cmp	r7, r1
 801330a:	bfd4      	ite	le
 801330c:	ebc2 0207 	rsble	r2, r2, r7
 8013310:	ebc2 0201 	rsbgt	r2, r2, r1
 8013314:	461d      	mov	r5, r3
 8013316:	4617      	mov	r7, r2
 8013318:	3501      	adds	r5, #1
 801331a:	3701      	adds	r7, #1
 801331c:	b904      	cbnz	r4, 8013320 <GUI_MEMDEV_Draw+0x8c>
 801331e:	427c      	negs	r4, r7
 8013320:	2d00      	cmp	r5, #0
 8013322:	dd4f      	ble.n	80133c4 <GUI_MEMDEV_Draw+0x130>
 8013324:	2f00      	cmp	r7, #0
 8013326:	dd4d      	ble.n	80133c4 <GUI_MEMDEV_Draw+0x130>
 8013328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	462a      	mov	r2, r5
 801332e:	4623      	mov	r3, r4
 8013330:	9903      	ldr	r1, [sp, #12]
 8013332:	9802      	ldr	r0, [sp, #8]
 8013334:	f7ff ff2e 	bl	8013194 <GUI_MEMDEV_CreateEx>
 8013338:	4680      	mov	r8, r0
 801333a:	2800      	cmp	r0, #0
 801333c:	d048      	beq.n	80133d0 <GUI_MEMDEV_Draw+0x13c>
 801333e:	f000 f8a9 	bl	8013494 <GUI_MEMDEV_GetYSize>
 8013342:	4287      	cmp	r7, r0
 8013344:	4606      	mov	r6, r0
 8013346:	d004      	beq.n	8013352 <GUI_MEMDEV_Draw+0xbe>
 8013348:	4b2d      	ldr	r3, [pc, #180]	; (8013400 <GUI_MEMDEV_Draw+0x16c>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801334e:	2800      	cmp	r0, #0
 8013350:	d151      	bne.n	80133f6 <GUI_MEMDEV_Draw+0x162>
 8013352:	4640      	mov	r0, r8
 8013354:	f7ff ff66 	bl	8013224 <GUI_MEMDEV_Select>
 8013358:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013408 <GUI_MEMDEV_Draw+0x174>
 801335c:	463d      	mov	r5, r7
 801335e:	2400      	movs	r4, #0
 8013360:	e00e      	b.n	8013380 <GUI_MEMDEV_Draw+0xec>
 8013362:	1bad      	subs	r5, r5, r6
 8013364:	b9ac      	cbnz	r4, 8013392 <GUI_MEMDEV_Draw+0xfe>
 8013366:	4650      	mov	r0, sl
 8013368:	47c8      	blx	r9
 801336a:	f8db 3000 	ldr.w	r3, [fp]
 801336e:	4434      	add	r4, r6
 8013370:	2000      	movs	r0, #0
 8013372:	b103      	cbz	r3, 8013376 <GUI_MEMDEV_Draw+0xe2>
 8013374:	4798      	blx	r3
 8013376:	4640      	mov	r0, r8
 8013378:	f7ff ff84 	bl	8013284 <GUI_MEMDEV_CopyToLCD>
 801337c:	42a7      	cmp	r7, r4
 801337e:	dd12      	ble.n	80133a6 <GUI_MEMDEV_Draw+0x112>
 8013380:	42ae      	cmp	r6, r5
 8013382:	ddee      	ble.n	8013362 <GUI_MEMDEV_Draw+0xce>
 8013384:	4629      	mov	r1, r5
 8013386:	4640      	mov	r0, r8
 8013388:	f000 f8a6 	bl	80134d8 <GUI_MEMDEV_ReduceYSize>
 801338c:	1bad      	subs	r5, r5, r6
 801338e:	2c00      	cmp	r4, #0
 8013390:	d0e9      	beq.n	8013366 <GUI_MEMDEV_Draw+0xd2>
 8013392:	9b03      	ldr	r3, [sp, #12]
 8013394:	9902      	ldr	r1, [sp, #8]
 8013396:	4640      	mov	r0, r8
 8013398:	191a      	adds	r2, r3, r4
 801339a:	f000 f8bd 	bl	8013518 <GUI_MEMDEV_SetOrg>
 801339e:	4640      	mov	r0, r8
 80133a0:	f000 f834 	bl	801340c <GUI_MEMDEV_Clear>
 80133a4:	e7df      	b.n	8013366 <GUI_MEMDEV_Draw+0xd2>
 80133a6:	4640      	mov	r0, r8
 80133a8:	f7ff feca 	bl	8013140 <GUI_MEMDEV_Delete>
 80133ac:	2000      	movs	r0, #0
 80133ae:	f7ff ff39 	bl	8013224 <GUI_MEMDEV_Select>
 80133b2:	42b7      	cmp	r7, r6
 80133b4:	d006      	beq.n	80133c4 <GUI_MEMDEV_Draw+0x130>
 80133b6:	4b12      	ldr	r3, [pc, #72]	; (8013400 <GUI_MEMDEV_Draw+0x16c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80133bc:	b110      	cbz	r0, 80133c4 <GUI_MEMDEV_Draw+0x130>
 80133be:	2133      	movs	r1, #51	; 0x33
 80133c0:	f7fd fd14 	bl	8010dec <WM__SendMessageNoPara>
 80133c4:	f7f6 fd7c 	bl	8009ec0 <GUI_Unlock>
 80133c8:	2000      	movs	r0, #0
 80133ca:	b007      	add	sp, #28
 80133cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d0:	4650      	mov	r0, sl
 80133d2:	47c8      	blx	r9
 80133d4:	f7f6 fd74 	bl	8009ec0 <GUI_Unlock>
 80133d8:	2001      	movs	r0, #1
 80133da:	b007      	add	sp, #28
 80133dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133e0:	9603      	str	r6, [sp, #12]
 80133e2:	9602      	str	r6, [sp, #8]
 80133e4:	e79a      	b.n	801331c <GUI_MEMDEV_Draw+0x88>
 80133e6:	f7f7 fd73 	bl	800aed0 <LCD_GetVXSizeEx>
 80133ea:	4605      	mov	r5, r0
 80133ec:	4638      	mov	r0, r7
 80133ee:	f7f7 fd7f 	bl	800aef0 <LCD_GetVYSizeEx>
 80133f2:	4607      	mov	r7, r0
 80133f4:	e767      	b.n	80132c6 <GUI_MEMDEV_Draw+0x32>
 80133f6:	2132      	movs	r1, #50	; 0x32
 80133f8:	f7fd fcf8 	bl	8010dec <WM__SendMessageNoPara>
 80133fc:	e7a9      	b.n	8013352 <GUI_MEMDEV_Draw+0xbe>
 80133fe:	bf00      	nop
 8013400:	2000007c 	.word	0x2000007c
 8013404:	20035810 	.word	0x20035810
 8013408:	20000894 	.word	0x20000894

0801340c <GUI_MEMDEV_Clear>:
 801340c:	b510      	push	{r4, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	b928      	cbnz	r0, 801341e <GUI_MEMDEV_Clear+0x12>
 8013412:	4b13      	ldr	r3, [pc, #76]	; (8013460 <GUI_MEMDEV_Clear+0x54>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8013418:	b914      	cbnz	r4, 8013420 <GUI_MEMDEV_Clear+0x14>
 801341a:	b002      	add	sp, #8
 801341c:	bd10      	pop	{r4, pc}
 801341e:	4604      	mov	r4, r0
 8013420:	f7f6 fd58 	bl	8009ed4 <GUI_Lock>
 8013424:	4620      	mov	r0, r4
 8013426:	f7f5 fa29 	bl	800887c <GUI_ALLOC_LockH>
 801342a:	ab02      	add	r3, sp, #8
 801342c:	6944      	ldr	r4, [r0, #20]
 801342e:	f843 0d08 	str.w	r0, [r3, #-8]!
 8013432:	4618      	mov	r0, r3
 8013434:	f7f5 fa34 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013438:	b91c      	cbnz	r4, 8013442 <GUI_MEMDEV_Clear+0x36>
 801343a:	f7f6 fd41 	bl	8009ec0 <GUI_Unlock>
 801343e:	b002      	add	sp, #8
 8013440:	bd10      	pop	{r4, pc}
 8013442:	4620      	mov	r0, r4
 8013444:	f7f5 fa1a 	bl	800887c <GUI_ALLOC_LockH>
 8013448:	ac02      	add	r4, sp, #8
 801344a:	6882      	ldr	r2, [r0, #8]
 801344c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013450:	6893      	ldr	r3, [r2, #8]
 8013452:	4798      	blx	r3
 8013454:	4620      	mov	r0, r4
 8013456:	f7f5 fa23 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801345a:	f7f6 fd31 	bl	8009ec0 <GUI_Unlock>
 801345e:	e7ee      	b.n	801343e <GUI_MEMDEV_Clear+0x32>
 8013460:	2000007c 	.word	0x2000007c

08013464 <GUI_MEMDEV_GetDataPtr>:
 8013464:	b1a0      	cbz	r0, 8013490 <GUI_MEMDEV_GetDataPtr+0x2c>
 8013466:	b510      	push	{r4, lr}
 8013468:	4604      	mov	r4, r0
 801346a:	b082      	sub	sp, #8
 801346c:	f7f6 fd32 	bl	8009ed4 <GUI_Lock>
 8013470:	4620      	mov	r0, r4
 8013472:	f7f5 fa03 	bl	800887c <GUI_ALLOC_LockH>
 8013476:	ab02      	add	r3, sp, #8
 8013478:	f100 0418 	add.w	r4, r0, #24
 801347c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013480:	4618      	mov	r0, r3
 8013482:	f7f5 fa0d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013486:	f7f6 fd1b 	bl	8009ec0 <GUI_Unlock>
 801348a:	4620      	mov	r0, r4
 801348c:	b002      	add	sp, #8
 801348e:	bd10      	pop	{r4, pc}
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop

08013494 <GUI_MEMDEV_GetYSize>:
 8013494:	b510      	push	{r4, lr}
 8013496:	4604      	mov	r4, r0
 8013498:	b082      	sub	sp, #8
 801349a:	f7f6 fd1b 	bl	8009ed4 <GUI_Lock>
 801349e:	b17c      	cbz	r4, 80134c0 <GUI_MEMDEV_GetYSize+0x2c>
 80134a0:	4620      	mov	r0, r4
 80134a2:	f7f5 f9eb 	bl	800887c <GUI_ALLOC_LockH>
 80134a6:	ab02      	add	r3, sp, #8
 80134a8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80134ac:	f843 0d04 	str.w	r0, [r3, #-4]!
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7f5 f9f5 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80134b6:	f7f6 fd03 	bl	8009ec0 <GUI_Unlock>
 80134ba:	4620      	mov	r0, r4
 80134bc:	b002      	add	sp, #8
 80134be:	bd10      	pop	{r4, pc}
 80134c0:	4b04      	ldr	r3, [pc, #16]	; (80134d4 <GUI_MEMDEV_GetYSize+0x40>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80134c6:	2c00      	cmp	r4, #0
 80134c8:	d1ea      	bne.n	80134a0 <GUI_MEMDEV_GetYSize+0xc>
 80134ca:	f7f6 fcf9 	bl	8009ec0 <GUI_Unlock>
 80134ce:	4620      	mov	r0, r4
 80134d0:	b002      	add	sp, #8
 80134d2:	bd10      	pop	{r4, pc}
 80134d4:	2000007c 	.word	0x2000007c

080134d8 <GUI_MEMDEV_ReduceYSize>:
 80134d8:	b530      	push	{r4, r5, lr}
 80134da:	460d      	mov	r5, r1
 80134dc:	b083      	sub	sp, #12
 80134de:	b928      	cbnz	r0, 80134ec <GUI_MEMDEV_ReduceYSize+0x14>
 80134e0:	4b0c      	ldr	r3, [pc, #48]	; (8013514 <GUI_MEMDEV_ReduceYSize+0x3c>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80134e6:	b914      	cbnz	r4, 80134ee <GUI_MEMDEV_ReduceYSize+0x16>
 80134e8:	b003      	add	sp, #12
 80134ea:	bd30      	pop	{r4, r5, pc}
 80134ec:	4604      	mov	r4, r0
 80134ee:	f7f6 fcf1 	bl	8009ed4 <GUI_Lock>
 80134f2:	4620      	mov	r0, r4
 80134f4:	f7f5 f9c2 	bl	800887c <GUI_ALLOC_LockH>
 80134f8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80134fc:	9001      	str	r0, [sp, #4]
 80134fe:	42ab      	cmp	r3, r5
 8013500:	bfc8      	it	gt
 8013502:	8145      	strhgt	r5, [r0, #10]
 8013504:	a801      	add	r0, sp, #4
 8013506:	f7f5 f9cb 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801350a:	f7f6 fcd9 	bl	8009ec0 <GUI_Unlock>
 801350e:	b003      	add	sp, #12
 8013510:	bd30      	pop	{r4, r5, pc}
 8013512:	bf00      	nop
 8013514:	2000007c 	.word	0x2000007c

08013518 <GUI_MEMDEV_SetOrg>:
 8013518:	b570      	push	{r4, r5, r6, lr}
 801351a:	460d      	mov	r5, r1
 801351c:	b082      	sub	sp, #8
 801351e:	4616      	mov	r6, r2
 8013520:	b928      	cbnz	r0, 801352e <GUI_MEMDEV_SetOrg+0x16>
 8013522:	4b1a      	ldr	r3, [pc, #104]	; (801358c <GUI_MEMDEV_SetOrg+0x74>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8013528:	b914      	cbnz	r4, 8013530 <GUI_MEMDEV_SetOrg+0x18>
 801352a:	b002      	add	sp, #8
 801352c:	bd70      	pop	{r4, r5, r6, pc}
 801352e:	4604      	mov	r4, r0
 8013530:	f7f6 fcd0 	bl	8009ed4 <GUI_Lock>
 8013534:	4620      	mov	r0, r4
 8013536:	f7f5 f9a1 	bl	800887c <GUI_ALLOC_LockH>
 801353a:	b236      	sxth	r6, r6
 801353c:	b22d      	sxth	r5, r5
 801353e:	80c6      	strh	r6, [r0, #6]
 8013540:	8085      	strh	r5, [r0, #4]
 8013542:	9000      	str	r0, [sp, #0]
 8013544:	f7f7 fae8 	bl	800ab18 <LCD_SetClipRectMax>
 8013548:	9b00      	ldr	r3, [sp, #0]
 801354a:	6958      	ldr	r0, [r3, #20]
 801354c:	b930      	cbnz	r0, 801355c <GUI_MEMDEV_SetOrg+0x44>
 801354e:	4668      	mov	r0, sp
 8013550:	f7f5 f9a6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013554:	f7f6 fcb4 	bl	8009ec0 <GUI_Unlock>
 8013558:	b002      	add	sp, #8
 801355a:	bd70      	pop	{r4, r5, r6, pc}
 801355c:	f7f5 f98e 	bl	800887c <GUI_ALLOC_LockH>
 8013560:	9a00      	ldr	r2, [sp, #0]
 8013562:	9001      	str	r0, [sp, #4]
 8013564:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8013568:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801356c:	80c2      	strh	r2, [r0, #6]
 801356e:	8083      	strh	r3, [r0, #4]
 8013570:	b113      	cbz	r3, 8013578 <GUI_MEMDEV_SetOrg+0x60>
 8013572:	b10a      	cbz	r2, 8013578 <GUI_MEMDEV_SetOrg+0x60>
 8013574:	8005      	strh	r5, [r0, #0]
 8013576:	8046      	strh	r6, [r0, #2]
 8013578:	a801      	add	r0, sp, #4
 801357a:	f7f5 f991 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801357e:	4668      	mov	r0, sp
 8013580:	f7f5 f98e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013584:	f7f6 fc9c 	bl	8009ec0 <GUI_Unlock>
 8013588:	e7e6      	b.n	8013558 <GUI_MEMDEV_SetOrg+0x40>
 801358a:	bf00      	nop
 801358c:	2000007c 	.word	0x2000007c

08013590 <GUI_MEMDEV_Paint1Static>:
 8013590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013594:	f8df b188 	ldr.w	fp, [pc, #392]	; 8013720 <GUI_MEMDEV_Paint1Static+0x190>
 8013598:	b089      	sub	sp, #36	; 0x24
 801359a:	4606      	mov	r6, r0
 801359c:	2705      	movs	r7, #5
 801359e:	4630      	mov	r0, r6
 80135a0:	f7f5 f96c 	bl	800887c <GUI_ALLOC_LockH>
 80135a4:	4603      	mov	r3, r0
 80135a6:	a807      	add	r0, sp, #28
 80135a8:	f9b3 8000 	ldrsh.w	r8, [r3]
 80135ac:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80135b0:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 80135b4:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80135b8:	9307      	str	r3, [sp, #28]
 80135ba:	ebc8 0404 	rsb	r4, r8, r4
 80135be:	3401      	adds	r4, #1
 80135c0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80135c4:	ebc9 0505 	rsb	r5, r9, r5
 80135c8:	f7f5 f96a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80135cc:	2c00      	cmp	r4, #0
 80135ce:	f105 0501 	add.w	r5, r5, #1
 80135d2:	dd55      	ble.n	8013680 <GUI_MEMDEV_Paint1Static+0xf0>
 80135d4:	2d00      	cmp	r5, #0
 80135d6:	dd53      	ble.n	8013680 <GUI_MEMDEV_Paint1Static+0xf0>
 80135d8:	f1ba 0f00 	cmp.w	sl, #0
 80135dc:	d155      	bne.n	801368a <GUI_MEMDEV_Paint1Static+0xfa>
 80135de:	f7fc fd5f 	bl	80100a0 <WM_GetDesktopWindow>
 80135e2:	4286      	cmp	r6, r0
 80135e4:	d07f      	beq.n	80136e6 <GUI_MEMDEV_Paint1Static+0x156>
 80135e6:	4b4a      	ldr	r3, [pc, #296]	; (8013710 <GUI_MEMDEV_Paint1Static+0x180>)
 80135e8:	9301      	str	r3, [sp, #4]
 80135ea:	f04f 0a01 	mov.w	sl, #1
 80135ee:	4649      	mov	r1, r9
 80135f0:	4640      	mov	r0, r8
 80135f2:	462b      	mov	r3, r5
 80135f4:	4622      	mov	r2, r4
 80135f6:	f8cd b008 	str.w	fp, [sp, #8]
 80135fa:	f8cd a000 	str.w	sl, [sp]
 80135fe:	f7ff fce7 	bl	8012fd0 <GUI_MEMDEV__CreateFixed>
 8013602:	4680      	mov	r8, r0
 8013604:	4630      	mov	r0, r6
 8013606:	f7f5 f939 	bl	800887c <GUI_ALLOC_LockH>
 801360a:	9007      	str	r0, [sp, #28]
 801360c:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8013610:	f1b8 0f00 	cmp.w	r8, #0
 8013614:	d060      	beq.n	80136d8 <GUI_MEMDEV_Paint1Static+0x148>
 8013616:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013618:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013724 <GUI_MEMDEV_Paint1Static+0x194>
 801361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013620:	6283      	str	r3, [r0, #40]	; 0x28
 8013622:	a807      	add	r0, sp, #28
 8013624:	f7f5 f93c 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013628:	4640      	mov	r0, r8
 801362a:	f7ff fdfb 	bl	8013224 <GUI_MEMDEV_Select>
 801362e:	9005      	str	r0, [sp, #20]
 8013630:	4650      	mov	r0, sl
 8013632:	f000 fc69 	bl	8013f08 <GUI__AlphaPreserveTrans>
 8013636:	4640      	mov	r0, r8
 8013638:	f7ff ff14 	bl	8013464 <GUI_MEMDEV_GetDataPtr>
 801363c:	4a35      	ldr	r2, [pc, #212]	; (8013714 <GUI_MEMDEV_Paint1Static+0x184>)
 801363e:	4b36      	ldr	r3, [pc, #216]	; (8013718 <GUI_MEMDEV_Paint1Static+0x188>)
 8013640:	7819      	ldrb	r1, [r3, #0]
 8013642:	6813      	ldr	r3, [r2, #0]
 8013644:	fb05 f204 	mul.w	r2, r5, r4
 8013648:	0092      	lsls	r2, r2, #2
 801364a:	4c34      	ldr	r4, [pc, #208]	; (801371c <GUI_MEMDEV_Paint1Static+0x18c>)
 801364c:	4798      	blx	r3
 801364e:	4630      	mov	r0, r6
 8013650:	6825      	ldr	r5, [r4, #0]
 8013652:	f8c9 6000 	str.w	r6, [r9]
 8013656:	f7fc fd9b 	bl	8010190 <WM_GetWindowOrgX>
 801365a:	6020      	str	r0, [r4, #0]
 801365c:	4630      	mov	r0, r6
 801365e:	f7fc f9fd 	bl	800fa5c <WM__Paint1>
 8013662:	2200      	movs	r2, #0
 8013664:	4610      	mov	r0, r2
 8013666:	6025      	str	r5, [r4, #0]
 8013668:	f8c9 2000 	str.w	r2, [r9]
 801366c:	f000 fc4c 	bl	8013f08 <GUI__AlphaPreserveTrans>
 8013670:	9805      	ldr	r0, [sp, #20]
 8013672:	f7ff fdd7 	bl	8013224 <GUI_MEMDEV_Select>
 8013676:	4630      	mov	r0, r6
 8013678:	f7f5 f8f6 	bl	8008868 <GUI_ALLOC_h2p>
 801367c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801367e:	b9f0      	cbnz	r0, 80136be <GUI_MEMDEV_Paint1Static+0x12e>
 8013680:	3f01      	subs	r7, #1
 8013682:	d18c      	bne.n	801359e <GUI_MEMDEV_Paint1Static+0xe>
 8013684:	b009      	add	sp, #36	; 0x24
 8013686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368a:	4650      	mov	r0, sl
 801368c:	f7f5 f8f6 	bl	800887c <GUI_ALLOC_LockH>
 8013690:	4603      	mov	r3, r0
 8013692:	a808      	add	r0, sp, #32
 8013694:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8013698:	f840 3d08 	str.w	r3, [r0, #-8]!
 801369c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 80136a0:	f7f5 f8fe 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80136a4:	45a8      	cmp	r8, r5
 80136a6:	d00f      	beq.n	80136c8 <GUI_MEMDEV_Paint1Static+0x138>
 80136a8:	464a      	mov	r2, r9
 80136aa:	4641      	mov	r1, r8
 80136ac:	4650      	mov	r0, sl
 80136ae:	f7ff ff33 	bl	8013518 <GUI_MEMDEV_SetOrg>
 80136b2:	4630      	mov	r0, r6
 80136b4:	f7f5 f8d8 	bl	8008868 <GUI_ALLOC_h2p>
 80136b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d0e0      	beq.n	8013680 <GUI_MEMDEV_Paint1Static+0xf0>
 80136be:	f000 f925 	bl	801390c <GUI_MEMDEV_Write>
 80136c2:	b009      	add	sp, #36	; 0x24
 80136c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c8:	45a1      	cmp	r9, r4
 80136ca:	d0d4      	beq.n	8013676 <GUI_MEMDEV_Paint1Static+0xe6>
 80136cc:	464a      	mov	r2, r9
 80136ce:	4641      	mov	r1, r8
 80136d0:	4650      	mov	r0, sl
 80136d2:	f7ff ff21 	bl	8013518 <GUI_MEMDEV_SetOrg>
 80136d6:	e7ec      	b.n	80136b2 <GUI_MEMDEV_Paint1Static+0x122>
 80136d8:	a807      	add	r0, sp, #28
 80136da:	f7f5 f8e1 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80136de:	4630      	mov	r0, r6
 80136e0:	f7fc f9bc 	bl	800fa5c <WM__Paint1>
 80136e4:	e7cc      	b.n	8013680 <GUI_MEMDEV_Paint1Static+0xf0>
 80136e6:	f7f7 fc63 	bl	800afb0 <LCD_GetXSize>
 80136ea:	4682      	mov	sl, r0
 80136ec:	f7f7 fc76 	bl	800afdc <LCD_GetYSize>
 80136f0:	4554      	cmp	r4, sl
 80136f2:	dc03      	bgt.n	80136fc <GUI_MEMDEV_Paint1Static+0x16c>
 80136f4:	4285      	cmp	r5, r0
 80136f6:	f77f af76 	ble.w	80135e6 <GUI_MEMDEV_Paint1Static+0x56>
 80136fa:	46a2      	mov	sl, r4
 80136fc:	4285      	cmp	r5, r0
 80136fe:	bfa8      	it	ge
 8013700:	4605      	movge	r5, r0
 8013702:	462a      	mov	r2, r5
 8013704:	4651      	mov	r1, sl
 8013706:	4630      	mov	r0, r6
 8013708:	f7fc fdea 	bl	80102e0 <WM_SetSize>
 801370c:	4654      	mov	r4, sl
 801370e:	e76a      	b.n	80135e6 <GUI_MEMDEV_Paint1Static+0x56>
 8013710:	0801a558 	.word	0x0801a558
 8013714:	20000094 	.word	0x20000094
 8013718:	200000d0 	.word	0x200000d0
 801371c:	200357d0 	.word	0x200357d0
 8013720:	0801a540 	.word	0x0801a540
 8013724:	20035828 	.word	0x20035828

08013728 <GUI_USAGE_BM_AddPixel>:
 8013728:	b470      	push	{r4, r5, r6}
 801372a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801372e:	6903      	ldr	r3, [r0, #16]
 8013730:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013734:	1b92      	subs	r2, r2, r6
 8013736:	fb03 f202 	mul.w	r2, r3, r2
 801373a:	1b09      	subs	r1, r1, r4
 801373c:	3214      	adds	r2, #20
 801373e:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 8013742:	2580      	movs	r5, #128	; 0x80
 8013744:	5c83      	ldrb	r3, [r0, r2]
 8013746:	f001 0107 	and.w	r1, r1, #7
 801374a:	fa45 f101 	asr.w	r1, r5, r1
 801374e:	4319      	orrs	r1, r3
 8013750:	5481      	strb	r1, [r0, r2]
 8013752:	bc70      	pop	{r4, r5, r6}
 8013754:	4770      	bx	lr
 8013756:	bf00      	nop

08013758 <GUI_USAGE_BM_GetNextDirty>:
 8013758:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801375c:	4293      	cmp	r3, r2
 801375e:	dd3c      	ble.n	80137da <GUI_USAGE_BM_GetNextDirty+0x82>
 8013760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013762:	680d      	ldr	r5, [r1, #0]
 8013764:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8013768:	42bd      	cmp	r5, r7
 801376a:	da34      	bge.n	80137d6 <GUI_USAGE_BM_GetNextDirty+0x7e>
 801376c:	6906      	ldr	r6, [r0, #16]
 801376e:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8013772:	fb06 e602 	mla	r6, r6, r2, lr
 8013776:	3614      	adds	r6, #20
 8013778:	f005 0307 	and.w	r3, r5, #7
 801377c:	5d84      	ldrb	r4, [r0, r6]
 801377e:	fa04 f303 	lsl.w	r3, r4, r3
 8013782:	3f01      	subs	r7, #1
 8013784:	3601      	adds	r6, #1
 8013786:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801378a:	ebce 02e7 	rsb	r2, lr, r7, asr #3
 801378e:	4430      	add	r0, r6
 8013790:	d108      	bne.n	80137a4 <GUI_USAGE_BM_GetNextDirty+0x4c>
 8013792:	b322      	cbz	r2, 80137de <GUI_USAGE_BM_GetNextDirty+0x86>
 8013794:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013798:	3508      	adds	r5, #8
 801379a:	f025 0507 	bic.w	r5, r5, #7
 801379e:	3a01      	subs	r2, #1
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d0f6      	beq.n	8013792 <GUI_USAGE_BM_GetNextDirty+0x3a>
 80137a4:	061e      	lsls	r6, r3, #24
 80137a6:	d434      	bmi.n	8013812 <GUI_USAGE_BM_GetNextDirty+0xba>
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	b2db      	uxtb	r3, r3
 80137ac:	061c      	lsls	r4, r3, #24
 80137ae:	f105 0501 	add.w	r5, r5, #1
 80137b2:	d5f9      	bpl.n	80137a8 <GUI_USAGE_BM_GetNextDirty+0x50>
 80137b4:	065f      	lsls	r7, r3, #25
 80137b6:	462c      	mov	r4, r5
 80137b8:	d505      	bpl.n	80137c6 <GUI_USAGE_BM_GetNextDirty+0x6e>
 80137ba:	005b      	lsls	r3, r3, #1
 80137bc:	b2db      	uxtb	r3, r3
 80137be:	065e      	lsls	r6, r3, #25
 80137c0:	f104 0401 	add.w	r4, r4, #1
 80137c4:	d4f9      	bmi.n	80137ba <GUI_USAGE_BM_GetNextDirty+0x62>
 80137c6:	f004 0307 	and.w	r3, r4, #7
 80137ca:	2b07      	cmp	r3, #7
 80137cc:	d009      	beq.n	80137e2 <GUI_USAGE_BM_GetNextDirty+0x8a>
 80137ce:	1b62      	subs	r2, r4, r5
 80137d0:	1c50      	adds	r0, r2, #1
 80137d2:	600d      	str	r5, [r1, #0]
 80137d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137d6:	2000      	movs	r0, #0
 80137d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137da:	2000      	movs	r0, #0
 80137dc:	4770      	bx	lr
 80137de:	4610      	mov	r0, r2
 80137e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137e2:	2a00      	cmp	r2, #0
 80137e4:	ddf3      	ble.n	80137ce <GUI_USAGE_BM_GetNextDirty+0x76>
 80137e6:	7806      	ldrb	r6, [r0, #0]
 80137e8:	2eff      	cmp	r6, #255	; 0xff
 80137ea:	f100 0701 	add.w	r7, r0, #1
 80137ee:	d10d      	bne.n	801380c <GUI_USAGE_BM_GetNextDirty+0xb4>
 80137f0:	1883      	adds	r3, r0, r2
 80137f2:	e003      	b.n	80137fc <GUI_USAGE_BM_GetNextDirty+0xa4>
 80137f4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80137f8:	2eff      	cmp	r6, #255	; 0xff
 80137fa:	d107      	bne.n	801380c <GUI_USAGE_BM_GetNextDirty+0xb4>
 80137fc:	42bb      	cmp	r3, r7
 80137fe:	f104 0408 	add.w	r4, r4, #8
 8013802:	d1f7      	bne.n	80137f4 <GUI_USAGE_BM_GetNextDirty+0x9c>
 8013804:	e7e3      	b.n	80137ce <GUI_USAGE_BM_GetNextDirty+0x76>
 8013806:	0076      	lsls	r6, r6, #1
 8013808:	b2f6      	uxtb	r6, r6
 801380a:	3401      	adds	r4, #1
 801380c:	0633      	lsls	r3, r6, #24
 801380e:	d4fa      	bmi.n	8013806 <GUI_USAGE_BM_GetNextDirty+0xae>
 8013810:	e7dd      	b.n	80137ce <GUI_USAGE_BM_GetNextDirty+0x76>
 8013812:	2bff      	cmp	r3, #255	; 0xff
 8013814:	bf08      	it	eq
 8013816:	1dec      	addeq	r4, r5, #7
 8013818:	d0d5      	beq.n	80137c6 <GUI_USAGE_BM_GetNextDirty+0x6e>
 801381a:	e7cb      	b.n	80137b4 <GUI_USAGE_BM_GetNextDirty+0x5c>

0801381c <_GUI_USAGE_BM_Delete>:
 801381c:	f7f5 b9b4 	b.w	8008b88 <GUI_ALLOC_Free>

08013820 <GUI_USAGE_BM_Clear>:
 8013820:	4603      	mov	r3, r0
 8013822:	2100      	movs	r1, #0
 8013824:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	3014      	adds	r0, #20
 801382c:	fb03 f202 	mul.w	r2, r3, r2
 8013830:	f001 bb51 	b.w	8014ed6 <memset>

08013834 <GUI_USAGE_BM_AddHLine>:
 8013834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013836:	f9b0 4000 	ldrsh.w	r4, [r0]
 801383a:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801383e:	1b0c      	subs	r4, r1, r4
 8013840:	42ac      	cmp	r4, r5
 8013842:	da2b      	bge.n	801389c <GUI_USAGE_BM_AddHLine+0x68>
 8013844:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013848:	6905      	ldr	r5, [r0, #16]
 801384a:	4423      	add	r3, r4
 801384c:	3b01      	subs	r3, #1
 801384e:	1a52      	subs	r2, r2, r1
 8013850:	10e6      	asrs	r6, r4, #3
 8013852:	fb05 6502 	mla	r5, r5, r2, r6
 8013856:	43df      	mvns	r7, r3
 8013858:	f007 0707 	and.w	r7, r7, #7
 801385c:	21ff      	movs	r1, #255	; 0xff
 801385e:	3514      	adds	r5, #20
 8013860:	f004 0407 	and.w	r4, r4, #7
 8013864:	fa01 f207 	lsl.w	r2, r1, r7
 8013868:	fa41 f404 	asr.w	r4, r1, r4
 801386c:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 8013870:	b2d7      	uxtb	r7, r2
 8013872:	b2e4      	uxtb	r4, r4
 8013874:	eb00 0205 	add.w	r2, r0, r5
 8013878:	5d43      	ldrb	r3, [r0, r5]
 801387a:	d010      	beq.n	801389e <GUI_USAGE_BM_AddHLine+0x6a>
 801387c:	3e01      	subs	r6, #1
 801387e:	431c      	orrs	r4, r3
 8013880:	2e00      	cmp	r6, #0
 8013882:	f102 0301 	add.w	r3, r2, #1
 8013886:	5544      	strb	r4, [r0, r5]
 8013888:	dd05      	ble.n	8013896 <GUI_USAGE_BM_AddHLine+0x62>
 801388a:	4618      	mov	r0, r3
 801388c:	4632      	mov	r2, r6
 801388e:	f001 fb22 	bl	8014ed6 <memset>
 8013892:	4603      	mov	r3, r0
 8013894:	4433      	add	r3, r6
 8013896:	781c      	ldrb	r4, [r3, #0]
 8013898:	433c      	orrs	r4, r7
 801389a:	701c      	strb	r4, [r3, #0]
 801389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801389e:	403c      	ands	r4, r7
 80138a0:	431c      	orrs	r4, r3
 80138a2:	5544      	strb	r4, [r0, r5]
 80138a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138a6:	bf00      	nop

080138a8 <GUI_USAGE_BM_Create>:
 80138a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138ac:	f102 040f 	add.w	r4, r2, #15
 80138b0:	1124      	asrs	r4, r4, #4
 80138b2:	0064      	lsls	r4, r4, #1
 80138b4:	461e      	mov	r6, r3
 80138b6:	fb03 f304 	mul.w	r3, r3, r4
 80138ba:	b083      	sub	sp, #12
 80138bc:	4680      	mov	r8, r0
 80138be:	f103 0014 	add.w	r0, r3, #20
 80138c2:	4617      	mov	r7, r2
 80138c4:	4689      	mov	r9, r1
 80138c6:	f7f5 f97f 	bl	8008bc8 <GUI_ALLOC_AllocZero>
 80138ca:	4605      	mov	r5, r0
 80138cc:	b1b8      	cbz	r0, 80138fe <GUI_USAGE_BM_Create+0x56>
 80138ce:	f7f6 fb01 	bl	8009ed4 <GUI_Lock>
 80138d2:	4628      	mov	r0, r5
 80138d4:	f7f4 ffd2 	bl	800887c <GUI_ALLOC_LockH>
 80138d8:	4601      	mov	r1, r0
 80138da:	a802      	add	r0, sp, #8
 80138dc:	4a0a      	ldr	r2, [pc, #40]	; (8013908 <GUI_USAGE_BM_Create+0x60>)
 80138de:	f840 1d04 	str.w	r1, [r0, #-4]!
 80138e2:	2301      	movs	r3, #1
 80138e4:	808f      	strh	r7, [r1, #4]
 80138e6:	80ce      	strh	r6, [r1, #6]
 80138e8:	610c      	str	r4, [r1, #16]
 80138ea:	f8a1 8000 	strh.w	r8, [r1]
 80138ee:	f8a1 9002 	strh.w	r9, [r1, #2]
 80138f2:	608a      	str	r2, [r1, #8]
 80138f4:	818b      	strh	r3, [r1, #12]
 80138f6:	f7f4 ffd3 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80138fa:	f7f6 fae1 	bl	8009ec0 <GUI_Unlock>
 80138fe:	4628      	mov	r0, r5
 8013900:	b003      	add	sp, #12
 8013902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013906:	bf00      	nop
 8013908:	0801a528 	.word	0x0801a528

0801390c <GUI_MEMDEV_Write>:
 801390c:	b900      	cbnz	r0, 8013910 <GUI_MEMDEV_Write+0x4>
 801390e:	4770      	bx	lr
 8013910:	b570      	push	{r4, r5, r6, lr}
 8013912:	4604      	mov	r4, r0
 8013914:	b084      	sub	sp, #16
 8013916:	f7f6 fadd 	bl	8009ed4 <GUI_Lock>
 801391a:	4620      	mov	r0, r4
 801391c:	f7f4 ffae 	bl	800887c <GUI_ALLOC_LockH>
 8013920:	4601      	mov	r1, r0
 8013922:	a801      	add	r0, sp, #4
 8013924:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8013928:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 801392c:	890a      	ldrh	r2, [r1, #8]
 801392e:	894b      	ldrh	r3, [r1, #10]
 8013930:	9101      	str	r1, [sp, #4]
 8013932:	4432      	add	r2, r6
 8013934:	442b      	add	r3, r5
 8013936:	3a01      	subs	r2, #1
 8013938:	3b01      	subs	r3, #1
 801393a:	f8ad 6008 	strh.w	r6, [sp, #8]
 801393e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013942:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013946:	f8ad 500a 	strh.w	r5, [sp, #10]
 801394a:	f7f4 ffa9 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801394e:	a802      	add	r0, sp, #8
 8013950:	f7fb ffb8 	bl	800f8c4 <WM__InitIVRSearch>
 8013954:	b140      	cbz	r0, 8013968 <GUI_MEMDEV_Write+0x5c>
 8013956:	462a      	mov	r2, r5
 8013958:	4631      	mov	r1, r6
 801395a:	4620      	mov	r0, r4
 801395c:	f7ff fb1a 	bl	8012f94 <GUI_MEMDEV__WriteToActiveAt>
 8013960:	f7fb fe8a 	bl	800f678 <WM__GetNextIVR>
 8013964:	2800      	cmp	r0, #0
 8013966:	d1f6      	bne.n	8013956 <GUI_MEMDEV_Write+0x4a>
 8013968:	f7f6 faaa 	bl	8009ec0 <GUI_Unlock>
 801396c:	b004      	add	sp, #16
 801396e:	bd70      	pop	{r4, r5, r6, pc}

08013970 <WM_PID__SetPrevState>:
 8013970:	b410      	push	{r4}
 8013972:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8013976:	c807      	ldmia	r0, {r0, r1, r2}
 8013978:	4b03      	ldr	r3, [pc, #12]	; (8013988 <WM_PID__SetPrevState+0x18>)
 801397a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801397e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013986:	4770      	bx	lr
 8013988:	20000898 	.word	0x20000898

0801398c <_Screen2hWin>:
 801398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013990:	b099      	sub	sp, #100	; 0x64
 8013992:	9005      	str	r0, [sp, #20]
 8013994:	b910      	cbnz	r0, 801399c <_Screen2hWin+0x10>
 8013996:	b019      	add	sp, #100	; 0x64
 8013998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801399c:	4692      	mov	sl, r2
 801399e:	4699      	mov	r9, r3
 80139a0:	468b      	mov	fp, r1
 80139a2:	f7f4 ff6b 	bl	800887c <GUI_ALLOC_LockH>
 80139a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80139a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80139aa:	079a      	lsls	r2, r3, #30
 80139ac:	f140 8218 	bpl.w	8013de0 <_Screen2hWin+0x454>
 80139b0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80139b4:	459a      	cmp	sl, r3
 80139b6:	f2c0 8213 	blt.w	8013de0 <_Screen2hWin+0x454>
 80139ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80139be:	459a      	cmp	sl, r3
 80139c0:	f300 820e 	bgt.w	8013de0 <_Screen2hWin+0x454>
 80139c4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80139c8:	4599      	cmp	r9, r3
 80139ca:	f2c0 8209 	blt.w	8013de0 <_Screen2hWin+0x454>
 80139ce:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80139d2:	4599      	cmp	r9, r3
 80139d4:	f300 8204 	bgt.w	8013de0 <_Screen2hWin+0x454>
 80139d8:	69c3      	ldr	r3, [r0, #28]
 80139da:	9308      	str	r3, [sp, #32]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	f000 81f1 	beq.w	8013dc4 <_Screen2hWin+0x438>
 80139e2:	455b      	cmp	r3, fp
 80139e4:	f000 81ee 	beq.w	8013dc4 <_Screen2hWin+0x438>
 80139e8:	9b05      	ldr	r3, [sp, #20]
 80139ea:	9808      	ldr	r0, [sp, #32]
 80139ec:	930d      	str	r3, [sp, #52]	; 0x34
 80139ee:	f7f4 ff45 	bl	800887c <GUI_ALLOC_LockH>
 80139f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80139f4:	9010      	str	r0, [sp, #64]	; 0x40
 80139f6:	079b      	lsls	r3, r3, #30
 80139f8:	f140 81d6 	bpl.w	8013da8 <_Screen2hWin+0x41c>
 80139fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013a00:	459a      	cmp	sl, r3
 8013a02:	f2c0 81d1 	blt.w	8013da8 <_Screen2hWin+0x41c>
 8013a06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013a0a:	459a      	cmp	sl, r3
 8013a0c:	f300 81cc 	bgt.w	8013da8 <_Screen2hWin+0x41c>
 8013a10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013a14:	4599      	cmp	r9, r3
 8013a16:	f2c0 81c7 	blt.w	8013da8 <_Screen2hWin+0x41c>
 8013a1a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013a1e:	4599      	cmp	r9, r3
 8013a20:	f300 81c2 	bgt.w	8013da8 <_Screen2hWin+0x41c>
 8013a24:	69c3      	ldr	r3, [r0, #28]
 8013a26:	9309      	str	r3, [sp, #36]	; 0x24
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f000 81d0 	beq.w	8013dce <_Screen2hWin+0x442>
 8013a2e:	459b      	cmp	fp, r3
 8013a30:	f000 81cd 	beq.w	8013dce <_Screen2hWin+0x442>
 8013a34:	9b08      	ldr	r3, [sp, #32]
 8013a36:	9305      	str	r3, [sp, #20]
 8013a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a3a:	f7f4 ff1f 	bl	800887c <GUI_ALLOC_LockH>
 8013a3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013a40:	9011      	str	r0, [sp, #68]	; 0x44
 8013a42:	079f      	lsls	r7, r3, #30
 8013a44:	f140 81a3 	bpl.w	8013d8e <_Screen2hWin+0x402>
 8013a48:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013a4c:	459a      	cmp	sl, r3
 8013a4e:	f2c0 819e 	blt.w	8013d8e <_Screen2hWin+0x402>
 8013a52:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013a56:	459a      	cmp	sl, r3
 8013a58:	f300 8199 	bgt.w	8013d8e <_Screen2hWin+0x402>
 8013a5c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013a60:	4599      	cmp	r9, r3
 8013a62:	f2c0 8194 	blt.w	8013d8e <_Screen2hWin+0x402>
 8013a66:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013a6a:	4599      	cmp	r9, r3
 8013a6c:	f300 818f 	bgt.w	8013d8e <_Screen2hWin+0x402>
 8013a70:	69c3      	ldr	r3, [r0, #28]
 8013a72:	930a      	str	r3, [sp, #40]	; 0x28
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f000 81bb 	beq.w	8013df0 <_Screen2hWin+0x464>
 8013a7a:	459b      	cmp	fp, r3
 8013a7c:	f000 81b8 	beq.w	8013df0 <_Screen2hWin+0x464>
 8013a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a86:	f7f4 fef9 	bl	800887c <GUI_ALLOC_LockH>
 8013a8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013a8c:	9012      	str	r0, [sp, #72]	; 0x48
 8013a8e:	079e      	lsls	r6, r3, #30
 8013a90:	f140 8176 	bpl.w	8013d80 <_Screen2hWin+0x3f4>
 8013a94:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013a98:	459a      	cmp	sl, r3
 8013a9a:	f2c0 8171 	blt.w	8013d80 <_Screen2hWin+0x3f4>
 8013a9e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013aa2:	459a      	cmp	sl, r3
 8013aa4:	f300 816c 	bgt.w	8013d80 <_Screen2hWin+0x3f4>
 8013aa8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013aac:	4599      	cmp	r9, r3
 8013aae:	f2c0 8167 	blt.w	8013d80 <_Screen2hWin+0x3f4>
 8013ab2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013ab6:	4599      	cmp	r9, r3
 8013ab8:	f300 8162 	bgt.w	8013d80 <_Screen2hWin+0x3f4>
 8013abc:	69c3      	ldr	r3, [r0, #28]
 8013abe:	9306      	str	r3, [sp, #24]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f000 8198 	beq.w	8013df6 <_Screen2hWin+0x46a>
 8013ac6:	459b      	cmp	fp, r3
 8013ac8:	f000 8195 	beq.w	8013df6 <_Screen2hWin+0x46a>
 8013acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ace:	930c      	str	r3, [sp, #48]	; 0x30
 8013ad0:	9806      	ldr	r0, [sp, #24]
 8013ad2:	f7f4 fed3 	bl	800887c <GUI_ALLOC_LockH>
 8013ad6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013ad8:	9013      	str	r0, [sp, #76]	; 0x4c
 8013ada:	079d      	lsls	r5, r3, #30
 8013adc:	f140 8149 	bpl.w	8013d72 <_Screen2hWin+0x3e6>
 8013ae0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013ae4:	459a      	cmp	sl, r3
 8013ae6:	f2c0 8144 	blt.w	8013d72 <_Screen2hWin+0x3e6>
 8013aea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013aee:	459a      	cmp	sl, r3
 8013af0:	f300 813f 	bgt.w	8013d72 <_Screen2hWin+0x3e6>
 8013af4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013af8:	4599      	cmp	r9, r3
 8013afa:	f2c0 813a 	blt.w	8013d72 <_Screen2hWin+0x3e6>
 8013afe:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013b02:	4599      	cmp	r9, r3
 8013b04:	f300 8135 	bgt.w	8013d72 <_Screen2hWin+0x3e6>
 8013b08:	69c3      	ldr	r3, [r0, #28]
 8013b0a:	9303      	str	r3, [sp, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f000 816c 	beq.w	8013dea <_Screen2hWin+0x45e>
 8013b12:	459b      	cmp	fp, r3
 8013b14:	f000 8169 	beq.w	8013dea <_Screen2hWin+0x45e>
 8013b18:	9b06      	ldr	r3, [sp, #24]
 8013b1a:	9307      	str	r3, [sp, #28]
 8013b1c:	9803      	ldr	r0, [sp, #12]
 8013b1e:	f7f4 fead 	bl	800887c <GUI_ALLOC_LockH>
 8013b22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013b24:	9014      	str	r0, [sp, #80]	; 0x50
 8013b26:	079c      	lsls	r4, r3, #30
 8013b28:	f140 811d 	bpl.w	8013d66 <_Screen2hWin+0x3da>
 8013b2c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013b30:	459a      	cmp	sl, r3
 8013b32:	f2c0 8118 	blt.w	8013d66 <_Screen2hWin+0x3da>
 8013b36:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013b3a:	459a      	cmp	sl, r3
 8013b3c:	f300 8113 	bgt.w	8013d66 <_Screen2hWin+0x3da>
 8013b40:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013b44:	4599      	cmp	r9, r3
 8013b46:	f2c0 810e 	blt.w	8013d66 <_Screen2hWin+0x3da>
 8013b4a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013b4e:	4599      	cmp	r9, r3
 8013b50:	f300 8109 	bgt.w	8013d66 <_Screen2hWin+0x3da>
 8013b54:	69c3      	ldr	r3, [r0, #28]
 8013b56:	9301      	str	r3, [sp, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 8115 	beq.w	8013d88 <_Screen2hWin+0x3fc>
 8013b5e:	459b      	cmp	fp, r3
 8013b60:	f000 8112 	beq.w	8013d88 <_Screen2hWin+0x3fc>
 8013b64:	9b03      	ldr	r3, [sp, #12]
 8013b66:	9304      	str	r3, [sp, #16]
 8013b68:	9801      	ldr	r0, [sp, #4]
 8013b6a:	f7f4 fe87 	bl	800887c <GUI_ALLOC_LockH>
 8013b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013b70:	9015      	str	r0, [sp, #84]	; 0x54
 8013b72:	0799      	lsls	r1, r3, #30
 8013b74:	f140 80f1 	bpl.w	8013d5a <_Screen2hWin+0x3ce>
 8013b78:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013b7c:	459a      	cmp	sl, r3
 8013b7e:	f2c0 80ec 	blt.w	8013d5a <_Screen2hWin+0x3ce>
 8013b82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013b86:	459a      	cmp	sl, r3
 8013b88:	f300 80e7 	bgt.w	8013d5a <_Screen2hWin+0x3ce>
 8013b8c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013b90:	4599      	cmp	r9, r3
 8013b92:	f2c0 80e2 	blt.w	8013d5a <_Screen2hWin+0x3ce>
 8013b96:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013b9a:	4599      	cmp	r9, r3
 8013b9c:	f300 80dd 	bgt.w	8013d5a <_Screen2hWin+0x3ce>
 8013ba0:	69c7      	ldr	r7, [r0, #28]
 8013ba2:	2f00      	cmp	r7, #0
 8013ba4:	f000 80e9 	beq.w	8013d7a <_Screen2hWin+0x3ee>
 8013ba8:	45bb      	cmp	fp, r7
 8013baa:	f000 80e6 	beq.w	8013d7a <_Screen2hWin+0x3ee>
 8013bae:	9b01      	ldr	r3, [sp, #4]
 8013bb0:	9302      	str	r3, [sp, #8]
 8013bb2:	4638      	mov	r0, r7
 8013bb4:	f7f4 fe62 	bl	800887c <GUI_ALLOC_LockH>
 8013bb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013bba:	9016      	str	r0, [sp, #88]	; 0x58
 8013bbc:	079a      	lsls	r2, r3, #30
 8013bbe:	f140 80c8 	bpl.w	8013d52 <_Screen2hWin+0x3c6>
 8013bc2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013bc6:	459a      	cmp	sl, r3
 8013bc8:	f2c0 80c3 	blt.w	8013d52 <_Screen2hWin+0x3c6>
 8013bcc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013bd0:	459a      	cmp	sl, r3
 8013bd2:	f300 80be 	bgt.w	8013d52 <_Screen2hWin+0x3c6>
 8013bd6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013bda:	4599      	cmp	r9, r3
 8013bdc:	f2c0 80b9 	blt.w	8013d52 <_Screen2hWin+0x3c6>
 8013be0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013be4:	4599      	cmp	r9, r3
 8013be6:	f300 80b4 	bgt.w	8013d52 <_Screen2hWin+0x3c6>
 8013bea:	69c6      	ldr	r6, [r0, #28]
 8013bec:	2e00      	cmp	r6, #0
 8013bee:	f000 80be 	beq.w	8013d6e <_Screen2hWin+0x3e2>
 8013bf2:	45b3      	cmp	fp, r6
 8013bf4:	bf18      	it	ne
 8013bf6:	46b8      	movne	r8, r7
 8013bf8:	f000 80b9 	beq.w	8013d6e <_Screen2hWin+0x3e2>
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	f7f4 fe3d 	bl	800887c <GUI_ALLOC_LockH>
 8013c02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013c04:	9017      	str	r0, [sp, #92]	; 0x5c
 8013c06:	079b      	lsls	r3, r3, #30
 8013c08:	f140 809f 	bpl.w	8013d4a <_Screen2hWin+0x3be>
 8013c0c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013c10:	459a      	cmp	sl, r3
 8013c12:	f2c0 809a 	blt.w	8013d4a <_Screen2hWin+0x3be>
 8013c16:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013c1a:	459a      	cmp	sl, r3
 8013c1c:	f300 8095 	bgt.w	8013d4a <_Screen2hWin+0x3be>
 8013c20:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013c24:	4599      	cmp	r9, r3
 8013c26:	f2c0 8090 	blt.w	8013d4a <_Screen2hWin+0x3be>
 8013c2a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013c2e:	4599      	cmp	r9, r3
 8013c30:	f300 808b 	bgt.w	8013d4a <_Screen2hWin+0x3be>
 8013c34:	69c4      	ldr	r4, [r0, #28]
 8013c36:	2c00      	cmp	r4, #0
 8013c38:	f000 8093 	beq.w	8013d62 <_Screen2hWin+0x3d6>
 8013c3c:	45a3      	cmp	fp, r4
 8013c3e:	bf18      	it	ne
 8013c40:	4635      	movne	r5, r6
 8013c42:	d102      	bne.n	8013c4a <_Screen2hWin+0x2be>
 8013c44:	e08d      	b.n	8013d62 <_Screen2hWin+0x3d6>
 8013c46:	45a3      	cmp	fp, r4
 8013c48:	d00e      	beq.n	8013c68 <_Screen2hWin+0x2dc>
 8013c4a:	464b      	mov	r3, r9
 8013c4c:	4652      	mov	r2, sl
 8013c4e:	4659      	mov	r1, fp
 8013c50:	4620      	mov	r0, r4
 8013c52:	f7ff fe9b 	bl	801398c <_Screen2hWin>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	bf18      	it	ne
 8013c5a:	4605      	movne	r5, r0
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f7f4 fe03 	bl	8008868 <GUI_ALLOC_h2p>
 8013c62:	6a04      	ldr	r4, [r0, #32]
 8013c64:	2c00      	cmp	r4, #0
 8013c66:	d1ee      	bne.n	8013c46 <_Screen2hWin+0x2ba>
 8013c68:	a817      	add	r0, sp, #92	; 0x5c
 8013c6a:	f7f4 fe19 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013c6e:	2d00      	cmp	r5, #0
 8013c70:	bf18      	it	ne
 8013c72:	46a8      	movne	r8, r5
 8013c74:	4630      	mov	r0, r6
 8013c76:	f7f4 fdf7 	bl	8008868 <GUI_ALLOC_h2p>
 8013c7a:	6a06      	ldr	r6, [r0, #32]
 8013c7c:	b10e      	cbz	r6, 8013c82 <_Screen2hWin+0x2f6>
 8013c7e:	45b3      	cmp	fp, r6
 8013c80:	d1bc      	bne.n	8013bfc <_Screen2hWin+0x270>
 8013c82:	a816      	add	r0, sp, #88	; 0x58
 8013c84:	f7f4 fe0c 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013c88:	9b02      	ldr	r3, [sp, #8]
 8013c8a:	f1b8 0f00 	cmp.w	r8, #0
 8013c8e:	bf18      	it	ne
 8013c90:	4643      	movne	r3, r8
 8013c92:	9302      	str	r3, [sp, #8]
 8013c94:	4638      	mov	r0, r7
 8013c96:	f7f4 fde7 	bl	8008868 <GUI_ALLOC_h2p>
 8013c9a:	6a07      	ldr	r7, [r0, #32]
 8013c9c:	b10f      	cbz	r7, 8013ca2 <_Screen2hWin+0x316>
 8013c9e:	45bb      	cmp	fp, r7
 8013ca0:	d187      	bne.n	8013bb2 <_Screen2hWin+0x226>
 8013ca2:	a815      	add	r0, sp, #84	; 0x54
 8013ca4:	f7f4 fdfc 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013ca8:	9a02      	ldr	r2, [sp, #8]
 8013caa:	9904      	ldr	r1, [sp, #16]
 8013cac:	4613      	mov	r3, r2
 8013cae:	2a00      	cmp	r2, #0
 8013cb0:	bf08      	it	eq
 8013cb2:	460b      	moveq	r3, r1
 8013cb4:	9304      	str	r3, [sp, #16]
 8013cb6:	9801      	ldr	r0, [sp, #4]
 8013cb8:	f7f4 fdd6 	bl	8008868 <GUI_ALLOC_h2p>
 8013cbc:	6a03      	ldr	r3, [r0, #32]
 8013cbe:	9301      	str	r3, [sp, #4]
 8013cc0:	b113      	cbz	r3, 8013cc8 <_Screen2hWin+0x33c>
 8013cc2:	459b      	cmp	fp, r3
 8013cc4:	f47f af50 	bne.w	8013b68 <_Screen2hWin+0x1dc>
 8013cc8:	a814      	add	r0, sp, #80	; 0x50
 8013cca:	f7f4 fde9 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013cce:	9a04      	ldr	r2, [sp, #16]
 8013cd0:	9907      	ldr	r1, [sp, #28]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	2a00      	cmp	r2, #0
 8013cd6:	bf08      	it	eq
 8013cd8:	460b      	moveq	r3, r1
 8013cda:	9307      	str	r3, [sp, #28]
 8013cdc:	9803      	ldr	r0, [sp, #12]
 8013cde:	f7f4 fdc3 	bl	8008868 <GUI_ALLOC_h2p>
 8013ce2:	6a03      	ldr	r3, [r0, #32]
 8013ce4:	9303      	str	r3, [sp, #12]
 8013ce6:	b113      	cbz	r3, 8013cee <_Screen2hWin+0x362>
 8013ce8:	459b      	cmp	fp, r3
 8013cea:	f47f af17 	bne.w	8013b1c <_Screen2hWin+0x190>
 8013cee:	a813      	add	r0, sp, #76	; 0x4c
 8013cf0:	f7f4 fdd6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013cf6:	9a07      	ldr	r2, [sp, #28]
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	bf08      	it	eq
 8013cfc:	460a      	moveq	r2, r1
 8013cfe:	920c      	str	r2, [sp, #48]	; 0x30
 8013d00:	9806      	ldr	r0, [sp, #24]
 8013d02:	f7f4 fdb1 	bl	8008868 <GUI_ALLOC_h2p>
 8013d06:	6a03      	ldr	r3, [r0, #32]
 8013d08:	9306      	str	r3, [sp, #24]
 8013d0a:	b113      	cbz	r3, 8013d12 <_Screen2hWin+0x386>
 8013d0c:	459b      	cmp	fp, r3
 8013d0e:	f47f aedf 	bne.w	8013ad0 <_Screen2hWin+0x144>
 8013d12:	a812      	add	r0, sp, #72	; 0x48
 8013d14:	f7f4 fdc4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d1c:	2a00      	cmp	r2, #0
 8013d1e:	bf08      	it	eq
 8013d20:	460a      	moveq	r2, r1
 8013d22:	920b      	str	r2, [sp, #44]	; 0x2c
 8013d24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d26:	f7f4 fd9f 	bl	8008868 <GUI_ALLOC_h2p>
 8013d2a:	6a03      	ldr	r3, [r0, #32]
 8013d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8013d2e:	b113      	cbz	r3, 8013d36 <_Screen2hWin+0x3aa>
 8013d30:	459b      	cmp	fp, r3
 8013d32:	f47f aea7 	bne.w	8013a84 <_Screen2hWin+0xf8>
 8013d36:	a811      	add	r0, sp, #68	; 0x44
 8013d38:	f7f4 fdb2 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d3c:	9905      	ldr	r1, [sp, #20]
 8013d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d40:	2a00      	cmp	r2, #0
 8013d42:	bf08      	it	eq
 8013d44:	460a      	moveq	r2, r1
 8013d46:	9205      	str	r2, [sp, #20]
 8013d48:	e024      	b.n	8013d94 <_Screen2hWin+0x408>
 8013d4a:	a817      	add	r0, sp, #92	; 0x5c
 8013d4c:	f7f4 fda8 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d50:	e790      	b.n	8013c74 <_Screen2hWin+0x2e8>
 8013d52:	a816      	add	r0, sp, #88	; 0x58
 8013d54:	f7f4 fda4 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d58:	e79c      	b.n	8013c94 <_Screen2hWin+0x308>
 8013d5a:	a815      	add	r0, sp, #84	; 0x54
 8013d5c:	f7f4 fda0 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d60:	e7a9      	b.n	8013cb6 <_Screen2hWin+0x32a>
 8013d62:	4635      	mov	r5, r6
 8013d64:	e780      	b.n	8013c68 <_Screen2hWin+0x2dc>
 8013d66:	a814      	add	r0, sp, #80	; 0x50
 8013d68:	f7f4 fd9a 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d6c:	e7b6      	b.n	8013cdc <_Screen2hWin+0x350>
 8013d6e:	46b8      	mov	r8, r7
 8013d70:	e787      	b.n	8013c82 <_Screen2hWin+0x2f6>
 8013d72:	a813      	add	r0, sp, #76	; 0x4c
 8013d74:	f7f4 fd94 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d78:	e7c2      	b.n	8013d00 <_Screen2hWin+0x374>
 8013d7a:	9b01      	ldr	r3, [sp, #4]
 8013d7c:	9302      	str	r3, [sp, #8]
 8013d7e:	e790      	b.n	8013ca2 <_Screen2hWin+0x316>
 8013d80:	a812      	add	r0, sp, #72	; 0x48
 8013d82:	f7f4 fd8d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d86:	e7cd      	b.n	8013d24 <_Screen2hWin+0x398>
 8013d88:	9b03      	ldr	r3, [sp, #12]
 8013d8a:	9304      	str	r3, [sp, #16]
 8013d8c:	e79c      	b.n	8013cc8 <_Screen2hWin+0x33c>
 8013d8e:	a811      	add	r0, sp, #68	; 0x44
 8013d90:	f7f4 fd86 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d96:	f7f4 fd67 	bl	8008868 <GUI_ALLOC_h2p>
 8013d9a:	6a03      	ldr	r3, [r0, #32]
 8013d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d9e:	b1c3      	cbz	r3, 8013dd2 <_Screen2hWin+0x446>
 8013da0:	459b      	cmp	fp, r3
 8013da2:	f47f ae49 	bne.w	8013a38 <_Screen2hWin+0xac>
 8013da6:	e014      	b.n	8013dd2 <_Screen2hWin+0x446>
 8013da8:	a810      	add	r0, sp, #64	; 0x40
 8013daa:	f7f4 fd79 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db0:	9305      	str	r3, [sp, #20]
 8013db2:	9808      	ldr	r0, [sp, #32]
 8013db4:	f7f4 fd58 	bl	8008868 <GUI_ALLOC_h2p>
 8013db8:	6a03      	ldr	r3, [r0, #32]
 8013dba:	9308      	str	r3, [sp, #32]
 8013dbc:	b113      	cbz	r3, 8013dc4 <_Screen2hWin+0x438>
 8013dbe:	459b      	cmp	fp, r3
 8013dc0:	f47f ae12 	bne.w	80139e8 <_Screen2hWin+0x5c>
 8013dc4:	a80f      	add	r0, sp, #60	; 0x3c
 8013dc6:	f7f4 fd6b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013dca:	9805      	ldr	r0, [sp, #20]
 8013dcc:	e5e3      	b.n	8013996 <_Screen2hWin+0xa>
 8013dce:	9b08      	ldr	r3, [sp, #32]
 8013dd0:	9305      	str	r3, [sp, #20]
 8013dd2:	a810      	add	r0, sp, #64	; 0x40
 8013dd4:	f7f4 fd64 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013dd8:	9b05      	ldr	r3, [sp, #20]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1e9      	bne.n	8013db2 <_Screen2hWin+0x426>
 8013dde:	e7e6      	b.n	8013dae <_Screen2hWin+0x422>
 8013de0:	a80f      	add	r0, sp, #60	; 0x3c
 8013de2:	f7f4 fd5d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013de6:	2000      	movs	r0, #0
 8013de8:	e5d5      	b.n	8013996 <_Screen2hWin+0xa>
 8013dea:	9b06      	ldr	r3, [sp, #24]
 8013dec:	9307      	str	r3, [sp, #28]
 8013dee:	e77e      	b.n	8013cee <_Screen2hWin+0x362>
 8013df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8013df4:	e79f      	b.n	8013d36 <_Screen2hWin+0x3aa>
 8013df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013df8:	930c      	str	r3, [sp, #48]	; 0x30
 8013dfa:	e78a      	b.n	8013d12 <_Screen2hWin+0x386>

08013dfc <WM_Screen2hWin>:
 8013dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	4606      	mov	r6, r0
 8013e02:	460f      	mov	r7, r1
 8013e04:	f7f6 f866 	bl	8009ed4 <GUI_Lock>
 8013e08:	4b21      	ldr	r3, [pc, #132]	; (8013e90 <WM_Screen2hWin+0x94>)
 8013e0a:	6818      	ldr	r0, [r3, #0]
 8013e0c:	f7fc f954 	bl	80100b8 <WM_GetDesktopWindowEx>
 8013e10:	4605      	mov	r5, r0
 8013e12:	b920      	cbnz	r0, 8013e1e <WM_Screen2hWin+0x22>
 8013e14:	f7f6 f854 	bl	8009ec0 <GUI_Unlock>
 8013e18:	4628      	mov	r0, r5
 8013e1a:	b003      	add	sp, #12
 8013e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e1e:	f7f4 fd2d 	bl	800887c <GUI_ALLOC_LockH>
 8013e22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013e24:	9001      	str	r0, [sp, #4]
 8013e26:	079b      	lsls	r3, r3, #30
 8013e28:	d528      	bpl.n	8013e7c <WM_Screen2hWin+0x80>
 8013e2a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013e2e:	429e      	cmp	r6, r3
 8013e30:	db24      	blt.n	8013e7c <WM_Screen2hWin+0x80>
 8013e32:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013e36:	429e      	cmp	r6, r3
 8013e38:	dc20      	bgt.n	8013e7c <WM_Screen2hWin+0x80>
 8013e3a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013e3e:	429f      	cmp	r7, r3
 8013e40:	db1c      	blt.n	8013e7c <WM_Screen2hWin+0x80>
 8013e42:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013e46:	429f      	cmp	r7, r3
 8013e48:	dc18      	bgt.n	8013e7c <WM_Screen2hWin+0x80>
 8013e4a:	69c4      	ldr	r4, [r0, #28]
 8013e4c:	b174      	cbz	r4, 8013e6c <WM_Screen2hWin+0x70>
 8013e4e:	463b      	mov	r3, r7
 8013e50:	4632      	mov	r2, r6
 8013e52:	2100      	movs	r1, #0
 8013e54:	4620      	mov	r0, r4
 8013e56:	f7ff fd99 	bl	801398c <_Screen2hWin>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	bf18      	it	ne
 8013e5e:	4605      	movne	r5, r0
 8013e60:	4620      	mov	r0, r4
 8013e62:	f7f4 fd01 	bl	8008868 <GUI_ALLOC_h2p>
 8013e66:	6a04      	ldr	r4, [r0, #32]
 8013e68:	2c00      	cmp	r4, #0
 8013e6a:	d1f0      	bne.n	8013e4e <WM_Screen2hWin+0x52>
 8013e6c:	a801      	add	r0, sp, #4
 8013e6e:	f7f4 fd17 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013e72:	f7f6 f825 	bl	8009ec0 <GUI_Unlock>
 8013e76:	4628      	mov	r0, r5
 8013e78:	b003      	add	sp, #12
 8013e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e7c:	a801      	add	r0, sp, #4
 8013e7e:	f7f4 fd0f 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013e82:	f7f6 f81d 	bl	8009ec0 <GUI_Unlock>
 8013e86:	2500      	movs	r5, #0
 8013e88:	4628      	mov	r0, r5
 8013e8a:	b003      	add	sp, #12
 8013e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	20035848 	.word	0x20035848

08013e94 <WM_ReleaseCapture>:
 8013e94:	b530      	push	{r4, r5, lr}
 8013e96:	4d0b      	ldr	r5, [pc, #44]	; (8013ec4 <WM_ReleaseCapture+0x30>)
 8013e98:	4c0b      	ldr	r4, [pc, #44]	; (8013ec8 <WM_ReleaseCapture+0x34>)
 8013e9a:	b085      	sub	sp, #20
 8013e9c:	f7f6 f81a 	bl	8009ed4 <GUI_Lock>
 8013ea0:	682b      	ldr	r3, [r5, #0]
 8013ea2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013ea6:	b148      	cbz	r0, 8013ebc <WM_ReleaseCapture+0x28>
 8013ea8:	a904      	add	r1, sp, #16
 8013eaa:	2318      	movs	r3, #24
 8013eac:	f841 3d10 	str.w	r3, [r1, #-16]!
 8013eb0:	f7fc ff5a 	bl	8010d68 <WM__SendMessage>
 8013eb4:	682b      	ldr	r3, [r5, #0]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8013ebc:	f7f6 f800 	bl	8009ec0 <GUI_Unlock>
 8013ec0:	b005      	add	sp, #20
 8013ec2:	bd30      	pop	{r4, r5, pc}
 8013ec4:	20035848 	.word	0x20035848
 8013ec8:	20035854 	.word	0x20035854

08013ecc <_Color2Index_8888>:
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop

08013ed0 <_GetIndexMask_8888>:
 8013ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop

08013ed8 <_Color2IndexBulk>:
 8013ed8:	b410      	push	{r4}
 8013eda:	f850 4b04 	ldr.w	r4, [r0], #4
 8013ede:	600c      	str	r4, [r1, #0]
 8013ee0:	3a01      	subs	r2, #1
 8013ee2:	4419      	add	r1, r3
 8013ee4:	d1f9      	bne.n	8013eda <_Color2IndexBulk+0x2>
 8013ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <_Index2ColorBulk>:
 8013eec:	b410      	push	{r4}
 8013eee:	6804      	ldr	r4, [r0, #0]
 8013ef0:	f841 4b04 	str.w	r4, [r1], #4
 8013ef4:	3a01      	subs	r2, #1
 8013ef6:	4418      	add	r0, r3
 8013ef8:	d1f9      	bne.n	8013eee <_Index2ColorBulk+0x2>
 8013efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013efe:	4770      	bx	lr

08013f00 <LCD_Index2Color_8888>:
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop

08013f04 <LCD_Index2Color_888>:
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop

08013f08 <GUI__AlphaPreserveTrans>:
 8013f08:	b510      	push	{r4, lr}
 8013f0a:	4b09      	ldr	r3, [pc, #36]	; (8013f30 <GUI__AlphaPreserveTrans+0x28>)
 8013f0c:	781c      	ldrb	r4, [r3, #0]
 8013f0e:	b938      	cbnz	r0, 8013f20 <GUI__AlphaPreserveTrans+0x18>
 8013f10:	4602      	mov	r2, r0
 8013f12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013f16:	701a      	strb	r2, [r3, #0]
 8013f18:	f7f6 fefa 	bl	800ad10 <LCD_AA_SetAndMask>
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	bd10      	pop	{r4, pc}
 8013f20:	2201      	movs	r2, #1
 8013f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f26:	701a      	strb	r2, [r3, #0]
 8013f28:	f7f6 fef2 	bl	800ad10 <LCD_AA_SetAndMask>
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	bd10      	pop	{r4, pc}
 8013f30:	200357d8 	.word	0x200357d8

08013f34 <_GetDevData>:
 8013f34:	2901      	cmp	r1, #1
 8013f36:	4802      	ldr	r0, [pc, #8]	; (8013f40 <_GetDevData+0xc>)
 8013f38:	bf18      	it	ne
 8013f3a:	2000      	movne	r0, #0
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop
 8013f40:	0801a558 	.word	0x0801a558

08013f44 <_GetDevFunc>:
 8013f44:	2916      	cmp	r1, #22
 8013f46:	4802      	ldr	r0, [pc, #8]	; (8013f50 <_GetDevFunc+0xc>)
 8013f48:	bf18      	it	ne
 8013f4a:	2000      	movne	r0, #0
 8013f4c:	4770      	bx	lr
 8013f4e:	bf00      	nop
 8013f50:	08014c95 	.word	0x08014c95

08013f54 <_GetDevProp>:
 8013f54:	2908      	cmp	r1, #8
 8013f56:	bf0c      	ite	eq
 8013f58:	2020      	moveq	r0, #32
 8013f5a:	2000      	movne	r0, #0
 8013f5c:	4770      	bx	lr
 8013f5e:	bf00      	nop

08013f60 <_SetOrg>:
 8013f60:	6800      	ldr	r0, [r0, #0]
 8013f62:	68c3      	ldr	r3, [r0, #12]
 8013f64:	6a1b      	ldr	r3, [r3, #32]
 8013f66:	4718      	bx	r3

08013f68 <_GetRect>:
 8013f68:	b570      	push	{r4, r5, r6, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	6880      	ldr	r0, [r0, #8]
 8013f6e:	460c      	mov	r4, r1
 8013f70:	f7f4 fc84 	bl	800887c <GUI_ALLOC_LockH>
 8013f74:	a902      	add	r1, sp, #8
 8013f76:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8013f7a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8013f7e:	8902      	ldrh	r2, [r0, #8]
 8013f80:	8943      	ldrh	r3, [r0, #10]
 8013f82:	f841 0d04 	str.w	r0, [r1, #-4]!
 8013f86:	4432      	add	r2, r6
 8013f88:	442b      	add	r3, r5
 8013f8a:	3a01      	subs	r2, #1
 8013f8c:	3b01      	subs	r3, #1
 8013f8e:	8026      	strh	r6, [r4, #0]
 8013f90:	80a2      	strh	r2, [r4, #4]
 8013f92:	8065      	strh	r5, [r4, #2]
 8013f94:	80e3      	strh	r3, [r4, #6]
 8013f96:	4608      	mov	r0, r1
 8013f98:	f7f4 fc82 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013f9c:	b002      	add	sp, #8
 8013f9e:	bd70      	pop	{r4, r5, r6, pc}

08013fa0 <_DrawBitmap>:
 8013fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa4:	4cab      	ldr	r4, [pc, #684]	; (8014254 <_DrawBitmap+0x2b4>)
 8013fa6:	6824      	ldr	r4, [r4, #0]
 8013fa8:	b093      	sub	sp, #76	; 0x4c
 8013faa:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8013fac:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8013fae:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8013fb2:	b916      	cbnz	r6, 8013fba <_DrawBitmap+0x1a>
 8013fb4:	b013      	add	sp, #76	; 0x4c
 8013fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fba:	4607      	mov	r7, r0
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	9208      	str	r2, [sp, #32]
 8013fc0:	9303      	str	r3, [sp, #12]
 8013fc2:	460c      	mov	r4, r1
 8013fc4:	f7f4 fc5a 	bl	800887c <GUI_ALLOC_LockH>
 8013fc8:	6942      	ldr	r2, [r0, #20]
 8013fca:	900f      	str	r0, [sp, #60]	; 0x3c
 8013fcc:	2a00      	cmp	r2, #0
 8013fce:	f040 80d9 	bne.w	8014184 <_DrawBitmap+0x1e4>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	9304      	str	r3, [sp, #16]
 8013fd8:	a80f      	add	r0, sp, #60	; 0x3c
 8013fda:	9210      	str	r2, [sp, #64]	; 0x40
 8013fdc:	f7f4 fc60 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8013fe0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013fe2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013fe4:	18e3      	adds	r3, r4, r3
 8013fe6:	9305      	str	r3, [sp, #20]
 8013fe8:	4b9a      	ldr	r3, [pc, #616]	; (8014254 <_DrawBitmap+0x2b4>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	b120      	cbz	r0, 8013ff8 <_DrawBitmap+0x58>
 8013fee:	7c1a      	ldrb	r2, [r3, #16]
 8013ff0:	4c98      	ldr	r4, [pc, #608]	; (8014254 <_DrawBitmap+0x2b4>)
 8013ff2:	0796      	lsls	r6, r2, #30
 8013ff4:	f140 80a3 	bpl.w	801413e <_DrawBitmap+0x19e>
 8013ff8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8013ffa:	f7f4 fc3f 	bl	800887c <GUI_ALLOC_LockH>
 8013ffe:	4604      	mov	r4, r0
 8014000:	9908      	ldr	r1, [sp, #32]
 8014002:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014006:	68e3      	ldr	r3, [r4, #12]
 8014008:	1a8a      	subs	r2, r1, r2
 801400a:	fb03 f302 	mul.w	r3, r3, r2
 801400e:	9905      	ldr	r1, [sp, #20]
 8014010:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014014:	a812      	add	r0, sp, #72	; 0x48
 8014016:	1a8a      	subs	r2, r1, r2
 8014018:	3318      	adds	r3, #24
 801401a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801401e:	18e3      	adds	r3, r4, r3
 8014020:	f840 4d04 	str.w	r4, [r0, #-4]!
 8014024:	9302      	str	r3, [sp, #8]
 8014026:	f7f4 fc3b 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801402a:	2d17      	cmp	r5, #23
 801402c:	dd58      	ble.n	80140e0 <_DrawBitmap+0x140>
 801402e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014030:	2b00      	cmp	r3, #0
 8014032:	dd4b      	ble.n	80140cc <_DrawBitmap+0x12c>
 8014034:	461a      	mov	r2, r3
 8014036:	9b08      	ldr	r3, [sp, #32]
 8014038:	f8df 9220 	ldr.w	r9, [pc, #544]	; 801425c <_DrawBitmap+0x2bc>
 801403c:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8014260 <_DrawBitmap+0x2c0>
 8014040:	9707      	str	r7, [sp, #28]
 8014042:	441a      	add	r2, r3
 8014044:	9206      	str	r2, [sp, #24]
 8014046:	9a03      	ldr	r2, [sp, #12]
 8014048:	0092      	lsls	r2, r2, #2
 801404a:	9208      	str	r2, [sp, #32]
 801404c:	461f      	mov	r7, r3
 801404e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014050:	b128      	cbz	r0, 801405e <_DrawBitmap+0xbe>
 8014052:	6883      	ldr	r3, [r0, #8]
 8014054:	9905      	ldr	r1, [sp, #20]
 8014056:	685c      	ldr	r4, [r3, #4]
 8014058:	9b03      	ldr	r3, [sp, #12]
 801405a:	463a      	mov	r2, r7
 801405c:	47a0      	blx	r4
 801405e:	9b07      	ldr	r3, [sp, #28]
 8014060:	691b      	ldr	r3, [r3, #16]
 8014062:	68d8      	ldr	r0, [r3, #12]
 8014064:	2800      	cmp	r0, #0
 8014066:	f040 8086 	bne.w	8014176 <_DrawBitmap+0x1d6>
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	4798      	blx	r3
 801406e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8014072:	9c03      	ldr	r4, [sp, #12]
 8014074:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8014076:	0e05      	lsrs	r5, r0, #24
 8014078:	4633      	mov	r3, r6
 801407a:	f04f 0e00 	mov.w	lr, #0
 801407e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014082:	ebb5 6f12 	cmp.w	r5, r2, lsr #24
 8014086:	d063      	beq.n	8014150 <_DrawBitmap+0x1b0>
 8014088:	f1be 0f00 	cmp.w	lr, #0
 801408c:	d164      	bne.n	8014158 <_DrawBitmap+0x1b8>
 801408e:	6830      	ldr	r0, [r6, #0]
 8014090:	0e02      	lsrs	r2, r0, #24
 8014092:	2aff      	cmp	r2, #255	; 0xff
 8014094:	d008      	beq.n	80140a8 <_DrawBitmap+0x108>
 8014096:	43d2      	mvns	r2, r2
 8014098:	b2d2      	uxtb	r2, r2
 801409a:	f8d8 3000 	ldr.w	r3, [r8]
 801409e:	f8da 1000 	ldr.w	r1, [sl]
 80140a2:	4798      	blx	r3
 80140a4:	f8ca 0000 	str.w	r0, [sl]
 80140a8:	3c01      	subs	r4, #1
 80140aa:	f10a 0a04 	add.w	sl, sl, #4
 80140ae:	3604      	adds	r6, #4
 80140b0:	2c00      	cmp	r4, #0
 80140b2:	d1e1      	bne.n	8014078 <_DrawBitmap+0xd8>
 80140b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80140b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80140b8:	4413      	add	r3, r2
 80140ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80140bc:	9a04      	ldr	r2, [sp, #16]
 80140be:	9b02      	ldr	r3, [sp, #8]
 80140c0:	4413      	add	r3, r2
 80140c2:	9302      	str	r3, [sp, #8]
 80140c4:	9b06      	ldr	r3, [sp, #24]
 80140c6:	3701      	adds	r7, #1
 80140c8:	429f      	cmp	r7, r3
 80140ca:	d1c0      	bne.n	801404e <_DrawBitmap+0xae>
 80140cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	f43f af70 	beq.w	8013fb4 <_DrawBitmap+0x14>
 80140d4:	a810      	add	r0, sp, #64	; 0x40
 80140d6:	f7f4 fbe3 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80140da:	b013      	add	sp, #76	; 0x4c
 80140dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e0:	2d10      	cmp	r5, #16
 80140e2:	d055      	beq.n	8014190 <_DrawBitmap+0x1f0>
 80140e4:	2d08      	cmp	r5, #8
 80140e6:	f000 80bd 	beq.w	8014264 <_DrawBitmap+0x2c4>
 80140ea:	4b5b      	ldr	r3, [pc, #364]	; (8014258 <_DrawBitmap+0x2b8>)
 80140ec:	f1ba 0f00 	cmp.w	sl, #0
 80140f0:	bf08      	it	eq
 80140f2:	469a      	moveq	sl, r3
 80140f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f340 80a5 	ble.w	8014246 <_DrawBitmap+0x2a6>
 80140fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80140fe:	9a02      	ldr	r2, [sp, #8]
 8014100:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	930a      	str	r3, [sp, #40]	; 0x28
 8014106:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014108:	005b      	lsls	r3, r3, #1
 801410a:	930c      	str	r3, [sp, #48]	; 0x30
 801410c:	2300      	movs	r3, #0
 801410e:	2d02      	cmp	r5, #2
 8014110:	f000 827b 	beq.w	801460a <_DrawBitmap+0x66a>
 8014114:	2d04      	cmp	r5, #4
 8014116:	f000 812b 	beq.w	8014370 <_DrawBitmap+0x3d0>
 801411a:	2d01      	cmp	r5, #1
 801411c:	f000 8358 	beq.w	80147d0 <_DrawBitmap+0x830>
 8014120:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014122:	4401      	add	r1, r0
 8014124:	9804      	ldr	r0, [sp, #16]
 8014126:	4402      	add	r2, r0
 8014128:	981c      	ldr	r0, [sp, #112]	; 0x70
 801412a:	3301      	adds	r3, #1
 801412c:	4298      	cmp	r0, r3
 801412e:	dcee      	bgt.n	801410e <_DrawBitmap+0x16e>
 8014130:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8014134:	46de      	mov	lr, fp
 8014136:	f1be 0f00 	cmp.w	lr, #0
 801413a:	d1cb      	bne.n	80140d4 <_DrawBitmap+0x134>
 801413c:	e73a      	b.n	8013fb4 <_DrawBitmap+0x14>
 801413e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014140:	9300      	str	r3, [sp, #0]
 8014142:	9a08      	ldr	r2, [sp, #32]
 8014144:	9b03      	ldr	r3, [sp, #12]
 8014146:	9905      	ldr	r1, [sp, #20]
 8014148:	f7f9 f974 	bl	800d434 <GUI_USAGE_AddRect>
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	e753      	b.n	8013ff8 <_DrawBitmap+0x58>
 8014150:	f10e 0e01 	add.w	lr, lr, #1
 8014154:	45a6      	cmp	lr, r4
 8014156:	d192      	bne.n	801407e <_DrawBitmap+0xde>
 8014158:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 801415c:	4631      	mov	r1, r6
 801415e:	4650      	mov	r0, sl
 8014160:	465a      	mov	r2, fp
 8014162:	f8d9 3000 	ldr.w	r3, [r9]
 8014166:	ebce 0404 	rsb	r4, lr, r4
 801416a:	445e      	add	r6, fp
 801416c:	4798      	blx	r3
 801416e:	44da      	add	sl, fp
 8014170:	2c00      	cmp	r4, #0
 8014172:	d181      	bne.n	8014078 <_DrawBitmap+0xd8>
 8014174:	e79e      	b.n	80140b4 <_DrawBitmap+0x114>
 8014176:	f8d9 3000 	ldr.w	r3, [r9]
 801417a:	9a08      	ldr	r2, [sp, #32]
 801417c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801417e:	9802      	ldr	r0, [sp, #8]
 8014180:	4798      	blx	r3
 8014182:	e797      	b.n	80140b4 <_DrawBitmap+0x114>
 8014184:	4610      	mov	r0, r2
 8014186:	f7f4 fb79 	bl	800887c <GUI_ALLOC_LockH>
 801418a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801418c:	4602      	mov	r2, r0
 801418e:	e721      	b.n	8013fd4 <_DrawBitmap+0x34>
 8014190:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014192:	2b00      	cmp	r3, #0
 8014194:	dd9a      	ble.n	80140cc <_DrawBitmap+0x12c>
 8014196:	f8dd a020 	ldr.w	sl, [sp, #32]
 801419a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801419c:	4453      	add	r3, sl
 801419e:	9306      	str	r3, [sp, #24]
 80141a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80141a2:	f1a3 0b02 	sub.w	fp, r3, #2
 80141a6:	b35e      	cbz	r6, 8014200 <_DrawBitmap+0x260>
 80141a8:	68b2      	ldr	r2, [r6, #8]
 80141aa:	9d03      	ldr	r5, [sp, #12]
 80141ac:	6854      	ldr	r4, [r2, #4]
 80141ae:	9905      	ldr	r1, [sp, #20]
 80141b0:	462b      	mov	r3, r5
 80141b2:	4652      	mov	r2, sl
 80141b4:	4630      	mov	r0, r6
 80141b6:	47a0      	blx	r4
 80141b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80141bc:	9c05      	ldr	r4, [sp, #20]
 80141be:	46d9      	mov	r9, fp
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	4798      	blx	r3
 80141ca:	68b3      	ldr	r3, [r6, #8]
 80141cc:	f848 0b04 	str.w	r0, [r8], #4
 80141d0:	4621      	mov	r1, r4
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4652      	mov	r2, sl
 80141d6:	4630      	mov	r0, r6
 80141d8:	4798      	blx	r3
 80141da:	3d01      	subs	r5, #1
 80141dc:	f104 0401 	add.w	r4, r4, #1
 80141e0:	d1ee      	bne.n	80141c0 <_DrawBitmap+0x220>
 80141e2:	9b02      	ldr	r3, [sp, #8]
 80141e4:	9a04      	ldr	r2, [sp, #16]
 80141e6:	4413      	add	r3, r2
 80141e8:	9302      	str	r3, [sp, #8]
 80141ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80141ec:	449b      	add	fp, r3
 80141ee:	9b06      	ldr	r3, [sp, #24]
 80141f0:	f10a 0a01 	add.w	sl, sl, #1
 80141f4:	459a      	cmp	sl, r3
 80141f6:	f43f af69 	beq.w	80140cc <_DrawBitmap+0x12c>
 80141fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80141fc:	2e00      	cmp	r6, #0
 80141fe:	d1d3      	bne.n	80141a8 <_DrawBitmap+0x208>
 8014200:	9d02      	ldr	r5, [sp, #8]
 8014202:	9c03      	ldr	r4, [sp, #12]
 8014204:	465e      	mov	r6, fp
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	4798      	blx	r3
 8014210:	3c01      	subs	r4, #1
 8014212:	f845 0b04 	str.w	r0, [r5], #4
 8014216:	d1f6      	bne.n	8014206 <_DrawBitmap+0x266>
 8014218:	e7e3      	b.n	80141e2 <_DrawBitmap+0x242>
 801421a:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 801421e:	9b06      	ldr	r3, [sp, #24]
 8014220:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014222:	3301      	adds	r3, #1
 8014224:	461c      	mov	r4, r3
 8014226:	9306      	str	r3, [sp, #24]
 8014228:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801422a:	4413      	add	r3, r2
 801422c:	931f      	str	r3, [sp, #124]	; 0x7c
 801422e:	9a04      	ldr	r2, [sp, #16]
 8014230:	9b02      	ldr	r3, [sp, #8]
 8014232:	a80f      	add	r0, sp, #60	; 0x3c
 8014234:	4413      	add	r3, r2
 8014236:	9302      	str	r3, [sp, #8]
 8014238:	f7f4 fb32 	bl	80088a0 <GUI_ALLOC_UnlockH>
 801423c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801423e:	461a      	mov	r2, r3
 8014240:	42a2      	cmp	r2, r4
 8014242:	f300 82ce 	bgt.w	80147e2 <_DrawBitmap+0x842>
 8014246:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801424a:	f1be 0f00 	cmp.w	lr, #0
 801424e:	f47f af41 	bne.w	80140d4 <_DrawBitmap+0x134>
 8014252:	e6af      	b.n	8013fb4 <_DrawBitmap+0x14>
 8014254:	2000007c 	.word	0x2000007c
 8014258:	0801a58c 	.word	0x0801a58c
 801425c:	20000090 	.word	0x20000090
 8014260:	200000c8 	.word	0x200000c8
 8014264:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014266:	2b00      	cmp	r3, #0
 8014268:	f340 8380 	ble.w	801496c <_DrawBitmap+0x9cc>
 801426c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014270:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8014274:	9a03      	ldr	r2, [sp, #12]
 8014276:	444b      	add	r3, r9
 8014278:	9306      	str	r3, [sp, #24]
 801427a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801427c:	4658      	mov	r0, fp
 801427e:	189c      	adds	r4, r3, r2
 8014280:	465d      	mov	r5, fp
 8014282:	4bb9      	ldr	r3, [pc, #740]	; (8014568 <_DrawBitmap+0x5c8>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	7c1b      	ldrb	r3, [r3, #16]
 8014288:	f1ba 0f00 	cmp.w	sl, #0
 801428c:	d041      	beq.n	8014312 <_DrawBitmap+0x372>
 801428e:	f013 0303 	ands.w	r3, r3, #3
 8014292:	d033      	beq.n	80142fc <_DrawBitmap+0x35c>
 8014294:	2b02      	cmp	r3, #2
 8014296:	d11e      	bne.n	80142d6 <_DrawBitmap+0x336>
 8014298:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801429a:	2d00      	cmp	r5, #0
 801429c:	d05c      	beq.n	8014358 <_DrawBitmap+0x3b8>
 801429e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80142a2:	9f03      	ldr	r7, [sp, #12]
 80142a4:	9e05      	ldr	r6, [sp, #20]
 80142a6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80142aa:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80142ae:	4631      	mov	r1, r6
 80142b0:	464a      	mov	r2, r9
 80142b2:	3601      	adds	r6, #1
 80142b4:	4628      	mov	r0, r5
 80142b6:	b143      	cbz	r3, 80142ca <_DrawBitmap+0x32a>
 80142b8:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80142bc:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80142c0:	f8c8 3000 	str.w	r3, [r8]
 80142c4:	f8de 3000 	ldr.w	r3, [lr]
 80142c8:	4798      	blx	r3
 80142ca:	3f01      	subs	r7, #1
 80142cc:	f108 0804 	add.w	r8, r8, #4
 80142d0:	d1eb      	bne.n	80142aa <_DrawBitmap+0x30a>
 80142d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80142d4:	4628      	mov	r0, r5
 80142d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80142d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80142da:	4413      	add	r3, r2
 80142dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80142de:	9a04      	ldr	r2, [sp, #16]
 80142e0:	9b02      	ldr	r3, [sp, #8]
 80142e2:	4413      	add	r3, r2
 80142e4:	9302      	str	r3, [sp, #8]
 80142e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80142e8:	441c      	add	r4, r3
 80142ea:	9b06      	ldr	r3, [sp, #24]
 80142ec:	f109 0901 	add.w	r9, r9, #1
 80142f0:	454b      	cmp	r3, r9
 80142f2:	d1c6      	bne.n	8014282 <_DrawBitmap+0x2e2>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	f47f aeed 	bne.w	80140d4 <_DrawBitmap+0x134>
 80142fa:	e65b      	b.n	8013fb4 <_DrawBitmap+0x14>
 80142fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80142fe:	9a02      	ldr	r2, [sp, #8]
 8014300:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014304:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014308:	f842 1b04 	str.w	r1, [r2], #4
 801430c:	429c      	cmp	r4, r3
 801430e:	d1f7      	bne.n	8014300 <_DrawBitmap+0x360>
 8014310:	e7e1      	b.n	80142d6 <_DrawBitmap+0x336>
 8014312:	f013 0303 	ands.w	r3, r3, #3
 8014316:	f000 8252 	beq.w	80147be <_DrawBitmap+0x81e>
 801431a:	2b02      	cmp	r3, #2
 801431c:	d1db      	bne.n	80142d6 <_DrawBitmap+0x336>
 801431e:	2d00      	cmp	r5, #0
 8014320:	f000 8319 	beq.w	8014956 <_DrawBitmap+0x9b6>
 8014324:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014326:	9f02      	ldr	r7, [sp, #8]
 8014328:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801432c:	9e05      	ldr	r6, [sp, #20]
 801432e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8014332:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8014336:	4631      	mov	r1, r6
 8014338:	464a      	mov	r2, r9
 801433a:	3601      	adds	r6, #1
 801433c:	4628      	mov	r0, r5
 801433e:	b12b      	cbz	r3, 801434c <_DrawBitmap+0x3ac>
 8014340:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8014344:	603b      	str	r3, [r7, #0]
 8014346:	f8de 3000 	ldr.w	r3, [lr]
 801434a:	4798      	blx	r3
 801434c:	f1bb 0b01 	subs.w	fp, fp, #1
 8014350:	f107 0704 	add.w	r7, r7, #4
 8014354:	d1ed      	bne.n	8014332 <_DrawBitmap+0x392>
 8014356:	e7bc      	b.n	80142d2 <_DrawBitmap+0x332>
 8014358:	9a02      	ldr	r2, [sp, #8]
 801435a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801435e:	b111      	cbz	r1, 8014366 <_DrawBitmap+0x3c6>
 8014360:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014364:	6011      	str	r1, [r2, #0]
 8014366:	42a3      	cmp	r3, r4
 8014368:	f102 0204 	add.w	r2, r2, #4
 801436c:	d1f5      	bne.n	801435a <_DrawBitmap+0x3ba>
 801436e:	e7b1      	b.n	80142d4 <_DrawBitmap+0x334>
 8014370:	911f      	str	r1, [sp, #124]	; 0x7c
 8014372:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014374:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8014378:	9306      	str	r3, [sp, #24]
 801437a:	f1c1 0302 	rsb	r3, r1, #2
 801437e:	b2d9      	uxtb	r1, r3
 8014380:	46d8      	mov	r8, fp
 8014382:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 8014386:	910b      	str	r1, [sp, #44]	; 0x2c
 8014388:	4613      	mov	r3, r2
 801438a:	3304      	adds	r3, #4
 801438c:	9307      	str	r3, [sp, #28]
 801438e:	46c6      	mov	lr, r8
 8014390:	4645      	mov	r5, r8
 8014392:	4b75      	ldr	r3, [pc, #468]	; (8014568 <_DrawBitmap+0x5c8>)
 8014394:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	f89b 3000 	ldrb.w	r3, [fp]
 801439c:	7c12      	ldrb	r2, [r2, #16]
 801439e:	408b      	lsls	r3, r1
 80143a0:	f002 0203 	and.w	r2, r2, #3
 80143a4:	9907      	ldr	r1, [sp, #28]
 80143a6:	2a01      	cmp	r2, #1
 80143a8:	b2dc      	uxtb	r4, r3
 80143aa:	f1a1 0904 	sub.w	r9, r1, #4
 80143ae:	f000 80b9 	beq.w	8014524 <_DrawBitmap+0x584>
 80143b2:	d373      	bcc.n	801449c <_DrawBitmap+0x4fc>
 80143b4:	2a02      	cmp	r2, #2
 80143b6:	d161      	bne.n	801447c <_DrawBitmap+0x4dc>
 80143b8:	9908      	ldr	r1, [sp, #32]
 80143ba:	9a06      	ldr	r2, [sp, #24]
 80143bc:	440a      	add	r2, r1
 80143be:	9920      	ldr	r1, [sp, #128]	; 0x80
 80143c0:	9209      	str	r2, [sp, #36]	; 0x24
 80143c2:	2900      	cmp	r1, #0
 80143c4:	f000 80f2 	beq.w	80145ac <_DrawBitmap+0x60c>
 80143c8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80143cc:	d00a      	beq.n	80143e4 <_DrawBitmap+0x444>
 80143ce:	0924      	lsrs	r4, r4, #4
 80143d0:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80143d4:	f8c9 3000 	str.w	r3, [r9]
 80143d8:	b125      	cbz	r5, 80143e4 <_DrawBitmap+0x444>
 80143da:	68ab      	ldr	r3, [r5, #8]
 80143dc:	9905      	ldr	r1, [sp, #20]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4628      	mov	r0, r5
 80143e2:	4798      	blx	r3
 80143e4:	9b05      	ldr	r3, [sp, #20]
 80143e6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80143ea:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80143ee:	3301      	adds	r3, #1
 80143f0:	9302      	str	r3, [sp, #8]
 80143f2:	9b03      	ldr	r3, [sp, #12]
 80143f4:	f10b 0701 	add.w	r7, fp, #1
 80143f8:	1e5e      	subs	r6, r3, #1
 80143fa:	2e01      	cmp	r6, #1
 80143fc:	f340 80c5 	ble.w	801458a <_DrawBitmap+0x5ea>
 8014400:	2d00      	cmp	r5, #0
 8014402:	f000 80db 	beq.w	80145bc <_DrawBitmap+0x61c>
 8014406:	9b02      	ldr	r3, [sp, #8]
 8014408:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801440c:	4632      	mov	r2, r6
 801440e:	f109 0808 	add.w	r8, r9, #8
 8014412:	960d      	str	r6, [sp, #52]	; 0x34
 8014414:	4691      	mov	r9, r2
 8014416:	461e      	mov	r6, r3
 8014418:	e021      	b.n	801445e <_DrawBitmap+0x4be>
 801441a:	f8d5 e008 	ldr.w	lr, [r5, #8]
 801441e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8014422:	f848 3c08 	str.w	r3, [r8, #-8]
 8014426:	f8de 3000 	ldr.w	r3, [lr]
 801442a:	4798      	blx	r3
 801442c:	f014 040f 	ands.w	r4, r4, #15
 8014430:	d009      	beq.n	8014446 <_DrawBitmap+0x4a6>
 8014432:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8014436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014438:	f848 3c04 	str.w	r3, [r8, #-4]
 801443c:	68ab      	ldr	r3, [r5, #8]
 801443e:	1c71      	adds	r1, r6, #1
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	4628      	mov	r0, r5
 8014444:	4798      	blx	r3
 8014446:	f1a9 0902 	sub.w	r9, r9, #2
 801444a:	f1b9 0f01 	cmp.w	r9, #1
 801444e:	f106 0602 	add.w	r6, r6, #2
 8014452:	f108 0808 	add.w	r8, r8, #8
 8014456:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801445a:	f340 8087 	ble.w	801456c <_DrawBitmap+0x5cc>
 801445e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8014462:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8014466:	4631      	mov	r1, r6
 8014468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801446a:	4628      	mov	r0, r5
 801446c:	d1d5      	bne.n	801441a <_DrawBitmap+0x47a>
 801446e:	2c00      	cmp	r4, #0
 8014470:	d0e9      	beq.n	8014446 <_DrawBitmap+0x4a6>
 8014472:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8014476:	f848 3c04 	str.w	r3, [r8, #-4]
 801447a:	e7df      	b.n	801443c <_DrawBitmap+0x49c>
 801447c:	9b06      	ldr	r3, [sp, #24]
 801447e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014480:	3301      	adds	r3, #1
 8014482:	461a      	mov	r2, r3
 8014484:	9306      	str	r3, [sp, #24]
 8014486:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014488:	449b      	add	fp, r3
 801448a:	9b04      	ldr	r3, [sp, #16]
 801448c:	428a      	cmp	r2, r1
 801448e:	46a8      	mov	r8, r5
 8014490:	444b      	add	r3, r9
 8014492:	f6ff af7a 	blt.w	801438a <_DrawBitmap+0x3ea>
 8014496:	46ab      	mov	fp, r5
 8014498:	46de      	mov	lr, fp
 801449a:	e64c      	b.n	8014136 <_DrawBitmap+0x196>
 801449c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f000 8089 	beq.w	80145b6 <_DrawBitmap+0x616>
 80144a4:	0924      	lsrs	r4, r4, #4
 80144a6:	9b03      	ldr	r3, [sp, #12]
 80144a8:	1e59      	subs	r1, r3, #1
 80144aa:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80144ae:	f8c9 3000 	str.w	r3, [r9]
 80144b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80144b6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80144ba:	f10b 0201 	add.w	r2, fp, #1
 80144be:	2901      	cmp	r1, #1
 80144c0:	dd18      	ble.n	80144f4 <_DrawBitmap+0x554>
 80144c2:	104f      	asrs	r7, r1, #1
 80144c4:	19d6      	adds	r6, r2, r7
 80144c6:	f001 0101 	and.w	r1, r1, #1
 80144ca:	f109 0308 	add.w	r3, r9, #8
 80144ce:	0920      	lsrs	r0, r4, #4
 80144d0:	f004 040f 	and.w	r4, r4, #15
 80144d4:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 80144d8:	f843 0c08 	str.w	r0, [r3, #-8]
 80144dc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80144e0:	f843 0c04 	str.w	r0, [r3, #-4]
 80144e4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80144e8:	42b2      	cmp	r2, r6
 80144ea:	f103 0308 	add.w	r3, r3, #8
 80144ee:	d1ee      	bne.n	80144ce <_DrawBitmap+0x52e>
 80144f0:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 80144f4:	b121      	cbz	r1, 8014500 <_DrawBitmap+0x560>
 80144f6:	0924      	lsrs	r4, r4, #4
 80144f8:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80144fc:	f8c9 3000 	str.w	r3, [r9]
 8014500:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014502:	9904      	ldr	r1, [sp, #16]
 8014504:	9b06      	ldr	r3, [sp, #24]
 8014506:	4493      	add	fp, r2
 8014508:	9a07      	ldr	r2, [sp, #28]
 801450a:	440a      	add	r2, r1
 801450c:	9207      	str	r2, [sp, #28]
 801450e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014510:	3301      	adds	r3, #1
 8014512:	429a      	cmp	r2, r3
 8014514:	9306      	str	r3, [sp, #24]
 8014516:	f73f af3c 	bgt.w	8014392 <_DrawBitmap+0x3f2>
 801451a:	f1be 0f00 	cmp.w	lr, #0
 801451e:	f47f add9 	bne.w	80140d4 <_DrawBitmap+0x134>
 8014522:	e547      	b.n	8013fb4 <_DrawBitmap+0x14>
 8014524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014526:	9903      	ldr	r1, [sp, #12]
 8014528:	4658      	mov	r0, fp
 801452a:	428b      	cmp	r3, r1
 801452c:	bfc8      	it	gt
 801452e:	b2cb      	uxtbgt	r3, r1
 8014530:	1e5a      	subs	r2, r3, #1
 8014532:	b2d2      	uxtb	r2, r2
 8014534:	3201      	adds	r2, #1
 8014536:	1ac9      	subs	r1, r1, r3
 8014538:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801453c:	0123      	lsls	r3, r4, #4
 801453e:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8014542:	b2dc      	uxtb	r4, r3
 8014544:	d005      	beq.n	8014552 <_DrawBitmap+0x5b2>
 8014546:	f8d9 3000 	ldr.w	r3, [r9]
 801454a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 801454e:	f8c9 3000 	str.w	r3, [r9]
 8014552:	f109 0904 	add.w	r9, r9, #4
 8014556:	4591      	cmp	r9, r2
 8014558:	d1f0      	bne.n	801453c <_DrawBitmap+0x59c>
 801455a:	2900      	cmp	r1, #0
 801455c:	d0d0      	beq.n	8014500 <_DrawBitmap+0x560>
 801455e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8014562:	2302      	movs	r3, #2
 8014564:	e7e1      	b.n	801452a <_DrawBitmap+0x58a>
 8014566:	bf00      	nop
 8014568:	2000007c 	.word	0x2000007c
 801456c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801456e:	9902      	ldr	r1, [sp, #8]
 8014570:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8014574:	3e02      	subs	r6, #2
 8014576:	0873      	lsrs	r3, r6, #1
 8014578:	3102      	adds	r1, #2
 801457a:	1c5a      	adds	r2, r3, #1
 801457c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8014580:	9102      	str	r1, [sp, #8]
 8014582:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 8014586:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 801458a:	b166      	cbz	r6, 80145a6 <_DrawBitmap+0x606>
 801458c:	0924      	lsrs	r4, r4, #4
 801458e:	d00a      	beq.n	80145a6 <_DrawBitmap+0x606>
 8014590:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8014594:	f8c9 3000 	str.w	r3, [r9]
 8014598:	b12d      	cbz	r5, 80145a6 <_DrawBitmap+0x606>
 801459a:	68ab      	ldr	r3, [r5, #8]
 801459c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801459e:	9902      	ldr	r1, [sp, #8]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	4628      	mov	r0, r5
 80145a4:	4798      	blx	r3
 80145a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80145a8:	46ae      	mov	lr, r5
 80145aa:	e7a9      	b.n	8014500 <_DrawBitmap+0x560>
 80145ac:	9b05      	ldr	r3, [sp, #20]
 80145ae:	9e03      	ldr	r6, [sp, #12]
 80145b0:	9302      	str	r3, [sp, #8]
 80145b2:	465f      	mov	r7, fp
 80145b4:	e721      	b.n	80143fa <_DrawBitmap+0x45a>
 80145b6:	9903      	ldr	r1, [sp, #12]
 80145b8:	465a      	mov	r2, fp
 80145ba:	e780      	b.n	80144be <_DrawBitmap+0x51e>
 80145bc:	3e02      	subs	r6, #2
 80145be:	0872      	lsrs	r2, r6, #1
 80145c0:	1c51      	adds	r1, r2, #1
 80145c2:	1878      	adds	r0, r7, r1
 80145c4:	f109 0308 	add.w	r3, r9, #8
 80145c8:	4694      	mov	ip, r2
 80145ca:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80145ce:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 80145d2:	d003      	beq.n	80145dc <_DrawBitmap+0x63c>
 80145d4:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 80145d8:	f843 2c08 	str.w	r2, [r3, #-8]
 80145dc:	f014 040f 	ands.w	r4, r4, #15
 80145e0:	d003      	beq.n	80145ea <_DrawBitmap+0x64a>
 80145e2:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 80145e6:	f843 4c04 	str.w	r4, [r3, #-4]
 80145ea:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 80145ee:	42b8      	cmp	r0, r7
 80145f0:	f103 0308 	add.w	r3, r3, #8
 80145f4:	d1e9      	bne.n	80145ca <_DrawBitmap+0x62a>
 80145f6:	9b02      	ldr	r3, [sp, #8]
 80145f8:	3302      	adds	r3, #2
 80145fa:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 80145fe:	9302      	str	r3, [sp, #8]
 8014600:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 8014604:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 8014608:	e7bf      	b.n	801458a <_DrawBitmap+0x5ea>
 801460a:	9306      	str	r3, [sp, #24]
 801460c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801460e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8014612:	9202      	str	r2, [sp, #8]
 8014614:	f1c3 0304 	rsb	r3, r3, #4
 8014618:	b2db      	uxtb	r3, r3
 801461a:	911f      	str	r1, [sp, #124]	; 0x7c
 801461c:	930b      	str	r3, [sp, #44]	; 0x2c
 801461e:	46d0      	mov	r8, sl
 8014620:	46de      	mov	lr, fp
 8014622:	465f      	mov	r7, fp
 8014624:	4bab      	ldr	r3, [pc, #684]	; (80148d4 <_DrawBitmap+0x934>)
 8014626:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	7814      	ldrb	r4, [r2, #0]
 801462c:	7c1b      	ldrb	r3, [r3, #16]
 801462e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014630:	f003 0303 	and.w	r3, r3, #3
 8014634:	4094      	lsls	r4, r2
 8014636:	2b01      	cmp	r3, #1
 8014638:	b2e4      	uxtb	r4, r4
 801463a:	f000 808f 	beq.w	801475c <_DrawBitmap+0x7bc>
 801463e:	d358      	bcc.n	80146f2 <_DrawBitmap+0x752>
 8014640:	2b02      	cmp	r3, #2
 8014642:	f040 80aa 	bne.w	801479a <_DrawBitmap+0x7fa>
 8014646:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014648:	9209      	str	r2, [sp, #36]	; 0x24
 801464a:	9a05      	ldr	r2, [sp, #20]
 801464c:	9207      	str	r2, [sp, #28]
 801464e:	9906      	ldr	r1, [sp, #24]
 8014650:	9a08      	ldr	r2, [sp, #32]
 8014652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014654:	9d02      	ldr	r5, [sp, #8]
 8014656:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801465a:	eb02 0b01 	add.w	fp, r2, r1
 801465e:	4553      	cmp	r3, sl
 8014660:	bfc8      	it	gt
 8014662:	fa5f f38a 	uxtbgt.w	r3, sl
 8014666:	ebc3 0a0a 	rsb	sl, r3, sl
 801466a:	3b01      	subs	r3, #1
 801466c:	b35f      	cbz	r7, 80146c6 <_DrawBitmap+0x726>
 801466e:	b2db      	uxtb	r3, r3
 8014670:	f103 0901 	add.w	r9, r3, #1
 8014674:	9e07      	ldr	r6, [sp, #28]
 8014676:	930a      	str	r3, [sp, #40]	; 0x28
 8014678:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 801467c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8014680:	4631      	mov	r1, r6
 8014682:	ea4f 1394 	mov.w	r3, r4, lsr #6
 8014686:	f106 0601 	add.w	r6, r6, #1
 801468a:	465a      	mov	r2, fp
 801468c:	4638      	mov	r0, r7
 801468e:	d007      	beq.n	80146a0 <_DrawBitmap+0x700>
 8014690:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8014694:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8014698:	602b      	str	r3, [r5, #0]
 801469a:	f8de 3000 	ldr.w	r3, [lr]
 801469e:	4798      	blx	r3
 80146a0:	3504      	adds	r5, #4
 80146a2:	00a4      	lsls	r4, r4, #2
 80146a4:	454d      	cmp	r5, r9
 80146a6:	b2e4      	uxtb	r4, r4
 80146a8:	d1e8      	bne.n	801467c <_DrawBitmap+0x6dc>
 80146aa:	9b07      	ldr	r3, [sp, #28]
 80146ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146ae:	3301      	adds	r3, #1
 80146b0:	441a      	add	r2, r3
 80146b2:	9207      	str	r2, [sp, #28]
 80146b4:	f1ba 0f00 	cmp.w	sl, #0
 80146b8:	d03a      	beq.n	8014730 <_DrawBitmap+0x790>
 80146ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146bc:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80146c0:	9309      	str	r3, [sp, #36]	; 0x24
 80146c2:	2304      	movs	r3, #4
 80146c4:	e7cb      	b.n	801465e <_DrawBitmap+0x6be>
 80146c6:	b2da      	uxtb	r2, r3
 80146c8:	1c50      	adds	r0, r2, #1
 80146ca:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80146ce:	09a1      	lsrs	r1, r4, #6
 80146d0:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80146d4:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80146d8:	b2dc      	uxtb	r4, r3
 80146da:	bf1c      	itt	ne
 80146dc:	f858 3021 	ldrne.w	r3, [r8, r1, lsl #2]
 80146e0:	602b      	strne	r3, [r5, #0]
 80146e2:	3504      	adds	r5, #4
 80146e4:	42a8      	cmp	r0, r5
 80146e6:	d1f2      	bne.n	80146ce <_DrawBitmap+0x72e>
 80146e8:	9b07      	ldr	r3, [sp, #28]
 80146ea:	3301      	adds	r3, #1
 80146ec:	18d3      	adds	r3, r2, r3
 80146ee:	9307      	str	r3, [sp, #28]
 80146f0:	e7e0      	b.n	80146b4 <_DrawBitmap+0x714>
 80146f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146f4:	9e02      	ldr	r6, [sp, #8]
 80146f6:	9d03      	ldr	r5, [sp, #12]
 80146f8:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 80146fc:	42ab      	cmp	r3, r5
 80146fe:	bfc8      	it	gt
 8014700:	b2eb      	uxtbgt	r3, r5
 8014702:	1e58      	subs	r0, r3, #1
 8014704:	b2c0      	uxtb	r0, r0
 8014706:	1aed      	subs	r5, r5, r3
 8014708:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 801470c:	1f33      	subs	r3, r6, #4
 801470e:	09a2      	lsrs	r2, r4, #6
 8014710:	00a4      	lsls	r4, r4, #2
 8014712:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8014716:	f843 2f04 	str.w	r2, [r3, #4]!
 801471a:	428b      	cmp	r3, r1
 801471c:	b2e4      	uxtb	r4, r4
 801471e:	d1f6      	bne.n	801470e <_DrawBitmap+0x76e>
 8014720:	3001      	adds	r0, #1
 8014722:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8014726:	b12d      	cbz	r5, 8014734 <_DrawBitmap+0x794>
 8014728:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801472c:	2304      	movs	r3, #4
 801472e:	e7e5      	b.n	80146fc <_DrawBitmap+0x75c>
 8014730:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014732:	46be      	mov	lr, r7
 8014734:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014736:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014738:	9b06      	ldr	r3, [sp, #24]
 801473a:	440a      	add	r2, r1
 801473c:	921f      	str	r2, [sp, #124]	; 0x7c
 801473e:	9904      	ldr	r1, [sp, #16]
 8014740:	9a02      	ldr	r2, [sp, #8]
 8014742:	440a      	add	r2, r1
 8014744:	9202      	str	r2, [sp, #8]
 8014746:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014748:	3301      	adds	r3, #1
 801474a:	429a      	cmp	r2, r3
 801474c:	9306      	str	r3, [sp, #24]
 801474e:	f73f af69 	bgt.w	8014624 <_DrawBitmap+0x684>
 8014752:	f1be 0f00 	cmp.w	lr, #0
 8014756:	f47f acbd 	bne.w	80140d4 <_DrawBitmap+0x134>
 801475a:	e42b      	b.n	8013fb4 <_DrawBitmap+0x14>
 801475c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801475e:	9b02      	ldr	r3, [sp, #8]
 8014760:	9803      	ldr	r0, [sp, #12]
 8014762:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8014764:	4282      	cmp	r2, r0
 8014766:	bfc8      	it	gt
 8014768:	b2c2      	uxtbgt	r2, r0
 801476a:	1e51      	subs	r1, r2, #1
 801476c:	b2c9      	uxtb	r1, r1
 801476e:	3101      	adds	r1, #1
 8014770:	1a80      	subs	r0, r0, r2
 8014772:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8014776:	00a2      	lsls	r2, r4, #2
 8014778:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801477c:	b2d4      	uxtb	r4, r2
 801477e:	d003      	beq.n	8014788 <_DrawBitmap+0x7e8>
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8014786:	601a      	str	r2, [r3, #0]
 8014788:	3304      	adds	r3, #4
 801478a:	428b      	cmp	r3, r1
 801478c:	d1f3      	bne.n	8014776 <_DrawBitmap+0x7d6>
 801478e:	2800      	cmp	r0, #0
 8014790:	d0d0      	beq.n	8014734 <_DrawBitmap+0x794>
 8014792:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8014796:	2204      	movs	r2, #4
 8014798:	e7e4      	b.n	8014764 <_DrawBitmap+0x7c4>
 801479a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801479c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801479e:	9b06      	ldr	r3, [sp, #24]
 80147a0:	440a      	add	r2, r1
 80147a2:	921f      	str	r2, [sp, #124]	; 0x7c
 80147a4:	9904      	ldr	r1, [sp, #16]
 80147a6:	9a02      	ldr	r2, [sp, #8]
 80147a8:	440a      	add	r2, r1
 80147aa:	9202      	str	r2, [sp, #8]
 80147ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80147ae:	3301      	adds	r3, #1
 80147b0:	429a      	cmp	r2, r3
 80147b2:	46bb      	mov	fp, r7
 80147b4:	9306      	str	r3, [sp, #24]
 80147b6:	f73f af33 	bgt.w	8014620 <_DrawBitmap+0x680>
 80147ba:	46de      	mov	lr, fp
 80147bc:	e4bb      	b.n	8014136 <_DrawBitmap+0x196>
 80147be:	4b46      	ldr	r3, [pc, #280]	; (80148d8 <_DrawBitmap+0x938>)
 80147c0:	9a03      	ldr	r2, [sp, #12]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80147c6:	9802      	ldr	r0, [sp, #8]
 80147c8:	4798      	blx	r3
 80147ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80147cc:	4628      	mov	r0, r5
 80147ce:	e582      	b.n	80142d6 <_DrawBitmap+0x336>
 80147d0:	9306      	str	r3, [sp, #24]
 80147d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80147d4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80148dc <_DrawBitmap+0x93c>
 80147d8:	9202      	str	r2, [sp, #8]
 80147da:	f1c3 0308 	rsb	r3, r3, #8
 80147de:	911f      	str	r1, [sp, #124]	; 0x7c
 80147e0:	930a      	str	r3, [sp, #40]	; 0x28
 80147e2:	4b3c      	ldr	r3, [pc, #240]	; (80148d4 <_DrawBitmap+0x934>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80147e8:	f7f4 f848 	bl	800887c <GUI_ALLOC_LockH>
 80147ec:	4b39      	ldr	r3, [pc, #228]	; (80148d4 <_DrawBitmap+0x934>)
 80147ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	7812      	ldrb	r2, [r2, #0]
 80147f4:	7c1b      	ldrb	r3, [r3, #16]
 80147f6:	f81b 4002 	ldrb.w	r4, [fp, r2]
 80147fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80147fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80147fe:	f003 0303 	and.w	r3, r3, #3
 8014802:	2b02      	cmp	r3, #2
 8014804:	fa44 f402 	asr.w	r4, r4, r2
 8014808:	d048      	beq.n	801489c <_DrawBitmap+0x8fc>
 801480a:	2b03      	cmp	r3, #3
 801480c:	d020      	beq.n	8014850 <_DrawBitmap+0x8b0>
 801480e:	2b01      	cmp	r3, #1
 8014810:	d01e      	beq.n	8014850 <_DrawBitmap+0x8b0>
 8014812:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014814:	9e02      	ldr	r6, [sp, #8]
 8014816:	9d03      	ldr	r5, [sp, #12]
 8014818:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801481a:	42a8      	cmp	r0, r5
 801481c:	bf28      	it	cs
 801481e:	4628      	movcs	r0, r5
 8014820:	1a2d      	subs	r5, r5, r0
 8014822:	4602      	mov	r2, r0
 8014824:	4631      	mov	r1, r6
 8014826:	f004 0301 	and.w	r3, r4, #1
 801482a:	3a01      	subs	r2, #1
 801482c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8014830:	f841 3b04 	str.w	r3, [r1], #4
 8014834:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014838:	d1f5      	bne.n	8014826 <_DrawBitmap+0x886>
 801483a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 801483e:	2d00      	cmp	r5, #0
 8014840:	f43f aced 	beq.w	801421e <_DrawBitmap+0x27e>
 8014844:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8014848:	2008      	movs	r0, #8
 801484a:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801484e:	e7e4      	b.n	801481a <_DrawBitmap+0x87a>
 8014850:	6803      	ldr	r3, [r0, #0]
 8014852:	691b      	ldr	r3, [r3, #16]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	4798      	blx	r3
 8014858:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801485a:	9f02      	ldr	r7, [sp, #8]
 801485c:	9e03      	ldr	r6, [sp, #12]
 801485e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8014862:	42b5      	cmp	r5, r6
 8014864:	bf28      	it	cs
 8014866:	4635      	movcs	r5, r6
 8014868:	1b76      	subs	r6, r6, r5
 801486a:	462a      	mov	r2, r5
 801486c:	463b      	mov	r3, r7
 801486e:	f014 0f01 	tst.w	r4, #1
 8014872:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014876:	d002      	beq.n	801487e <_DrawBitmap+0x8de>
 8014878:	6819      	ldr	r1, [r3, #0]
 801487a:	4041      	eors	r1, r0
 801487c:	6019      	str	r1, [r3, #0]
 801487e:	3a01      	subs	r2, #1
 8014880:	f103 0304 	add.w	r3, r3, #4
 8014884:	d1f3      	bne.n	801486e <_DrawBitmap+0x8ce>
 8014886:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 801488a:	2e00      	cmp	r6, #0
 801488c:	f43f acc7 	beq.w	801421e <_DrawBitmap+0x27e>
 8014890:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8014894:	2508      	movs	r5, #8
 8014896:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801489a:	e7e2      	b.n	8014862 <_DrawBitmap+0x8c2>
 801489c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801489e:	9209      	str	r2, [sp, #36]	; 0x24
 80148a0:	9908      	ldr	r1, [sp, #32]
 80148a2:	9a06      	ldr	r2, [sp, #24]
 80148a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80148a8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80148ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80148ae:	9e02      	ldr	r6, [sp, #8]
 80148b0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80148b4:	9f05      	ldr	r7, [sp, #20]
 80148b6:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 80148ba:	440a      	add	r2, r1
 80148bc:	9207      	str	r2, [sp, #28]
 80148be:	469a      	mov	sl, r3
 80148c0:	454d      	cmp	r5, r9
 80148c2:	bf28      	it	cs
 80148c4:	464d      	movcs	r5, r9
 80148c6:	ebc5 0909 	rsb	r9, r5, r9
 80148ca:	f1b8 0f00 	cmp.w	r8, #0
 80148ce:	d030      	beq.n	8014932 <_DrawBitmap+0x992>
 80148d0:	b974      	cbnz	r4, 80148f0 <_DrawBitmap+0x950>
 80148d2:	e02a      	b.n	801492a <_DrawBitmap+0x98a>
 80148d4:	2000007c 	.word	0x2000007c
 80148d8:	20000090 	.word	0x20000090
 80148dc:	0801a428 	.word	0x0801a428
 80148e0:	3d01      	subs	r5, #1
 80148e2:	f107 0701 	add.w	r7, r7, #1
 80148e6:	f106 0604 	add.w	r6, r6, #4
 80148ea:	d012      	beq.n	8014912 <_DrawBitmap+0x972>
 80148ec:	0864      	lsrs	r4, r4, #1
 80148ee:	d01c      	beq.n	801492a <_DrawBitmap+0x98a>
 80148f0:	07e1      	lsls	r1, r4, #31
 80148f2:	d5f5      	bpl.n	80148e0 <_DrawBitmap+0x940>
 80148f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80148f8:	9a07      	ldr	r2, [sp, #28]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	4639      	mov	r1, r7
 80148fe:	4640      	mov	r0, r8
 8014900:	4798      	blx	r3
 8014902:	3d01      	subs	r5, #1
 8014904:	f8c6 a000 	str.w	sl, [r6]
 8014908:	f107 0701 	add.w	r7, r7, #1
 801490c:	f106 0604 	add.w	r6, r6, #4
 8014910:	d1ec      	bne.n	80148ec <_DrawBitmap+0x94c>
 8014912:	f1b9 0f00 	cmp.w	r9, #0
 8014916:	f43f ac80 	beq.w	801421a <_DrawBitmap+0x27a>
 801491a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801491c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014920:	9209      	str	r2, [sp, #36]	; 0x24
 8014922:	2508      	movs	r5, #8
 8014924:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8014928:	e7ca      	b.n	80148c0 <_DrawBitmap+0x920>
 801492a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 801492e:	442f      	add	r7, r5
 8014930:	e7ef      	b.n	8014912 <_DrawBitmap+0x972>
 8014932:	4653      	mov	r3, sl
 8014934:	b914      	cbnz	r4, 801493c <_DrawBitmap+0x99c>
 8014936:	e00b      	b.n	8014950 <_DrawBitmap+0x9b0>
 8014938:	0864      	lsrs	r4, r4, #1
 801493a:	d008      	beq.n	801494e <_DrawBitmap+0x9ae>
 801493c:	07e2      	lsls	r2, r4, #31
 801493e:	bf48      	it	mi
 8014940:	6033      	strmi	r3, [r6, #0]
 8014942:	3d01      	subs	r5, #1
 8014944:	f106 0604 	add.w	r6, r6, #4
 8014948:	d1f6      	bne.n	8014938 <_DrawBitmap+0x998>
 801494a:	469a      	mov	sl, r3
 801494c:	e7e1      	b.n	8014912 <_DrawBitmap+0x972>
 801494e:	469a      	mov	sl, r3
 8014950:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8014954:	e7dd      	b.n	8014912 <_DrawBitmap+0x972>
 8014956:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014958:	9b02      	ldr	r3, [sp, #8]
 801495a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801495e:	b101      	cbz	r1, 8014962 <_DrawBitmap+0x9c2>
 8014960:	6019      	str	r1, [r3, #0]
 8014962:	42a2      	cmp	r2, r4
 8014964:	f103 0304 	add.w	r3, r3, #4
 8014968:	d1f7      	bne.n	801495a <_DrawBitmap+0x9ba>
 801496a:	e4b3      	b.n	80142d4 <_DrawBitmap+0x334>
 801496c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801496e:	2800      	cmp	r0, #0
 8014970:	f47f abb0 	bne.w	80140d4 <_DrawBitmap+0x134>
 8014974:	f7ff bb1e 	b.w	8013fb4 <_DrawBitmap+0x14>

08014978 <_GetPixelIndex>:
 8014978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801497a:	4b0e      	ldr	r3, [pc, #56]	; (80149b4 <_GetPixelIndex+0x3c>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	b083      	sub	sp, #12
 8014980:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8014982:	460e      	mov	r6, r1
 8014984:	4617      	mov	r7, r2
 8014986:	f7f3 ff79 	bl	800887c <GUI_ALLOC_LockH>
 801498a:	4605      	mov	r5, r0
 801498c:	a802      	add	r0, sp, #8
 801498e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8014992:	68eb      	ldr	r3, [r5, #12]
 8014994:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8014998:	f840 5d04 	str.w	r5, [r0, #-4]!
 801499c:	1abf      	subs	r7, r7, r2
 801499e:	fb03 f307 	mul.w	r3, r3, r7
 80149a2:	3318      	adds	r3, #24
 80149a4:	1b34      	subs	r4, r6, r4
 80149a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80149aa:	f7f3 ff79 	bl	80088a0 <GUI_ALLOC_UnlockH>
 80149ae:	5928      	ldr	r0, [r5, r4]
 80149b0:	b003      	add	sp, #12
 80149b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149b4:	2000007c 	.word	0x2000007c

080149b8 <_SetPixelIndex>:
 80149b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149bc:	4c1b      	ldr	r4, [pc, #108]	; (8014a2c <_SetPixelIndex+0x74>)
 80149be:	6820      	ldr	r0, [r4, #0]
 80149c0:	b083      	sub	sp, #12
 80149c2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80149c4:	460f      	mov	r7, r1
 80149c6:	4690      	mov	r8, r2
 80149c8:	4699      	mov	r9, r3
 80149ca:	f7f3 ff57 	bl	800887c <GUI_ALLOC_LockH>
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	9000      	str	r0, [sp, #0]
 80149d2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80149d4:	f7f3 ff52 	bl	800887c <GUI_ALLOC_LockH>
 80149d8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80149dc:	68c1      	ldr	r1, [r0, #12]
 80149de:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80149e2:	ae02      	add	r6, sp, #8
 80149e4:	ebc2 0208 	rsb	r2, r2, r8
 80149e8:	fb01 f202 	mul.w	r2, r1, r2
 80149ec:	f846 0d04 	str.w	r0, [r6, #-4]!
 80149f0:	3218      	adds	r2, #24
 80149f2:	1b3c      	subs	r4, r7, r4
 80149f4:	4605      	mov	r5, r0
 80149f6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80149fa:	4630      	mov	r0, r6
 80149fc:	f7f3 ff50 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014a00:	f845 9004 	str.w	r9, [r5, r4]
 8014a04:	9b00      	ldr	r3, [sp, #0]
 8014a06:	6958      	ldr	r0, [r3, #20]
 8014a08:	b150      	cbz	r0, 8014a20 <_SetPixelIndex+0x68>
 8014a0a:	f7f3 ff37 	bl	800887c <GUI_ALLOC_LockH>
 8014a0e:	9001      	str	r0, [sp, #4]
 8014a10:	6883      	ldr	r3, [r0, #8]
 8014a12:	4642      	mov	r2, r8
 8014a14:	4639      	mov	r1, r7
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4798      	blx	r3
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f7f3 ff40 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014a20:	4668      	mov	r0, sp
 8014a22:	f7f3 ff3d 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014a26:	b003      	add	sp, #12
 8014a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a2c:	2000007c 	.word	0x2000007c

08014a30 <_XorPixel>:
 8014a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a34:	4c1e      	ldr	r4, [pc, #120]	; (8014ab0 <_XorPixel+0x80>)
 8014a36:	6823      	ldr	r3, [r4, #0]
 8014a38:	b082      	sub	sp, #8
 8014a3a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8014a3c:	460f      	mov	r7, r1
 8014a3e:	4690      	mov	r8, r2
 8014a40:	f7f3 ff1c 	bl	800887c <GUI_ALLOC_LockH>
 8014a44:	6823      	ldr	r3, [r4, #0]
 8014a46:	9000      	str	r0, [sp, #0]
 8014a48:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8014a4a:	f7f3 ff17 	bl	800887c <GUI_ALLOC_LockH>
 8014a4e:	ae02      	add	r6, sp, #8
 8014a50:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014a54:	68c2      	ldr	r2, [r0, #12]
 8014a56:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014a5a:	f846 0d04 	str.w	r0, [r6, #-4]!
 8014a5e:	ebc3 0308 	rsb	r3, r3, r8
 8014a62:	fb02 f303 	mul.w	r3, r2, r3
 8014a66:	4605      	mov	r5, r0
 8014a68:	3318      	adds	r3, #24
 8014a6a:	1b3c      	subs	r4, r7, r4
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a72:	f7f3 ff15 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014a76:	9b00      	ldr	r3, [sp, #0]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	689b      	ldr	r3, [r3, #8]
 8014a7e:	4798      	blx	r3
 8014a80:	592b      	ldr	r3, [r5, r4]
 8014a82:	9a00      	ldr	r2, [sp, #0]
 8014a84:	4058      	eors	r0, r3
 8014a86:	5128      	str	r0, [r5, r4]
 8014a88:	6950      	ldr	r0, [r2, #20]
 8014a8a:	b150      	cbz	r0, 8014aa2 <_XorPixel+0x72>
 8014a8c:	f7f3 fef6 	bl	800887c <GUI_ALLOC_LockH>
 8014a90:	9001      	str	r0, [sp, #4]
 8014a92:	6883      	ldr	r3, [r0, #8]
 8014a94:	4642      	mov	r2, r8
 8014a96:	4639      	mov	r1, r7
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	4798      	blx	r3
 8014a9c:	4630      	mov	r0, r6
 8014a9e:	f7f3 feff 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014aa2:	4668      	mov	r0, sp
 8014aa4:	f7f3 fefc 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014aa8:	b002      	add	sp, #8
 8014aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aae:	bf00      	nop
 8014ab0:	2000007c 	.word	0x2000007c

08014ab4 <_FillRect>:
 8014ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8014ba0 <_FillRect+0xec>
 8014abc:	f8d8 0000 	ldr.w	r0, [r8]
 8014ac0:	b087      	sub	sp, #28
 8014ac2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8014ac4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8014ac8:	468a      	mov	sl, r1
 8014aca:	4616      	mov	r6, r2
 8014acc:	461f      	mov	r7, r3
 8014ace:	f7f3 fed5 	bl	800887c <GUI_ALLOC_LockH>
 8014ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8014ad6:	9004      	str	r0, [sp, #16]
 8014ad8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8014ada:	f7f3 fecf 	bl	800887c <GUI_ALLOC_LockH>
 8014ade:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014ae2:	68c3      	ldr	r3, [r0, #12]
 8014ae4:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8014ae8:	f8cd a00c 	str.w	sl, [sp, #12]
 8014aec:	f10d 0b18 	add.w	fp, sp, #24
 8014af0:	1ab2      	subs	r2, r6, r2
 8014af2:	fb03 f202 	mul.w	r2, r3, r2
 8014af6:	f84b 0d04 	str.w	r0, [fp, #-4]!
 8014afa:	4653      	mov	r3, sl
 8014afc:	1b5d      	subs	r5, r3, r5
 8014afe:	f102 0118 	add.w	r1, r2, #24
 8014b02:	4604      	mov	r4, r0
 8014b04:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 8014b08:	4658      	mov	r0, fp
 8014b0a:	18a5      	adds	r5, r4, r2
 8014b0c:	f7f3 fec8 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014b10:	9b04      	ldr	r3, [sp, #16]
 8014b12:	f8d8 2000 	ldr.w	r2, [r8]
 8014b16:	6958      	ldr	r0, [r3, #20]
 8014b18:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8014b1c:	9b03      	ldr	r3, [sp, #12]
 8014b1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014b20:	1aff      	subs	r7, r7, r3
 8014b22:	6814      	ldr	r4, [r2, #0]
 8014b24:	3701      	adds	r7, #1
 8014b26:	bb58      	cbnz	r0, 8014b80 <_FillRect+0xcc>
 8014b28:	454e      	cmp	r6, r9
 8014b2a:	dc10      	bgt.n	8014b4e <_FillRect+0x9a>
 8014b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8014b30:	7c1b      	ldrb	r3, [r3, #16]
 8014b32:	07db      	lsls	r3, r3, #31
 8014b34:	d411      	bmi.n	8014b5a <_FillRect+0xa6>
 8014b36:	2f00      	cmp	r7, #0
 8014b38:	dd05      	ble.n	8014b46 <_FillRect+0x92>
 8014b3a:	463b      	mov	r3, r7
 8014b3c:	462a      	mov	r2, r5
 8014b3e:	3b01      	subs	r3, #1
 8014b40:	f842 4b04 	str.w	r4, [r2], #4
 8014b44:	d1fb      	bne.n	8014b3e <_FillRect+0x8a>
 8014b46:	3601      	adds	r6, #1
 8014b48:	45b1      	cmp	r9, r6
 8014b4a:	4455      	add	r5, sl
 8014b4c:	daee      	bge.n	8014b2c <_FillRect+0x78>
 8014b4e:	a804      	add	r0, sp, #16
 8014b50:	f7f3 fea6 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014b54:	b007      	add	sp, #28
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	691b      	ldr	r3, [r3, #16]
 8014b60:	689b      	ldr	r3, [r3, #8]
 8014b62:	4798      	blx	r3
 8014b64:	4629      	mov	r1, r5
 8014b66:	463a      	mov	r2, r7
 8014b68:	680b      	ldr	r3, [r1, #0]
 8014b6a:	3a01      	subs	r2, #1
 8014b6c:	ea83 0300 	eor.w	r3, r3, r0
 8014b70:	f841 3b04 	str.w	r3, [r1], #4
 8014b74:	d1f8      	bne.n	8014b68 <_FillRect+0xb4>
 8014b76:	3601      	adds	r6, #1
 8014b78:	45b1      	cmp	r9, r6
 8014b7a:	4455      	add	r5, sl
 8014b7c:	dad6      	bge.n	8014b2c <_FillRect+0x78>
 8014b7e:	e7e6      	b.n	8014b4e <_FillRect+0x9a>
 8014b80:	f7f3 fe7c 	bl	800887c <GUI_ALLOC_LockH>
 8014b84:	ebc6 0309 	rsb	r3, r6, r9
 8014b88:	3301      	adds	r3, #1
 8014b8a:	9300      	str	r3, [sp, #0]
 8014b8c:	9903      	ldr	r1, [sp, #12]
 8014b8e:	9005      	str	r0, [sp, #20]
 8014b90:	463b      	mov	r3, r7
 8014b92:	4632      	mov	r2, r6
 8014b94:	f7f8 fc4e 	bl	800d434 <GUI_USAGE_AddRect>
 8014b98:	4658      	mov	r0, fp
 8014b9a:	f7f3 fe81 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014b9e:	e7c3      	b.n	8014b28 <_FillRect+0x74>
 8014ba0:	2000007c 	.word	0x2000007c

08014ba4 <_DrawHLine>:
 8014ba4:	b500      	push	{lr}
 8014ba6:	b083      	sub	sp, #12
 8014ba8:	9200      	str	r2, [sp, #0]
 8014baa:	f7ff ff83 	bl	8014ab4 <_FillRect>
 8014bae:	b003      	add	sp, #12
 8014bb0:	f85d fb04 	ldr.w	pc, [sp], #4

08014bb4 <_DrawVLine>:
 8014bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bb8:	4f35      	ldr	r7, [pc, #212]	; (8014c90 <_DrawVLine+0xdc>)
 8014bba:	6838      	ldr	r0, [r7, #0]
 8014bbc:	b085      	sub	sp, #20
 8014bbe:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8014bc0:	4689      	mov	r9, r1
 8014bc2:	4615      	mov	r5, r2
 8014bc4:	461e      	mov	r6, r3
 8014bc6:	f7f3 fe59 	bl	800887c <GUI_ALLOC_LockH>
 8014bca:	9001      	str	r0, [sp, #4]
 8014bcc:	6940      	ldr	r0, [r0, #20]
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d13b      	bne.n	8014c4a <_DrawVLine+0x96>
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	9002      	str	r0, [sp, #8]
 8014bd6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8014bd8:	f7f3 fe50 	bl	800887c <GUI_ALLOC_LockH>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	a804      	add	r0, sp, #16
 8014be0:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8014be4:	68d3      	ldr	r3, [r2, #12]
 8014be6:	f840 2d04 	str.w	r2, [r0, #-4]!
 8014bea:	1b2c      	subs	r4, r5, r4
 8014bec:	fb03 f304 	mul.w	r3, r3, r4
 8014bf0:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8014bf4:	3318      	adds	r3, #24
 8014bf6:	ebc4 0409 	rsb	r4, r4, r9
 8014bfa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014bfe:	18d4      	adds	r4, r2, r3
 8014c00:	f7f3 fe4e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	9901      	ldr	r1, [sp, #4]
 8014c08:	7c1a      	ldrb	r2, [r3, #16]
 8014c0a:	07d2      	lsls	r2, r2, #31
 8014c0c:	d420      	bmi.n	8014c50 <_DrawVLine+0x9c>
 8014c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c10:	9802      	ldr	r0, [sp, #8]
 8014c12:	f8d3 8000 	ldr.w	r8, [r3]
 8014c16:	68cf      	ldr	r7, [r1, #12]
 8014c18:	b908      	cbnz	r0, 8014c1e <_DrawVLine+0x6a>
 8014c1a:	e030      	b.n	8014c7e <_DrawVLine+0xca>
 8014c1c:	9802      	ldr	r0, [sp, #8]
 8014c1e:	6883      	ldr	r3, [r0, #8]
 8014c20:	462a      	mov	r2, r5
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4649      	mov	r1, r9
 8014c26:	3501      	adds	r5, #1
 8014c28:	4798      	blx	r3
 8014c2a:	42ae      	cmp	r6, r5
 8014c2c:	f8c4 8000 	str.w	r8, [r4]
 8014c30:	443c      	add	r4, r7
 8014c32:	daf3      	bge.n	8014c1c <_DrawVLine+0x68>
 8014c34:	a801      	add	r0, sp, #4
 8014c36:	f7f3 fe33 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014c3a:	9b02      	ldr	r3, [sp, #8]
 8014c3c:	b113      	cbz	r3, 8014c44 <_DrawVLine+0x90>
 8014c3e:	a802      	add	r0, sp, #8
 8014c40:	f7f3 fe2e 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014c44:	b005      	add	sp, #20
 8014c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c4a:	f7f3 fe17 	bl	800887c <GUI_ALLOC_LockH>
 8014c4e:	e7c0      	b.n	8014bd2 <_DrawVLine+0x1e>
 8014c50:	680b      	ldr	r3, [r1, #0]
 8014c52:	691b      	ldr	r3, [r3, #16]
 8014c54:	689b      	ldr	r3, [r3, #8]
 8014c56:	4798      	blx	r3
 8014c58:	4607      	mov	r7, r0
 8014c5a:	9b02      	ldr	r3, [sp, #8]
 8014c5c:	462a      	mov	r2, r5
 8014c5e:	4649      	mov	r1, r9
 8014c60:	3501      	adds	r5, #1
 8014c62:	4618      	mov	r0, r3
 8014c64:	b113      	cbz	r3, 8014c6c <_DrawVLine+0xb8>
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	4798      	blx	r3
 8014c6c:	9a01      	ldr	r2, [sp, #4]
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	68d2      	ldr	r2, [r2, #12]
 8014c72:	407b      	eors	r3, r7
 8014c74:	42b5      	cmp	r5, r6
 8014c76:	6023      	str	r3, [r4, #0]
 8014c78:	4414      	add	r4, r2
 8014c7a:	ddee      	ble.n	8014c5a <_DrawVLine+0xa6>
 8014c7c:	e7da      	b.n	8014c34 <_DrawVLine+0x80>
 8014c7e:	1b73      	subs	r3, r6, r5
 8014c80:	3301      	adds	r3, #1
 8014c82:	3b01      	subs	r3, #1
 8014c84:	f8c4 8000 	str.w	r8, [r4]
 8014c88:	443c      	add	r4, r7
 8014c8a:	d1fa      	bne.n	8014c82 <_DrawVLine+0xce>
 8014c8c:	e7d2      	b.n	8014c34 <_DrawVLine+0x80>
 8014c8e:	bf00      	nop
 8014c90:	2000007c 	.word	0x2000007c

08014c94 <GUI_MEMDEV__WriteToActiveAlpha>:
 8014c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c98:	4d60      	ldr	r5, [pc, #384]	; (8014e1c <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8014c9a:	4e61      	ldr	r6, [pc, #388]	; (8014e20 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	7c5b      	ldrb	r3, [r3, #17]
 8014ca0:	b091      	sub	sp, #68	; 0x44
 8014ca2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014ca6:	9008      	str	r0, [sp, #32]
 8014ca8:	4688      	mov	r8, r1
 8014caa:	4614      	mov	r4, r2
 8014cac:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8014cb0:	f7f3 fde4 	bl	800887c <GUI_ALLOC_LockH>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	a810      	add	r0, sp, #64	; 0x40
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014cbe:	6912      	ldr	r2, [r2, #16]
 8014cc0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014cc4:	6852      	ldr	r2, [r2, #4]
 8014cc6:	9106      	str	r1, [sp, #24]
 8014cc8:	9207      	str	r2, [sp, #28]
 8014cca:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 8014cce:	f7f3 fde7 	bl	80088a0 <GUI_ALLOC_UnlockH>
 8014cd2:	682b      	ldr	r3, [r5, #0]
 8014cd4:	7c5b      	ldrb	r3, [r3, #17]
 8014cd6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8014cda:	68c3      	ldr	r3, [r0, #12]
 8014cdc:	2108      	movs	r1, #8
 8014cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ce0:	4798      	blx	r3
 8014ce2:	2817      	cmp	r0, #23
 8014ce4:	d810      	bhi.n	8014d08 <GUI_MEMDEV__WriteToActiveAlpha+0x74>
 8014ce6:	2803      	cmp	r0, #3
 8014ce8:	4606      	mov	r6, r0
 8014cea:	bf08      	it	eq
 8014cec:	2608      	moveq	r6, #8
 8014cee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	f8d9 3000 	ldr.w	r3, [r9]
 8014cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8014cfc:	f7fd fc64 	bl	80125c8 <GUI__AllocAlphaBuffer>
 8014d00:	b120      	cbz	r0, 8014d0c <GUI_MEMDEV__WriteToActiveAlpha+0x78>
 8014d02:	b011      	add	sp, #68	; 0x44
 8014d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d08:	2620      	movs	r6, #32
 8014d0a:	e7f0      	b.n	8014cee <GUI_MEMDEV__WriteToActiveAlpha+0x5a>
 8014d0c:	9906      	ldr	r1, [sp, #24]
 8014d0e:	682a      	ldr	r2, [r5, #0]
 8014d10:	eb08 0301 	add.w	r3, r8, r1
 8014d14:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 8014d18:	3b01      	subs	r3, #1
 8014d1a:	1b5d      	subs	r5, r3, r5
 8014d1c:	2d00      	cmp	r5, #0
 8014d1e:	bfc4      	itt	gt
 8014d20:	460b      	movgt	r3, r1
 8014d22:	1b5d      	subgt	r5, r3, r5
 8014d24:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8014d28:	bfd8      	it	le
 8014d2a:	460d      	movle	r5, r1
 8014d2c:	4598      	cmp	r8, r3
 8014d2e:	bfbd      	ittte	lt
 8014d30:	ebc8 0103 	rsblt	r1, r8, r3
 8014d34:	1a6d      	sublt	r5, r5, r1
 8014d36:	4698      	movlt	r8, r3
 8014d38:	2100      	movge	r1, #0
 8014d3a:	2d00      	cmp	r5, #0
 8014d3c:	dde1      	ble.n	8014d02 <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8014d3e:	eb04 030a 	add.w	r3, r4, sl
 8014d42:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 8014d46:	3b01      	subs	r3, #1
 8014d48:	1a1b      	subs	r3, r3, r0
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	bfc8      	it	gt
 8014d4e:	ebc3 0a0a 	rsbgt	sl, r3, sl
 8014d52:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8014d56:	429c      	cmp	r4, r3
 8014d58:	bfbd      	ittte	lt
 8014d5a:	1b1f      	sublt	r7, r3, r4
 8014d5c:	ebc7 0a0a 	rsblt	sl, r7, sl
 8014d60:	461c      	movlt	r4, r3
 8014d62:	2700      	movge	r7, #0
 8014d64:	f1ba 0f00 	cmp.w	sl, #0
 8014d68:	ddcb      	ble.n	8014d02 <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8014d6a:	9b06      	ldr	r3, [sp, #24]
 8014d6c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8014d70:	fb07 1703 	mla	r7, r7, r3, r1
 8014d74:	eb04 030a 	add.w	r3, r4, sl
 8014d78:	00bf      	lsls	r7, r7, #2
 8014d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d7c:	46b2      	mov	sl, r6
 8014d7e:	e019      	b.n	8014db4 <GUI_MEMDEV__WriteToActiveAlpha+0x120>
 8014d80:	2304      	movs	r3, #4
 8014d82:	9a06      	ldr	r2, [sp, #24]
 8014d84:	4631      	mov	r1, r6
 8014d86:	4630      	mov	r0, r6
 8014d88:	47d8      	blx	fp
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	9205      	str	r2, [sp, #20]
 8014d90:	9604      	str	r6, [sp, #16]
 8014d92:	9203      	str	r2, [sp, #12]
 8014d94:	9301      	str	r3, [sp, #4]
 8014d96:	9300      	str	r3, [sp, #0]
 8014d98:	4621      	mov	r1, r4
 8014d9a:	f8cd a008 	str.w	sl, [sp, #8]
 8014d9e:	462a      	mov	r2, r5
 8014da0:	4640      	mov	r0, r8
 8014da2:	441c      	add	r4, r3
 8014da4:	9e06      	ldr	r6, [sp, #24]
 8014da6:	f7f5 fd31 	bl	800a80c <LCD_DrawBitmap>
 8014daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dac:	42a3      	cmp	r3, r4
 8014dae:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8014db2:	d0a6      	beq.n	8014d02 <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8014db4:	9808      	ldr	r0, [sp, #32]
 8014db6:	f7fe fb55 	bl	8013464 <GUI_MEMDEV_GetDataPtr>
 8014dba:	ab0f      	add	r3, sp, #60	; 0x3c
 8014dbc:	9301      	str	r3, [sp, #4]
 8014dbe:	9b07      	ldr	r3, [sp, #28]
 8014dc0:	9300      	str	r3, [sp, #0]
 8014dc2:	19c2      	adds	r2, r0, r7
 8014dc4:	462b      	mov	r3, r5
 8014dc6:	4621      	mov	r1, r4
 8014dc8:	4640      	mov	r0, r8
 8014dca:	f7fd fab9 	bl	8012340 <GUI__DoAlphaBlending>
 8014dce:	4606      	mov	r6, r0
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d096      	beq.n	8014d02 <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8014dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	4b12      	ldr	r3, [pc, #72]	; (8014e24 <GUI_MEMDEV__WriteToActiveAlpha+0x190>)
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d0d5      	beq.n	8014d8a <GUI_MEMDEV__WriteToActiveAlpha+0xf6>
 8014dde:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8014de2:	4652      	mov	r2, sl
 8014de4:	464b      	mov	r3, r9
 8014de6:	4629      	mov	r1, r5
 8014de8:	f7fd fd04 	bl	80127f4 <GUI__CompactPixelIndicesEx>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d1cc      	bne.n	8014d8a <GUI_MEMDEV__WriteToActiveAlpha+0xf6>
 8014df0:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8014df4:	f1bb 0f00 	cmp.w	fp, #0
 8014df8:	d1c2      	bne.n	8014d80 <GUI_MEMDEV__WriteToActiveAlpha+0xec>
 8014dfa:	f8dd b018 	ldr.w	fp, [sp, #24]
 8014dfe:	950d      	str	r5, [sp, #52]	; 0x34
 8014e00:	465d      	mov	r5, fp
 8014e02:	46a3      	mov	fp, r4
 8014e04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014e06:	46b1      	mov	r9, r6
 8014e08:	f8d9 0000 	ldr.w	r0, [r9]
 8014e0c:	47a0      	blx	r4
 8014e0e:	3d01      	subs	r5, #1
 8014e10:	f849 0b04 	str.w	r0, [r9], #4
 8014e14:	d1f8      	bne.n	8014e08 <GUI_MEMDEV__WriteToActiveAlpha+0x174>
 8014e16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014e18:	465c      	mov	r4, fp
 8014e1a:	e7b6      	b.n	8014d8a <GUI_MEMDEV__WriteToActiveAlpha+0xf6>
 8014e1c:	2000007c 	.word	0x2000007c
 8014e20:	200357f4 	.word	0x200357f4
 8014e24:	08013f01 	.word	0x08013f01

08014e28 <__libc_init_array>:
 8014e28:	b570      	push	{r4, r5, r6, lr}
 8014e2a:	4e0d      	ldr	r6, [pc, #52]	; (8014e60 <__libc_init_array+0x38>)
 8014e2c:	4c0d      	ldr	r4, [pc, #52]	; (8014e64 <__libc_init_array+0x3c>)
 8014e2e:	1ba4      	subs	r4, r4, r6
 8014e30:	10a4      	asrs	r4, r4, #2
 8014e32:	2500      	movs	r5, #0
 8014e34:	42a5      	cmp	r5, r4
 8014e36:	d109      	bne.n	8014e4c <__libc_init_array+0x24>
 8014e38:	4e0b      	ldr	r6, [pc, #44]	; (8014e68 <__libc_init_array+0x40>)
 8014e3a:	4c0c      	ldr	r4, [pc, #48]	; (8014e6c <__libc_init_array+0x44>)
 8014e3c:	f000 f854 	bl	8014ee8 <_init>
 8014e40:	1ba4      	subs	r4, r4, r6
 8014e42:	10a4      	asrs	r4, r4, #2
 8014e44:	2500      	movs	r5, #0
 8014e46:	42a5      	cmp	r5, r4
 8014e48:	d105      	bne.n	8014e56 <__libc_init_array+0x2e>
 8014e4a:	bd70      	pop	{r4, r5, r6, pc}
 8014e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e50:	4798      	blx	r3
 8014e52:	3501      	adds	r5, #1
 8014e54:	e7ee      	b.n	8014e34 <__libc_init_array+0xc>
 8014e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e5a:	4798      	blx	r3
 8014e5c:	3501      	adds	r5, #1
 8014e5e:	e7f2      	b.n	8014e46 <__libc_init_array+0x1e>
 8014e60:	0801a61c 	.word	0x0801a61c
 8014e64:	0801a61c 	.word	0x0801a61c
 8014e68:	0801a61c 	.word	0x0801a61c
 8014e6c:	0801a620 	.word	0x0801a620

08014e70 <memcmp>:
 8014e70:	b530      	push	{r4, r5, lr}
 8014e72:	2400      	movs	r4, #0
 8014e74:	42a2      	cmp	r2, r4
 8014e76:	d101      	bne.n	8014e7c <memcmp+0xc>
 8014e78:	2000      	movs	r0, #0
 8014e7a:	e007      	b.n	8014e8c <memcmp+0x1c>
 8014e7c:	5d03      	ldrb	r3, [r0, r4]
 8014e7e:	3401      	adds	r4, #1
 8014e80:	190d      	adds	r5, r1, r4
 8014e82:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014e86:	42ab      	cmp	r3, r5
 8014e88:	d0f4      	beq.n	8014e74 <memcmp+0x4>
 8014e8a:	1b58      	subs	r0, r3, r5
 8014e8c:	bd30      	pop	{r4, r5, pc}

08014e8e <memcpy>:
 8014e8e:	b510      	push	{r4, lr}
 8014e90:	1e43      	subs	r3, r0, #1
 8014e92:	440a      	add	r2, r1
 8014e94:	4291      	cmp	r1, r2
 8014e96:	d100      	bne.n	8014e9a <memcpy+0xc>
 8014e98:	bd10      	pop	{r4, pc}
 8014e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ea2:	e7f7      	b.n	8014e94 <memcpy+0x6>

08014ea4 <memmove>:
 8014ea4:	4288      	cmp	r0, r1
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	eb01 0302 	add.w	r3, r1, r2
 8014eac:	d807      	bhi.n	8014ebe <memmove+0x1a>
 8014eae:	1e42      	subs	r2, r0, #1
 8014eb0:	4299      	cmp	r1, r3
 8014eb2:	d00a      	beq.n	8014eca <memmove+0x26>
 8014eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014ebc:	e7f8      	b.n	8014eb0 <memmove+0xc>
 8014ebe:	4283      	cmp	r3, r0
 8014ec0:	d9f5      	bls.n	8014eae <memmove+0xa>
 8014ec2:	1881      	adds	r1, r0, r2
 8014ec4:	1ad2      	subs	r2, r2, r3
 8014ec6:	42d3      	cmn	r3, r2
 8014ec8:	d100      	bne.n	8014ecc <memmove+0x28>
 8014eca:	bd10      	pop	{r4, pc}
 8014ecc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ed0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ed4:	e7f7      	b.n	8014ec6 <memmove+0x22>

08014ed6 <memset>:
 8014ed6:	4402      	add	r2, r0
 8014ed8:	4603      	mov	r3, r0
 8014eda:	4293      	cmp	r3, r2
 8014edc:	d100      	bne.n	8014ee0 <memset+0xa>
 8014ede:	4770      	bx	lr
 8014ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8014ee4:	e7f9      	b.n	8014eda <memset+0x4>
	...

08014ee8 <_init>:
 8014ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eea:	bf00      	nop
 8014eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eee:	bc08      	pop	{r3}
 8014ef0:	469e      	mov	lr, r3
 8014ef2:	4770      	bx	lr

08014ef4 <_fini>:
 8014ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef6:	bf00      	nop
 8014ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014efa:	bc08      	pop	{r3}
 8014efc:	469e      	mov	lr, r3
 8014efe:	4770      	bx	lr
